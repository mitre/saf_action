"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.colorize = exports.color = void 0;
const lexer_1 = require("./lexer");
const colorette = __importStar(require("colorette"));
exports.color = colorette;
const defaultTheme = {
    Whitespace: colorette.gray,
    Brace: colorette.gray,
    Bracket: colorette.gray,
    Colon: colorette.gray,
    Comma: colorette.gray,
    StringKey: colorette.magenta,
    StringLiteral: colorette.yellow,
    NumberLiteral: colorette.green,
    BooleanLiteral: colorette.cyan,
    NullLiteral: colorette.white
};
const defaultOptions = {
    colors: defaultTheme,
    indent: 2
};
function getJsonString(json, options) {
    const object = typeof json === 'string' ? JSON.parse(json) : json;
    return JSON.stringify(object, null, options.indent ?? defaultOptions.indent);
}
function colorize(json, options = {}) {
    const input = getJsonString(json, options);
    const tokens = (0, lexer_1.tokenize)(input);
    const theme = {
        ...defaultOptions.colors,
        ...options.colors
    };
    return tokens.reduce((output, token) => output + theme[token.type](token.value), '');
}
exports.colorize = colorize;
