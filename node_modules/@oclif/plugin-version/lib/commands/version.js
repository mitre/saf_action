"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@oclif/core");
// eslint-disable-next-line unicorn/prefer-node-protocol
const os_1 = require("os");
class Version extends core_1.Command {
    async run() {
        const { flags } = await this.parse(Version);
        const [cliVersion, architecture, nodeVersion] = this.config.userAgent.split(' ');
        const versionDetail = { cliVersion, architecture, nodeVersion };
        let output = `${this.config.userAgent}`;
        if (flags.verbose) {
            const pluginVersions = [];
            for (const plugin of this.config.plugins.sort((a, b) => a.name > b.name ? 1 : -1)) {
                if (this.config.name !== plugin.name) {
                    pluginVersions.push(`${this.getFriendlyName(plugin.name)} ${plugin.version} (${plugin.type}) ${plugin.type === 'link' ? plugin.root : ''}`.trim());
                }
            }
            const osVersion = `${(0, os_1.type)()} ${(0, os_1.release)()}`;
            versionDetail.pluginVersions = pluginVersions;
            versionDetail.osVersion = osVersion;
            versionDetail.shell = this.config.shell;
            versionDetail.rootPath = this.config.root;
            output = ` CLI Version:
\t${cliVersion}

 Architecture:
\t${architecture}

 Node Version:
\t${nodeVersion}

 Plugin Version:
\t${pluginVersions.join(`${os_1.EOL}\t`)}

 OS and Version:
\t${osVersion}

 Shell:
\t${versionDetail.shell}

 Root Path:
\t${versionDetail.rootPath}
`;
        }
        this.log(output);
        return versionDetail;
    }
    getFriendlyName(name) {
        const scope = this.config.pjson.oclif.scope;
        if (!scope)
            return name;
        const match = name.match(`@${scope}/plugin-(.+)`);
        if (!match)
            return name;
        return match[1];
    }
}
exports.default = Version;
Version.enableJsonFlag = true;
Version.flags = {
    verbose: core_1.Flags.boolean({
        summary: 'Show additional information about the CLI.',
        description: 'Additionally shows the architecture, node version, operating system, and versions of plugins that the CLI is using.',
    }),
};
