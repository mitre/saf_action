/// <reference types="node" />
import { Command, Interfaces } from '@oclif/core';
import { ExecOptions } from 'node:child_process';
export type FlaggablePrompt = {
    message: string;
    options?: string[];
    validate: (d: string) => boolean | string;
};
export type FlagsOfPrompts<T extends Record<string, FlaggablePrompt>> = Record<keyof T, Interfaces.OptionFlag<string | undefined, Interfaces.CustomOptions>>;
export type Flags<T extends typeof Command> = Interfaces.InferredFlags<(typeof GeneratorCommand)['baseFlags'] & T['flags']>;
export type Args<T extends typeof Command> = Interfaces.InferredArgs<T['args']>;
export declare function exec(command: string, opts?: ExecOptions & {
    silent?: boolean;
}): Promise<{
    stderr: string;
    stdout: string;
}>;
export declare function readPJSON(location: string): Promise<(Interfaces.PJSON.CLI & {
    scripts: Record<string, string>;
}) | undefined>;
export declare function makeFlags<T extends Record<string, FlaggablePrompt>>(flaggablePrompts: T): FlagsOfPrompts<T>;
export declare abstract class GeneratorCommand<T extends typeof Command> extends Command {
    protected args: Args<T>;
    protected flaggablePrompts: Record<string, FlaggablePrompt>;
    protected flags: Flags<T>;
    templatesDir: string;
    getFlagOrPrompt({ defaultValue, name, type, }: {
        defaultValue: string;
        name: string;
        type: 'input' | 'select';
    }): Promise<any>;
    init(): Promise<void>;
    template(source: string, destination: string, data?: Record<string, unknown>): Promise<void>;
}
