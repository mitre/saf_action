"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const client_cloudfront_1 = require("@aws-sdk/client-cloudfront");
const client_s3_1 = require("@aws-sdk/client-s3");
const fs_extra_1 = require("fs-extra");
const log_1 = require("./log");
const util_1 = require("./util");
const debug = log_1.debug.new('aws');
const cache = {};
const aws = {
    get cloudfront() {
        cache.cloudfront =
            cache.cloudfront || new (require('@aws-sdk/client-cloudfront').CloudFrontClient)({ credentials: this.creds });
        return cache.cloudfront;
    },
    get creds() {
        const creds = {
            accessKeyId: process.env.AWS_ACCESS_KEY_ID,
            secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
            sessionToken: process.env.AWS_SESSION_TOKEN,
        };
        if (!creds.accessKeyId)
            throw new Error('AWS_ACCESS_KEY_ID not set');
        if (!creds.secretAccessKey)
            throw new Error('AWS_SECRET_ACCESS_KEY not set');
        return creds;
    },
    get s3() {
        try {
            cache.s3 =
                cache.s3 ??
                    new (require('@aws-sdk/client-s3').S3Client)({
                        credentials: this.creds,
                        endpoint: process.env.AWS_S3_ENDPOINT,
                        forcePathStyle: Boolean(process.env.AWS_S3_FORCE_PATH_STYLE),
                        region: process.env.AWS_REGION ?? 'us-east-1',
                    });
            return cache.s3;
        }
        catch (error) {
            const { code, message } = error;
            if (code === 'MODULE_NOT_FOUND')
                throw new Error(`${message}\n@aws-sdk/client-s3 is needed to run this command.\nInstall @aws-sdk/client-s3 as a devDependency in your CLI. \`yarn add -D @aws-sdk/client-s3\``);
            throw error;
        }
    },
};
exports.default = {
    get cloudfront() {
        return {
            createCloudfrontInvalidation: (options) => new Promise((resolve, reject) => {
                (0, log_1.log)('createCloudfrontInvalidation', options.DistributionId, options.InvalidationBatch?.Paths?.Items);
                aws.cloudfront
                    ?.send(new client_cloudfront_1.CreateInvalidationCommand(options))
                    .then((data) => resolve(data))
                    .catch((error) => reject(error));
            }),
        };
    },
    get s3() {
        return {
            copyObject: (options) => new Promise((resolve, reject) => {
                (0, log_1.log)('s3:copyObject', `from s3://${options.CopySource}`, `to s3://${options.Bucket}/${options.Key}`);
                aws.s3
                    ?.send(new client_s3_1.CopyObjectCommand(options))
                    .then((data) => resolve(data))
                    .catch((error) => reject(error));
            }),
            deleteObjects: (options) => new Promise((resolve, reject) => {
                debug('deleteObjects', `s3://${options.Bucket}`);
                aws.s3
                    ?.send(new client_s3_1.DeleteObjectsCommand(options))
                    .then((data) => resolve(data))
                    .catch((error) => reject(error));
            }),
            getObject: (options) => new Promise((resolve, reject) => {
                debug('getObject', `s3://${options.Bucket}/${options.Key}`);
                aws.s3
                    ?.send(new client_s3_1.GetObjectCommand(options))
                    .then((data) => resolve(data))
                    .catch((error) => reject(error));
            }),
            headObject: (options) => new Promise((resolve, reject) => {
                debug('s3:headObject', `s3://${options.Bucket}/${options.Key}`);
                aws.s3
                    ?.send(new client_s3_1.HeadObjectCommand(options))
                    .then((data) => resolve(data))
                    .catch((error) => reject(error));
            }),
            listObjects: (options) => new Promise((resolve, reject) => {
                debug('listObjects', `s3://${options.Bucket}/${options.Prefix}`);
                aws.s3
                    ?.send(new client_s3_1.ListObjectsV2Command(options))
                    .then((data) => resolve(data))
                    .catch((error) => reject(error));
            }),
            uploadFile: (local, options) => new Promise((resolve, reject) => {
                (0, log_1.log)('s3:uploadFile', (0, util_1.prettifyPaths)(local), `s3://${options.Bucket}/${options.Key}`);
                options.Body = (0, fs_extra_1.createReadStream)(local);
                aws.s3
                    ?.send(new client_s3_1.PutObjectCommand(options))
                    .then((data) => resolve(data))
                    .catch((error) => reject(error));
            }),
        };
    },
};
