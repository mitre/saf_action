"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@oclif/core");
const Tarballs = __importStar(require("../../tarballs"));
class PackTarballs extends core_1.Command {
    static description = 'This can be used to create oclif CLIs that use the system node or that come preloaded with a node binary.';
    static flags = {
        parallel: core_1.Flags.boolean({ description: 'Build tarballs in parallel.' }),
        root: core_1.Flags.string({ char: 'r', default: '.', description: 'Path to oclif CLI root.', required: true }),
        tarball: core_1.Flags.string({
            char: 'l',
            description: 'Optionally specify a path to a tarball already generated by NPM.',
            required: false,
        }),
        targets: core_1.Flags.string({ char: 't', description: 'Comma-separated targets to pack (e.g.: linux-arm,win32-x64).' }),
        xz: core_1.Flags.boolean({ allowNo: true, description: 'Also build xz.' }),
    };
    static summary = 'Package oclif CLI into tarballs.';
    async run() {
        if (process.platform === 'win32')
            throw new Error('pack does not function on windows');
        const { flags } = await this.parse(PackTarballs);
        const buildConfig = await Tarballs.buildConfig(flags.root, { targets: flags?.targets?.split(','), xz: flags.xz });
        if (buildConfig.targets.length === 0) {
            throw new Error('Please specify one or more valid targets.');
        }
        await Tarballs.build(buildConfig, {
            parallel: flags.parallel,
            tarball: flags.tarball,
        });
    }
}
exports.default = PackTarballs;
