{
  "commands": {
    "plugins": {
      "aliases": [],
      "args": {},
      "description": "List installed plugins.",
      "examples": [
        "<%= config.bin %> <%= command.id %>"
      ],
      "flags": {
        "json": {
          "description": "Format output as json.",
          "helpGroup": "GLOBAL",
          "name": "json",
          "allowNo": false,
          "type": "boolean"
        },
        "core": {
          "description": "Show core plugins.",
          "name": "core",
          "allowNo": false,
          "type": "boolean"
        }
      },
      "hasDynamicHelp": false,
      "hiddenAliases": [],
      "id": "plugins",
      "pluginAlias": "@oclif/plugin-plugins",
      "pluginName": "@oclif/plugin-plugins",
      "pluginType": "core",
      "strict": true,
      "enableJsonFlag": true,
      "isESM": true,
      "relativePath": [
        "lib",
        "commands",
        "plugins",
        "index.js"
      ],
      "aliasPermutations": [],
      "permutations": [
        "plugins"
      ]
    },
    "plugins:inspect": {
      "aliases": [],
      "args": {
        "plugin": {
          "default": ".",
          "description": "Plugin to inspect.",
          "name": "plugin",
          "required": true
        }
      },
      "description": "Displays installation properties of a plugin.",
      "examples": [
        "<%= config.bin %> <%= command.id %> <%- config.pjson.oclif.examplePlugin || \"myplugin\" %> "
      ],
      "flags": {
        "json": {
          "description": "Format output as json.",
          "helpGroup": "GLOBAL",
          "name": "json",
          "allowNo": false,
          "type": "boolean"
        },
        "help": {
          "char": "h",
          "description": "Show CLI help.",
          "name": "help",
          "allowNo": false,
          "type": "boolean"
        },
        "verbose": {
          "char": "v",
          "name": "verbose",
          "allowNo": false,
          "type": "boolean"
        }
      },
      "hasDynamicHelp": false,
      "hiddenAliases": [],
      "id": "plugins:inspect",
      "pluginAlias": "@oclif/plugin-plugins",
      "pluginName": "@oclif/plugin-plugins",
      "pluginType": "core",
      "strict": false,
      "usage": "plugins:inspect PLUGIN...",
      "enableJsonFlag": true,
      "isESM": true,
      "relativePath": [
        "lib",
        "commands",
        "plugins",
        "inspect.js"
      ],
      "aliasPermutations": [],
      "permutations": [
        "plugins:inspect",
        "inspect:plugins"
      ]
    },
    "plugins:install": {
      "aliases": [
        "plugins:add"
      ],
      "args": {
        "plugin": {
          "description": "Plugin to install.",
          "name": "plugin",
          "required": true
        }
      },
      "description": "Installs a plugin into the CLI.\nCan be installed from npm or a git url.\n\nInstallation of a user-installed plugin will override a core plugin.\n\ne.g. If you have a core plugin that has a 'hello' command, installing a user-installed plugin with a 'hello' command will override the core plugin implementation. This is useful if a user needs to update core plugin functionality in the CLI without the need to patch and update the whole CLI.\n",
      "examples": [
        "<%= config.bin %> <%= command.id %> <%- config.pjson.oclif.examplePlugin || \"myplugin\" %> ",
        "<%= config.bin %> <%= command.id %> https://github.com/someuser/someplugin",
        "<%= config.bin %> <%= command.id %> someuser/someplugin"
      ],
      "flags": {
        "json": {
          "description": "Format output as json.",
          "helpGroup": "GLOBAL",
          "name": "json",
          "allowNo": false,
          "type": "boolean"
        },
        "force": {
          "char": "f",
          "description": "Run yarn install with force flag.",
          "name": "force",
          "allowNo": false,
          "type": "boolean"
        },
        "help": {
          "char": "h",
          "description": "Show CLI help.",
          "name": "help",
          "allowNo": false,
          "type": "boolean"
        },
        "jit": {
          "hidden": true,
          "name": "jit",
          "allowNo": false,
          "type": "boolean"
        },
        "silent": {
          "char": "s",
          "description": "Silences yarn output.",
          "exclusive": [
            "verbose"
          ],
          "name": "silent",
          "allowNo": false,
          "type": "boolean"
        },
        "verbose": {
          "char": "v",
          "description": "Show verbose yarn output.",
          "exclusive": [
            "silent"
          ],
          "name": "verbose",
          "allowNo": false,
          "type": "boolean"
        }
      },
      "hasDynamicHelp": false,
      "hiddenAliases": [],
      "id": "plugins:install",
      "pluginAlias": "@oclif/plugin-plugins",
      "pluginName": "@oclif/plugin-plugins",
      "pluginType": "core",
      "strict": false,
      "usage": "plugins:install PLUGIN...",
      "enableJsonFlag": true,
      "isESM": true,
      "relativePath": [
        "lib",
        "commands",
        "plugins",
        "install.js"
      ],
      "aliasPermutations": [
        "plugins:add",
        "add:plugins"
      ],
      "permutations": [
        "plugins:install",
        "install:plugins"
      ]
    },
    "plugins:link": {
      "aliases": [],
      "args": {
        "path": {
          "default": ".",
          "description": "path to plugin",
          "name": "path",
          "required": true
        }
      },
      "description": "Links a plugin into the CLI for development.\nInstallation of a linked plugin will override a user-installed or core plugin.\n\ne.g. If you have a user-installed or core plugin that has a 'hello' command, installing a linked plugin with a 'hello' command will override the user-installed or core plugin implementation. This is useful for development work.\n",
      "examples": [
        "<%= config.bin %> <%= command.id %> <%- config.pjson.oclif.examplePlugin || \"myplugin\" %> "
      ],
      "flags": {
        "help": {
          "char": "h",
          "description": "Show CLI help.",
          "name": "help",
          "allowNo": false,
          "type": "boolean"
        },
        "install": {
          "description": "Install dependencies after linking the plugin.",
          "name": "install",
          "allowNo": true,
          "type": "boolean"
        },
        "verbose": {
          "char": "v",
          "name": "verbose",
          "allowNo": false,
          "type": "boolean"
        }
      },
      "hasDynamicHelp": false,
      "hiddenAliases": [],
      "id": "plugins:link",
      "pluginAlias": "@oclif/plugin-plugins",
      "pluginName": "@oclif/plugin-plugins",
      "pluginType": "core",
      "strict": true,
      "usage": "plugins:link PLUGIN",
      "enableJsonFlag": false,
      "isESM": true,
      "relativePath": [
        "lib",
        "commands",
        "plugins",
        "link.js"
      ],
      "aliasPermutations": [],
      "permutations": [
        "plugins:link",
        "link:plugins"
      ]
    },
    "plugins:reset": {
      "aliases": [],
      "args": {},
      "flags": {},
      "hasDynamicHelp": false,
      "hiddenAliases": [],
      "id": "plugins:reset",
      "pluginAlias": "@oclif/plugin-plugins",
      "pluginName": "@oclif/plugin-plugins",
      "pluginType": "core",
      "strict": true,
      "summary": "Remove all user-installed and linked plugins.",
      "enableJsonFlag": false,
      "isESM": true,
      "relativePath": [
        "lib",
        "commands",
        "plugins",
        "reset.js"
      ],
      "aliasPermutations": [],
      "permutations": [
        "plugins:reset",
        "reset:plugins"
      ]
    },
    "plugins:uninstall": {
      "aliases": [
        "plugins:unlink",
        "plugins:remove"
      ],
      "args": {
        "plugin": {
          "description": "plugin to uninstall",
          "name": "plugin"
        }
      },
      "description": "Removes a plugin from the CLI.",
      "examples": [
        "<%= config.bin %> <%= command.id %> <%- config.pjson.oclif.examplePlugin || \"myplugin\" %>"
      ],
      "flags": {
        "help": {
          "char": "h",
          "description": "Show CLI help.",
          "name": "help",
          "allowNo": false,
          "type": "boolean"
        },
        "verbose": {
          "char": "v",
          "name": "verbose",
          "allowNo": false,
          "type": "boolean"
        }
      },
      "hasDynamicHelp": false,
      "hiddenAliases": [],
      "id": "plugins:uninstall",
      "pluginAlias": "@oclif/plugin-plugins",
      "pluginName": "@oclif/plugin-plugins",
      "pluginType": "core",
      "strict": false,
      "usage": "plugins:uninstall PLUGIN...",
      "enableJsonFlag": false,
      "isESM": true,
      "relativePath": [
        "lib",
        "commands",
        "plugins",
        "uninstall.js"
      ],
      "aliasPermutations": [
        "plugins:unlink",
        "unlink:plugins",
        "plugins:remove",
        "remove:plugins"
      ],
      "permutations": [
        "plugins:uninstall",
        "uninstall:plugins"
      ]
    },
    "plugins:update": {
      "aliases": [],
      "args": {},
      "description": "Update installed plugins.",
      "flags": {
        "help": {
          "char": "h",
          "description": "Show CLI help.",
          "name": "help",
          "allowNo": false,
          "type": "boolean"
        },
        "verbose": {
          "char": "v",
          "name": "verbose",
          "allowNo": false,
          "type": "boolean"
        }
      },
      "hasDynamicHelp": false,
      "hiddenAliases": [],
      "id": "plugins:update",
      "pluginAlias": "@oclif/plugin-plugins",
      "pluginName": "@oclif/plugin-plugins",
      "pluginType": "core",
      "strict": true,
      "enableJsonFlag": false,
      "isESM": true,
      "relativePath": [
        "lib",
        "commands",
        "plugins",
        "update.js"
      ],
      "aliasPermutations": [],
      "permutations": [
        "plugins:update",
        "update:plugins"
      ]
    }
  },
  "version": "4.1.10"
}