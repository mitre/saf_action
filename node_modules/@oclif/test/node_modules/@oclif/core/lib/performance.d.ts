type Details = Record<string, string | boolean | number | string[]>;
type PerfResult = {
    name: string;
    duration: number;
    details: Details;
    module: string;
    method: string | undefined;
    scope: string | undefined;
};
type PerfHighlights = {
    'oclif.configLoadMs': number;
    'oclif.runMs': number;
    'oclif.initMs': number;
    'oclif.commandLoadMs': number;
    'oclif.initHookMs': number;
    'oclif.prerunHookMs': number;
    'oclif.postrunHookMs': number;
    'oclif.commandRunMs': number;
    'oclif.corePluginsLoadMs': number;
    'oclif.userPluginsLoadMs': number;
    'oclif.linkedPluginsLoadMs': number;
    pluginLoadTimes: Record<string, {
        duration: number;
        details: Details;
    }>;
    hookRunTimes: Record<string, Record<string, number>>;
};
export declare const OCLIF_MARKER_OWNER = "@oclif/core";
declare class Marker {
    owner: string;
    name: string;
    details: Details;
    module: string;
    method: string;
    scope: string;
    stopped: boolean;
    private startMarker;
    private stopMarker;
    constructor(owner: string, name: string, details?: Details);
    addDetails(details: Details): void;
    stop(): void;
    measure(): void;
}
export declare class Performance {
    private static markers;
    private static _results;
    private static _oclifPerf;
    static get enabled(): boolean;
    /** returns a map of owner, PerfResult[].  Excludes oclif PerfResult, which you can get from oclifPerf */
    static get results(): Map<string, PerfResult[]>;
    static getResult(owner: string, name: string): PerfResult | undefined;
    static get oclifPerf(): PerfHighlights | Record<string, never>;
    /**
     * Add a new performance marker
     *
     * @param owner An npm package like `@oclif/core` or `@salesforce/source-tracking`
     * @param name Name of the marker. Use `module.method#scope` format
     * @param details Arbitrary details to attach to the marker
     * @returns Marker instance
     */
    static mark(owner: string, name: string, details?: Details): Marker | undefined;
    /**
     * Collect performance results into static Performance.results
     *
     * @returns Promise<void>
     */
    static collect(): Promise<void>;
    /**
     * Add debug logs for plugin loading performance
     * @returns void
     */
    static debug(): void;
}
export {};
