import * as Errors from '../errors';
import * as styled from './styled';
import * as uxPrompt from './prompt';
import { Config } from './config';
import { ActionBase } from './action/base';
import uxWait from './wait';
export declare class ux {
    static config: Config;
    static get prompt(): typeof uxPrompt.prompt;
    /**
     * "press anykey to continue"
     */
    static get anykey(): typeof uxPrompt.anykey;
    static get confirm(): typeof uxPrompt.confirm;
    static get action(): ActionBase;
    static styledObject(obj: any, keys?: string[]): void;
    static styledHeader(header: string): void;
    static styledJSON(obj: unknown): void;
    static get table(): typeof styled.Table.table;
    static get tree(): typeof styled.tree;
    static get wait(): typeof uxWait;
    static get progress(): typeof styled.progress;
    static done(): Promise<void>;
    static trace(format: string, ...args: string[]): void;
    static debug(format: string, ...args: string[]): void;
    static info(format: string, ...args: string[]): void;
    static log(format?: string, ...args: string[]): void;
    static url(text: string, uri: string, params?: {}): void;
    static annotation(text: string, annotation: string): void;
    static flush(ms?: number): Promise<void>;
}
declare const action: ActionBase, annotation: typeof ux.annotation, anykey: typeof uxPrompt.anykey, confirm: typeof uxPrompt.confirm, debug: typeof ux.debug, done: typeof ux.done, flush: typeof ux.flush, info: typeof ux.info, log: typeof ux.log, progress: typeof styled.progress, prompt: typeof uxPrompt.prompt, styledHeader: typeof ux.styledHeader, styledJSON: typeof ux.styledJSON, styledObject: typeof ux.styledObject, table: typeof styled.Table.table, trace: typeof ux.trace, tree: typeof styled.tree, url: typeof ux.url, wait: (ms?: number) => Promise<void>;
declare const error: typeof Errors.error, exit: typeof Errors.exit, warn: typeof Errors.warn;
export { action, annotation, anykey, confirm, debug, done, error, exit, flush, info, log, progress, prompt, styledHeader, styledJSON, styledObject, table, trace, tree, url, wait, warn, };
export { ExitError } from './exit';
export { IPromptOptions } from './prompt';
export { Table } from './styled';
export { ActionBase } from './action/base';
export { config, Config } from './config';
