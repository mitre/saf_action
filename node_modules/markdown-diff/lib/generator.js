"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Generator = void 0;
/* tslint:disable:max-line-length */
var type_to_string_1 = require("./type-to-string");
var type_mapping_1 = require("./type-mapping");
var jsdiff_util_1 = require("./jsdiff.util");
var marked_1 = require("marked");
var Renderer = marked_1.marked.Renderer;
var Generator = /** @class */ (function () {
    function Generator() {
        this.rendered = new Renderer();
    }
    /**
     * exec
     */
    Generator.prototype.exec = function (oldString, newString) {
        var oldLexer = new marked_1.marked.Lexer();
        var tokens = oldLexer.lex(oldString);
        var newLexer = new marked_1.marked.Lexer();
        var newTokens = newLexer.lex(newString);
        var output = this.walkTokens(newTokens, tokens);
        return output.join(Generator.newLine);
    };
    Generator.prototype.walkTokens = function (newTokens, oldTokens) {
        var output = [];
        var i = 0;
        var innerNew = newTokens ? newTokens : [];
        var innerOld = oldTokens ? oldTokens : [];
        for (i; i < innerOld.length && i < innerNew.length; i += 1) {
            output.push.apply(output, this.handleToken(innerNew[i], innerOld[i]));
        }
        for (i; i < innerOld.length; i += 1) {
            output.push.apply(output, this.handleToken(null, innerOld[i]));
        }
        for (i; i < innerNew.length; i += 1) {
            output.push.apply(output, this.handleToken(innerNew[i], null));
        }
        return output;
    };
    Generator.prototype.handleToken = function (newToken, oldToken) {
        var output = [];
        if ((oldToken === null || type_mapping_1.TypeMapping.isList(oldToken)) && (newToken === null || type_mapping_1.TypeMapping.isList(newToken))) {
            var prefixOld = oldToken && oldToken.ordered ? oldToken.start : null;
            var prefixNew = newToken && newToken.ordered ? newToken.start : null;
            var prefix_1 = prefixNew ? prefixNew : prefixOld;
            var oldItems = oldToken ? oldToken.items.map(function (e) { return e.text; }) : [];
            var newItems = newToken ? newToken.items.map(function (e) { return e.text; }) : [];
            // tslint:disable-next-line:no-increment-decrement
            var res = jsdiff_util_1.JsDiffUtil.diffArrayByIndex(newItems, oldItems).map(function (e) { return (prefix_1 ? prefix_1++ + ". " + e : "* " + e); });
            output.push.apply(output, res);
            return output;
        }
        if ((oldToken === null || type_mapping_1.TypeMapping.isLink(oldToken)) && (newToken === null || type_mapping_1.TypeMapping.isLink(newToken))) {
            if ((oldToken === null || oldToken === void 0 ? void 0 : oldToken.text) !== (newToken === null || newToken === void 0 ? void 0 : newToken.text) || (oldToken === null || oldToken === void 0 ? void 0 : oldToken.href) !== (newToken === null || newToken === void 0 ? void 0 : newToken.href) || (oldToken === null || oldToken === void 0 ? void 0 : oldToken.title) !== (newToken === null || newToken === void 0 ? void 0 : newToken.title)) {
                if (oldToken) {
                    output.push(type_to_string_1.TypeToString.link(oldToken, 'del'));
                }
                if (newToken) {
                    output.push(type_to_string_1.TypeToString.link(newToken, 'ins'));
                }
            }
            else {
                output.push(type_to_string_1.TypeToString.link(newToken, ''));
            }
            return output; // Skip children
        }
        if ((oldToken === null || type_mapping_1.TypeMapping.isTable(oldToken)) && (newToken === null || type_mapping_1.TypeMapping.isTable(newToken))) {
            var headers = jsdiff_util_1.JsDiffUtil.diffArrayByIndex(newToken === null || newToken === void 0 ? void 0 : newToken.header.map(function (e) { return e.text; }), oldToken === null || oldToken === void 0 ? void 0 : oldToken.header.map(function (e) { return e.text; }));
            output.push("|" + headers.join('|') + "|");
            var alignment = newToken ? newToken : oldToken;
            output.push(type_to_string_1.TypeToString.tableAlign(alignment));
            var content = jsdiff_util_1.JsDiffUtil.doubleStringArrayDiff(newToken === null || newToken === void 0 ? void 0 : newToken.rows.map(function (e) { return e.map(function (i) { return i.text; }); }), oldToken === null || oldToken === void 0 ? void 0 : oldToken.rows.map(function (e) { return e.map(function (i) { return i.text; }); }));
            for (var _i = 0, content_1 = content; _i < content_1.length; _i++) {
                var row = content_1[_i];
                output.push("|" + row.join('|') + "|");
            }
            return output; // Skip children
        }
        if ((oldToken === null || type_mapping_1.TypeMapping.isHeading(oldToken)) && (newToken === null || type_mapping_1.TypeMapping.isHeading(newToken))) {
            var count = newToken ? newToken.depth : oldToken.depth;
            var depth = '#'.repeat(count);
            output.push(depth + " " + jsdiff_util_1.JsDiffUtil.diffWords(newToken === null || newToken === void 0 ? void 0 : newToken.text, oldToken === null || oldToken === void 0 ? void 0 : oldToken.text));
            return output; // Skip children
        }
        if ((oldToken === null || type_mapping_1.TypeMapping.isCode(oldToken)) && (newToken === null || type_mapping_1.TypeMapping.isCode(newToken))) {
            output.push("```" + (oldToken === null || oldToken === void 0 ? void 0 : oldToken.lang));
            var content = jsdiff_util_1.JsDiffUtil.diffCodeLines(newToken === null || newToken === void 0 ? void 0 : newToken.text.split(Generator.newLine), oldToken === null || oldToken === void 0 ? void 0 : oldToken.text.split(Generator.newLine));
            output.push(content);
            output.push('```');
            return output; // Skip children
        }
        if ((oldToken === null || type_mapping_1.TypeMapping.isCodespan(oldToken)) && (newToken === null || type_mapping_1.TypeMapping.isCodespan(newToken))) {
            var res = '';
            if ((oldToken === null || oldToken === void 0 ? void 0 : oldToken.text) !== (newToken === null || newToken === void 0 ? void 0 : newToken.text)) {
                if (oldToken) {
                    res += "<del>`" + oldToken.text + "`</del>";
                }
                if (newToken) {
                    res += "<ins>`" + newToken.text + "`</ins>";
                }
            }
            else {
                res = "`" + newToken.text + "`";
            }
            output.push(res);
            return output; // Skip children
        }
        if ((oldToken === null || type_mapping_1.TypeMapping.isBlockQuote(oldToken)) && (newToken === null || type_mapping_1.TypeMapping.isBlockQuote(newToken))) {
            var newVals = newToken === null || newToken === void 0 ? void 0 : newToken.tokens.map(function (e) { return type_mapping_1.TypeMapping.isSpace(e) ? '' : e.raw; });
            var oldVals = oldToken === null || oldToken === void 0 ? void 0 : oldToken.tokens.map(function (e) { return type_mapping_1.TypeMapping.isSpace(e) ? '' : e.raw; });
            var res = jsdiff_util_1.JsDiffUtil.diffArrayByIndex(newVals, oldVals);
            output.push.apply(output, res.map(function (e) { return "> " + e; }));
            return output;
        }
        if ((oldToken === null || type_mapping_1.TypeMapping.isStrong(oldToken)) && (newToken === null || type_mapping_1.TypeMapping.isStrong(newToken))) {
            output.push("**" + jsdiff_util_1.JsDiffUtil.diffWords(newToken === null || newToken === void 0 ? void 0 : newToken.text, oldToken === null || oldToken === void 0 ? void 0 : oldToken.text) + "**");
            return output;
        }
        if ((oldToken === null || type_mapping_1.TypeMapping.isEm(oldToken)) && (newToken === null || type_mapping_1.TypeMapping.isEm(newToken))) {
            output.push("*" + jsdiff_util_1.JsDiffUtil.diffWords(newToken === null || newToken === void 0 ? void 0 : newToken.text, oldToken === null || oldToken === void 0 ? void 0 : oldToken.text) + "*");
            return output;
        }
        if ((oldToken === null || type_mapping_1.TypeMapping.isBr(oldToken)) && (newToken === null || type_mapping_1.TypeMapping.isBr(newToken))) {
            var res = '';
            if (oldToken && !newToken) {
                res = '<del></del>';
            }
            if (!oldToken && newToken) {
                res = '<ins></ins>';
            }
            output.push(res + this.rendered.br());
        }
        if ((oldToken === null || type_mapping_1.TypeMapping.isText(oldToken)) && (newToken === null || type_mapping_1.TypeMapping.isText(newToken))) {
            output.push(jsdiff_util_1.JsDiffUtil.diffWords(newToken === null || newToken === void 0 ? void 0 : newToken.text, oldToken === null || oldToken === void 0 ? void 0 : oldToken.text));
        }
        if ((oldToken === null || type_mapping_1.TypeMapping.hasTokens(oldToken)) && (newToken === null || type_mapping_1.TypeMapping.hasTokens(newToken))) {
            output.push(this.walkTokens(newToken === null || newToken === void 0 ? void 0 : newToken.tokens, oldToken === null || oldToken === void 0 ? void 0 : oldToken.tokens).join(''));
        }
        return output;
    };
    Generator.newLine = '\n';
    return Generator;
}());
exports.Generator = Generator;
//# sourceMappingURL=generator.js.map