"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JsDiffUtil = exports.DiffState = void 0;
var diff_1 = require("diff");
var diff_util_1 = require("./diff.util");
var DiffState;
(function (DiffState) {
    DiffState["Exists"] = "Exists";
    DiffState["Added"] = "Added";
    DiffState["Removed"] = "Removed";
})(DiffState = exports.DiffState || (exports.DiffState = {}));
var JsDiffUtil = /** @class */ (function () {
    function JsDiffUtil() {
    }
    JsDiffUtil.fullDiff = function (oldStr, newStr) {
        if (oldStr !== newStr) {
            if (!oldStr) {
                return "<ins>" + newStr + "</ins>";
            }
            if (!newStr) {
                return "<del>" + oldStr + "</del>";
            }
            return "<del>" + oldStr + "</del><ins>" + newStr + "</ins>";
        }
        return oldStr ? oldStr : '';
    };
    JsDiffUtil.diffMarkdown = function (newStr, oldStr) {
        return oldStr ? oldStr : '';
    };
    JsDiffUtil.diffWords = function (newStr, oldStr) {
        var parts = diff_1.diffWords(oldStr ? oldStr : '', newStr ? newStr : '');
        var output = parts.map(function (p) { return JsDiffUtil.getChangeVal(p); });
        return output.join('');
    };
    JsDiffUtil.diffCodeLines = function (newStr, oldStr) {
        var parts = diff_1.diffArrays(oldStr ? oldStr : [], newStr ? newStr : []);
        var anyDiffs = parts.some(function (e) { return e.added || e.removed; });
        var output = parts.map(function (p) { return JsDiffUtil.getChangeWithPrefix(p, anyDiffs); });
        return output.join('\n');
    };
    JsDiffUtil.diffArrayByIndex = function (newArray, oldArray) {
        var i = 0;
        var result = [];
        var oldArr = oldArray ? oldArray : [];
        var newArr = newArray ? newArray : [];
        while (i < oldArr.length && i < newArr.length) {
            result[i] = JsDiffUtil.diffWords(newArr[i], oldArr[i]);
            i += 1;
        }
        for (i; i < oldArr.length; i += 1) {
            result[i] = diff_util_1.DiffUtil.wrapWithTag(oldArr[i], 'del');
        }
        for (i; i < newArr.length; i += 1) {
            result[i] = diff_util_1.DiffUtil.wrapWithTag(newArr[i], 'ins');
        }
        return result;
    };
    JsDiffUtil.doubleStringArrayDiff = function (newArray, oldArray) {
        var i = 0;
        var oldArr = oldArray ? oldArray : [];
        var newArr = newArray ? newArray : [];
        var result = [];
        while (i < oldArr.length && i < newArr.length) {
            result[i] = this.diffArrayByIndex(newArr[i], oldArr[i]);
            i += 1;
        }
        for (i; i < oldArr.length; i += 1) {
            result[i] = this.diffArrayByIndex([], oldArr[i]);
        }
        for (i; i < newArr.length; i += 1) {
            result[i] = this.diffArrayByIndex(newArr[i], []);
        }
        return result;
    };
    JsDiffUtil.getChangeVal = function (change) {
        if (change.added) {
            return diff_util_1.DiffUtil.wrapWithTag(change.value, 'ins');
        }
        if (change.removed) {
            return diff_util_1.DiffUtil.wrapWithTag(change.value, 'del');
        }
        return change.value;
    };
    JsDiffUtil.getChangeWithPrefix = function (change, anyDiffsInBlock) {
        if (change.added) {
            return change.value.map(function (e) { return "+ " + e; }).join('\n');
        }
        if (change.removed) {
            return change.value.map(function (e) { return "- " + e; }).join('\n');
        }
        if (anyDiffsInBlock) {
            return change.value.map(function (e) { return "  " + e; }).join('\n');
        }
        return change.value.join('\n');
    };
    return JsDiffUtil;
}());
exports.JsDiffUtil = JsDiffUtil;
//# sourceMappingURL=jsdiff.util.js.map