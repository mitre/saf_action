"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JsDiffUtil = exports.DiffState = void 0;
const diff_1 = require("diff");
const diff_util_1 = require("./diff.util");
var DiffState;
(function (DiffState) {
    DiffState["Exists"] = "Exists";
    DiffState["Added"] = "Added";
    DiffState["Removed"] = "Removed";
})(DiffState || (exports.DiffState = DiffState = {}));
class JsDiffUtil {
    static fullDiff(oldStr, newStr) {
        if (oldStr !== newStr) {
            if (!oldStr) {
                return `<ins>${newStr}</ins>`;
            }
            if (!newStr) {
                return `<del>${oldStr}</del>`;
            }
            return `<del>${oldStr}</del><ins>${newStr}</ins>`;
        }
        return oldStr || '';
    }
    static diffMarkdown(newStr, oldStr) {
        return oldStr || '';
    }
    static diffWords(newStr, oldStr) {
        const parts = (0, diff_1.diffWords)(oldStr || '', newStr || '');
        const output = parts.map((p) => JsDiffUtil.getChangeVal(p));
        return output.join('');
    }
    static diffCodeLines(newStr, oldStr) {
        const parts = (0, diff_1.diffArrays)(oldStr || [], newStr || []);
        const anyDiffs = parts.some((e) => e.added || e.removed);
        const output = parts.map((p) => JsDiffUtil.getChangeWithPrefix(p, anyDiffs));
        return output.join('\n');
    }
    static diffArrayByIndex(newArray, oldArray) {
        let i = 0;
        const result = [];
        const oldArr = oldArray || [];
        const newArr = newArray || [];
        while (i < oldArr.length && i < newArr.length) {
            result[i] = JsDiffUtil.diffWords(newArr[i], oldArr[i]);
            i += 1;
        }
        for (i; i < oldArr.length; i += 1) {
            result[i] = diff_util_1.DiffUtil.wrapWithTag(oldArr[i], 'del');
        }
        for (i; i < newArr.length; i += 1) {
            result[i] = diff_util_1.DiffUtil.wrapWithTag(newArr[i], 'ins');
        }
        return result;
    }
    static doubleStringArrayDiff(newArray, oldArray) {
        let i = 0;
        const oldArr = oldArray || [];
        const newArr = newArray || [];
        const result = [];
        while (i < oldArr.length && i < newArr.length) {
            result[i] = this.diffArrayByIndex(newArr[i], oldArr[i]);
            i += 1;
        }
        for (i; i < oldArr.length; i += 1) {
            result[i] = this.diffArrayByIndex([], oldArr[i]);
        }
        for (i; i < newArr.length; i += 1) {
            result[i] = this.diffArrayByIndex(newArr[i], []);
        }
        return result;
    }
    static getChangeVal(change) {
        if (change.added) {
            return diff_util_1.DiffUtil.wrapWithTag(change.value, 'ins');
        }
        if (change.removed) {
            return diff_util_1.DiffUtil.wrapWithTag(change.value, 'del');
        }
        return change.value;
    }
    static getChangeWithPrefix(change, anyDiffsInBlock) {
        if (change.added) {
            return change.value.map((e) => `+ ${e}`).join('\n');
        }
        if (change.removed) {
            return change.value.map((e) => `- ${e}`).join('\n');
        }
        if (anyDiffsInBlock) {
            return change.value.map((e) => `  ${e}`).join('\n');
        }
        return change.value.join('\n');
    }
}
exports.JsDiffUtil = JsDiffUtil;
//# sourceMappingURL=jsdiff.util.js.map