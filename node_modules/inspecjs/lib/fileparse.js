"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isContextualizedProfile = exports.isContextualizedEvaluation = exports.convertFileContextual = exports.convertFile = void 0;
const context_1 = require("./context");
const EXEC_JSON_1_0 = __importStar(require("./generated_parsers/v_1_0/exec-json"));
const EXEC_JSON_MIN_1_0 = __importStar(require("./generated_parsers/v_1_0/exec-jsonmin"));
const PROFILE_JSON_1_0 = __importStar(require("./generated_parsers/v_1_0/profile-json"));
function convertFile(jsonText, keepErrors = false) {
    const result = {};
    const errors = {};
    try {
        result['1_0_ExecJson'] = EXEC_JSON_1_0.Convert.toExecJSON(jsonText);
        return result;
    }
    catch (e) {
        errors['1_0_ExecJson'] = e;
    }
    try {
        result['1_0_ExecJsonMin'] =
            EXEC_JSON_MIN_1_0.Convert.toExecJsonmin(jsonText);
        return result;
    }
    catch (e) {
        errors['1_0_ExecJsonMin'] = e;
    }
    try {
        result['1_0_ProfileJson'] =
            PROFILE_JSON_1_0.Convert.toProfileJSON(jsonText);
        return result;
    }
    catch (e) {
        errors['1_0_ProfileJson'] = e;
    }
    if (keepErrors) {
        return {
            ...result,
            errors
        };
    }
    throw new Error('Unable to convert input json. ' +
        'This usually means the file is malformed - please check that the software that generated it is up to date, ' +
        'and, failing that, file an issue with the inspecjs project on github');
}
exports.convertFile = convertFile;
function convertFileContextual(jsonText) {
    const result = convertFile(jsonText, true);
    if (result['1_0_ExecJson']) {
        const evaluation = result['1_0_ExecJson'];
        return (0, context_1.contextualizeEvaluation)(evaluation);
    }
    else if (result['1_0_ProfileJson']) {
        const profile = result['1_0_ProfileJson'];
        return (0, context_1.contextualizeProfile)(profile);
    }
    else {
        throw new Error(`Failed to convert file due to possible errors`);
    }
}
exports.convertFileContextual = convertFileContextual;
function isContextualizedEvaluation(v) {
    return v.sourcedFrom === undefined;
}
exports.isContextualizedEvaluation = isContextualizedEvaluation;
function isContextualizedProfile(v) {
    return !isContextualizedEvaluation(v);
}
exports.isContextualizedProfile = isContextualizedProfile;
//# sourceMappingURL=fileparse.js.map