import * as parse from './fileparse';
import { CanonizationConfig, NistControl, NistRevision } from './nist';
export declare type ControlStatus = 'Not Applicable' | 'From Profile' | 'Profile Error' | 'Passed' | 'Failed' | 'Not Reviewed';
export declare type Severity = 'none' | 'low' | 'medium' | 'high' | 'critical';
export declare type SegmentStatus = 'passed' | 'failed' | 'skipped' | 'error' | 'no_status';
export interface HDFControl {
    wraps: parse.AnyControl;
    status: ControlStatus;
    severity: Severity;
    message: string;
    rawNistTags: string[];
    finding_details: string;
    parsedNistTags: NistControl[];
    canonized_nist(config: CanonizationConfig): string[];
    parsedNistRevision: NistRevision | null;
    start_time?: string;
    status_list?: SegmentStatus[];
    segments?: HDFControlSegment[];
    isProfile: boolean;
    descriptions: {
        [key: string]: string;
    };
    waived: boolean;
}
export interface HDFControlSegment {
    status: SegmentStatus;
    message?: string;
    code_desc: string;
    skip_message?: string;
    exception?: string;
    backtrace?: string[];
    start_time: string;
    run_time?: number;
    resource?: string;
}
export declare function hdfWrapControl(ctrl: parse.AnyControl): HDFControl;
