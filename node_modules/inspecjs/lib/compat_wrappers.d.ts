import * as parse from './fileparse';
import { CanonizationConfig, NistControl, NistRevision } from './nist';
export declare const controlStatuses: readonly ["Not Applicable", "From Profile", "Profile Error", "Passed", "Failed", "Not Reviewed"];
export type ControlStatus = (typeof controlStatuses)[number];
export declare const lowercasedControlStatuses: readonly ["not applicable", "from profile", "profile error", "passed", "failed", "not reviewed"];
export type LowercasedControlStatus = (typeof lowercasedControlStatuses)[number];
export declare const severities: readonly ["none", "low", "medium", "high", "critical"];
export type Severity = (typeof severities)[number];
export declare const titleCasedSeverities: readonly ["None", "Low", "Medium", "High", "Critical"];
export type TitleCasedSeverity = (typeof titleCasedSeverities)[number];
export type SegmentStatus = 'passed' | 'failed' | 'skipped' | 'error' | 'no_status';
export declare function convertImpactToSeverity(impact: number): Severity;
export interface HDFControl {
    wraps: parse.AnyControl;
    status: ControlStatus;
    severity: Severity;
    message: string;
    rawNistTags: string[];
    finding_details: string;
    parsedNistTags: NistControl[];
    canonized_nist(config: CanonizationConfig): string[];
    parsedNistRevision: NistRevision | null;
    start_time?: string;
    status_list?: SegmentStatus[];
    segments?: HDFControlSegment[];
    isProfile: boolean;
    descriptions: {
        [key: string]: string;
    };
    waived: boolean;
}
export interface HDFControlSegment {
    status: SegmentStatus;
    message?: string;
    code_desc: string;
    skip_message?: string;
    exception?: string;
    backtrace?: string[];
    start_time: string;
    run_time?: number;
    resource?: string;
}
export declare function hdfWrapControl(ctrl: parse.AnyControl): HDFControl;
