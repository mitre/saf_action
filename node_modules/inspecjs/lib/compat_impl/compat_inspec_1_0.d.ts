import { ControlStatus, HDFControl, HDFControlSegment, SegmentStatus, Severity } from '../compat_wrappers';
import { ExecJSONControl as ResultControl_1_0 } from '../generated_parsers/v_1_0/exec-json';
import { ProfileJSONControl as ProfileControl_1_0 } from '../generated_parsers/v_1_0/profile-json';
import { CanonizationConfig, NistControl, NistRevision } from '../nist';
declare abstract class HDFControl10 implements HDFControl {
    readonly rawNistTags: string[];
    readonly parsedNistTags: NistControl[];
    readonly parsedNistRevision: NistRevision | null;
    readonly severity: Severity;
    readonly waived: boolean;
    readonly attested: boolean;
    readonly attestationStatus?: 'passed' | 'failed';
    readonly descriptions: {
        [key: string]: string;
    };
    readonly isProfile: boolean;
    wraps: ResultControl_1_0 | ProfileControl_1_0;
    constructor(forControl: ResultControl_1_0 | ProfileControl_1_0, isProfile: boolean, waived: boolean, attested: boolean, attestationStatus?: 'passed' | 'failed');
    abstract get message(): string;
    abstract get segments(): HDFControlSegment[] | undefined;
    abstract get status(): ControlStatus;
    get finding_details(): string;
    get status_list(): SegmentStatus[] | undefined;
    private static compute_raw_nist_tags;
    private static compute_proper_nist_tags;
    canonized_nist(config: CanonizationConfig): string[];
    private static compute_severity;
}
export declare class ExecControl extends HDFControl10 implements HDFControl {
    readonly message: string;
    readonly segments: HDFControlSegment[];
    readonly status: ControlStatus;
    constructor(control: ResultControl_1_0);
    get start_time(): string | undefined;
    private static compute_message;
    private compute_status;
    private static to_message_line;
    private static compute_segments;
}
export declare class ProfileControl extends HDFControl10 implements HDFControl {
    readonly segments: undefined;
    readonly status = "From Profile";
    constructor(control: ProfileControl_1_0);
    private get typed_wrap();
    get message(): string;
}
export {};
