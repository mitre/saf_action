import { HDFControl } from './compat_wrappers';
import { AnyControl, AnyEval, AnyProfile } from './fileparse';
interface WrapsType<Data> {
    data: Data;
}
interface Sourced<From> {
    sourcedFrom: From;
}
interface Extendable<By> {
    extendedBy: By[];
    extendsFrom: By[];
}
interface Contains<Item> {
    contains: Item;
}
export interface ContextualizedEvaluation extends WrapsType<AnyEval>, Contains<ContextualizedProfile[]> {
}
export interface ContextualizedProfile extends WrapsType<AnyProfile>, Sourced<ContextualizedEvaluation | null>, Contains<ContextualizedControl[]>, Extendable<ContextualizedProfile> {
}
export interface ContextualizedControl extends WrapsType<AnyControl>, Sourced<ContextualizedProfile>, Extendable<ContextualizedControl> {
    hdf: HDFControl;
    root: ContextualizedControl;
    full_code: string;
}
export declare function contextualizeEvaluation(evaluation: AnyEval): ContextualizedEvaluation;
export declare function contextualizeProfile(profile: AnyProfile): ContextualizedProfile;
export {};
