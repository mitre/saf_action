"use strict";

var toPromise = require("./_resolve");

function step(key, value) {
  var cursor;

  try {
    cursor = this.iterator[key](value);
  } catch (error) {
    return this.reject(error);
  }

  value = cursor.value;

  if (cursor.done) {
    this.resolve(value);
  } else {
    this.toPromise(value).then(this.onFulfill, this.onReject);
  }
}

function AsyncFn(iterator, resolve, reject) {
  this.iterator = iterator;
  this.onFulfill = step.bind(this, "next");
  this.onReject = step.bind(this, "throw");
  this.reject = reject;
  this.resolve = resolve;
  this.toPromise = toPromise;
}

var asyncFn = function asyncFn(generator) {
  return function () {
    var _this = this,
        _arguments = arguments;

    return new Promise(function (resolve, reject) {
      return new AsyncFn(generator.apply(_this, _arguments), resolve, reject).onFulfill();
    });
  };
};

asyncFn.cancelable = function (generator) {
  return function (cancelToken) {
    var _this2 = this,
        _arguments2 = arguments;

    if (cancelToken.requested) {
      return Promise.reject(cancelToken.reason);
    }

    return new Promise(function (resolve, reject) {
      var o = new AsyncFn(generator.apply(_this2, _arguments2), resolve, reject);
      var cancelPromise = cancelToken.promise;
      cancelPromise.then(function () {
        o.toPromise = toPromise;
      });

      o.toPromise = function (promise) {
        return new Promise(function (resolve, reject) {
          toPromise(promise).then(resolve, reject);
          cancelPromise.then(reject);
        });
      };

      o.onFulfill();
    });
  };
};

module.exports = asyncFn;