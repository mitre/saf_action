"use strict";

var matchError = require("./_matchError");

var noop = require("./_noop");

function stopRetry(error) {
  this.error = error;
  throw this;
}

module.exports = function retry(fn, _temp) {
  var _ref = _temp === void 0 ? {} : _temp,
      _ref$delay = _ref.delay,
      delay = _ref$delay === void 0 ? 1e3 : _ref$delay,
      _ref$onRetry = _ref.onRetry,
      onRetry = _ref$onRetry === void 0 ? noop : _ref$onRetry,
      retries = _ref.retries,
      tries = _ref.tries,
      when = _ref.when;

  if (tries === undefined) {
    tries = retries !== undefined ? retries + 1 : 10;
  } else if (retries !== undefined) {
    throw new TypeError("retries and tries options are mutually exclusive");
  }

  var container = {
    error: undefined
  };
  var stop = stopRetry.bind(container);
  var sleep;

  if (delay !== 0) {
    var _resolver = function _resolver(resolve) {
      return setTimeout(resolve, delay);
    };

    sleep = function sleep() {
      return new Promise(_resolver);
    };
  }

  when = matchError.bind(undefined, when);

  var onError = function onError(error) {
    if (error === container) {
      throw container.error;
    }

    if (--tries === 0 || !when(error)) {
      throw error;
    }

    return Promise.resolve(onRetry(error)).then(sleep).then(loop);
  };

  var resolver = function resolver(resolve) {
    return resolve(fn(stop));
  };

  var loop = function loop() {
    return new Promise(resolver).catch(onError);
  };

  return loop();
};