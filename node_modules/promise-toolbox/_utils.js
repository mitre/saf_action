"use strict";

if (typeof Promise !== "function" || typeof Promise.reject !== "function" || typeof Promise.resolve !== "function") {
  throw new Error("a standard Promise implementation is required (https://github.com/JsCommunity/promise-toolbox#usage)");
}

var isPromise = require("./isPromise");

var _require = require("./_symbols"),
    $$iterator = _require.$$iterator;

exports.applyThen = function (fn, args, onSuccess, onFailure) {
  var returnValue;

  try {
    returnValue = fn.apply(undefined, args);

    if (isPromise(returnValue)) {
      returnValue.then(onSuccess, onFailure);
      return;
    }
  } catch (error) {
    onFailure(error);
    return;
  }

  onSuccess(returnValue);
};

var forArray = exports.forArray = function (array, iteratee) {
  var length = array.length;

  for (var i = 0; i < length; ++i) {
    iteratee(array[i], i, array);
  }
};

exports.forIn = function (object, iteratee) {
  for (var key in object) {
    iteratee(object[key], key, object);
  }
};

var forIterable = exports.forIterable = function (iterable, iteratee) {
  var iterator = iterable[$$iterator]();
  var current;

  while (!(current = iterator.next()).done) {
    iteratee(current.value, undefined, iterable);
  }
};

var hasOwnProperty = Object.prototype.hasOwnProperty;

var forOwn = exports.forOwn = function (object, iteratee) {
  for (var key in object) {
    if (hasOwnProperty.call(object, key)) {
      iteratee(object[key], key, object);
    }
  }
};

var isIterable = function isIterable(value) {
  return value != null && typeof value[$$iterator] === "function";
};

var forEach = exports.forEach = function (collection, iteratee) {
  return Array.isArray(collection) ? forArray(collection, iteratee) : isIterable(collection) ? forIterable(collection, iteratee) : isArrayLike(collection) ? forArray(collection, iteratee) : forOwn(collection, iteratee);
};

var isLength = function isLength(value) {
  return typeof value === "number" && value >= 0 && value < Infinity && Math.floor(value) === value;
};

var isArrayLike = exports.isArrayLike = function (value) {
  return typeof value !== "function" && value != null && isLength(value.length);
};

exports.makeAsyncIterator = function (iterator) {
  var asyncIterator = function asyncIterator(collection, iteratee) {
    if (isPromise(collection)) {
      return collection.then(function (collection) {
        return asyncIterator(collection, iteratee);
      });
    }

    var mainPromise = Promise.resolve();
    iterator(collection, function (value, key) {
      mainPromise = isPromise(value) ? mainPromise.then(function () {
        return value.then(function (value) {
          return iteratee(value, key, collection);
        });
      }) : mainPromise.then(function () {
        return iteratee(value, key, collection);
      });
    });
    return mainPromise;
  };

  return asyncIterator;
};

exports.map = function (collection, iteratee) {
  var result = [];
  forEach(collection, function (item, key, collection) {
    result.push(iteratee(item, key, collection));
  });
  return result;
};

exports.mapAuto = function (collection, iteratee) {
  var result = isArrayLike(collection) ? new Array(collection.length) : Object.create(null);

  if (iteratee !== undefined) {
    forEach(collection, function (item, key, collection) {
      result[key] = iteratee(item, key, collection);
    });
  }

  return result;
};