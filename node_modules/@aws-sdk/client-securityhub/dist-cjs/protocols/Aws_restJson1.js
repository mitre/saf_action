"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.se_GetInsightsCommand = exports.se_GetInsightResultsCommand = exports.se_GetFindingsCommand = exports.se_GetFindingHistoryCommand = exports.se_GetFindingAggregatorCommand = exports.se_GetEnabledStandardsCommand = exports.se_GetConfigurationPolicyAssociationCommand = exports.se_GetConfigurationPolicyCommand = exports.se_GetAdministratorAccountCommand = exports.se_EnableSecurityHubCommand = exports.se_EnableOrganizationAdminAccountCommand = exports.se_EnableImportFindingsForProductCommand = exports.se_DisassociateMembersCommand = exports.se_DisassociateFromMasterAccountCommand = exports.se_DisassociateFromAdministratorAccountCommand = exports.se_DisableSecurityHubCommand = exports.se_DisableOrganizationAdminAccountCommand = exports.se_DisableImportFindingsForProductCommand = exports.se_DescribeStandardsControlsCommand = exports.se_DescribeStandardsCommand = exports.se_DescribeProductsCommand = exports.se_DescribeOrganizationConfigurationCommand = exports.se_DescribeHubCommand = exports.se_DescribeActionTargetsCommand = exports.se_DeleteMembersCommand = exports.se_DeleteInvitationsCommand = exports.se_DeleteInsightCommand = exports.se_DeleteFindingAggregatorCommand = exports.se_DeleteConfigurationPolicyCommand = exports.se_DeleteActionTargetCommand = exports.se_DeclineInvitationsCommand = exports.se_CreateMembersCommand = exports.se_CreateInsightCommand = exports.se_CreateFindingAggregatorCommand = exports.se_CreateConfigurationPolicyCommand = exports.se_CreateAutomationRuleCommand = exports.se_CreateActionTargetCommand = exports.se_BatchUpdateStandardsControlAssociationsCommand = exports.se_BatchUpdateFindingsCommand = exports.se_BatchUpdateAutomationRulesCommand = exports.se_BatchImportFindingsCommand = exports.se_BatchGetStandardsControlAssociationsCommand = exports.se_BatchGetSecurityControlsCommand = exports.se_BatchGetConfigurationPolicyAssociationsCommand = exports.se_BatchGetAutomationRulesCommand = exports.se_BatchEnableStandardsCommand = exports.se_BatchDisableStandardsCommand = exports.se_BatchDeleteAutomationRulesCommand = exports.se_AcceptInvitationCommand = exports.se_AcceptAdministratorInvitationCommand = void 0;
exports.de_DeleteActionTargetCommand = exports.de_DeclineInvitationsCommand = exports.de_CreateMembersCommand = exports.de_CreateInsightCommand = exports.de_CreateFindingAggregatorCommand = exports.de_CreateConfigurationPolicyCommand = exports.de_CreateAutomationRuleCommand = exports.de_CreateActionTargetCommand = exports.de_BatchUpdateStandardsControlAssociationsCommand = exports.de_BatchUpdateFindingsCommand = exports.de_BatchUpdateAutomationRulesCommand = exports.de_BatchImportFindingsCommand = exports.de_BatchGetStandardsControlAssociationsCommand = exports.de_BatchGetSecurityControlsCommand = exports.de_BatchGetConfigurationPolicyAssociationsCommand = exports.de_BatchGetAutomationRulesCommand = exports.de_BatchEnableStandardsCommand = exports.de_BatchDisableStandardsCommand = exports.de_BatchDeleteAutomationRulesCommand = exports.de_AcceptInvitationCommand = exports.de_AcceptAdministratorInvitationCommand = exports.se_UpdateStandardsControlCommand = exports.se_UpdateSecurityHubConfigurationCommand = exports.se_UpdateSecurityControlCommand = exports.se_UpdateOrganizationConfigurationCommand = exports.se_UpdateInsightCommand = exports.se_UpdateFindingsCommand = exports.se_UpdateFindingAggregatorCommand = exports.se_UpdateConfigurationPolicyCommand = exports.se_UpdateActionTargetCommand = exports.se_UntagResourceCommand = exports.se_TagResourceCommand = exports.se_StartConfigurationPolicyDisassociationCommand = exports.se_StartConfigurationPolicyAssociationCommand = exports.se_ListTagsForResourceCommand = exports.se_ListStandardsControlAssociationsCommand = exports.se_ListSecurityControlDefinitionsCommand = exports.se_ListOrganizationAdminAccountsCommand = exports.se_ListMembersCommand = exports.se_ListInvitationsCommand = exports.se_ListFindingAggregatorsCommand = exports.se_ListEnabledProductsForImportCommand = exports.se_ListConfigurationPolicyAssociationsCommand = exports.se_ListConfigurationPoliciesCommand = exports.se_ListAutomationRulesCommand = exports.se_InviteMembersCommand = exports.se_GetSecurityControlDefinitionCommand = exports.se_GetMembersCommand = exports.se_GetMasterAccountCommand = exports.se_GetInvitationsCountCommand = void 0;
exports.de_UpdateActionTargetCommand = exports.de_UntagResourceCommand = exports.de_TagResourceCommand = exports.de_StartConfigurationPolicyDisassociationCommand = exports.de_StartConfigurationPolicyAssociationCommand = exports.de_ListTagsForResourceCommand = exports.de_ListStandardsControlAssociationsCommand = exports.de_ListSecurityControlDefinitionsCommand = exports.de_ListOrganizationAdminAccountsCommand = exports.de_ListMembersCommand = exports.de_ListInvitationsCommand = exports.de_ListFindingAggregatorsCommand = exports.de_ListEnabledProductsForImportCommand = exports.de_ListConfigurationPolicyAssociationsCommand = exports.de_ListConfigurationPoliciesCommand = exports.de_ListAutomationRulesCommand = exports.de_InviteMembersCommand = exports.de_GetSecurityControlDefinitionCommand = exports.de_GetMembersCommand = exports.de_GetMasterAccountCommand = exports.de_GetInvitationsCountCommand = exports.de_GetInsightsCommand = exports.de_GetInsightResultsCommand = exports.de_GetFindingsCommand = exports.de_GetFindingHistoryCommand = exports.de_GetFindingAggregatorCommand = exports.de_GetEnabledStandardsCommand = exports.de_GetConfigurationPolicyAssociationCommand = exports.de_GetConfigurationPolicyCommand = exports.de_GetAdministratorAccountCommand = exports.de_EnableSecurityHubCommand = exports.de_EnableOrganizationAdminAccountCommand = exports.de_EnableImportFindingsForProductCommand = exports.de_DisassociateMembersCommand = exports.de_DisassociateFromMasterAccountCommand = exports.de_DisassociateFromAdministratorAccountCommand = exports.de_DisableSecurityHubCommand = exports.de_DisableOrganizationAdminAccountCommand = exports.de_DisableImportFindingsForProductCommand = exports.de_DescribeStandardsControlsCommand = exports.de_DescribeStandardsCommand = exports.de_DescribeProductsCommand = exports.de_DescribeOrganizationConfigurationCommand = exports.de_DescribeHubCommand = exports.de_DescribeActionTargetsCommand = exports.de_DeleteMembersCommand = exports.de_DeleteInvitationsCommand = exports.de_DeleteInsightCommand = exports.de_DeleteFindingAggregatorCommand = exports.de_DeleteConfigurationPolicyCommand = void 0;
exports.de_UpdateStandardsControlCommand = exports.de_UpdateSecurityHubConfigurationCommand = exports.de_UpdateSecurityControlCommand = exports.de_UpdateOrganizationConfigurationCommand = exports.de_UpdateInsightCommand = exports.de_UpdateFindingsCommand = exports.de_UpdateFindingAggregatorCommand = exports.de_UpdateConfigurationPolicyCommand = void 0;
const core_1 = require("@aws-sdk/core");
const core_2 = require("@smithy/core");
const smithy_client_1 = require("@smithy/smithy-client");
const models_0_1 = require("../models/models_0");
const models_2_1 = require("../models/models_2");
const SecurityHubServiceException_1 = require("../models/SecurityHubServiceException");
const se_AcceptAdministratorInvitationCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/administrator");
    let body;
    body = JSON.stringify((0, smithy_client_1.take)(input, {
        AdministratorId: [],
        InvitationId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
exports.se_AcceptAdministratorInvitationCommand = se_AcceptAdministratorInvitationCommand;
const se_AcceptInvitationCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/master");
    let body;
    body = JSON.stringify((0, smithy_client_1.take)(input, {
        InvitationId: [],
        MasterId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
exports.se_AcceptInvitationCommand = se_AcceptInvitationCommand;
const se_BatchDeleteAutomationRulesCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/automationrules/delete");
    let body;
    body = JSON.stringify((0, smithy_client_1.take)(input, {
        AutomationRulesArns: (_) => (0, smithy_client_1._json)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
exports.se_BatchDeleteAutomationRulesCommand = se_BatchDeleteAutomationRulesCommand;
const se_BatchDisableStandardsCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/standards/deregister");
    let body;
    body = JSON.stringify((0, smithy_client_1.take)(input, {
        StandardsSubscriptionArns: (_) => (0, smithy_client_1._json)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
exports.se_BatchDisableStandardsCommand = se_BatchDisableStandardsCommand;
const se_BatchEnableStandardsCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/standards/register");
    let body;
    body = JSON.stringify((0, smithy_client_1.take)(input, {
        StandardsSubscriptionRequests: (_) => (0, smithy_client_1._json)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
exports.se_BatchEnableStandardsCommand = se_BatchEnableStandardsCommand;
const se_BatchGetAutomationRulesCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/automationrules/get");
    let body;
    body = JSON.stringify((0, smithy_client_1.take)(input, {
        AutomationRulesArns: (_) => (0, smithy_client_1._json)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
exports.se_BatchGetAutomationRulesCommand = se_BatchGetAutomationRulesCommand;
const se_BatchGetConfigurationPolicyAssociationsCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/configurationPolicyAssociation/batchget");
    let body;
    body = JSON.stringify((0, smithy_client_1.take)(input, {
        ConfigurationPolicyAssociationIdentifiers: (_) => (0, smithy_client_1._json)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
exports.se_BatchGetConfigurationPolicyAssociationsCommand = se_BatchGetConfigurationPolicyAssociationsCommand;
const se_BatchGetSecurityControlsCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/securityControls/batchGet");
    let body;
    body = JSON.stringify((0, smithy_client_1.take)(input, {
        SecurityControlIds: (_) => (0, smithy_client_1._json)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
exports.se_BatchGetSecurityControlsCommand = se_BatchGetSecurityControlsCommand;
const se_BatchGetStandardsControlAssociationsCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/associations/batchGet");
    let body;
    body = JSON.stringify((0, smithy_client_1.take)(input, {
        StandardsControlAssociationIds: (_) => (0, smithy_client_1._json)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
exports.se_BatchGetStandardsControlAssociationsCommand = se_BatchGetStandardsControlAssociationsCommand;
const se_BatchImportFindingsCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/findings/import");
    let body;
    body = JSON.stringify((0, smithy_client_1.take)(input, {
        Findings: (_) => se_BatchImportFindingsRequestFindingList(_, context),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
exports.se_BatchImportFindingsCommand = se_BatchImportFindingsCommand;
const se_BatchUpdateAutomationRulesCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/automationrules/update");
    let body;
    body = JSON.stringify((0, smithy_client_1.take)(input, {
        UpdateAutomationRulesRequestItems: (_) => se_UpdateAutomationRulesRequestItemsList(_, context),
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
exports.se_BatchUpdateAutomationRulesCommand = se_BatchUpdateAutomationRulesCommand;
const se_BatchUpdateFindingsCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/findings/batchupdate");
    let body;
    body = JSON.stringify((0, smithy_client_1.take)(input, {
        Confidence: [],
        Criticality: [],
        FindingIdentifiers: (_) => (0, smithy_client_1._json)(_),
        Note: (_) => (0, smithy_client_1._json)(_),
        RelatedFindings: (_) => (0, smithy_client_1._json)(_),
        Severity: (_) => se_SeverityUpdate(_, context),
        Types: (_) => (0, smithy_client_1._json)(_),
        UserDefinedFields: (_) => (0, smithy_client_1._json)(_),
        VerificationState: [],
        Workflow: (_) => (0, smithy_client_1._json)(_),
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
exports.se_BatchUpdateFindingsCommand = se_BatchUpdateFindingsCommand;
const se_BatchUpdateStandardsControlAssociationsCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/associations");
    let body;
    body = JSON.stringify((0, smithy_client_1.take)(input, {
        StandardsControlAssociationUpdates: (_) => (0, smithy_client_1._json)(_),
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
exports.se_BatchUpdateStandardsControlAssociationsCommand = se_BatchUpdateStandardsControlAssociationsCommand;
const se_CreateActionTargetCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/actionTargets");
    let body;
    body = JSON.stringify((0, smithy_client_1.take)(input, {
        Description: [],
        Id: [],
        Name: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
exports.se_CreateActionTargetCommand = se_CreateActionTargetCommand;
const se_CreateAutomationRuleCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/automationrules/create");
    let body;
    body = JSON.stringify((0, smithy_client_1.take)(input, {
        Actions: (_) => se_ActionList(_, context),
        Criteria: (_) => se_AutomationRulesFindingFilters(_, context),
        Description: [],
        IsTerminal: [],
        RuleName: [],
        RuleOrder: [],
        RuleStatus: [],
        Tags: (_) => (0, smithy_client_1._json)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
exports.se_CreateAutomationRuleCommand = se_CreateAutomationRuleCommand;
const se_CreateConfigurationPolicyCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/configurationPolicy/create");
    let body;
    body = JSON.stringify((0, smithy_client_1.take)(input, {
        ConfigurationPolicy: (_) => se_Policy(_, context),
        Description: [],
        Name: [],
        Tags: (_) => (0, smithy_client_1._json)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
exports.se_CreateConfigurationPolicyCommand = se_CreateConfigurationPolicyCommand;
const se_CreateFindingAggregatorCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/findingAggregator/create");
    let body;
    body = JSON.stringify((0, smithy_client_1.take)(input, {
        RegionLinkingMode: [],
        Regions: (_) => (0, smithy_client_1._json)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
exports.se_CreateFindingAggregatorCommand = se_CreateFindingAggregatorCommand;
const se_CreateInsightCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/insights");
    let body;
    body = JSON.stringify((0, smithy_client_1.take)(input, {
        Filters: (_) => se_AwsSecurityFindingFilters(_, context),
        GroupByAttribute: [],
        Name: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
exports.se_CreateInsightCommand = se_CreateInsightCommand;
const se_CreateMembersCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/members");
    let body;
    body = JSON.stringify((0, smithy_client_1.take)(input, {
        AccountDetails: (_) => (0, smithy_client_1._json)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
exports.se_CreateMembersCommand = se_CreateMembersCommand;
const se_DeclineInvitationsCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/invitations/decline");
    let body;
    body = JSON.stringify((0, smithy_client_1.take)(input, {
        AccountIds: (_) => (0, smithy_client_1._json)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
exports.se_DeclineInvitationsCommand = se_DeclineInvitationsCommand;
const se_DeleteActionTargetCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {};
    b.bp("/actionTargets/{ActionTargetArn+}");
    b.p("ActionTargetArn", () => input.ActionTargetArn, "{ActionTargetArn+}", true);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
exports.se_DeleteActionTargetCommand = se_DeleteActionTargetCommand;
const se_DeleteConfigurationPolicyCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {};
    b.bp("/configurationPolicy/{Identifier}");
    b.p("Identifier", () => input.Identifier, "{Identifier}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
exports.se_DeleteConfigurationPolicyCommand = se_DeleteConfigurationPolicyCommand;
const se_DeleteFindingAggregatorCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {};
    b.bp("/findingAggregator/delete/{FindingAggregatorArn+}");
    b.p("FindingAggregatorArn", () => input.FindingAggregatorArn, "{FindingAggregatorArn+}", true);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
exports.se_DeleteFindingAggregatorCommand = se_DeleteFindingAggregatorCommand;
const se_DeleteInsightCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {};
    b.bp("/insights/{InsightArn+}");
    b.p("InsightArn", () => input.InsightArn, "{InsightArn+}", true);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
exports.se_DeleteInsightCommand = se_DeleteInsightCommand;
const se_DeleteInvitationsCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/invitations/delete");
    let body;
    body = JSON.stringify((0, smithy_client_1.take)(input, {
        AccountIds: (_) => (0, smithy_client_1._json)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
exports.se_DeleteInvitationsCommand = se_DeleteInvitationsCommand;
const se_DeleteMembersCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/members/delete");
    let body;
    body = JSON.stringify((0, smithy_client_1.take)(input, {
        AccountIds: (_) => (0, smithy_client_1._json)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
exports.se_DeleteMembersCommand = se_DeleteMembersCommand;
const se_DescribeActionTargetsCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/actionTargets/get");
    let body;
    body = JSON.stringify((0, smithy_client_1.take)(input, {
        ActionTargetArns: (_) => (0, smithy_client_1._json)(_),
        MaxResults: [],
        NextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
exports.se_DescribeActionTargetsCommand = se_DescribeActionTargetsCommand;
const se_DescribeHubCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {};
    b.bp("/accounts");
    const query = (0, smithy_client_1.map)({
        [_HA]: [, input[_HA]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
exports.se_DescribeHubCommand = se_DescribeHubCommand;
const se_DescribeOrganizationConfigurationCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/organization/configuration");
    let body;
    body = "";
    b.m("GET").h(headers).b(body);
    return b.build();
};
exports.se_DescribeOrganizationConfigurationCommand = se_DescribeOrganizationConfigurationCommand;
const se_DescribeProductsCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {};
    b.bp("/products");
    const query = (0, smithy_client_1.map)({
        [_NT]: [, input[_NT]],
        [_MR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_PA]: [, input[_PA]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
exports.se_DescribeProductsCommand = se_DescribeProductsCommand;
const se_DescribeStandardsCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {};
    b.bp("/standards");
    const query = (0, smithy_client_1.map)({
        [_NT]: [, input[_NT]],
        [_MR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
exports.se_DescribeStandardsCommand = se_DescribeStandardsCommand;
const se_DescribeStandardsControlsCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {};
    b.bp("/standards/controls/{StandardsSubscriptionArn+}");
    b.p("StandardsSubscriptionArn", () => input.StandardsSubscriptionArn, "{StandardsSubscriptionArn+}", true);
    const query = (0, smithy_client_1.map)({
        [_NT]: [, input[_NT]],
        [_MR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
exports.se_DescribeStandardsControlsCommand = se_DescribeStandardsControlsCommand;
const se_DisableImportFindingsForProductCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {};
    b.bp("/productSubscriptions/{ProductSubscriptionArn+}");
    b.p("ProductSubscriptionArn", () => input.ProductSubscriptionArn, "{ProductSubscriptionArn+}", true);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
exports.se_DisableImportFindingsForProductCommand = se_DisableImportFindingsForProductCommand;
const se_DisableOrganizationAdminAccountCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/organization/admin/disable");
    let body;
    body = JSON.stringify((0, smithy_client_1.take)(input, {
        AdminAccountId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
exports.se_DisableOrganizationAdminAccountCommand = se_DisableOrganizationAdminAccountCommand;
const se_DisableSecurityHubCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts");
    let body;
    body = "";
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
exports.se_DisableSecurityHubCommand = se_DisableSecurityHubCommand;
const se_DisassociateFromAdministratorAccountCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/administrator/disassociate");
    let body;
    body = "";
    b.m("POST").h(headers).b(body);
    return b.build();
};
exports.se_DisassociateFromAdministratorAccountCommand = se_DisassociateFromAdministratorAccountCommand;
const se_DisassociateFromMasterAccountCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/master/disassociate");
    let body;
    body = "";
    b.m("POST").h(headers).b(body);
    return b.build();
};
exports.se_DisassociateFromMasterAccountCommand = se_DisassociateFromMasterAccountCommand;
const se_DisassociateMembersCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/members/disassociate");
    let body;
    body = JSON.stringify((0, smithy_client_1.take)(input, {
        AccountIds: (_) => (0, smithy_client_1._json)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
exports.se_DisassociateMembersCommand = se_DisassociateMembersCommand;
const se_EnableImportFindingsForProductCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/productSubscriptions");
    let body;
    body = JSON.stringify((0, smithy_client_1.take)(input, {
        ProductArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
exports.se_EnableImportFindingsForProductCommand = se_EnableImportFindingsForProductCommand;
const se_EnableOrganizationAdminAccountCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/organization/admin/enable");
    let body;
    body = JSON.stringify((0, smithy_client_1.take)(input, {
        AdminAccountId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
exports.se_EnableOrganizationAdminAccountCommand = se_EnableOrganizationAdminAccountCommand;
const se_EnableSecurityHubCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts");
    let body;
    body = JSON.stringify((0, smithy_client_1.take)(input, {
        ControlFindingGenerator: [],
        EnableDefaultStandards: [],
        Tags: (_) => (0, smithy_client_1._json)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
exports.se_EnableSecurityHubCommand = se_EnableSecurityHubCommand;
const se_GetAdministratorAccountCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/administrator");
    let body;
    body = "";
    b.m("GET").h(headers).b(body);
    return b.build();
};
exports.se_GetAdministratorAccountCommand = se_GetAdministratorAccountCommand;
const se_GetConfigurationPolicyCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {};
    b.bp("/configurationPolicy/get/{Identifier}");
    b.p("Identifier", () => input.Identifier, "{Identifier}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
exports.se_GetConfigurationPolicyCommand = se_GetConfigurationPolicyCommand;
const se_GetConfigurationPolicyAssociationCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/configurationPolicyAssociation/get");
    let body;
    body = JSON.stringify((0, smithy_client_1.take)(input, {
        Target: (_) => (0, smithy_client_1._json)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
exports.se_GetConfigurationPolicyAssociationCommand = se_GetConfigurationPolicyAssociationCommand;
const se_GetEnabledStandardsCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/standards/get");
    let body;
    body = JSON.stringify((0, smithy_client_1.take)(input, {
        MaxResults: [],
        NextToken: [],
        StandardsSubscriptionArns: (_) => (0, smithy_client_1._json)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
exports.se_GetEnabledStandardsCommand = se_GetEnabledStandardsCommand;
const se_GetFindingAggregatorCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {};
    b.bp("/findingAggregator/get/{FindingAggregatorArn+}");
    b.p("FindingAggregatorArn", () => input.FindingAggregatorArn, "{FindingAggregatorArn+}", true);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
exports.se_GetFindingAggregatorCommand = se_GetFindingAggregatorCommand;
const se_GetFindingHistoryCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/findingHistory/get");
    let body;
    body = JSON.stringify((0, smithy_client_1.take)(input, {
        EndTime: (_) => _.toISOString().split(".")[0] + "Z",
        FindingIdentifier: (_) => (0, smithy_client_1._json)(_),
        MaxResults: [],
        NextToken: [],
        StartTime: (_) => _.toISOString().split(".")[0] + "Z",
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
exports.se_GetFindingHistoryCommand = se_GetFindingHistoryCommand;
const se_GetFindingsCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/findings");
    let body;
    body = JSON.stringify((0, smithy_client_1.take)(input, {
        Filters: (_) => se_AwsSecurityFindingFilters(_, context),
        MaxResults: [],
        NextToken: [],
        SortCriteria: (_) => (0, smithy_client_1._json)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
exports.se_GetFindingsCommand = se_GetFindingsCommand;
const se_GetInsightResultsCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {};
    b.bp("/insights/results/{InsightArn+}");
    b.p("InsightArn", () => input.InsightArn, "{InsightArn+}", true);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
exports.se_GetInsightResultsCommand = se_GetInsightResultsCommand;
const se_GetInsightsCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/insights/get");
    let body;
    body = JSON.stringify((0, smithy_client_1.take)(input, {
        InsightArns: (_) => (0, smithy_client_1._json)(_),
        MaxResults: [],
        NextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
exports.se_GetInsightsCommand = se_GetInsightsCommand;
const se_GetInvitationsCountCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/invitations/count");
    let body;
    body = "";
    b.m("GET").h(headers).b(body);
    return b.build();
};
exports.se_GetInvitationsCountCommand = se_GetInvitationsCountCommand;
const se_GetMasterAccountCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/master");
    let body;
    body = "";
    b.m("GET").h(headers).b(body);
    return b.build();
};
exports.se_GetMasterAccountCommand = se_GetMasterAccountCommand;
const se_GetMembersCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/members/get");
    let body;
    body = JSON.stringify((0, smithy_client_1.take)(input, {
        AccountIds: (_) => (0, smithy_client_1._json)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
exports.se_GetMembersCommand = se_GetMembersCommand;
const se_GetSecurityControlDefinitionCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {};
    b.bp("/securityControl/definition");
    const query = (0, smithy_client_1.map)({
        [_SCI]: [, (0, smithy_client_1.expectNonNull)(input[_SCI], `SecurityControlId`)],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
exports.se_GetSecurityControlDefinitionCommand = se_GetSecurityControlDefinitionCommand;
const se_InviteMembersCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/members/invite");
    let body;
    body = JSON.stringify((0, smithy_client_1.take)(input, {
        AccountIds: (_) => (0, smithy_client_1._json)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
exports.se_InviteMembersCommand = se_InviteMembersCommand;
const se_ListAutomationRulesCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {};
    b.bp("/automationrules/list");
    const query = (0, smithy_client_1.map)({
        [_NT]: [, input[_NT]],
        [_MR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
exports.se_ListAutomationRulesCommand = se_ListAutomationRulesCommand;
const se_ListConfigurationPoliciesCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {};
    b.bp("/configurationPolicy/list");
    const query = (0, smithy_client_1.map)({
        [_NT]: [, input[_NT]],
        [_MR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
exports.se_ListConfigurationPoliciesCommand = se_ListConfigurationPoliciesCommand;
const se_ListConfigurationPolicyAssociationsCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/configurationPolicyAssociation/list");
    let body;
    body = JSON.stringify((0, smithy_client_1.take)(input, {
        Filters: (_) => (0, smithy_client_1._json)(_),
        MaxResults: [],
        NextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
exports.se_ListConfigurationPolicyAssociationsCommand = se_ListConfigurationPolicyAssociationsCommand;
const se_ListEnabledProductsForImportCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {};
    b.bp("/productSubscriptions");
    const query = (0, smithy_client_1.map)({
        [_NT]: [, input[_NT]],
        [_MR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
exports.se_ListEnabledProductsForImportCommand = se_ListEnabledProductsForImportCommand;
const se_ListFindingAggregatorsCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {};
    b.bp("/findingAggregator/list");
    const query = (0, smithy_client_1.map)({
        [_NT]: [, input[_NT]],
        [_MR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
exports.se_ListFindingAggregatorsCommand = se_ListFindingAggregatorsCommand;
const se_ListInvitationsCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {};
    b.bp("/invitations");
    const query = (0, smithy_client_1.map)({
        [_MR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_NT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
exports.se_ListInvitationsCommand = se_ListInvitationsCommand;
const se_ListMembersCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {};
    b.bp("/members");
    const query = (0, smithy_client_1.map)({
        [_OA]: [() => input.OnlyAssociated !== void 0, () => input[_OA].toString()],
        [_MR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_NT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
exports.se_ListMembersCommand = se_ListMembersCommand;
const se_ListOrganizationAdminAccountsCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {};
    b.bp("/organization/admin");
    const query = (0, smithy_client_1.map)({
        [_MR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_NT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
exports.se_ListOrganizationAdminAccountsCommand = se_ListOrganizationAdminAccountsCommand;
const se_ListSecurityControlDefinitionsCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {};
    b.bp("/securityControls/definitions");
    const query = (0, smithy_client_1.map)({
        [_SA]: [, input[_SA]],
        [_NT]: [, input[_NT]],
        [_MR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
exports.se_ListSecurityControlDefinitionsCommand = se_ListSecurityControlDefinitionsCommand;
const se_ListStandardsControlAssociationsCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {};
    b.bp("/associations");
    const query = (0, smithy_client_1.map)({
        [_SCI]: [, (0, smithy_client_1.expectNonNull)(input[_SCI], `SecurityControlId`)],
        [_NT]: [, input[_NT]],
        [_MR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
exports.se_ListStandardsControlAssociationsCommand = se_ListStandardsControlAssociationsCommand;
const se_ListTagsForResourceCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {};
    b.bp("/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
exports.se_ListTagsForResourceCommand = se_ListTagsForResourceCommand;
const se_StartConfigurationPolicyAssociationCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/configurationPolicyAssociation/associate");
    let body;
    body = JSON.stringify((0, smithy_client_1.take)(input, {
        ConfigurationPolicyIdentifier: [],
        Target: (_) => (0, smithy_client_1._json)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
exports.se_StartConfigurationPolicyAssociationCommand = se_StartConfigurationPolicyAssociationCommand;
const se_StartConfigurationPolicyDisassociationCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/configurationPolicyAssociation/disassociate");
    let body;
    body = JSON.stringify((0, smithy_client_1.take)(input, {
        ConfigurationPolicyIdentifier: [],
        Target: (_) => (0, smithy_client_1._json)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
exports.se_StartConfigurationPolicyDisassociationCommand = se_StartConfigurationPolicyDisassociationCommand;
const se_TagResourceCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    let body;
    body = JSON.stringify((0, smithy_client_1.take)(input, {
        Tags: (_) => (0, smithy_client_1._json)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
exports.se_TagResourceCommand = se_TagResourceCommand;
const se_UntagResourceCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {};
    b.bp("/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    const query = (0, smithy_client_1.map)({
        [_tK]: [
            (0, smithy_client_1.expectNonNull)(input.TagKeys, `TagKeys`) != null,
            () => (input[_TK] || []).map((_entry) => _entry),
        ],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
exports.se_UntagResourceCommand = se_UntagResourceCommand;
const se_UpdateActionTargetCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/actionTargets/{ActionTargetArn+}");
    b.p("ActionTargetArn", () => input.ActionTargetArn, "{ActionTargetArn+}", true);
    let body;
    body = JSON.stringify((0, smithy_client_1.take)(input, {
        Description: [],
        Name: [],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
exports.se_UpdateActionTargetCommand = se_UpdateActionTargetCommand;
const se_UpdateConfigurationPolicyCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/configurationPolicy/{Identifier}");
    b.p("Identifier", () => input.Identifier, "{Identifier}", false);
    let body;
    body = JSON.stringify((0, smithy_client_1.take)(input, {
        ConfigurationPolicy: (_) => se_Policy(_, context),
        Description: [],
        Name: [],
        UpdatedReason: [],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
exports.se_UpdateConfigurationPolicyCommand = se_UpdateConfigurationPolicyCommand;
const se_UpdateFindingAggregatorCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/findingAggregator/update");
    let body;
    body = JSON.stringify((0, smithy_client_1.take)(input, {
        FindingAggregatorArn: [],
        RegionLinkingMode: [],
        Regions: (_) => (0, smithy_client_1._json)(_),
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
exports.se_UpdateFindingAggregatorCommand = se_UpdateFindingAggregatorCommand;
const se_UpdateFindingsCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/findings");
    let body;
    body = JSON.stringify((0, smithy_client_1.take)(input, {
        Filters: (_) => se_AwsSecurityFindingFilters(_, context),
        Note: (_) => (0, smithy_client_1._json)(_),
        RecordState: [],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
exports.se_UpdateFindingsCommand = se_UpdateFindingsCommand;
const se_UpdateInsightCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/insights/{InsightArn+}");
    b.p("InsightArn", () => input.InsightArn, "{InsightArn+}", true);
    let body;
    body = JSON.stringify((0, smithy_client_1.take)(input, {
        Filters: (_) => se_AwsSecurityFindingFilters(_, context),
        GroupByAttribute: [],
        Name: [],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
exports.se_UpdateInsightCommand = se_UpdateInsightCommand;
const se_UpdateOrganizationConfigurationCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/organization/configuration");
    let body;
    body = JSON.stringify((0, smithy_client_1.take)(input, {
        AutoEnable: [],
        AutoEnableStandards: [],
        OrganizationConfiguration: (_) => (0, smithy_client_1._json)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
exports.se_UpdateOrganizationConfigurationCommand = se_UpdateOrganizationConfigurationCommand;
const se_UpdateSecurityControlCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/securityControl/update");
    let body;
    body = JSON.stringify((0, smithy_client_1.take)(input, {
        LastUpdateReason: [],
        Parameters: (_) => se_Parameters(_, context),
        SecurityControlId: [],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
exports.se_UpdateSecurityControlCommand = se_UpdateSecurityControlCommand;
const se_UpdateSecurityHubConfigurationCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts");
    let body;
    body = JSON.stringify((0, smithy_client_1.take)(input, {
        AutoEnableControls: [],
        ControlFindingGenerator: [],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
exports.se_UpdateSecurityHubConfigurationCommand = se_UpdateSecurityHubConfigurationCommand;
const se_UpdateStandardsControlCommand = async (input, context) => {
    const b = (0, core_2.requestBuilder)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/standards/control/{StandardsControlArn+}");
    b.p("StandardsControlArn", () => input.StandardsControlArn, "{StandardsControlArn+}", true);
    let body;
    body = JSON.stringify((0, smithy_client_1.take)(input, {
        ControlStatus: [],
        DisabledReason: [],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
exports.se_UpdateStandardsControlCommand = se_UpdateStandardsControlCommand;
const de_AcceptAdministratorInvitationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_AcceptAdministratorInvitationCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    await (0, smithy_client_1.collectBody)(output.body, context);
    return contents;
};
exports.de_AcceptAdministratorInvitationCommand = de_AcceptAdministratorInvitationCommand;
const de_AcceptAdministratorInvitationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.securityhub#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_AcceptInvitationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_AcceptInvitationCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    await (0, smithy_client_1.collectBody)(output.body, context);
    return contents;
};
exports.de_AcceptInvitationCommand = de_AcceptInvitationCommand;
const de_AcceptInvitationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.securityhub#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_BatchDeleteAutomationRulesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_BatchDeleteAutomationRulesCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        ProcessedAutomationRules: smithy_client_1._json,
        UnprocessedAutomationRules: smithy_client_1._json,
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_BatchDeleteAutomationRulesCommand = de_BatchDeleteAutomationRulesCommand;
const de_BatchDeleteAutomationRulesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.securityhub#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_BatchDisableStandardsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_BatchDisableStandardsCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        StandardsSubscriptions: smithy_client_1._json,
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_BatchDisableStandardsCommand = de_BatchDisableStandardsCommand;
const de_BatchDisableStandardsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.securityhub#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_BatchEnableStandardsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_BatchEnableStandardsCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        StandardsSubscriptions: smithy_client_1._json,
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_BatchEnableStandardsCommand = de_BatchEnableStandardsCommand;
const de_BatchEnableStandardsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.securityhub#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_BatchGetAutomationRulesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_BatchGetAutomationRulesCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        Rules: (_) => de_AutomationRulesConfigList(_, context),
        UnprocessedAutomationRules: smithy_client_1._json,
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_BatchGetAutomationRulesCommand = de_BatchGetAutomationRulesCommand;
const de_BatchGetAutomationRulesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.securityhub#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.securityhub#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_BatchGetConfigurationPolicyAssociationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_BatchGetConfigurationPolicyAssociationsCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        ConfigurationPolicyAssociations: (_) => de_ConfigurationPolicyAssociationList(_, context),
        UnprocessedConfigurationPolicyAssociations: smithy_client_1._json,
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_BatchGetConfigurationPolicyAssociationsCommand = de_BatchGetConfigurationPolicyAssociationsCommand;
const de_BatchGetConfigurationPolicyAssociationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.securityhub#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.securityhub#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_BatchGetSecurityControlsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_BatchGetSecurityControlsCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        SecurityControls: (_) => de_SecurityControls(_, context),
        UnprocessedIds: smithy_client_1._json,
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_BatchGetSecurityControlsCommand = de_BatchGetSecurityControlsCommand;
const de_BatchGetSecurityControlsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_BatchGetStandardsControlAssociationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_BatchGetStandardsControlAssociationsCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        StandardsControlAssociationDetails: (_) => de_StandardsControlAssociationDetails(_, context),
        UnprocessedAssociations: smithy_client_1._json,
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_BatchGetStandardsControlAssociationsCommand = de_BatchGetStandardsControlAssociationsCommand;
const de_BatchGetStandardsControlAssociationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_BatchImportFindingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_BatchImportFindingsCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        FailedCount: smithy_client_1.expectInt32,
        FailedFindings: smithy_client_1._json,
        SuccessCount: smithy_client_1.expectInt32,
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_BatchImportFindingsCommand = de_BatchImportFindingsCommand;
const de_BatchImportFindingsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_BatchUpdateAutomationRulesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_BatchUpdateAutomationRulesCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        ProcessedAutomationRules: smithy_client_1._json,
        UnprocessedAutomationRules: smithy_client_1._json,
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_BatchUpdateAutomationRulesCommand = de_BatchUpdateAutomationRulesCommand;
const de_BatchUpdateAutomationRulesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.securityhub#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_BatchUpdateFindingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_BatchUpdateFindingsCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        ProcessedFindings: smithy_client_1._json,
        UnprocessedFindings: smithy_client_1._json,
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_BatchUpdateFindingsCommand = de_BatchUpdateFindingsCommand;
const de_BatchUpdateFindingsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_BatchUpdateStandardsControlAssociationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_BatchUpdateStandardsControlAssociationsCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        UnprocessedAssociationUpdates: smithy_client_1._json,
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_BatchUpdateStandardsControlAssociationsCommand = de_BatchUpdateStandardsControlAssociationsCommand;
const de_BatchUpdateStandardsControlAssociationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.securityhub#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreateActionTargetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CreateActionTargetCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        ActionTargetArn: smithy_client_1.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_CreateActionTargetCommand = de_CreateActionTargetCommand;
const de_CreateActionTargetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.securityhub#ResourceConflictException":
            throw await de_ResourceConflictExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreateAutomationRuleCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CreateAutomationRuleCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        RuleArn: smithy_client_1.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_CreateAutomationRuleCommand = de_CreateAutomationRuleCommand;
const de_CreateAutomationRuleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.securityhub#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreateConfigurationPolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CreateConfigurationPolicyCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        Arn: smithy_client_1.expectString,
        ConfigurationPolicy: (_) => de_Policy((0, core_1.awsExpectUnion)(_), context),
        CreatedAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_)),
        Description: smithy_client_1.expectString,
        Id: smithy_client_1.expectString,
        Name: smithy_client_1.expectString,
        UpdatedAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_)),
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_CreateConfigurationPolicyCommand = de_CreateConfigurationPolicyCommand;
const de_CreateConfigurationPolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.securityhub#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.securityhub#ResourceConflictException":
            throw await de_ResourceConflictExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreateFindingAggregatorCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CreateFindingAggregatorCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        FindingAggregationRegion: smithy_client_1.expectString,
        FindingAggregatorArn: smithy_client_1.expectString,
        RegionLinkingMode: smithy_client_1.expectString,
        Regions: smithy_client_1._json,
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_CreateFindingAggregatorCommand = de_CreateFindingAggregatorCommand;
const de_CreateFindingAggregatorCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.securityhub#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreateInsightCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CreateInsightCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        InsightArn: smithy_client_1.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_CreateInsightCommand = de_CreateInsightCommand;
const de_CreateInsightCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.securityhub#ResourceConflictException":
            throw await de_ResourceConflictExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreateMembersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CreateMembersCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        UnprocessedAccounts: smithy_client_1._json,
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_CreateMembersCommand = de_CreateMembersCommand;
const de_CreateMembersCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.securityhub#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.securityhub#ResourceConflictException":
            throw await de_ResourceConflictExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeclineInvitationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_DeclineInvitationsCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        UnprocessedAccounts: smithy_client_1._json,
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_DeclineInvitationsCommand = de_DeclineInvitationsCommand;
const de_DeclineInvitationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.securityhub#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteActionTargetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_DeleteActionTargetCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        ActionTargetArn: smithy_client_1.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_DeleteActionTargetCommand = de_DeleteActionTargetCommand;
const de_DeleteActionTargetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.securityhub#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteConfigurationPolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_DeleteConfigurationPolicyCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    await (0, smithy_client_1.collectBody)(output.body, context);
    return contents;
};
exports.de_DeleteConfigurationPolicyCommand = de_DeleteConfigurationPolicyCommand;
const de_DeleteConfigurationPolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.securityhub#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.securityhub#ResourceConflictException":
            throw await de_ResourceConflictExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.securityhub#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteFindingAggregatorCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_DeleteFindingAggregatorCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    await (0, smithy_client_1.collectBody)(output.body, context);
    return contents;
};
exports.de_DeleteFindingAggregatorCommand = de_DeleteFindingAggregatorCommand;
const de_DeleteFindingAggregatorCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.securityhub#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.securityhub#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteInsightCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_DeleteInsightCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        InsightArn: smithy_client_1.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_DeleteInsightCommand = de_DeleteInsightCommand;
const de_DeleteInsightCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.securityhub#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteInvitationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_DeleteInvitationsCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        UnprocessedAccounts: smithy_client_1._json,
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_DeleteInvitationsCommand = de_DeleteInvitationsCommand;
const de_DeleteInvitationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.securityhub#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteMembersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_DeleteMembersCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        UnprocessedAccounts: smithy_client_1._json,
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_DeleteMembersCommand = de_DeleteMembersCommand;
const de_DeleteMembersCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.securityhub#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DescribeActionTargetsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_DescribeActionTargetsCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        ActionTargets: smithy_client_1._json,
        NextToken: smithy_client_1.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_DescribeActionTargetsCommand = de_DescribeActionTargetsCommand;
const de_DescribeActionTargetsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.securityhub#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DescribeHubCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_DescribeHubCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        AutoEnableControls: smithy_client_1.expectBoolean,
        ControlFindingGenerator: smithy_client_1.expectString,
        HubArn: smithy_client_1.expectString,
        SubscribedAt: smithy_client_1.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_DescribeHubCommand = de_DescribeHubCommand;
const de_DescribeHubCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.securityhub#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DescribeOrganizationConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_DescribeOrganizationConfigurationCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        AutoEnable: smithy_client_1.expectBoolean,
        AutoEnableStandards: smithy_client_1.expectString,
        MemberAccountLimitReached: smithy_client_1.expectBoolean,
        OrganizationConfiguration: smithy_client_1._json,
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_DescribeOrganizationConfigurationCommand = de_DescribeOrganizationConfigurationCommand;
const de_DescribeOrganizationConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DescribeProductsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_DescribeProductsCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        NextToken: smithy_client_1.expectString,
        Products: smithy_client_1._json,
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_DescribeProductsCommand = de_DescribeProductsCommand;
const de_DescribeProductsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DescribeStandardsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_DescribeStandardsCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        NextToken: smithy_client_1.expectString,
        Standards: smithy_client_1._json,
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_DescribeStandardsCommand = de_DescribeStandardsCommand;
const de_DescribeStandardsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DescribeStandardsControlsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_DescribeStandardsControlsCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        Controls: (_) => de_StandardsControls(_, context),
        NextToken: smithy_client_1.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_DescribeStandardsControlsCommand = de_DescribeStandardsControlsCommand;
const de_DescribeStandardsControlsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.securityhub#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DisableImportFindingsForProductCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_DisableImportFindingsForProductCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    await (0, smithy_client_1.collectBody)(output.body, context);
    return contents;
};
exports.de_DisableImportFindingsForProductCommand = de_DisableImportFindingsForProductCommand;
const de_DisableImportFindingsForProductCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.securityhub#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DisableOrganizationAdminAccountCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_DisableOrganizationAdminAccountCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    await (0, smithy_client_1.collectBody)(output.body, context);
    return contents;
};
exports.de_DisableOrganizationAdminAccountCommand = de_DisableOrganizationAdminAccountCommand;
const de_DisableOrganizationAdminAccountCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.securityhub#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DisableSecurityHubCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_DisableSecurityHubCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    await (0, smithy_client_1.collectBody)(output.body, context);
    return contents;
};
exports.de_DisableSecurityHubCommand = de_DisableSecurityHubCommand;
const de_DisableSecurityHubCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.securityhub#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.securityhub#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DisassociateFromAdministratorAccountCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_DisassociateFromAdministratorAccountCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    await (0, smithy_client_1.collectBody)(output.body, context);
    return contents;
};
exports.de_DisassociateFromAdministratorAccountCommand = de_DisassociateFromAdministratorAccountCommand;
const de_DisassociateFromAdministratorAccountCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.securityhub#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DisassociateFromMasterAccountCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_DisassociateFromMasterAccountCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    await (0, smithy_client_1.collectBody)(output.body, context);
    return contents;
};
exports.de_DisassociateFromMasterAccountCommand = de_DisassociateFromMasterAccountCommand;
const de_DisassociateFromMasterAccountCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.securityhub#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DisassociateMembersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_DisassociateMembersCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    await (0, smithy_client_1.collectBody)(output.body, context);
    return contents;
};
exports.de_DisassociateMembersCommand = de_DisassociateMembersCommand;
const de_DisassociateMembersCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.securityhub#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.securityhub#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_EnableImportFindingsForProductCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_EnableImportFindingsForProductCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        ProductSubscriptionArn: smithy_client_1.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_EnableImportFindingsForProductCommand = de_EnableImportFindingsForProductCommand;
const de_EnableImportFindingsForProductCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.securityhub#ResourceConflictException":
            throw await de_ResourceConflictExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_EnableOrganizationAdminAccountCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_EnableOrganizationAdminAccountCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    await (0, smithy_client_1.collectBody)(output.body, context);
    return contents;
};
exports.de_EnableOrganizationAdminAccountCommand = de_EnableOrganizationAdminAccountCommand;
const de_EnableOrganizationAdminAccountCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.securityhub#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_EnableSecurityHubCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_EnableSecurityHubCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    await (0, smithy_client_1.collectBody)(output.body, context);
    return contents;
};
exports.de_EnableSecurityHubCommand = de_EnableSecurityHubCommand;
const de_EnableSecurityHubCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.securityhub#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.securityhub#ResourceConflictException":
            throw await de_ResourceConflictExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetAdministratorAccountCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetAdministratorAccountCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        Administrator: (_) => de_Invitation(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_GetAdministratorAccountCommand = de_GetAdministratorAccountCommand;
const de_GetAdministratorAccountCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.securityhub#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetConfigurationPolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetConfigurationPolicyCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        Arn: smithy_client_1.expectString,
        ConfigurationPolicy: (_) => de_Policy((0, core_1.awsExpectUnion)(_), context),
        CreatedAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_)),
        Description: smithy_client_1.expectString,
        Id: smithy_client_1.expectString,
        Name: smithy_client_1.expectString,
        UpdatedAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_)),
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_GetConfigurationPolicyCommand = de_GetConfigurationPolicyCommand;
const de_GetConfigurationPolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.securityhub#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.securityhub#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetConfigurationPolicyAssociationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetConfigurationPolicyAssociationCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        AssociationStatus: smithy_client_1.expectString,
        AssociationStatusMessage: smithy_client_1.expectString,
        AssociationType: smithy_client_1.expectString,
        ConfigurationPolicyId: smithy_client_1.expectString,
        TargetId: smithy_client_1.expectString,
        TargetType: smithy_client_1.expectString,
        UpdatedAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_)),
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_GetConfigurationPolicyAssociationCommand = de_GetConfigurationPolicyAssociationCommand;
const de_GetConfigurationPolicyAssociationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.securityhub#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.securityhub#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetEnabledStandardsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetEnabledStandardsCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        NextToken: smithy_client_1.expectString,
        StandardsSubscriptions: smithy_client_1._json,
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_GetEnabledStandardsCommand = de_GetEnabledStandardsCommand;
const de_GetEnabledStandardsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetFindingAggregatorCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetFindingAggregatorCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        FindingAggregationRegion: smithy_client_1.expectString,
        FindingAggregatorArn: smithy_client_1.expectString,
        RegionLinkingMode: smithy_client_1.expectString,
        Regions: smithy_client_1._json,
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_GetFindingAggregatorCommand = de_GetFindingAggregatorCommand;
const de_GetFindingAggregatorCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.securityhub#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.securityhub#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetFindingHistoryCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetFindingHistoryCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        NextToken: smithy_client_1.expectString,
        Records: (_) => de_FindingHistoryRecordList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_GetFindingHistoryCommand = de_GetFindingHistoryCommand;
const de_GetFindingHistoryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetFindingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetFindingsCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        Findings: (_) => de_AwsSecurityFindingList(_, context),
        NextToken: smithy_client_1.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_GetFindingsCommand = de_GetFindingsCommand;
const de_GetFindingsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetInsightResultsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetInsightResultsCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        InsightResults: smithy_client_1._json,
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_GetInsightResultsCommand = de_GetInsightResultsCommand;
const de_GetInsightResultsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.securityhub#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetInsightsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetInsightsCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        Insights: (_) => de_InsightList(_, context),
        NextToken: smithy_client_1.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_GetInsightsCommand = de_GetInsightsCommand;
const de_GetInsightsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.securityhub#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetInvitationsCountCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetInvitationsCountCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        InvitationsCount: smithy_client_1.expectInt32,
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_GetInvitationsCountCommand = de_GetInvitationsCountCommand;
const de_GetInvitationsCountCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetMasterAccountCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetMasterAccountCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        Master: (_) => de_Invitation(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_GetMasterAccountCommand = de_GetMasterAccountCommand;
const de_GetMasterAccountCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.securityhub#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetMembersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetMembersCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        Members: (_) => de_MemberList(_, context),
        UnprocessedAccounts: smithy_client_1._json,
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_GetMembersCommand = de_GetMembersCommand;
const de_GetMembersCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.securityhub#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetSecurityControlDefinitionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetSecurityControlDefinitionCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        SecurityControlDefinition: (_) => de_SecurityControlDefinition(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_GetSecurityControlDefinitionCommand = de_GetSecurityControlDefinitionCommand;
const de_GetSecurityControlDefinitionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.securityhub#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_InviteMembersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_InviteMembersCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        UnprocessedAccounts: smithy_client_1._json,
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_InviteMembersCommand = de_InviteMembersCommand;
const de_InviteMembersCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.securityhub#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListAutomationRulesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListAutomationRulesCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        AutomationRulesMetadata: (_) => de_AutomationRulesMetadataList(_, context),
        NextToken: smithy_client_1.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_ListAutomationRulesCommand = de_ListAutomationRulesCommand;
const de_ListAutomationRulesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.securityhub#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListConfigurationPoliciesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListConfigurationPoliciesCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        ConfigurationPolicySummaries: (_) => de_ConfigurationPolicySummaryList(_, context),
        NextToken: smithy_client_1.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_ListConfigurationPoliciesCommand = de_ListConfigurationPoliciesCommand;
const de_ListConfigurationPoliciesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.securityhub#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListConfigurationPolicyAssociationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListConfigurationPolicyAssociationsCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        ConfigurationPolicyAssociationSummaries: (_) => de_ConfigurationPolicyAssociationSummaryList(_, context),
        NextToken: smithy_client_1.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_ListConfigurationPolicyAssociationsCommand = de_ListConfigurationPolicyAssociationsCommand;
const de_ListConfigurationPolicyAssociationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.securityhub#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListEnabledProductsForImportCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListEnabledProductsForImportCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        NextToken: smithy_client_1.expectString,
        ProductSubscriptions: smithy_client_1._json,
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_ListEnabledProductsForImportCommand = de_ListEnabledProductsForImportCommand;
const de_ListEnabledProductsForImportCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListFindingAggregatorsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListFindingAggregatorsCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        FindingAggregators: smithy_client_1._json,
        NextToken: smithy_client_1.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_ListFindingAggregatorsCommand = de_ListFindingAggregatorsCommand;
const de_ListFindingAggregatorsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.securityhub#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListInvitationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListInvitationsCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        Invitations: (_) => de_InvitationList(_, context),
        NextToken: smithy_client_1.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_ListInvitationsCommand = de_ListInvitationsCommand;
const de_ListInvitationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListMembersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListMembersCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        Members: (_) => de_MemberList(_, context),
        NextToken: smithy_client_1.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_ListMembersCommand = de_ListMembersCommand;
const de_ListMembersCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListOrganizationAdminAccountsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListOrganizationAdminAccountsCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        AdminAccounts: smithy_client_1._json,
        NextToken: smithy_client_1.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_ListOrganizationAdminAccountsCommand = de_ListOrganizationAdminAccountsCommand;
const de_ListOrganizationAdminAccountsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListSecurityControlDefinitionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListSecurityControlDefinitionsCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        NextToken: smithy_client_1.expectString,
        SecurityControlDefinitions: (_) => de_SecurityControlDefinitions(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_ListSecurityControlDefinitionsCommand = de_ListSecurityControlDefinitionsCommand;
const de_ListSecurityControlDefinitionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListStandardsControlAssociationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListStandardsControlAssociationsCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        NextToken: smithy_client_1.expectString,
        StandardsControlAssociationSummaries: (_) => de_StandardsControlAssociationSummaries(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_ListStandardsControlAssociationsCommand = de_ListStandardsControlAssociationsCommand;
const de_ListStandardsControlAssociationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListTagsForResourceCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        Tags: smithy_client_1._json,
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_ListTagsForResourceCommand = de_ListTagsForResourceCommand;
const de_ListTagsForResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.securityhub#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_StartConfigurationPolicyAssociationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_StartConfigurationPolicyAssociationCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        AssociationStatus: smithy_client_1.expectString,
        AssociationStatusMessage: smithy_client_1.expectString,
        AssociationType: smithy_client_1.expectString,
        ConfigurationPolicyId: smithy_client_1.expectString,
        TargetId: smithy_client_1.expectString,
        TargetType: smithy_client_1.expectString,
        UpdatedAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_)),
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_StartConfigurationPolicyAssociationCommand = de_StartConfigurationPolicyAssociationCommand;
const de_StartConfigurationPolicyAssociationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.securityhub#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.securityhub#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_StartConfigurationPolicyDisassociationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_StartConfigurationPolicyDisassociationCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    await (0, smithy_client_1.collectBody)(output.body, context);
    return contents;
};
exports.de_StartConfigurationPolicyDisassociationCommand = de_StartConfigurationPolicyDisassociationCommand;
const de_StartConfigurationPolicyDisassociationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.securityhub#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.securityhub#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_TagResourceCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    await (0, smithy_client_1.collectBody)(output.body, context);
    return contents;
};
exports.de_TagResourceCommand = de_TagResourceCommand;
const de_TagResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.securityhub#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_UntagResourceCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    await (0, smithy_client_1.collectBody)(output.body, context);
    return contents;
};
exports.de_UntagResourceCommand = de_UntagResourceCommand;
const de_UntagResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.securityhub#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UpdateActionTargetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_UpdateActionTargetCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    await (0, smithy_client_1.collectBody)(output.body, context);
    return contents;
};
exports.de_UpdateActionTargetCommand = de_UpdateActionTargetCommand;
const de_UpdateActionTargetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.securityhub#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UpdateConfigurationPolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_UpdateConfigurationPolicyCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        Arn: smithy_client_1.expectString,
        ConfigurationPolicy: (_) => de_Policy((0, core_1.awsExpectUnion)(_), context),
        CreatedAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_)),
        Description: smithy_client_1.expectString,
        Id: smithy_client_1.expectString,
        Name: smithy_client_1.expectString,
        UpdatedAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_)),
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_UpdateConfigurationPolicyCommand = de_UpdateConfigurationPolicyCommand;
const de_UpdateConfigurationPolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.securityhub#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.securityhub#ResourceConflictException":
            throw await de_ResourceConflictExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.securityhub#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UpdateFindingAggregatorCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_UpdateFindingAggregatorCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        FindingAggregationRegion: smithy_client_1.expectString,
        FindingAggregatorArn: smithy_client_1.expectString,
        RegionLinkingMode: smithy_client_1.expectString,
        Regions: smithy_client_1._json,
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_UpdateFindingAggregatorCommand = de_UpdateFindingAggregatorCommand;
const de_UpdateFindingAggregatorCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.securityhub#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.securityhub#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UpdateFindingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_UpdateFindingsCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    await (0, smithy_client_1.collectBody)(output.body, context);
    return contents;
};
exports.de_UpdateFindingsCommand = de_UpdateFindingsCommand;
const de_UpdateFindingsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.securityhub#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UpdateInsightCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_UpdateInsightCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    await (0, smithy_client_1.collectBody)(output.body, context);
    return contents;
};
exports.de_UpdateInsightCommand = de_UpdateInsightCommand;
const de_UpdateInsightCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.securityhub#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UpdateOrganizationConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_UpdateOrganizationConfigurationCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    await (0, smithy_client_1.collectBody)(output.body, context);
    return contents;
};
exports.de_UpdateOrganizationConfigurationCommand = de_UpdateOrganizationConfigurationCommand;
const de_UpdateOrganizationConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.securityhub#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.securityhub#ResourceConflictException":
            throw await de_ResourceConflictExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.securityhub#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UpdateSecurityControlCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_UpdateSecurityControlCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    await (0, smithy_client_1.collectBody)(output.body, context);
    return contents;
};
exports.de_UpdateSecurityControlCommand = de_UpdateSecurityControlCommand;
const de_UpdateSecurityControlCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.securityhub#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.securityhub#ResourceInUseException":
            throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.securityhub#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UpdateSecurityHubConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_UpdateSecurityHubConfigurationCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    await (0, smithy_client_1.collectBody)(output.body, context);
    return contents;
};
exports.de_UpdateSecurityHubConfigurationCommand = de_UpdateSecurityHubConfigurationCommand;
const de_UpdateSecurityHubConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.securityhub#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.securityhub#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UpdateStandardsControlCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_UpdateStandardsControlCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    await (0, smithy_client_1.collectBody)(output.body, context);
    return contents;
};
exports.de_UpdateStandardsControlCommand = de_UpdateStandardsControlCommand;
const de_UpdateStandardsControlCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.securityhub#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.securityhub#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = (0, smithy_client_1.withBaseException)(SecurityHubServiceException_1.SecurityHubServiceException);
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body;
    const doc = (0, smithy_client_1.take)(data, {
        Code: smithy_client_1.expectString,
        Message: smithy_client_1.expectString,
    });
    Object.assign(contents, doc);
    const exception = new models_0_1.AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const de_InternalExceptionRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body;
    const doc = (0, smithy_client_1.take)(data, {
        Code: smithy_client_1.expectString,
        Message: smithy_client_1.expectString,
    });
    Object.assign(contents, doc);
    const exception = new models_0_1.InternalException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const de_InvalidAccessExceptionRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body;
    const doc = (0, smithy_client_1.take)(data, {
        Code: smithy_client_1.expectString,
        Message: smithy_client_1.expectString,
    });
    Object.assign(contents, doc);
    const exception = new models_0_1.InvalidAccessException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const de_InvalidInputExceptionRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body;
    const doc = (0, smithy_client_1.take)(data, {
        Code: smithy_client_1.expectString,
        Message: smithy_client_1.expectString,
    });
    Object.assign(contents, doc);
    const exception = new models_0_1.InvalidInputException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const de_LimitExceededExceptionRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body;
    const doc = (0, smithy_client_1.take)(data, {
        Code: smithy_client_1.expectString,
        Message: smithy_client_1.expectString,
    });
    Object.assign(contents, doc);
    const exception = new models_0_1.LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const de_ResourceConflictExceptionRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body;
    const doc = (0, smithy_client_1.take)(data, {
        Code: smithy_client_1.expectString,
        Message: smithy_client_1.expectString,
    });
    Object.assign(contents, doc);
    const exception = new models_2_1.ResourceConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const de_ResourceInUseExceptionRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body;
    const doc = (0, smithy_client_1.take)(data, {
        Code: smithy_client_1.expectString,
        Message: smithy_client_1.expectString,
    });
    Object.assign(contents, doc);
    const exception = new models_2_1.ResourceInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body;
    const doc = (0, smithy_client_1.take)(data, {
        Code: smithy_client_1.expectString,
        Message: smithy_client_1.expectString,
    });
    Object.assign(contents, doc);
    const exception = new models_0_1.ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const se_Action = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        ActionType: [],
        AwsApiCallAction: (_) => se_AwsApiCallAction(_, context),
        DnsRequestAction: smithy_client_1._json,
        NetworkConnectionAction: (_) => se_NetworkConnectionAction(_, context),
        PortProbeAction: (_) => se_PortProbeAction(_, context),
    });
};
const se_ActionList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_AutomationRulesAction(entry, context);
    });
};
const se_ActionRemoteIpDetails = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        City: smithy_client_1._json,
        Country: smithy_client_1._json,
        GeoLocation: (_) => se_GeoLocation(_, context),
        IpAddressV4: [],
        Organization: smithy_client_1._json,
    });
};
const se_AutomationRulesAction = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        FindingFieldsUpdate: (_) => se_AutomationRulesFindingFieldsUpdate(_, context),
        Type: [],
    });
};
const se_AutomationRulesFindingFieldsUpdate = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        Confidence: [],
        Criticality: [],
        Note: smithy_client_1._json,
        RelatedFindings: smithy_client_1._json,
        Severity: (_) => se_SeverityUpdate(_, context),
        Types: smithy_client_1._json,
        UserDefinedFields: smithy_client_1._json,
        VerificationState: [],
        Workflow: smithy_client_1._json,
    });
};
const se_AutomationRulesFindingFilters = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        AwsAccountId: smithy_client_1._json,
        AwsAccountName: smithy_client_1._json,
        CompanyName: smithy_client_1._json,
        ComplianceAssociatedStandardsId: smithy_client_1._json,
        ComplianceSecurityControlId: smithy_client_1._json,
        ComplianceStatus: smithy_client_1._json,
        Confidence: (_) => se_NumberFilterList(_, context),
        CreatedAt: smithy_client_1._json,
        Criticality: (_) => se_NumberFilterList(_, context),
        Description: smithy_client_1._json,
        FirstObservedAt: smithy_client_1._json,
        GeneratorId: smithy_client_1._json,
        Id: smithy_client_1._json,
        LastObservedAt: smithy_client_1._json,
        NoteText: smithy_client_1._json,
        NoteUpdatedAt: smithy_client_1._json,
        NoteUpdatedBy: smithy_client_1._json,
        ProductArn: smithy_client_1._json,
        ProductName: smithy_client_1._json,
        RecordState: smithy_client_1._json,
        RelatedFindingsId: smithy_client_1._json,
        RelatedFindingsProductArn: smithy_client_1._json,
        ResourceApplicationArn: smithy_client_1._json,
        ResourceApplicationName: smithy_client_1._json,
        ResourceDetailsOther: smithy_client_1._json,
        ResourceId: smithy_client_1._json,
        ResourcePartition: smithy_client_1._json,
        ResourceRegion: smithy_client_1._json,
        ResourceTags: smithy_client_1._json,
        ResourceType: smithy_client_1._json,
        SeverityLabel: smithy_client_1._json,
        SourceUrl: smithy_client_1._json,
        Title: smithy_client_1._json,
        Type: smithy_client_1._json,
        UpdatedAt: smithy_client_1._json,
        UserDefinedFields: smithy_client_1._json,
        VerificationState: smithy_client_1._json,
        WorkflowStatus: smithy_client_1._json,
    });
};
const se_AwsApiCallAction = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        AffectedResources: smithy_client_1._json,
        Api: [],
        CallerType: [],
        DomainDetails: smithy_client_1._json,
        FirstSeen: [],
        LastSeen: [],
        RemoteIpDetails: (_) => se_ActionRemoteIpDetails(_, context),
        ServiceName: [],
    });
};
const se_AwsApiGatewayCanarySettings = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        DeploymentId: [],
        PercentTraffic: smithy_client_1.serializeFloat,
        StageVariableOverrides: smithy_client_1._json,
        UseStageCache: [],
    });
};
const se_AwsApiGatewayMethodSettings = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        CacheDataEncrypted: [],
        CacheTtlInSeconds: [],
        CachingEnabled: [],
        DataTraceEnabled: [],
        HttpMethod: [],
        LoggingLevel: [],
        MetricsEnabled: [],
        RequireAuthorizationForCacheControl: [],
        ResourcePath: [],
        ThrottlingBurstLimit: [],
        ThrottlingRateLimit: smithy_client_1.serializeFloat,
        UnauthorizedCacheControlHeaderStrategy: [],
    });
};
const se_AwsApiGatewayMethodSettingsList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_AwsApiGatewayMethodSettings(entry, context);
    });
};
const se_AwsApiGatewayStageDetails = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        AccessLogSettings: smithy_client_1._json,
        CacheClusterEnabled: [],
        CacheClusterSize: [],
        CacheClusterStatus: [],
        CanarySettings: (_) => se_AwsApiGatewayCanarySettings(_, context),
        ClientCertificateId: [],
        CreatedDate: [],
        DeploymentId: [],
        Description: [],
        DocumentationVersion: [],
        LastUpdatedDate: [],
        MethodSettings: (_) => se_AwsApiGatewayMethodSettingsList(_, context),
        StageName: [],
        TracingEnabled: [],
        Variables: smithy_client_1._json,
        WebAclArn: [],
    });
};
const se_AwsApiGatewayV2RouteSettings = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        DataTraceEnabled: [],
        DetailedMetricsEnabled: [],
        LoggingLevel: [],
        ThrottlingBurstLimit: [],
        ThrottlingRateLimit: smithy_client_1.serializeFloat,
    });
};
const se_AwsApiGatewayV2StageDetails = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        AccessLogSettings: smithy_client_1._json,
        ApiGatewayManaged: [],
        AutoDeploy: [],
        ClientCertificateId: [],
        CreatedDate: [],
        DefaultRouteSettings: (_) => se_AwsApiGatewayV2RouteSettings(_, context),
        DeploymentId: [],
        Description: [],
        LastDeploymentStatusMessage: [],
        LastUpdatedDate: [],
        RouteSettings: (_) => se_AwsApiGatewayV2RouteSettings(_, context),
        StageName: [],
        StageVariables: smithy_client_1._json,
    });
};
const se_AwsCloudWatchAlarmDetails = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        ActionsEnabled: [],
        AlarmActions: smithy_client_1._json,
        AlarmArn: [],
        AlarmConfigurationUpdatedTimestamp: [],
        AlarmDescription: [],
        AlarmName: [],
        ComparisonOperator: [],
        DatapointsToAlarm: [],
        Dimensions: smithy_client_1._json,
        EvaluateLowSampleCountPercentile: [],
        EvaluationPeriods: [],
        ExtendedStatistic: [],
        InsufficientDataActions: smithy_client_1._json,
        MetricName: [],
        Namespace: [],
        OkActions: smithy_client_1._json,
        Period: [],
        Statistic: [],
        Threshold: smithy_client_1.serializeFloat,
        ThresholdMetricId: [],
        TreatMissingData: [],
        Unit: [],
    });
};
const se_AwsEc2LaunchTemplateDataDetails = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        BlockDeviceMappingSet: smithy_client_1._json,
        CapacityReservationSpecification: smithy_client_1._json,
        CpuOptions: smithy_client_1._json,
        CreditSpecification: smithy_client_1._json,
        DisableApiStop: [],
        DisableApiTermination: [],
        EbsOptimized: [],
        ElasticGpuSpecificationSet: smithy_client_1._json,
        ElasticInferenceAcceleratorSet: smithy_client_1._json,
        EnclaveOptions: smithy_client_1._json,
        HibernationOptions: smithy_client_1._json,
        IamInstanceProfile: smithy_client_1._json,
        ImageId: [],
        InstanceInitiatedShutdownBehavior: [],
        InstanceMarketOptions: smithy_client_1._json,
        InstanceRequirements: (_) => se_AwsEc2LaunchTemplateDataInstanceRequirementsDetails(_, context),
        InstanceType: [],
        KernelId: [],
        KeyName: [],
        LicenseSet: smithy_client_1._json,
        MaintenanceOptions: smithy_client_1._json,
        MetadataOptions: smithy_client_1._json,
        Monitoring: smithy_client_1._json,
        NetworkInterfaceSet: smithy_client_1._json,
        Placement: smithy_client_1._json,
        PrivateDnsNameOptions: smithy_client_1._json,
        RamDiskId: [],
        SecurityGroupIdSet: smithy_client_1._json,
        SecurityGroupSet: smithy_client_1._json,
        UserData: [],
    });
};
const se_AwsEc2LaunchTemplateDataInstanceRequirementsDetails = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        AcceleratorCount: smithy_client_1._json,
        AcceleratorManufacturers: smithy_client_1._json,
        AcceleratorNames: smithy_client_1._json,
        AcceleratorTotalMemoryMiB: smithy_client_1._json,
        AcceleratorTypes: smithy_client_1._json,
        BareMetal: [],
        BaselineEbsBandwidthMbps: smithy_client_1._json,
        BurstablePerformance: [],
        CpuManufacturers: smithy_client_1._json,
        ExcludedInstanceTypes: smithy_client_1._json,
        InstanceGenerations: smithy_client_1._json,
        LocalStorage: [],
        LocalStorageTypes: smithy_client_1._json,
        MemoryGiBPerVCpu: (_) => se_AwsEc2LaunchTemplateDataInstanceRequirementsMemoryGiBPerVCpuDetails(_, context),
        MemoryMiB: smithy_client_1._json,
        NetworkInterfaceCount: smithy_client_1._json,
        OnDemandMaxPricePercentageOverLowestPrice: [],
        RequireHibernateSupport: [],
        SpotMaxPricePercentageOverLowestPrice: [],
        TotalLocalStorageGB: (_) => se_AwsEc2LaunchTemplateDataInstanceRequirementsTotalLocalStorageGBDetails(_, context),
        VCpuCount: smithy_client_1._json,
    });
};
const se_AwsEc2LaunchTemplateDataInstanceRequirementsMemoryGiBPerVCpuDetails = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        Max: smithy_client_1.serializeFloat,
        Min: smithy_client_1.serializeFloat,
    });
};
const se_AwsEc2LaunchTemplateDataInstanceRequirementsTotalLocalStorageGBDetails = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        Max: smithy_client_1.serializeFloat,
        Min: smithy_client_1.serializeFloat,
    });
};
const se_AwsEc2LaunchTemplateDetails = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        DefaultVersionNumber: [],
        Id: [],
        LatestVersionNumber: [],
        LaunchTemplateData: (_) => se_AwsEc2LaunchTemplateDataDetails(_, context),
        LaunchTemplateName: [],
    });
};
const se_AwsKmsKeyDetails = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        AWSAccountId: [],
        CreationDate: smithy_client_1.serializeFloat,
        Description: [],
        KeyId: [],
        KeyManager: [],
        KeyRotationStatus: [],
        KeyState: [],
        Origin: [],
    });
};
const se_AwsNetworkFirewallRuleGroupDetails = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        Capacity: [],
        Description: [],
        RuleGroup: smithy_client_1._json,
        RuleGroupArn: [],
        RuleGroupId: [],
        RuleGroupName: [],
        Type: [],
    });
};
const se_AwsRedshiftClusterDetails = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        AllowVersionUpgrade: [],
        AutomatedSnapshotRetentionPeriod: [],
        AvailabilityZone: [],
        ClusterAvailabilityStatus: [],
        ClusterCreateTime: [],
        ClusterIdentifier: [],
        ClusterNodes: smithy_client_1._json,
        ClusterParameterGroups: smithy_client_1._json,
        ClusterPublicKey: [],
        ClusterRevisionNumber: [],
        ClusterSecurityGroups: smithy_client_1._json,
        ClusterSnapshotCopyStatus: smithy_client_1._json,
        ClusterStatus: [],
        ClusterSubnetGroupName: [],
        ClusterVersion: [],
        DBName: [],
        DeferredMaintenanceWindows: smithy_client_1._json,
        ElasticIpStatus: smithy_client_1._json,
        ElasticResizeNumberOfNodeOptions: [],
        Encrypted: [],
        Endpoint: smithy_client_1._json,
        EnhancedVpcRouting: [],
        ExpectedNextSnapshotScheduleTime: [],
        ExpectedNextSnapshotScheduleTimeStatus: [],
        HsmStatus: smithy_client_1._json,
        IamRoles: smithy_client_1._json,
        KmsKeyId: [],
        LoggingStatus: smithy_client_1._json,
        MaintenanceTrackName: [],
        ManualSnapshotRetentionPeriod: [],
        MasterUsername: [],
        NextMaintenanceWindowStartTime: [],
        NodeType: [],
        NumberOfNodes: [],
        PendingActions: smithy_client_1._json,
        PendingModifiedValues: smithy_client_1._json,
        PreferredMaintenanceWindow: [],
        PubliclyAccessible: [],
        ResizeInfo: smithy_client_1._json,
        RestoreStatus: (_) => se_AwsRedshiftClusterRestoreStatus(_, context),
        SnapshotScheduleIdentifier: [],
        SnapshotScheduleState: [],
        VpcId: [],
        VpcSecurityGroups: smithy_client_1._json,
    });
};
const se_AwsRedshiftClusterRestoreStatus = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        CurrentRestoreRateInMegaBytesPerSecond: smithy_client_1.serializeFloat,
        ElapsedTimeInSeconds: [],
        EstimatedTimeToCompletionInSeconds: [],
        ProgressInMegaBytes: [],
        SnapshotSizeInMegaBytes: [],
        Status: [],
    });
};
const se_AwsSecurityFinding = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        Action: (_) => se_Action(_, context),
        AwsAccountId: [],
        AwsAccountName: [],
        CompanyName: [],
        Compliance: smithy_client_1._json,
        Confidence: [],
        CreatedAt: [],
        Criticality: [],
        Description: [],
        FindingProviderFields: smithy_client_1._json,
        FirstObservedAt: [],
        GeneratorDetails: smithy_client_1._json,
        GeneratorId: [],
        Id: [],
        LastObservedAt: [],
        Malware: smithy_client_1._json,
        Network: smithy_client_1._json,
        NetworkPath: smithy_client_1._json,
        Note: smithy_client_1._json,
        PatchSummary: smithy_client_1._json,
        Process: smithy_client_1._json,
        ProcessedAt: [],
        ProductArn: [],
        ProductFields: smithy_client_1._json,
        ProductName: [],
        RecordState: [],
        Region: [],
        RelatedFindings: smithy_client_1._json,
        Remediation: smithy_client_1._json,
        Resources: (_) => se_ResourceList(_, context),
        Sample: [],
        SchemaVersion: [],
        Severity: (_) => se_Severity(_, context),
        SourceUrl: [],
        ThreatIntelIndicators: smithy_client_1._json,
        Threats: smithy_client_1._json,
        Title: [],
        Types: smithy_client_1._json,
        UpdatedAt: [],
        UserDefinedFields: smithy_client_1._json,
        VerificationState: [],
        Vulnerabilities: (_) => se_VulnerabilityList(_, context),
        Workflow: smithy_client_1._json,
        WorkflowState: [],
    });
};
const se_AwsSecurityFindingFilters = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        AwsAccountId: smithy_client_1._json,
        AwsAccountName: smithy_client_1._json,
        CompanyName: smithy_client_1._json,
        ComplianceAssociatedStandardsId: smithy_client_1._json,
        ComplianceSecurityControlId: smithy_client_1._json,
        ComplianceSecurityControlParametersName: smithy_client_1._json,
        ComplianceSecurityControlParametersValue: smithy_client_1._json,
        ComplianceStatus: smithy_client_1._json,
        Confidence: (_) => se_NumberFilterList(_, context),
        CreatedAt: smithy_client_1._json,
        Criticality: (_) => se_NumberFilterList(_, context),
        Description: smithy_client_1._json,
        FindingProviderFieldsConfidence: (_) => se_NumberFilterList(_, context),
        FindingProviderFieldsCriticality: (_) => se_NumberFilterList(_, context),
        FindingProviderFieldsRelatedFindingsId: smithy_client_1._json,
        FindingProviderFieldsRelatedFindingsProductArn: smithy_client_1._json,
        FindingProviderFieldsSeverityLabel: smithy_client_1._json,
        FindingProviderFieldsSeverityOriginal: smithy_client_1._json,
        FindingProviderFieldsTypes: smithy_client_1._json,
        FirstObservedAt: smithy_client_1._json,
        GeneratorId: smithy_client_1._json,
        Id: smithy_client_1._json,
        Keyword: smithy_client_1._json,
        LastObservedAt: smithy_client_1._json,
        MalwareName: smithy_client_1._json,
        MalwarePath: smithy_client_1._json,
        MalwareState: smithy_client_1._json,
        MalwareType: smithy_client_1._json,
        NetworkDestinationDomain: smithy_client_1._json,
        NetworkDestinationIpV4: smithy_client_1._json,
        NetworkDestinationIpV6: smithy_client_1._json,
        NetworkDestinationPort: (_) => se_NumberFilterList(_, context),
        NetworkDirection: smithy_client_1._json,
        NetworkProtocol: smithy_client_1._json,
        NetworkSourceDomain: smithy_client_1._json,
        NetworkSourceIpV4: smithy_client_1._json,
        NetworkSourceIpV6: smithy_client_1._json,
        NetworkSourceMac: smithy_client_1._json,
        NetworkSourcePort: (_) => se_NumberFilterList(_, context),
        NoteText: smithy_client_1._json,
        NoteUpdatedAt: smithy_client_1._json,
        NoteUpdatedBy: smithy_client_1._json,
        ProcessLaunchedAt: smithy_client_1._json,
        ProcessName: smithy_client_1._json,
        ProcessParentPid: (_) => se_NumberFilterList(_, context),
        ProcessPath: smithy_client_1._json,
        ProcessPid: (_) => se_NumberFilterList(_, context),
        ProcessTerminatedAt: smithy_client_1._json,
        ProductArn: smithy_client_1._json,
        ProductFields: smithy_client_1._json,
        ProductName: smithy_client_1._json,
        RecommendationText: smithy_client_1._json,
        RecordState: smithy_client_1._json,
        Region: smithy_client_1._json,
        RelatedFindingsId: smithy_client_1._json,
        RelatedFindingsProductArn: smithy_client_1._json,
        ResourceApplicationArn: smithy_client_1._json,
        ResourceApplicationName: smithy_client_1._json,
        ResourceAwsEc2InstanceIamInstanceProfileArn: smithy_client_1._json,
        ResourceAwsEc2InstanceImageId: smithy_client_1._json,
        ResourceAwsEc2InstanceIpV4Addresses: smithy_client_1._json,
        ResourceAwsEc2InstanceIpV6Addresses: smithy_client_1._json,
        ResourceAwsEc2InstanceKeyName: smithy_client_1._json,
        ResourceAwsEc2InstanceLaunchedAt: smithy_client_1._json,
        ResourceAwsEc2InstanceSubnetId: smithy_client_1._json,
        ResourceAwsEc2InstanceType: smithy_client_1._json,
        ResourceAwsEc2InstanceVpcId: smithy_client_1._json,
        ResourceAwsIamAccessKeyCreatedAt: smithy_client_1._json,
        ResourceAwsIamAccessKeyPrincipalName: smithy_client_1._json,
        ResourceAwsIamAccessKeyStatus: smithy_client_1._json,
        ResourceAwsIamAccessKeyUserName: smithy_client_1._json,
        ResourceAwsIamUserUserName: smithy_client_1._json,
        ResourceAwsS3BucketOwnerId: smithy_client_1._json,
        ResourceAwsS3BucketOwnerName: smithy_client_1._json,
        ResourceContainerImageId: smithy_client_1._json,
        ResourceContainerImageName: smithy_client_1._json,
        ResourceContainerLaunchedAt: smithy_client_1._json,
        ResourceContainerName: smithy_client_1._json,
        ResourceDetailsOther: smithy_client_1._json,
        ResourceId: smithy_client_1._json,
        ResourcePartition: smithy_client_1._json,
        ResourceRegion: smithy_client_1._json,
        ResourceTags: smithy_client_1._json,
        ResourceType: smithy_client_1._json,
        Sample: smithy_client_1._json,
        SeverityLabel: smithy_client_1._json,
        SeverityNormalized: (_) => se_NumberFilterList(_, context),
        SeverityProduct: (_) => se_NumberFilterList(_, context),
        SourceUrl: smithy_client_1._json,
        ThreatIntelIndicatorCategory: smithy_client_1._json,
        ThreatIntelIndicatorLastObservedAt: smithy_client_1._json,
        ThreatIntelIndicatorSource: smithy_client_1._json,
        ThreatIntelIndicatorSourceUrl: smithy_client_1._json,
        ThreatIntelIndicatorType: smithy_client_1._json,
        ThreatIntelIndicatorValue: smithy_client_1._json,
        Title: smithy_client_1._json,
        Type: smithy_client_1._json,
        UpdatedAt: smithy_client_1._json,
        UserDefinedFields: smithy_client_1._json,
        VerificationState: smithy_client_1._json,
        VulnerabilitiesExploitAvailable: smithy_client_1._json,
        VulnerabilitiesFixAvailable: smithy_client_1._json,
        WorkflowState: smithy_client_1._json,
        WorkflowStatus: smithy_client_1._json,
    });
};
const se_BatchImportFindingsRequestFindingList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_AwsSecurityFinding(entry, context);
    });
};
const se_Cvss = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        Adjustments: smithy_client_1._json,
        BaseScore: smithy_client_1.serializeFloat,
        BaseVector: [],
        Source: [],
        Version: [],
    });
};
const se_CvssList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_Cvss(entry, context);
    });
};
const se_GeoLocation = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        Lat: smithy_client_1.serializeFloat,
        Lon: smithy_client_1.serializeFloat,
    });
};
const se_NetworkConnectionAction = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        Blocked: [],
        ConnectionDirection: [],
        LocalPortDetails: smithy_client_1._json,
        Protocol: [],
        RemoteIpDetails: (_) => se_ActionRemoteIpDetails(_, context),
        RemotePortDetails: smithy_client_1._json,
    });
};
const se_NumberFilter = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        Eq: smithy_client_1.serializeFloat,
        Gt: smithy_client_1.serializeFloat,
        Gte: smithy_client_1.serializeFloat,
        Lt: smithy_client_1.serializeFloat,
        Lte: smithy_client_1.serializeFloat,
    });
};
const se_NumberFilterList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_NumberFilter(entry, context);
    });
};
const se_ParameterConfiguration = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        Value: (_) => se_ParameterValue(_, context),
        ValueType: [],
    });
};
const se_Parameters = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = se_ParameterConfiguration(value, context);
        return acc;
    }, {});
};
const se_ParameterValue = (input, context) => {
    return models_2_1.ParameterValue.visit(input, {
        Boolean: (value) => ({ Boolean: value }),
        Double: (value) => ({ Double: (0, smithy_client_1.serializeFloat)(value) }),
        Enum: (value) => ({ Enum: value }),
        EnumList: (value) => ({ EnumList: (0, smithy_client_1._json)(value) }),
        Integer: (value) => ({ Integer: value }),
        IntegerList: (value) => ({ IntegerList: (0, smithy_client_1._json)(value) }),
        String: (value) => ({ String: value }),
        StringList: (value) => ({ StringList: (0, smithy_client_1._json)(value) }),
        _: (name, value) => ({ name: value }),
    });
};
const se_Policy = (input, context) => {
    return models_2_1.Policy.visit(input, {
        SecurityHub: (value) => ({ SecurityHub: se_SecurityHubPolicy(value, context) }),
        _: (name, value) => ({ name: value }),
    });
};
const se_PortProbeAction = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        Blocked: [],
        PortProbeDetails: (_) => se_PortProbeDetailList(_, context),
    });
};
const se_PortProbeDetail = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        LocalIpDetails: smithy_client_1._json,
        LocalPortDetails: smithy_client_1._json,
        RemoteIpDetails: (_) => se_ActionRemoteIpDetails(_, context),
    });
};
const se_PortProbeDetailList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_PortProbeDetail(entry, context);
    });
};
const se_Resource = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        ApplicationArn: [],
        ApplicationName: [],
        DataClassification: smithy_client_1._json,
        Details: (_) => se_ResourceDetails(_, context),
        Id: [],
        Partition: [],
        Region: [],
        ResourceRole: [],
        Tags: smithy_client_1._json,
        Type: [],
    });
};
const se_ResourceDetails = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        AwsAmazonMqBroker: smithy_client_1._json,
        AwsApiGatewayRestApi: smithy_client_1._json,
        AwsApiGatewayStage: (_) => se_AwsApiGatewayStageDetails(_, context),
        AwsApiGatewayV2Api: smithy_client_1._json,
        AwsApiGatewayV2Stage: (_) => se_AwsApiGatewayV2StageDetails(_, context),
        AwsAppSyncGraphQlApi: smithy_client_1._json,
        AwsAthenaWorkGroup: smithy_client_1._json,
        AwsAutoScalingAutoScalingGroup: smithy_client_1._json,
        AwsAutoScalingLaunchConfiguration: smithy_client_1._json,
        AwsBackupBackupPlan: smithy_client_1._json,
        AwsBackupBackupVault: smithy_client_1._json,
        AwsBackupRecoveryPoint: smithy_client_1._json,
        AwsCertificateManagerCertificate: smithy_client_1._json,
        AwsCloudFormationStack: smithy_client_1._json,
        AwsCloudFrontDistribution: smithy_client_1._json,
        AwsCloudTrailTrail: smithy_client_1._json,
        AwsCloudWatchAlarm: (_) => se_AwsCloudWatchAlarmDetails(_, context),
        AwsCodeBuildProject: smithy_client_1._json,
        AwsDmsEndpoint: smithy_client_1._json,
        AwsDmsReplicationInstance: smithy_client_1._json,
        AwsDmsReplicationTask: smithy_client_1._json,
        AwsDynamoDbTable: smithy_client_1._json,
        AwsEc2ClientVpnEndpoint: smithy_client_1._json,
        AwsEc2Eip: smithy_client_1._json,
        AwsEc2Instance: smithy_client_1._json,
        AwsEc2LaunchTemplate: (_) => se_AwsEc2LaunchTemplateDetails(_, context),
        AwsEc2NetworkAcl: smithy_client_1._json,
        AwsEc2NetworkInterface: smithy_client_1._json,
        AwsEc2RouteTable: smithy_client_1._json,
        AwsEc2SecurityGroup: smithy_client_1._json,
        AwsEc2Subnet: smithy_client_1._json,
        AwsEc2TransitGateway: smithy_client_1._json,
        AwsEc2Volume: smithy_client_1._json,
        AwsEc2Vpc: smithy_client_1._json,
        AwsEc2VpcEndpointService: smithy_client_1._json,
        AwsEc2VpcPeeringConnection: smithy_client_1._json,
        AwsEc2VpnConnection: smithy_client_1._json,
        AwsEcrContainerImage: smithy_client_1._json,
        AwsEcrRepository: smithy_client_1._json,
        AwsEcsCluster: smithy_client_1._json,
        AwsEcsContainer: smithy_client_1._json,
        AwsEcsService: smithy_client_1._json,
        AwsEcsTask: smithy_client_1._json,
        AwsEcsTaskDefinition: smithy_client_1._json,
        AwsEfsAccessPoint: smithy_client_1._json,
        AwsEksCluster: smithy_client_1._json,
        AwsElasticBeanstalkEnvironment: smithy_client_1._json,
        AwsElasticsearchDomain: smithy_client_1._json,
        AwsElbLoadBalancer: smithy_client_1._json,
        AwsElbv2LoadBalancer: smithy_client_1._json,
        AwsEventSchemasRegistry: smithy_client_1._json,
        AwsEventsEndpoint: smithy_client_1._json,
        AwsEventsEventbus: smithy_client_1._json,
        AwsGuardDutyDetector: smithy_client_1._json,
        AwsIamAccessKey: smithy_client_1._json,
        AwsIamGroup: smithy_client_1._json,
        AwsIamPolicy: smithy_client_1._json,
        AwsIamRole: smithy_client_1._json,
        AwsIamUser: smithy_client_1._json,
        AwsKinesisStream: smithy_client_1._json,
        AwsKmsKey: (_) => se_AwsKmsKeyDetails(_, context),
        AwsLambdaFunction: smithy_client_1._json,
        AwsLambdaLayerVersion: smithy_client_1._json,
        AwsMskCluster: smithy_client_1._json,
        AwsNetworkFirewallFirewall: smithy_client_1._json,
        AwsNetworkFirewallFirewallPolicy: smithy_client_1._json,
        AwsNetworkFirewallRuleGroup: (_) => se_AwsNetworkFirewallRuleGroupDetails(_, context),
        AwsOpenSearchServiceDomain: smithy_client_1._json,
        AwsRdsDbCluster: smithy_client_1._json,
        AwsRdsDbClusterSnapshot: smithy_client_1._json,
        AwsRdsDbInstance: smithy_client_1._json,
        AwsRdsDbSecurityGroup: smithy_client_1._json,
        AwsRdsDbSnapshot: smithy_client_1._json,
        AwsRdsEventSubscription: smithy_client_1._json,
        AwsRedshiftCluster: (_) => se_AwsRedshiftClusterDetails(_, context),
        AwsRoute53HostedZone: smithy_client_1._json,
        AwsS3AccessPoint: smithy_client_1._json,
        AwsS3AccountPublicAccessBlock: smithy_client_1._json,
        AwsS3Bucket: smithy_client_1._json,
        AwsS3Object: smithy_client_1._json,
        AwsSageMakerNotebookInstance: smithy_client_1._json,
        AwsSecretsManagerSecret: smithy_client_1._json,
        AwsSnsTopic: smithy_client_1._json,
        AwsSqsQueue: smithy_client_1._json,
        AwsSsmPatchCompliance: smithy_client_1._json,
        AwsStepFunctionStateMachine: smithy_client_1._json,
        AwsWafRateBasedRule: smithy_client_1._json,
        AwsWafRegionalRateBasedRule: smithy_client_1._json,
        AwsWafRegionalRule: smithy_client_1._json,
        AwsWafRegionalRuleGroup: smithy_client_1._json,
        AwsWafRegionalWebAcl: smithy_client_1._json,
        AwsWafRule: smithy_client_1._json,
        AwsWafRuleGroup: smithy_client_1._json,
        AwsWafWebAcl: smithy_client_1._json,
        AwsWafv2RuleGroup: smithy_client_1._json,
        AwsWafv2WebAcl: smithy_client_1._json,
        AwsXrayEncryptionConfig: smithy_client_1._json,
        Container: smithy_client_1._json,
        Other: smithy_client_1._json,
    });
};
const se_ResourceList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_Resource(entry, context);
    });
};
const se_SecurityControlCustomParameter = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        Parameters: (_) => se_Parameters(_, context),
        SecurityControlId: [],
    });
};
const se_SecurityControlCustomParametersList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_SecurityControlCustomParameter(entry, context);
    });
};
const se_SecurityControlsConfiguration = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        DisabledSecurityControlIdentifiers: smithy_client_1._json,
        EnabledSecurityControlIdentifiers: smithy_client_1._json,
        SecurityControlCustomParameters: (_) => se_SecurityControlCustomParametersList(_, context),
    });
};
const se_SecurityHubPolicy = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        EnabledStandardIdentifiers: smithy_client_1._json,
        SecurityControlsConfiguration: (_) => se_SecurityControlsConfiguration(_, context),
        ServiceEnabled: [],
    });
};
const se_Severity = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        Label: [],
        Normalized: [],
        Original: [],
        Product: smithy_client_1.serializeFloat,
    });
};
const se_SeverityUpdate = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        Label: [],
        Normalized: [],
        Product: smithy_client_1.serializeFloat,
    });
};
const se_UpdateAutomationRulesRequestItem = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        Actions: (_) => se_ActionList(_, context),
        Criteria: (_) => se_AutomationRulesFindingFilters(_, context),
        Description: [],
        IsTerminal: [],
        RuleArn: [],
        RuleName: [],
        RuleOrder: [],
        RuleStatus: [],
    });
};
const se_UpdateAutomationRulesRequestItemsList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_UpdateAutomationRulesRequestItem(entry, context);
    });
};
const se_Vulnerability = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        CodeVulnerabilities: smithy_client_1._json,
        Cvss: (_) => se_CvssList(_, context),
        EpssScore: smithy_client_1.serializeFloat,
        ExploitAvailable: [],
        FixAvailable: [],
        Id: [],
        ReferenceUrls: smithy_client_1._json,
        RelatedVulnerabilities: smithy_client_1._json,
        Vendor: smithy_client_1._json,
        VulnerablePackages: smithy_client_1._json,
    });
};
const se_VulnerabilityList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_Vulnerability(entry, context);
    });
};
const de_Action = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        ActionType: smithy_client_1.expectString,
        AwsApiCallAction: (_) => de_AwsApiCallAction(_, context),
        DnsRequestAction: smithy_client_1._json,
        NetworkConnectionAction: (_) => de_NetworkConnectionAction(_, context),
        PortProbeAction: (_) => de_PortProbeAction(_, context),
    });
};
const de_ActionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AutomationRulesAction(entry, context);
    });
    return retVal;
};
const de_ActionRemoteIpDetails = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        City: smithy_client_1._json,
        Country: smithy_client_1._json,
        GeoLocation: (_) => de_GeoLocation(_, context),
        IpAddressV4: smithy_client_1.expectString,
        Organization: smithy_client_1._json,
    });
};
const de_AutomationRulesAction = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        FindingFieldsUpdate: (_) => de_AutomationRulesFindingFieldsUpdate(_, context),
        Type: smithy_client_1.expectString,
    });
};
const de_AutomationRulesConfig = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Actions: (_) => de_ActionList(_, context),
        CreatedAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_)),
        CreatedBy: smithy_client_1.expectString,
        Criteria: (_) => de_AutomationRulesFindingFilters(_, context),
        Description: smithy_client_1.expectString,
        IsTerminal: smithy_client_1.expectBoolean,
        RuleArn: smithy_client_1.expectString,
        RuleName: smithy_client_1.expectString,
        RuleOrder: smithy_client_1.expectInt32,
        RuleStatus: smithy_client_1.expectString,
        UpdatedAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_)),
    });
};
const de_AutomationRulesConfigList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AutomationRulesConfig(entry, context);
    });
    return retVal;
};
const de_AutomationRulesFindingFieldsUpdate = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Confidence: smithy_client_1.expectInt32,
        Criticality: smithy_client_1.expectInt32,
        Note: smithy_client_1._json,
        RelatedFindings: smithy_client_1._json,
        Severity: (_) => de_SeverityUpdate(_, context),
        Types: smithy_client_1._json,
        UserDefinedFields: smithy_client_1._json,
        VerificationState: smithy_client_1.expectString,
        Workflow: smithy_client_1._json,
    });
};
const de_AutomationRulesFindingFilters = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        AwsAccountId: smithy_client_1._json,
        AwsAccountName: smithy_client_1._json,
        CompanyName: smithy_client_1._json,
        ComplianceAssociatedStandardsId: smithy_client_1._json,
        ComplianceSecurityControlId: smithy_client_1._json,
        ComplianceStatus: smithy_client_1._json,
        Confidence: (_) => de_NumberFilterList(_, context),
        CreatedAt: smithy_client_1._json,
        Criticality: (_) => de_NumberFilterList(_, context),
        Description: smithy_client_1._json,
        FirstObservedAt: smithy_client_1._json,
        GeneratorId: smithy_client_1._json,
        Id: smithy_client_1._json,
        LastObservedAt: smithy_client_1._json,
        NoteText: smithy_client_1._json,
        NoteUpdatedAt: smithy_client_1._json,
        NoteUpdatedBy: smithy_client_1._json,
        ProductArn: smithy_client_1._json,
        ProductName: smithy_client_1._json,
        RecordState: smithy_client_1._json,
        RelatedFindingsId: smithy_client_1._json,
        RelatedFindingsProductArn: smithy_client_1._json,
        ResourceApplicationArn: smithy_client_1._json,
        ResourceApplicationName: smithy_client_1._json,
        ResourceDetailsOther: smithy_client_1._json,
        ResourceId: smithy_client_1._json,
        ResourcePartition: smithy_client_1._json,
        ResourceRegion: smithy_client_1._json,
        ResourceTags: smithy_client_1._json,
        ResourceType: smithy_client_1._json,
        SeverityLabel: smithy_client_1._json,
        SourceUrl: smithy_client_1._json,
        Title: smithy_client_1._json,
        Type: smithy_client_1._json,
        UpdatedAt: smithy_client_1._json,
        UserDefinedFields: smithy_client_1._json,
        VerificationState: smithy_client_1._json,
        WorkflowStatus: smithy_client_1._json,
    });
};
const de_AutomationRulesMetadata = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        CreatedAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_)),
        CreatedBy: smithy_client_1.expectString,
        Description: smithy_client_1.expectString,
        IsTerminal: smithy_client_1.expectBoolean,
        RuleArn: smithy_client_1.expectString,
        RuleName: smithy_client_1.expectString,
        RuleOrder: smithy_client_1.expectInt32,
        RuleStatus: smithy_client_1.expectString,
        UpdatedAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_)),
    });
};
const de_AutomationRulesMetadataList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AutomationRulesMetadata(entry, context);
    });
    return retVal;
};
const de_AwsApiCallAction = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        AffectedResources: smithy_client_1._json,
        Api: smithy_client_1.expectString,
        CallerType: smithy_client_1.expectString,
        DomainDetails: smithy_client_1._json,
        FirstSeen: smithy_client_1.expectString,
        LastSeen: smithy_client_1.expectString,
        RemoteIpDetails: (_) => de_ActionRemoteIpDetails(_, context),
        ServiceName: smithy_client_1.expectString,
    });
};
const de_AwsApiGatewayCanarySettings = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        DeploymentId: smithy_client_1.expectString,
        PercentTraffic: smithy_client_1.limitedParseDouble,
        StageVariableOverrides: smithy_client_1._json,
        UseStageCache: smithy_client_1.expectBoolean,
    });
};
const de_AwsApiGatewayMethodSettings = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        CacheDataEncrypted: smithy_client_1.expectBoolean,
        CacheTtlInSeconds: smithy_client_1.expectInt32,
        CachingEnabled: smithy_client_1.expectBoolean,
        DataTraceEnabled: smithy_client_1.expectBoolean,
        HttpMethod: smithy_client_1.expectString,
        LoggingLevel: smithy_client_1.expectString,
        MetricsEnabled: smithy_client_1.expectBoolean,
        RequireAuthorizationForCacheControl: smithy_client_1.expectBoolean,
        ResourcePath: smithy_client_1.expectString,
        ThrottlingBurstLimit: smithy_client_1.expectInt32,
        ThrottlingRateLimit: smithy_client_1.limitedParseDouble,
        UnauthorizedCacheControlHeaderStrategy: smithy_client_1.expectString,
    });
};
const de_AwsApiGatewayMethodSettingsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AwsApiGatewayMethodSettings(entry, context);
    });
    return retVal;
};
const de_AwsApiGatewayStageDetails = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        AccessLogSettings: smithy_client_1._json,
        CacheClusterEnabled: smithy_client_1.expectBoolean,
        CacheClusterSize: smithy_client_1.expectString,
        CacheClusterStatus: smithy_client_1.expectString,
        CanarySettings: (_) => de_AwsApiGatewayCanarySettings(_, context),
        ClientCertificateId: smithy_client_1.expectString,
        CreatedDate: smithy_client_1.expectString,
        DeploymentId: smithy_client_1.expectString,
        Description: smithy_client_1.expectString,
        DocumentationVersion: smithy_client_1.expectString,
        LastUpdatedDate: smithy_client_1.expectString,
        MethodSettings: (_) => de_AwsApiGatewayMethodSettingsList(_, context),
        StageName: smithy_client_1.expectString,
        TracingEnabled: smithy_client_1.expectBoolean,
        Variables: smithy_client_1._json,
        WebAclArn: smithy_client_1.expectString,
    });
};
const de_AwsApiGatewayV2RouteSettings = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        DataTraceEnabled: smithy_client_1.expectBoolean,
        DetailedMetricsEnabled: smithy_client_1.expectBoolean,
        LoggingLevel: smithy_client_1.expectString,
        ThrottlingBurstLimit: smithy_client_1.expectInt32,
        ThrottlingRateLimit: smithy_client_1.limitedParseDouble,
    });
};
const de_AwsApiGatewayV2StageDetails = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        AccessLogSettings: smithy_client_1._json,
        ApiGatewayManaged: smithy_client_1.expectBoolean,
        AutoDeploy: smithy_client_1.expectBoolean,
        ClientCertificateId: smithy_client_1.expectString,
        CreatedDate: smithy_client_1.expectString,
        DefaultRouteSettings: (_) => de_AwsApiGatewayV2RouteSettings(_, context),
        DeploymentId: smithy_client_1.expectString,
        Description: smithy_client_1.expectString,
        LastDeploymentStatusMessage: smithy_client_1.expectString,
        LastUpdatedDate: smithy_client_1.expectString,
        RouteSettings: (_) => de_AwsApiGatewayV2RouteSettings(_, context),
        StageName: smithy_client_1.expectString,
        StageVariables: smithy_client_1._json,
    });
};
const de_AwsCloudWatchAlarmDetails = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        ActionsEnabled: smithy_client_1.expectBoolean,
        AlarmActions: smithy_client_1._json,
        AlarmArn: smithy_client_1.expectString,
        AlarmConfigurationUpdatedTimestamp: smithy_client_1.expectString,
        AlarmDescription: smithy_client_1.expectString,
        AlarmName: smithy_client_1.expectString,
        ComparisonOperator: smithy_client_1.expectString,
        DatapointsToAlarm: smithy_client_1.expectInt32,
        Dimensions: smithy_client_1._json,
        EvaluateLowSampleCountPercentile: smithy_client_1.expectString,
        EvaluationPeriods: smithy_client_1.expectInt32,
        ExtendedStatistic: smithy_client_1.expectString,
        InsufficientDataActions: smithy_client_1._json,
        MetricName: smithy_client_1.expectString,
        Namespace: smithy_client_1.expectString,
        OkActions: smithy_client_1._json,
        Period: smithy_client_1.expectInt32,
        Statistic: smithy_client_1.expectString,
        Threshold: smithy_client_1.limitedParseDouble,
        ThresholdMetricId: smithy_client_1.expectString,
        TreatMissingData: smithy_client_1.expectString,
        Unit: smithy_client_1.expectString,
    });
};
const de_AwsEc2LaunchTemplateDataDetails = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        BlockDeviceMappingSet: smithy_client_1._json,
        CapacityReservationSpecification: smithy_client_1._json,
        CpuOptions: smithy_client_1._json,
        CreditSpecification: smithy_client_1._json,
        DisableApiStop: smithy_client_1.expectBoolean,
        DisableApiTermination: smithy_client_1.expectBoolean,
        EbsOptimized: smithy_client_1.expectBoolean,
        ElasticGpuSpecificationSet: smithy_client_1._json,
        ElasticInferenceAcceleratorSet: smithy_client_1._json,
        EnclaveOptions: smithy_client_1._json,
        HibernationOptions: smithy_client_1._json,
        IamInstanceProfile: smithy_client_1._json,
        ImageId: smithy_client_1.expectString,
        InstanceInitiatedShutdownBehavior: smithy_client_1.expectString,
        InstanceMarketOptions: smithy_client_1._json,
        InstanceRequirements: (_) => de_AwsEc2LaunchTemplateDataInstanceRequirementsDetails(_, context),
        InstanceType: smithy_client_1.expectString,
        KernelId: smithy_client_1.expectString,
        KeyName: smithy_client_1.expectString,
        LicenseSet: smithy_client_1._json,
        MaintenanceOptions: smithy_client_1._json,
        MetadataOptions: smithy_client_1._json,
        Monitoring: smithy_client_1._json,
        NetworkInterfaceSet: smithy_client_1._json,
        Placement: smithy_client_1._json,
        PrivateDnsNameOptions: smithy_client_1._json,
        RamDiskId: smithy_client_1.expectString,
        SecurityGroupIdSet: smithy_client_1._json,
        SecurityGroupSet: smithy_client_1._json,
        UserData: smithy_client_1.expectString,
    });
};
const de_AwsEc2LaunchTemplateDataInstanceRequirementsDetails = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        AcceleratorCount: smithy_client_1._json,
        AcceleratorManufacturers: smithy_client_1._json,
        AcceleratorNames: smithy_client_1._json,
        AcceleratorTotalMemoryMiB: smithy_client_1._json,
        AcceleratorTypes: smithy_client_1._json,
        BareMetal: smithy_client_1.expectString,
        BaselineEbsBandwidthMbps: smithy_client_1._json,
        BurstablePerformance: smithy_client_1.expectString,
        CpuManufacturers: smithy_client_1._json,
        ExcludedInstanceTypes: smithy_client_1._json,
        InstanceGenerations: smithy_client_1._json,
        LocalStorage: smithy_client_1.expectString,
        LocalStorageTypes: smithy_client_1._json,
        MemoryGiBPerVCpu: (_) => de_AwsEc2LaunchTemplateDataInstanceRequirementsMemoryGiBPerVCpuDetails(_, context),
        MemoryMiB: smithy_client_1._json,
        NetworkInterfaceCount: smithy_client_1._json,
        OnDemandMaxPricePercentageOverLowestPrice: smithy_client_1.expectInt32,
        RequireHibernateSupport: smithy_client_1.expectBoolean,
        SpotMaxPricePercentageOverLowestPrice: smithy_client_1.expectInt32,
        TotalLocalStorageGB: (_) => de_AwsEc2LaunchTemplateDataInstanceRequirementsTotalLocalStorageGBDetails(_, context),
        VCpuCount: smithy_client_1._json,
    });
};
const de_AwsEc2LaunchTemplateDataInstanceRequirementsMemoryGiBPerVCpuDetails = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Max: smithy_client_1.limitedParseDouble,
        Min: smithy_client_1.limitedParseDouble,
    });
};
const de_AwsEc2LaunchTemplateDataInstanceRequirementsTotalLocalStorageGBDetails = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Max: smithy_client_1.limitedParseDouble,
        Min: smithy_client_1.limitedParseDouble,
    });
};
const de_AwsEc2LaunchTemplateDetails = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        DefaultVersionNumber: smithy_client_1.expectLong,
        Id: smithy_client_1.expectString,
        LatestVersionNumber: smithy_client_1.expectLong,
        LaunchTemplateData: (_) => de_AwsEc2LaunchTemplateDataDetails(_, context),
        LaunchTemplateName: smithy_client_1.expectString,
    });
};
const de_AwsKmsKeyDetails = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        AWSAccountId: smithy_client_1.expectString,
        CreationDate: smithy_client_1.limitedParseDouble,
        Description: smithy_client_1.expectString,
        KeyId: smithy_client_1.expectString,
        KeyManager: smithy_client_1.expectString,
        KeyRotationStatus: smithy_client_1.expectBoolean,
        KeyState: smithy_client_1.expectString,
        Origin: smithy_client_1.expectString,
    });
};
const de_AwsNetworkFirewallRuleGroupDetails = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Capacity: smithy_client_1.expectInt32,
        Description: smithy_client_1.expectString,
        RuleGroup: smithy_client_1._json,
        RuleGroupArn: smithy_client_1.expectString,
        RuleGroupId: smithy_client_1.expectString,
        RuleGroupName: smithy_client_1.expectString,
        Type: smithy_client_1.expectString,
    });
};
const de_AwsRedshiftClusterDetails = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        AllowVersionUpgrade: smithy_client_1.expectBoolean,
        AutomatedSnapshotRetentionPeriod: smithy_client_1.expectInt32,
        AvailabilityZone: smithy_client_1.expectString,
        ClusterAvailabilityStatus: smithy_client_1.expectString,
        ClusterCreateTime: smithy_client_1.expectString,
        ClusterIdentifier: smithy_client_1.expectString,
        ClusterNodes: smithy_client_1._json,
        ClusterParameterGroups: smithy_client_1._json,
        ClusterPublicKey: smithy_client_1.expectString,
        ClusterRevisionNumber: smithy_client_1.expectString,
        ClusterSecurityGroups: smithy_client_1._json,
        ClusterSnapshotCopyStatus: smithy_client_1._json,
        ClusterStatus: smithy_client_1.expectString,
        ClusterSubnetGroupName: smithy_client_1.expectString,
        ClusterVersion: smithy_client_1.expectString,
        DBName: smithy_client_1.expectString,
        DeferredMaintenanceWindows: smithy_client_1._json,
        ElasticIpStatus: smithy_client_1._json,
        ElasticResizeNumberOfNodeOptions: smithy_client_1.expectString,
        Encrypted: smithy_client_1.expectBoolean,
        Endpoint: smithy_client_1._json,
        EnhancedVpcRouting: smithy_client_1.expectBoolean,
        ExpectedNextSnapshotScheduleTime: smithy_client_1.expectString,
        ExpectedNextSnapshotScheduleTimeStatus: smithy_client_1.expectString,
        HsmStatus: smithy_client_1._json,
        IamRoles: smithy_client_1._json,
        KmsKeyId: smithy_client_1.expectString,
        LoggingStatus: smithy_client_1._json,
        MaintenanceTrackName: smithy_client_1.expectString,
        ManualSnapshotRetentionPeriod: smithy_client_1.expectInt32,
        MasterUsername: smithy_client_1.expectString,
        NextMaintenanceWindowStartTime: smithy_client_1.expectString,
        NodeType: smithy_client_1.expectString,
        NumberOfNodes: smithy_client_1.expectInt32,
        PendingActions: smithy_client_1._json,
        PendingModifiedValues: smithy_client_1._json,
        PreferredMaintenanceWindow: smithy_client_1.expectString,
        PubliclyAccessible: smithy_client_1.expectBoolean,
        ResizeInfo: smithy_client_1._json,
        RestoreStatus: (_) => de_AwsRedshiftClusterRestoreStatus(_, context),
        SnapshotScheduleIdentifier: smithy_client_1.expectString,
        SnapshotScheduleState: smithy_client_1.expectString,
        VpcId: smithy_client_1.expectString,
        VpcSecurityGroups: smithy_client_1._json,
    });
};
const de_AwsRedshiftClusterRestoreStatus = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        CurrentRestoreRateInMegaBytesPerSecond: smithy_client_1.limitedParseDouble,
        ElapsedTimeInSeconds: smithy_client_1.expectLong,
        EstimatedTimeToCompletionInSeconds: smithy_client_1.expectLong,
        ProgressInMegaBytes: smithy_client_1.expectLong,
        SnapshotSizeInMegaBytes: smithy_client_1.expectLong,
        Status: smithy_client_1.expectString,
    });
};
const de_AwsSecurityFinding = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Action: (_) => de_Action(_, context),
        AwsAccountId: smithy_client_1.expectString,
        AwsAccountName: smithy_client_1.expectString,
        CompanyName: smithy_client_1.expectString,
        Compliance: smithy_client_1._json,
        Confidence: smithy_client_1.expectInt32,
        CreatedAt: smithy_client_1.expectString,
        Criticality: smithy_client_1.expectInt32,
        Description: smithy_client_1.expectString,
        FindingProviderFields: smithy_client_1._json,
        FirstObservedAt: smithy_client_1.expectString,
        GeneratorDetails: smithy_client_1._json,
        GeneratorId: smithy_client_1.expectString,
        Id: smithy_client_1.expectString,
        LastObservedAt: smithy_client_1.expectString,
        Malware: smithy_client_1._json,
        Network: smithy_client_1._json,
        NetworkPath: smithy_client_1._json,
        Note: smithy_client_1._json,
        PatchSummary: smithy_client_1._json,
        Process: smithy_client_1._json,
        ProcessedAt: smithy_client_1.expectString,
        ProductArn: smithy_client_1.expectString,
        ProductFields: smithy_client_1._json,
        ProductName: smithy_client_1.expectString,
        RecordState: smithy_client_1.expectString,
        Region: smithy_client_1.expectString,
        RelatedFindings: smithy_client_1._json,
        Remediation: smithy_client_1._json,
        Resources: (_) => de_ResourceList(_, context),
        Sample: smithy_client_1.expectBoolean,
        SchemaVersion: smithy_client_1.expectString,
        Severity: (_) => de_Severity(_, context),
        SourceUrl: smithy_client_1.expectString,
        ThreatIntelIndicators: smithy_client_1._json,
        Threats: smithy_client_1._json,
        Title: smithy_client_1.expectString,
        Types: smithy_client_1._json,
        UpdatedAt: smithy_client_1.expectString,
        UserDefinedFields: smithy_client_1._json,
        VerificationState: smithy_client_1.expectString,
        Vulnerabilities: (_) => de_VulnerabilityList(_, context),
        Workflow: smithy_client_1._json,
        WorkflowState: smithy_client_1.expectString,
    });
};
const de_AwsSecurityFindingFilters = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        AwsAccountId: smithy_client_1._json,
        AwsAccountName: smithy_client_1._json,
        CompanyName: smithy_client_1._json,
        ComplianceAssociatedStandardsId: smithy_client_1._json,
        ComplianceSecurityControlId: smithy_client_1._json,
        ComplianceSecurityControlParametersName: smithy_client_1._json,
        ComplianceSecurityControlParametersValue: smithy_client_1._json,
        ComplianceStatus: smithy_client_1._json,
        Confidence: (_) => de_NumberFilterList(_, context),
        CreatedAt: smithy_client_1._json,
        Criticality: (_) => de_NumberFilterList(_, context),
        Description: smithy_client_1._json,
        FindingProviderFieldsConfidence: (_) => de_NumberFilterList(_, context),
        FindingProviderFieldsCriticality: (_) => de_NumberFilterList(_, context),
        FindingProviderFieldsRelatedFindingsId: smithy_client_1._json,
        FindingProviderFieldsRelatedFindingsProductArn: smithy_client_1._json,
        FindingProviderFieldsSeverityLabel: smithy_client_1._json,
        FindingProviderFieldsSeverityOriginal: smithy_client_1._json,
        FindingProviderFieldsTypes: smithy_client_1._json,
        FirstObservedAt: smithy_client_1._json,
        GeneratorId: smithy_client_1._json,
        Id: smithy_client_1._json,
        Keyword: smithy_client_1._json,
        LastObservedAt: smithy_client_1._json,
        MalwareName: smithy_client_1._json,
        MalwarePath: smithy_client_1._json,
        MalwareState: smithy_client_1._json,
        MalwareType: smithy_client_1._json,
        NetworkDestinationDomain: smithy_client_1._json,
        NetworkDestinationIpV4: smithy_client_1._json,
        NetworkDestinationIpV6: smithy_client_1._json,
        NetworkDestinationPort: (_) => de_NumberFilterList(_, context),
        NetworkDirection: smithy_client_1._json,
        NetworkProtocol: smithy_client_1._json,
        NetworkSourceDomain: smithy_client_1._json,
        NetworkSourceIpV4: smithy_client_1._json,
        NetworkSourceIpV6: smithy_client_1._json,
        NetworkSourceMac: smithy_client_1._json,
        NetworkSourcePort: (_) => de_NumberFilterList(_, context),
        NoteText: smithy_client_1._json,
        NoteUpdatedAt: smithy_client_1._json,
        NoteUpdatedBy: smithy_client_1._json,
        ProcessLaunchedAt: smithy_client_1._json,
        ProcessName: smithy_client_1._json,
        ProcessParentPid: (_) => de_NumberFilterList(_, context),
        ProcessPath: smithy_client_1._json,
        ProcessPid: (_) => de_NumberFilterList(_, context),
        ProcessTerminatedAt: smithy_client_1._json,
        ProductArn: smithy_client_1._json,
        ProductFields: smithy_client_1._json,
        ProductName: smithy_client_1._json,
        RecommendationText: smithy_client_1._json,
        RecordState: smithy_client_1._json,
        Region: smithy_client_1._json,
        RelatedFindingsId: smithy_client_1._json,
        RelatedFindingsProductArn: smithy_client_1._json,
        ResourceApplicationArn: smithy_client_1._json,
        ResourceApplicationName: smithy_client_1._json,
        ResourceAwsEc2InstanceIamInstanceProfileArn: smithy_client_1._json,
        ResourceAwsEc2InstanceImageId: smithy_client_1._json,
        ResourceAwsEc2InstanceIpV4Addresses: smithy_client_1._json,
        ResourceAwsEc2InstanceIpV6Addresses: smithy_client_1._json,
        ResourceAwsEc2InstanceKeyName: smithy_client_1._json,
        ResourceAwsEc2InstanceLaunchedAt: smithy_client_1._json,
        ResourceAwsEc2InstanceSubnetId: smithy_client_1._json,
        ResourceAwsEc2InstanceType: smithy_client_1._json,
        ResourceAwsEc2InstanceVpcId: smithy_client_1._json,
        ResourceAwsIamAccessKeyCreatedAt: smithy_client_1._json,
        ResourceAwsIamAccessKeyPrincipalName: smithy_client_1._json,
        ResourceAwsIamAccessKeyStatus: smithy_client_1._json,
        ResourceAwsIamAccessKeyUserName: smithy_client_1._json,
        ResourceAwsIamUserUserName: smithy_client_1._json,
        ResourceAwsS3BucketOwnerId: smithy_client_1._json,
        ResourceAwsS3BucketOwnerName: smithy_client_1._json,
        ResourceContainerImageId: smithy_client_1._json,
        ResourceContainerImageName: smithy_client_1._json,
        ResourceContainerLaunchedAt: smithy_client_1._json,
        ResourceContainerName: smithy_client_1._json,
        ResourceDetailsOther: smithy_client_1._json,
        ResourceId: smithy_client_1._json,
        ResourcePartition: smithy_client_1._json,
        ResourceRegion: smithy_client_1._json,
        ResourceTags: smithy_client_1._json,
        ResourceType: smithy_client_1._json,
        Sample: smithy_client_1._json,
        SeverityLabel: smithy_client_1._json,
        SeverityNormalized: (_) => de_NumberFilterList(_, context),
        SeverityProduct: (_) => de_NumberFilterList(_, context),
        SourceUrl: smithy_client_1._json,
        ThreatIntelIndicatorCategory: smithy_client_1._json,
        ThreatIntelIndicatorLastObservedAt: smithy_client_1._json,
        ThreatIntelIndicatorSource: smithy_client_1._json,
        ThreatIntelIndicatorSourceUrl: smithy_client_1._json,
        ThreatIntelIndicatorType: smithy_client_1._json,
        ThreatIntelIndicatorValue: smithy_client_1._json,
        Title: smithy_client_1._json,
        Type: smithy_client_1._json,
        UpdatedAt: smithy_client_1._json,
        UserDefinedFields: smithy_client_1._json,
        VerificationState: smithy_client_1._json,
        VulnerabilitiesExploitAvailable: smithy_client_1._json,
        VulnerabilitiesFixAvailable: smithy_client_1._json,
        WorkflowState: smithy_client_1._json,
        WorkflowStatus: smithy_client_1._json,
    });
};
const de_AwsSecurityFindingList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AwsSecurityFinding(entry, context);
    });
    return retVal;
};
const de_ConfigurationOptions = (output, context) => {
    if (output.Boolean != null) {
        return {
            Boolean: (0, smithy_client_1._json)(output.Boolean),
        };
    }
    if (output.Double != null) {
        return {
            Double: de_DoubleConfigurationOptions(output.Double, context),
        };
    }
    if (output.Enum != null) {
        return {
            Enum: (0, smithy_client_1._json)(output.Enum),
        };
    }
    if (output.EnumList != null) {
        return {
            EnumList: (0, smithy_client_1._json)(output.EnumList),
        };
    }
    if (output.Integer != null) {
        return {
            Integer: (0, smithy_client_1._json)(output.Integer),
        };
    }
    if (output.IntegerList != null) {
        return {
            IntegerList: (0, smithy_client_1._json)(output.IntegerList),
        };
    }
    if (output.String != null) {
        return {
            String: (0, smithy_client_1._json)(output.String),
        };
    }
    if (output.StringList != null) {
        return {
            StringList: (0, smithy_client_1._json)(output.StringList),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
const de_ConfigurationPolicyAssociationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ConfigurationPolicyAssociationSummary(entry, context);
    });
    return retVal;
};
const de_ConfigurationPolicyAssociationSummary = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        AssociationStatus: smithy_client_1.expectString,
        AssociationStatusMessage: smithy_client_1.expectString,
        AssociationType: smithy_client_1.expectString,
        ConfigurationPolicyId: smithy_client_1.expectString,
        TargetId: smithy_client_1.expectString,
        TargetType: smithy_client_1.expectString,
        UpdatedAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_)),
    });
};
const de_ConfigurationPolicyAssociationSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ConfigurationPolicyAssociationSummary(entry, context);
    });
    return retVal;
};
const de_ConfigurationPolicySummary = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Arn: smithy_client_1.expectString,
        Description: smithy_client_1.expectString,
        Id: smithy_client_1.expectString,
        Name: smithy_client_1.expectString,
        ServiceEnabled: smithy_client_1.expectBoolean,
        UpdatedAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_)),
    });
};
const de_ConfigurationPolicySummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ConfigurationPolicySummary(entry, context);
    });
    return retVal;
};
const de_Cvss = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Adjustments: smithy_client_1._json,
        BaseScore: smithy_client_1.limitedParseDouble,
        BaseVector: smithy_client_1.expectString,
        Source: smithy_client_1.expectString,
        Version: smithy_client_1.expectString,
    });
};
const de_CvssList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Cvss(entry, context);
    });
    return retVal;
};
const de_DoubleConfigurationOptions = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        DefaultValue: smithy_client_1.limitedParseDouble,
        Max: smithy_client_1.limitedParseDouble,
        Min: smithy_client_1.limitedParseDouble,
    });
};
const de_FindingHistoryRecord = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        FindingCreated: smithy_client_1.expectBoolean,
        FindingIdentifier: smithy_client_1._json,
        NextToken: smithy_client_1.expectString,
        UpdateSource: smithy_client_1._json,
        UpdateTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_)),
        Updates: smithy_client_1._json,
    });
};
const de_FindingHistoryRecordList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FindingHistoryRecord(entry, context);
    });
    return retVal;
};
const de_GeoLocation = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Lat: smithy_client_1.limitedParseDouble,
        Lon: smithy_client_1.limitedParseDouble,
    });
};
const de_Insight = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Filters: (_) => de_AwsSecurityFindingFilters(_, context),
        GroupByAttribute: smithy_client_1.expectString,
        InsightArn: smithy_client_1.expectString,
        Name: smithy_client_1.expectString,
    });
};
const de_InsightList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Insight(entry, context);
    });
    return retVal;
};
const de_Invitation = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        AccountId: smithy_client_1.expectString,
        InvitationId: smithy_client_1.expectString,
        InvitedAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_)),
        MemberStatus: smithy_client_1.expectString,
    });
};
const de_InvitationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Invitation(entry, context);
    });
    return retVal;
};
const de_Member = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        AccountId: smithy_client_1.expectString,
        AdministratorId: smithy_client_1.expectString,
        Email: smithy_client_1.expectString,
        InvitedAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_)),
        MasterId: smithy_client_1.expectString,
        MemberStatus: smithy_client_1.expectString,
        UpdatedAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_)),
    });
};
const de_MemberList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Member(entry, context);
    });
    return retVal;
};
const de_NetworkConnectionAction = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Blocked: smithy_client_1.expectBoolean,
        ConnectionDirection: smithy_client_1.expectString,
        LocalPortDetails: smithy_client_1._json,
        Protocol: smithy_client_1.expectString,
        RemoteIpDetails: (_) => de_ActionRemoteIpDetails(_, context),
        RemotePortDetails: smithy_client_1._json,
    });
};
const de_NumberFilter = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Eq: smithy_client_1.limitedParseDouble,
        Gt: smithy_client_1.limitedParseDouble,
        Gte: smithy_client_1.limitedParseDouble,
        Lt: smithy_client_1.limitedParseDouble,
        Lte: smithy_client_1.limitedParseDouble,
    });
};
const de_NumberFilterList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_NumberFilter(entry, context);
    });
    return retVal;
};
const de_ParameterConfiguration = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Value: (_) => de_ParameterValue((0, core_1.awsExpectUnion)(_), context),
        ValueType: smithy_client_1.expectString,
    });
};
const de_ParameterDefinition = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        ConfigurationOptions: (_) => de_ConfigurationOptions((0, core_1.awsExpectUnion)(_), context),
        Description: smithy_client_1.expectString,
    });
};
const de_ParameterDefinitions = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_ParameterDefinition(value, context);
        return acc;
    }, {});
};
const de_Parameters = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_ParameterConfiguration(value, context);
        return acc;
    }, {});
};
const de_ParameterValue = (output, context) => {
    if ((0, smithy_client_1.expectBoolean)(output.Boolean) !== undefined) {
        return { Boolean: (0, smithy_client_1.expectBoolean)(output.Boolean) };
    }
    if ((0, smithy_client_1.limitedParseDouble)(output.Double) !== undefined) {
        return { Double: (0, smithy_client_1.limitedParseDouble)(output.Double) };
    }
    if ((0, smithy_client_1.expectString)(output.Enum) !== undefined) {
        return { Enum: (0, smithy_client_1.expectString)(output.Enum) };
    }
    if (output.EnumList != null) {
        return {
            EnumList: (0, smithy_client_1._json)(output.EnumList),
        };
    }
    if ((0, smithy_client_1.expectInt32)(output.Integer) !== undefined) {
        return { Integer: (0, smithy_client_1.expectInt32)(output.Integer) };
    }
    if (output.IntegerList != null) {
        return {
            IntegerList: (0, smithy_client_1._json)(output.IntegerList),
        };
    }
    if ((0, smithy_client_1.expectString)(output.String) !== undefined) {
        return { String: (0, smithy_client_1.expectString)(output.String) };
    }
    if (output.StringList != null) {
        return {
            StringList: (0, smithy_client_1._json)(output.StringList),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
const de_Policy = (output, context) => {
    if (output.SecurityHub != null) {
        return {
            SecurityHub: de_SecurityHubPolicy(output.SecurityHub, context),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
const de_PortProbeAction = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Blocked: smithy_client_1.expectBoolean,
        PortProbeDetails: (_) => de_PortProbeDetailList(_, context),
    });
};
const de_PortProbeDetail = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        LocalIpDetails: smithy_client_1._json,
        LocalPortDetails: smithy_client_1._json,
        RemoteIpDetails: (_) => de_ActionRemoteIpDetails(_, context),
    });
};
const de_PortProbeDetailList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PortProbeDetail(entry, context);
    });
    return retVal;
};
const de_Resource = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        ApplicationArn: smithy_client_1.expectString,
        ApplicationName: smithy_client_1.expectString,
        DataClassification: smithy_client_1._json,
        Details: (_) => de_ResourceDetails(_, context),
        Id: smithy_client_1.expectString,
        Partition: smithy_client_1.expectString,
        Region: smithy_client_1.expectString,
        ResourceRole: smithy_client_1.expectString,
        Tags: smithy_client_1._json,
        Type: smithy_client_1.expectString,
    });
};
const de_ResourceDetails = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        AwsAmazonMqBroker: smithy_client_1._json,
        AwsApiGatewayRestApi: smithy_client_1._json,
        AwsApiGatewayStage: (_) => de_AwsApiGatewayStageDetails(_, context),
        AwsApiGatewayV2Api: smithy_client_1._json,
        AwsApiGatewayV2Stage: (_) => de_AwsApiGatewayV2StageDetails(_, context),
        AwsAppSyncGraphQlApi: smithy_client_1._json,
        AwsAthenaWorkGroup: smithy_client_1._json,
        AwsAutoScalingAutoScalingGroup: smithy_client_1._json,
        AwsAutoScalingLaunchConfiguration: smithy_client_1._json,
        AwsBackupBackupPlan: smithy_client_1._json,
        AwsBackupBackupVault: smithy_client_1._json,
        AwsBackupRecoveryPoint: smithy_client_1._json,
        AwsCertificateManagerCertificate: smithy_client_1._json,
        AwsCloudFormationStack: smithy_client_1._json,
        AwsCloudFrontDistribution: smithy_client_1._json,
        AwsCloudTrailTrail: smithy_client_1._json,
        AwsCloudWatchAlarm: (_) => de_AwsCloudWatchAlarmDetails(_, context),
        AwsCodeBuildProject: smithy_client_1._json,
        AwsDmsEndpoint: smithy_client_1._json,
        AwsDmsReplicationInstance: smithy_client_1._json,
        AwsDmsReplicationTask: smithy_client_1._json,
        AwsDynamoDbTable: smithy_client_1._json,
        AwsEc2ClientVpnEndpoint: smithy_client_1._json,
        AwsEc2Eip: smithy_client_1._json,
        AwsEc2Instance: smithy_client_1._json,
        AwsEc2LaunchTemplate: (_) => de_AwsEc2LaunchTemplateDetails(_, context),
        AwsEc2NetworkAcl: smithy_client_1._json,
        AwsEc2NetworkInterface: smithy_client_1._json,
        AwsEc2RouteTable: smithy_client_1._json,
        AwsEc2SecurityGroup: smithy_client_1._json,
        AwsEc2Subnet: smithy_client_1._json,
        AwsEc2TransitGateway: smithy_client_1._json,
        AwsEc2Volume: smithy_client_1._json,
        AwsEc2Vpc: smithy_client_1._json,
        AwsEc2VpcEndpointService: smithy_client_1._json,
        AwsEc2VpcPeeringConnection: smithy_client_1._json,
        AwsEc2VpnConnection: smithy_client_1._json,
        AwsEcrContainerImage: smithy_client_1._json,
        AwsEcrRepository: smithy_client_1._json,
        AwsEcsCluster: smithy_client_1._json,
        AwsEcsContainer: smithy_client_1._json,
        AwsEcsService: smithy_client_1._json,
        AwsEcsTask: smithy_client_1._json,
        AwsEcsTaskDefinition: smithy_client_1._json,
        AwsEfsAccessPoint: smithy_client_1._json,
        AwsEksCluster: smithy_client_1._json,
        AwsElasticBeanstalkEnvironment: smithy_client_1._json,
        AwsElasticsearchDomain: smithy_client_1._json,
        AwsElbLoadBalancer: smithy_client_1._json,
        AwsElbv2LoadBalancer: smithy_client_1._json,
        AwsEventSchemasRegistry: smithy_client_1._json,
        AwsEventsEndpoint: smithy_client_1._json,
        AwsEventsEventbus: smithy_client_1._json,
        AwsGuardDutyDetector: smithy_client_1._json,
        AwsIamAccessKey: smithy_client_1._json,
        AwsIamGroup: smithy_client_1._json,
        AwsIamPolicy: smithy_client_1._json,
        AwsIamRole: smithy_client_1._json,
        AwsIamUser: smithy_client_1._json,
        AwsKinesisStream: smithy_client_1._json,
        AwsKmsKey: (_) => de_AwsKmsKeyDetails(_, context),
        AwsLambdaFunction: smithy_client_1._json,
        AwsLambdaLayerVersion: smithy_client_1._json,
        AwsMskCluster: smithy_client_1._json,
        AwsNetworkFirewallFirewall: smithy_client_1._json,
        AwsNetworkFirewallFirewallPolicy: smithy_client_1._json,
        AwsNetworkFirewallRuleGroup: (_) => de_AwsNetworkFirewallRuleGroupDetails(_, context),
        AwsOpenSearchServiceDomain: smithy_client_1._json,
        AwsRdsDbCluster: smithy_client_1._json,
        AwsRdsDbClusterSnapshot: smithy_client_1._json,
        AwsRdsDbInstance: smithy_client_1._json,
        AwsRdsDbSecurityGroup: smithy_client_1._json,
        AwsRdsDbSnapshot: smithy_client_1._json,
        AwsRdsEventSubscription: smithy_client_1._json,
        AwsRedshiftCluster: (_) => de_AwsRedshiftClusterDetails(_, context),
        AwsRoute53HostedZone: smithy_client_1._json,
        AwsS3AccessPoint: smithy_client_1._json,
        AwsS3AccountPublicAccessBlock: smithy_client_1._json,
        AwsS3Bucket: smithy_client_1._json,
        AwsS3Object: smithy_client_1._json,
        AwsSageMakerNotebookInstance: smithy_client_1._json,
        AwsSecretsManagerSecret: smithy_client_1._json,
        AwsSnsTopic: smithy_client_1._json,
        AwsSqsQueue: smithy_client_1._json,
        AwsSsmPatchCompliance: smithy_client_1._json,
        AwsStepFunctionStateMachine: smithy_client_1._json,
        AwsWafRateBasedRule: smithy_client_1._json,
        AwsWafRegionalRateBasedRule: smithy_client_1._json,
        AwsWafRegionalRule: smithy_client_1._json,
        AwsWafRegionalRuleGroup: smithy_client_1._json,
        AwsWafRegionalWebAcl: smithy_client_1._json,
        AwsWafRule: smithy_client_1._json,
        AwsWafRuleGroup: smithy_client_1._json,
        AwsWafWebAcl: smithy_client_1._json,
        AwsWafv2RuleGroup: smithy_client_1._json,
        AwsWafv2WebAcl: smithy_client_1._json,
        AwsXrayEncryptionConfig: smithy_client_1._json,
        Container: smithy_client_1._json,
        Other: smithy_client_1._json,
    });
};
const de_ResourceList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Resource(entry, context);
    });
    return retVal;
};
const de_SecurityControl = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Description: smithy_client_1.expectString,
        LastUpdateReason: smithy_client_1.expectString,
        Parameters: (_) => de_Parameters(_, context),
        RemediationUrl: smithy_client_1.expectString,
        SecurityControlArn: smithy_client_1.expectString,
        SecurityControlId: smithy_client_1.expectString,
        SecurityControlStatus: smithy_client_1.expectString,
        SeverityRating: smithy_client_1.expectString,
        Title: smithy_client_1.expectString,
        UpdateStatus: smithy_client_1.expectString,
    });
};
const de_SecurityControlCustomParameter = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Parameters: (_) => de_Parameters(_, context),
        SecurityControlId: smithy_client_1.expectString,
    });
};
const de_SecurityControlCustomParametersList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SecurityControlCustomParameter(entry, context);
    });
    return retVal;
};
const de_SecurityControlDefinition = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        CurrentRegionAvailability: smithy_client_1.expectString,
        CustomizableProperties: smithy_client_1._json,
        Description: smithy_client_1.expectString,
        ParameterDefinitions: (_) => de_ParameterDefinitions(_, context),
        RemediationUrl: smithy_client_1.expectString,
        SecurityControlId: smithy_client_1.expectString,
        SeverityRating: smithy_client_1.expectString,
        Title: smithy_client_1.expectString,
    });
};
const de_SecurityControlDefinitions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SecurityControlDefinition(entry, context);
    });
    return retVal;
};
const de_SecurityControls = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SecurityControl(entry, context);
    });
    return retVal;
};
const de_SecurityControlsConfiguration = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        DisabledSecurityControlIdentifiers: smithy_client_1._json,
        EnabledSecurityControlIdentifiers: smithy_client_1._json,
        SecurityControlCustomParameters: (_) => de_SecurityControlCustomParametersList(_, context),
    });
};
const de_SecurityHubPolicy = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        EnabledStandardIdentifiers: smithy_client_1._json,
        SecurityControlsConfiguration: (_) => de_SecurityControlsConfiguration(_, context),
        ServiceEnabled: smithy_client_1.expectBoolean,
    });
};
const de_Severity = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Label: smithy_client_1.expectString,
        Normalized: smithy_client_1.expectInt32,
        Original: smithy_client_1.expectString,
        Product: smithy_client_1.limitedParseDouble,
    });
};
const de_SeverityUpdate = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Label: smithy_client_1.expectString,
        Normalized: smithy_client_1.expectInt32,
        Product: smithy_client_1.limitedParseDouble,
    });
};
const de_StandardsControl = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        ControlId: smithy_client_1.expectString,
        ControlStatus: smithy_client_1.expectString,
        ControlStatusUpdatedAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_)),
        Description: smithy_client_1.expectString,
        DisabledReason: smithy_client_1.expectString,
        RelatedRequirements: smithy_client_1._json,
        RemediationUrl: smithy_client_1.expectString,
        SeverityRating: smithy_client_1.expectString,
        StandardsControlArn: smithy_client_1.expectString,
        Title: smithy_client_1.expectString,
    });
};
const de_StandardsControlAssociationDetail = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        AssociationStatus: smithy_client_1.expectString,
        RelatedRequirements: smithy_client_1._json,
        SecurityControlArn: smithy_client_1.expectString,
        SecurityControlId: smithy_client_1.expectString,
        StandardsArn: smithy_client_1.expectString,
        StandardsControlArns: smithy_client_1._json,
        StandardsControlDescription: smithy_client_1.expectString,
        StandardsControlTitle: smithy_client_1.expectString,
        UpdatedAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_)),
        UpdatedReason: smithy_client_1.expectString,
    });
};
const de_StandardsControlAssociationDetails = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_StandardsControlAssociationDetail(entry, context);
    });
    return retVal;
};
const de_StandardsControlAssociationSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_StandardsControlAssociationSummary(entry, context);
    });
    return retVal;
};
const de_StandardsControlAssociationSummary = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        AssociationStatus: smithy_client_1.expectString,
        RelatedRequirements: smithy_client_1._json,
        SecurityControlArn: smithy_client_1.expectString,
        SecurityControlId: smithy_client_1.expectString,
        StandardsArn: smithy_client_1.expectString,
        StandardsControlDescription: smithy_client_1.expectString,
        StandardsControlTitle: smithy_client_1.expectString,
        UpdatedAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_)),
        UpdatedReason: smithy_client_1.expectString,
    });
};
const de_StandardsControls = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_StandardsControl(entry, context);
    });
    return retVal;
};
const de_Vulnerability = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        CodeVulnerabilities: smithy_client_1._json,
        Cvss: (_) => de_CvssList(_, context),
        EpssScore: smithy_client_1.limitedParseDouble,
        ExploitAvailable: smithy_client_1.expectString,
        FixAvailable: smithy_client_1.expectString,
        Id: smithy_client_1.expectString,
        ReferenceUrls: smithy_client_1._json,
        RelatedVulnerabilities: smithy_client_1._json,
        Vendor: smithy_client_1._json,
        VulnerablePackages: smithy_client_1._json,
    });
};
const de_VulnerabilityList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Vulnerability(entry, context);
    });
    return retVal;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => (0, smithy_client_1.collectBody)(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const _HA = "HubArn";
const _MR = "MaxResults";
const _NT = "NextToken";
const _OA = "OnlyAssociated";
const _PA = "ProductArn";
const _SA = "StandardsArn";
const _SCI = "SecurityControlId";
const _TK = "TagKeys";
const _tK = "tagKeys";
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
