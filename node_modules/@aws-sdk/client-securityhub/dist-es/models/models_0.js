import { SecurityHubServiceException as __BaseException } from "./SecurityHubServiceException";
export class InternalException extends __BaseException {
    name = "InternalException";
    $fault = "server";
    Message;
    Code;
    constructor(opts) {
        super({
            name: "InternalException",
            $fault: "server",
            ...opts,
        });
        Object.setPrototypeOf(this, InternalException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
export class InvalidAccessException extends __BaseException {
    name = "InvalidAccessException";
    $fault = "client";
    Message;
    Code;
    constructor(opts) {
        super({
            name: "InvalidAccessException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidAccessException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
export class InvalidInputException extends __BaseException {
    name = "InvalidInputException";
    $fault = "client";
    Message;
    Code;
    constructor(opts) {
        super({
            name: "InvalidInputException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidInputException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
export class LimitExceededException extends __BaseException {
    name = "LimitExceededException";
    $fault = "client";
    Message;
    Code;
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, LimitExceededException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
export class ResourceNotFoundException extends __BaseException {
    name = "ResourceNotFoundException";
    $fault = "client";
    Message;
    Code;
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
export class AccessDeniedException extends __BaseException {
    name = "AccessDeniedException";
    $fault = "client";
    Message;
    Code;
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
export const SeverityLabel = {
    CRITICAL: "CRITICAL",
    HIGH: "HIGH",
    INFORMATIONAL: "INFORMATIONAL",
    LOW: "LOW",
    MEDIUM: "MEDIUM",
};
export const VerificationState = {
    BENIGN_POSITIVE: "BENIGN_POSITIVE",
    FALSE_POSITIVE: "FALSE_POSITIVE",
    TRUE_POSITIVE: "TRUE_POSITIVE",
    UNKNOWN: "UNKNOWN",
};
export const WorkflowStatus = {
    NEW: "NEW",
    NOTIFIED: "NOTIFIED",
    RESOLVED: "RESOLVED",
    SUPPRESSED: "SUPPRESSED",
};
export const AutomationRulesActionType = {
    FINDING_FIELDS_UPDATE: "FINDING_FIELDS_UPDATE",
};
export const ActorSessionMfaStatus = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export const AdminStatus = {
    DISABLE_IN_PROGRESS: "DISABLE_IN_PROGRESS",
    ENABLED: "ENABLED",
};
export const AllowedOperators = {
    AND: "AND",
    OR: "OR",
};
export const ConfigurationPolicyAssociationStatus = {
    FAILED: "FAILED",
    PENDING: "PENDING",
    SUCCESS: "SUCCESS",
};
export const AssociationType = {
    APPLIED: "APPLIED",
    INHERITED: "INHERITED",
};
export const AssociationStatus = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export const AutoEnableStandards = {
    DEFAULT: "DEFAULT",
    NONE: "NONE",
};
export const AutomationRulesActionTypeV2 = {
    EXTERNAL_INTEGRATION: "EXTERNAL_INTEGRATION",
    FINDING_FIELDS_UPDATE: "FINDING_FIELDS_UPDATE",
};
export const StringFilterComparison = {
    CONTAINS: "CONTAINS",
    CONTAINS_WORD: "CONTAINS_WORD",
    EQUALS: "EQUALS",
    NOT_CONTAINS: "NOT_CONTAINS",
    NOT_EQUALS: "NOT_EQUALS",
    PREFIX: "PREFIX",
    PREFIX_NOT_EQUALS: "PREFIX_NOT_EQUALS",
};
export const DateRangeUnit = {
    DAYS: "DAYS",
};
export const MapFilterComparison = {
    CONTAINS: "CONTAINS",
    EQUALS: "EQUALS",
    NOT_CONTAINS: "NOT_CONTAINS",
    NOT_EQUALS: "NOT_EQUALS",
};
export const RuleStatus = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export const RuleStatusV2 = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
