import { SENSITIVE_STRING } from "@smithy/smithy-client";
import { SecurityHubServiceException as __BaseException } from "./SecurityHubServiceException";
export const Partition = {
    AWS: "aws",
    AWS_CN: "aws-cn",
    AWS_US_GOV: "aws-us-gov",
};
export const ThreatIntelIndicatorCategory = {
    BACKDOOR: "BACKDOOR",
    CARD_STEALER: "CARD_STEALER",
    COMMAND_AND_CONTROL: "COMMAND_AND_CONTROL",
    DROP_SITE: "DROP_SITE",
    EXPLOIT_SITE: "EXPLOIT_SITE",
    KEYLOGGER: "KEYLOGGER",
};
export const ThreatIntelIndicatorType = {
    DOMAIN: "DOMAIN",
    EMAIL_ADDRESS: "EMAIL_ADDRESS",
    HASH_MD5: "HASH_MD5",
    HASH_SHA1: "HASH_SHA1",
    HASH_SHA256: "HASH_SHA256",
    HASH_SHA512: "HASH_SHA512",
    IPV4_ADDRESS: "IPV4_ADDRESS",
    IPV6_ADDRESS: "IPV6_ADDRESS",
    MUTEX: "MUTEX",
    PROCESS: "PROCESS",
    URL: "URL",
};
export const VulnerabilityExploitAvailable = {
    NO: "NO",
    YES: "YES",
};
export const VulnerabilityFixAvailable = {
    NO: "NO",
    PARTIAL: "PARTIAL",
    YES: "YES",
};
export const WorkflowState = {
    ASSIGNED: "ASSIGNED",
    DEFERRED: "DEFERRED",
    IN_PROGRESS: "IN_PROGRESS",
    NEW: "NEW",
    RESOLVED: "RESOLVED",
};
export const StandardsControlsUpdatable = {
    NOT_READY_FOR_UPDATES: "NOT_READY_FOR_UPDATES",
    READY_FOR_UPDATES: "READY_FOR_UPDATES",
};
export const StandardsStatus = {
    DELETING: "DELETING",
    FAILED: "FAILED",
    INCOMPLETE: "INCOMPLETE",
    PENDING: "PENDING",
    READY: "READY",
};
export const StatusReasonCode = {
    INTERNAL_ERROR: "INTERNAL_ERROR",
    MAXIMUM_NUMBER_OF_CONFIG_RULES_EXCEEDED: "MAXIMUM_NUMBER_OF_CONFIG_RULES_EXCEEDED",
    NO_AVAILABLE_CONFIGURATION_RECORDER: "NO_AVAILABLE_CONFIGURATION_RECORDER",
};
export var Target;
(function (Target) {
    Target.visit = (value, visitor) => {
        if (value.AccountId !== undefined)
            return visitor.AccountId(value.AccountId);
        if (value.OrganizationalUnitId !== undefined)
            return visitor.OrganizationalUnitId(value.OrganizationalUnitId);
        if (value.RootId !== undefined)
            return visitor.RootId(value.RootId);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(Target || (Target = {}));
export const TargetType = {
    ACCOUNT: "ACCOUNT",
    ORGANIZATIONAL_UNIT: "ORGANIZATIONAL_UNIT",
    ROOT: "ROOT",
};
export var ParameterValue;
(function (ParameterValue) {
    ParameterValue.visit = (value, visitor) => {
        if (value.Integer !== undefined)
            return visitor.Integer(value.Integer);
        if (value.IntegerList !== undefined)
            return visitor.IntegerList(value.IntegerList);
        if (value.Double !== undefined)
            return visitor.Double(value.Double);
        if (value.String !== undefined)
            return visitor.String(value.String);
        if (value.StringList !== undefined)
            return visitor.StringList(value.StringList);
        if (value.Boolean !== undefined)
            return visitor.Boolean(value.Boolean);
        if (value.Enum !== undefined)
            return visitor.Enum(value.Enum);
        if (value.EnumList !== undefined)
            return visitor.EnumList(value.EnumList);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(ParameterValue || (ParameterValue = {}));
export const ParameterValueType = {
    CUSTOM: "CUSTOM",
    DEFAULT: "DEFAULT",
};
export const ControlStatus = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export const SeverityRating = {
    CRITICAL: "CRITICAL",
    HIGH: "HIGH",
    LOW: "LOW",
    MEDIUM: "MEDIUM",
};
export const UpdateStatus = {
    READY: "READY",
    UPDATING: "UPDATING",
};
export const UnprocessedErrorCode = {
    ACCESS_DENIED: "ACCESS_DENIED",
    INVALID_INPUT: "INVALID_INPUT",
    LIMIT_EXCEEDED: "LIMIT_EXCEEDED",
    NOT_FOUND: "NOT_FOUND",
};
export const BatchUpdateFindingsV2UnprocessedFindingErrorCode = {
    ConflictException: "ConflictException",
    InternalServerException: "InternalServerException",
    ResourceNotFoundException: "ResourceNotFoundException",
    ValidationException: "ValidationException",
};
export class ConflictException extends __BaseException {
    name = "ConflictException";
    $fault = "client";
    Message;
    Code;
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
export class InternalServerException extends __BaseException {
    name = "InternalServerException";
    $fault = "server";
    Message;
    Code;
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        Object.setPrototypeOf(this, InternalServerException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
export class ThrottlingException extends __BaseException {
    name = "ThrottlingException";
    $fault = "client";
    Message;
    Code;
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ThrottlingException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
export class ValidationException extends __BaseException {
    name = "ValidationException";
    $fault = "client";
    Message;
    Code;
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ValidationException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
export const OcsfBooleanField = {
    COMPLIANCE_ASSESSMENTS_MEETS_CRITERIA: "compliance.assessments.meets_criteria",
    VULNERABILITIES_IS_EXPLOIT_AVAILABLE: "vulnerabilities.is_exploit_available",
    VULNERABILITIES_IS_FIX_AVAILABLE: "vulnerabilities.is_fix_available",
};
export const OcsfDateField = {
    FINDING_INFO_CREATED_TIME_DT: "finding_info.created_time_dt",
    FINDING_INFO_FIRST_SEEN_TIME_DT: "finding_info.first_seen_time_dt",
    FINDING_INFO_LAST_SEEN_TIME_DT: "finding_info.last_seen_time_dt",
    FINDING_INFO_MODIFIED_TIME_DT: "finding_info.modified_time_dt",
};
export const OcsfMapField = {
    RESOURCES_TAGS: "resources.tags",
};
export const OcsfNumberField = {
    ACTIVITY_ID: "activity_id",
    COMPLIANCE_STATUS_ID: "compliance.status_id",
    CONFIDENCE_SCORE: "confidence_score",
    FINDING_INFO_RELATED_EVENTS_COUNT: "finding_info.related_events_count",
    SEVERITY_ID: "severity_id",
    STATUS_ID: "status_id",
};
export const OcsfStringField = {
    ACTIVITY_NAME: "activity_name",
    CLASS_NAME: "class_name",
    CLOUD_ACCOUNT_UID: "cloud.account.uid",
    CLOUD_PROVIDER: "cloud.provider",
    CLOUD_REGION: "cloud.region",
    COMMENT: "comment",
    COMPLIANCE_ASSESSMENTS_CATEGORY: "compliance.assessments.category",
    COMPLIANCE_ASSESSMENTS_NAME: "compliance.assessments.name",
    COMPLIANCE_CONTROL: "compliance.control",
    COMPLIANCE_STANDARDS: "compliance.standards",
    COMPLIANCE_STATUS: "compliance.status",
    FINDING_INFO_DESC: "finding_info.desc",
    FINDING_INFO_RELATED_EVENTS_PRODUCT_UID: "finding_info.related_events.product.uid",
    FINDING_INFO_RELATED_EVENTS_TITLE: "finding_info.related_events.title",
    FINDING_INFO_RELATED_EVENTS_UID: "finding_info.related_events.uid",
    FINDING_INFO_SRC_URL: "finding_info.src_url",
    FINDING_INFO_TITLE: "finding_info.title",
    FINDING_INFO_TYPES: "finding_info.types",
    FINDING_INFO_UID: "finding_info.uid",
    METADATA_PRODUCT_NAME: "metadata.product.name",
    METADATA_PRODUCT_UID: "metadata.product.uid",
    METADATA_PRODUCT_VENDOR_NAME: "metadata.product.vendor_name",
    METADATA_UID: "metadata.uid",
    REMEDIATION_DESC: "remediation.desc",
    REMEDIATION_REFERENCES: "remediation.references",
    RESOURCES_CLOUD_PARTITION: "resources.cloud_partition",
    RESOURCES_REGION: "resources.region",
    RESOURCES_TYPE: "resources.type",
    RESOURCES_UID: "resources.uid",
    SEVERITY: "severity",
    STATUS: "status",
    VULNERABILITIES_FIX_COVERAGE: "vulnerabilities.fix_coverage",
};
export var ConfigurationOptions;
(function (ConfigurationOptions) {
    ConfigurationOptions.visit = (value, visitor) => {
        if (value.Integer !== undefined)
            return visitor.Integer(value.Integer);
        if (value.IntegerList !== undefined)
            return visitor.IntegerList(value.IntegerList);
        if (value.Double !== undefined)
            return visitor.Double(value.Double);
        if (value.String !== undefined)
            return visitor.String(value.String);
        if (value.StringList !== undefined)
            return visitor.StringList(value.StringList);
        if (value.Boolean !== undefined)
            return visitor.Boolean(value.Boolean);
        if (value.Enum !== undefined)
            return visitor.Enum(value.Enum);
        if (value.EnumList !== undefined)
            return visitor.EnumList(value.EnumList);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(ConfigurationOptions || (ConfigurationOptions = {}));
export const ConnectorAuthStatus = {
    ACTIVE: "ACTIVE",
    FAILED: "FAILED",
};
export const ConnectorProviderName = {
    JIRA_CLOUD: "JIRA_CLOUD",
    SERVICENOW: "SERVICENOW",
};
export const ConnectorStatus = {
    CONNECTED: "CONNECTED",
    FAILED_TO_CONNECT: "FAILED_TO_CONNECT",
    PENDING_AUTHORIZATION: "PENDING_AUTHORIZATION",
    PENDING_CONFIGURATION: "PENDING_CONFIGURATION",
};
export const ControlFindingGenerator = {
    SECURITY_CONTROL: "SECURITY_CONTROL",
    STANDARD_CONTROL: "STANDARD_CONTROL",
};
export class ResourceConflictException extends __BaseException {
    name = "ResourceConflictException";
    $fault = "client";
    Message;
    Code;
    constructor(opts) {
        super({
            name: "ResourceConflictException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ResourceConflictException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
export var Criteria;
(function (Criteria) {
    Criteria.visit = (value, visitor) => {
        if (value.OcsfFindingCriteria !== undefined)
            return visitor.OcsfFindingCriteria(value.OcsfFindingCriteria);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(Criteria || (Criteria = {}));
export var Policy;
(function (Policy) {
    Policy.visit = (value, visitor) => {
        if (value.SecurityHub !== undefined)
            return visitor.SecurityHub(value.SecurityHub);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(Policy || (Policy = {}));
export var ProviderConfiguration;
(function (ProviderConfiguration) {
    ProviderConfiguration.visit = (value, visitor) => {
        if (value.JiraCloud !== undefined)
            return visitor.JiraCloud(value.JiraCloud);
        if (value.ServiceNow !== undefined)
            return visitor.ServiceNow(value.ServiceNow);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(ProviderConfiguration || (ProviderConfiguration = {}));
export const SecurityControlProperty = {
    Parameters: "Parameters",
};
export const OrganizationConfigurationConfigurationType = {
    CENTRAL: "CENTRAL",
    LOCAL: "LOCAL",
};
export const OrganizationConfigurationStatus = {
    ENABLED: "ENABLED",
    FAILED: "FAILED",
    PENDING: "PENDING",
};
export const IntegrationType = {
    RECEIVE_FINDINGS_FROM_SECURITY_HUB: "RECEIVE_FINDINGS_FROM_SECURITY_HUB",
    SEND_FINDINGS_TO_SECURITY_HUB: "SEND_FINDINGS_TO_SECURITY_HUB",
    UPDATE_FINDINGS_IN_SECURITY_HUB: "UPDATE_FINDINGS_IN_SECURITY_HUB",
};
export const IntegrationV2Type = {
    RECEIVE_FINDINGS_FROM_SECURITY_HUB: "RECEIVE_FINDINGS_FROM_SECURITY_HUB",
    SEND_FINDINGS_TO_SECURITY_HUB: "SEND_FINDINGS_TO_SECURITY_HUB",
    UPDATE_FINDINGS_IN_SECURITY_HUB: "UPDATE_FINDINGS_IN_SECURITY_HUB",
};
export const SecurityHubFeature = {
    SECURITY_HUB: "SecurityHub",
    SECURITY_HUB_V2: "SecurityHubV2",
};
export const FindingHistoryUpdateSourceType = {
    BATCH_IMPORT_FINDINGS: "BATCH_IMPORT_FINDINGS",
    BATCH_UPDATE_FINDINGS: "BATCH_UPDATE_FINDINGS",
};
export var ProviderDetail;
(function (ProviderDetail) {
    ProviderDetail.visit = (value, visitor) => {
        if (value.JiraCloud !== undefined)
            return visitor.JiraCloud(value.JiraCloud);
        if (value.ServiceNow !== undefined)
            return visitor.ServiceNow(value.ServiceNow);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(ProviderDetail || (ProviderDetail = {}));
export const SortOrder = {
    ASCENDING: "asc",
    DESCENDING: "desc",
};
export const ServiceNowProviderConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ClientSecret && { ClientSecret: SENSITIVE_STRING }),
});
export const ProviderConfigurationFilterSensitiveLog = (obj) => {
    if (obj.JiraCloud !== undefined)
        return { JiraCloud: obj.JiraCloud };
    if (obj.ServiceNow !== undefined)
        return { ServiceNow: ServiceNowProviderConfigurationFilterSensitiveLog(obj.ServiceNow) };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
export const CreateConnectorV2RequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Provider && { Provider: ProviderConfigurationFilterSensitiveLog(obj.Provider) }),
});
