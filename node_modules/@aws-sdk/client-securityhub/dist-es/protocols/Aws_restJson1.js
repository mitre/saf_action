import { awsExpectUnion as __expectUnion, loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody, } from "@aws-sdk/core";
import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectLong as __expectLong, expectNonNull as __expectNonNull, expectObject as __expectObject, expectString as __expectString, limitedParseDouble as __limitedParseDouble, map, parseRfc3339DateTimeWithOffset as __parseRfc3339DateTimeWithOffset, serializeFloat as __serializeFloat, take, withBaseException, } from "@smithy/smithy-client";
import { AccessDeniedException, InternalException, InvalidAccessException, InvalidInputException, LimitExceededException, ResourceNotFoundException, } from "../models/models_0";
import { ParameterValue, Policy, ResourceConflictException, ResourceInUseException, } from "../models/models_2";
import { SecurityHubServiceException as __BaseException } from "../models/SecurityHubServiceException";
export const se_AcceptAdministratorInvitationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/administrator");
    let body;
    body = JSON.stringify(take(input, {
        AdministratorId: [],
        InvitationId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_AcceptInvitationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/master");
    let body;
    body = JSON.stringify(take(input, {
        InvitationId: [],
        MasterId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_BatchDeleteAutomationRulesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/automationrules/delete");
    let body;
    body = JSON.stringify(take(input, {
        AutomationRulesArns: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_BatchDisableStandardsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/standards/deregister");
    let body;
    body = JSON.stringify(take(input, {
        StandardsSubscriptionArns: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_BatchEnableStandardsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/standards/register");
    let body;
    body = JSON.stringify(take(input, {
        StandardsSubscriptionRequests: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_BatchGetAutomationRulesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/automationrules/get");
    let body;
    body = JSON.stringify(take(input, {
        AutomationRulesArns: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_BatchGetConfigurationPolicyAssociationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/configurationPolicyAssociation/batchget");
    let body;
    body = JSON.stringify(take(input, {
        ConfigurationPolicyAssociationIdentifiers: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_BatchGetSecurityControlsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/securityControls/batchGet");
    let body;
    body = JSON.stringify(take(input, {
        SecurityControlIds: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_BatchGetStandardsControlAssociationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/associations/batchGet");
    let body;
    body = JSON.stringify(take(input, {
        StandardsControlAssociationIds: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_BatchImportFindingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/findings/import");
    let body;
    body = JSON.stringify(take(input, {
        Findings: (_) => se_BatchImportFindingsRequestFindingList(_, context),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_BatchUpdateAutomationRulesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/automationrules/update");
    let body;
    body = JSON.stringify(take(input, {
        UpdateAutomationRulesRequestItems: (_) => se_UpdateAutomationRulesRequestItemsList(_, context),
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_BatchUpdateFindingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/findings/batchupdate");
    let body;
    body = JSON.stringify(take(input, {
        Confidence: [],
        Criticality: [],
        FindingIdentifiers: (_) => _json(_),
        Note: (_) => _json(_),
        RelatedFindings: (_) => _json(_),
        Severity: (_) => se_SeverityUpdate(_, context),
        Types: (_) => _json(_),
        UserDefinedFields: (_) => _json(_),
        VerificationState: [],
        Workflow: (_) => _json(_),
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_BatchUpdateStandardsControlAssociationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/associations");
    let body;
    body = JSON.stringify(take(input, {
        StandardsControlAssociationUpdates: (_) => _json(_),
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_CreateActionTargetCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/actionTargets");
    let body;
    body = JSON.stringify(take(input, {
        Description: [],
        Id: [],
        Name: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateAutomationRuleCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/automationrules/create");
    let body;
    body = JSON.stringify(take(input, {
        Actions: (_) => se_ActionList(_, context),
        Criteria: (_) => se_AutomationRulesFindingFilters(_, context),
        Description: [],
        IsTerminal: [],
        RuleName: [],
        RuleOrder: [],
        RuleStatus: [],
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateConfigurationPolicyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/configurationPolicy/create");
    let body;
    body = JSON.stringify(take(input, {
        ConfigurationPolicy: (_) => se_Policy(_, context),
        Description: [],
        Name: [],
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateFindingAggregatorCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/findingAggregator/create");
    let body;
    body = JSON.stringify(take(input, {
        RegionLinkingMode: [],
        Regions: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateInsightCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/insights");
    let body;
    body = JSON.stringify(take(input, {
        Filters: (_) => se_AwsSecurityFindingFilters(_, context),
        GroupByAttribute: [],
        Name: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateMembersCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/members");
    let body;
    body = JSON.stringify(take(input, {
        AccountDetails: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeclineInvitationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/invitations/decline");
    let body;
    body = JSON.stringify(take(input, {
        AccountIds: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteActionTargetCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/actionTargets/{ActionTargetArn+}");
    b.p("ActionTargetArn", () => input.ActionTargetArn, "{ActionTargetArn+}", true);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteConfigurationPolicyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/configurationPolicy/{Identifier}");
    b.p("Identifier", () => input.Identifier, "{Identifier}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteFindingAggregatorCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/findingAggregator/delete/{FindingAggregatorArn+}");
    b.p("FindingAggregatorArn", () => input.FindingAggregatorArn, "{FindingAggregatorArn+}", true);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteInsightCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/insights/{InsightArn+}");
    b.p("InsightArn", () => input.InsightArn, "{InsightArn+}", true);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteInvitationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/invitations/delete");
    let body;
    body = JSON.stringify(take(input, {
        AccountIds: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteMembersCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/members/delete");
    let body;
    body = JSON.stringify(take(input, {
        AccountIds: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DescribeActionTargetsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/actionTargets/get");
    let body;
    body = JSON.stringify(take(input, {
        ActionTargetArns: (_) => _json(_),
        MaxResults: [],
        NextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DescribeHubCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts");
    const query = map({
        [_HA]: [, input[_HA]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_DescribeOrganizationConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/organization/configuration");
    let body;
    body = "";
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeProductsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/products");
    const query = map({
        [_NT]: [, input[_NT]],
        [_MR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_PA]: [, input[_PA]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_DescribeStandardsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/standards");
    const query = map({
        [_NT]: [, input[_NT]],
        [_MR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_DescribeStandardsControlsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/standards/controls/{StandardsSubscriptionArn+}");
    b.p("StandardsSubscriptionArn", () => input.StandardsSubscriptionArn, "{StandardsSubscriptionArn+}", true);
    const query = map({
        [_NT]: [, input[_NT]],
        [_MR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_DisableImportFindingsForProductCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/productSubscriptions/{ProductSubscriptionArn+}");
    b.p("ProductSubscriptionArn", () => input.ProductSubscriptionArn, "{ProductSubscriptionArn+}", true);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DisableOrganizationAdminAccountCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/organization/admin/disable");
    let body;
    body = JSON.stringify(take(input, {
        AdminAccountId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DisableSecurityHubCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts");
    let body;
    body = "";
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DisassociateFromAdministratorAccountCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/administrator/disassociate");
    let body;
    body = "";
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DisassociateFromMasterAccountCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/master/disassociate");
    let body;
    body = "";
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DisassociateMembersCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/members/disassociate");
    let body;
    body = JSON.stringify(take(input, {
        AccountIds: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_EnableImportFindingsForProductCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/productSubscriptions");
    let body;
    body = JSON.stringify(take(input, {
        ProductArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_EnableOrganizationAdminAccountCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/organization/admin/enable");
    let body;
    body = JSON.stringify(take(input, {
        AdminAccountId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_EnableSecurityHubCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts");
    let body;
    body = JSON.stringify(take(input, {
        ControlFindingGenerator: [],
        EnableDefaultStandards: [],
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_GetAdministratorAccountCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/administrator");
    let body;
    body = "";
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetConfigurationPolicyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/configurationPolicy/get/{Identifier}");
    b.p("Identifier", () => input.Identifier, "{Identifier}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetConfigurationPolicyAssociationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/configurationPolicyAssociation/get");
    let body;
    body = JSON.stringify(take(input, {
        Target: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_GetEnabledStandardsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/standards/get");
    let body;
    body = JSON.stringify(take(input, {
        MaxResults: [],
        NextToken: [],
        StandardsSubscriptionArns: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_GetFindingAggregatorCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/findingAggregator/get/{FindingAggregatorArn+}");
    b.p("FindingAggregatorArn", () => input.FindingAggregatorArn, "{FindingAggregatorArn+}", true);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetFindingHistoryCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/findingHistory/get");
    let body;
    body = JSON.stringify(take(input, {
        EndTime: (_) => _.toISOString().split(".")[0] + "Z",
        FindingIdentifier: (_) => _json(_),
        MaxResults: [],
        NextToken: [],
        StartTime: (_) => _.toISOString().split(".")[0] + "Z",
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_GetFindingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/findings");
    let body;
    body = JSON.stringify(take(input, {
        Filters: (_) => se_AwsSecurityFindingFilters(_, context),
        MaxResults: [],
        NextToken: [],
        SortCriteria: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_GetInsightResultsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/insights/results/{InsightArn+}");
    b.p("InsightArn", () => input.InsightArn, "{InsightArn+}", true);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetInsightsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/insights/get");
    let body;
    body = JSON.stringify(take(input, {
        InsightArns: (_) => _json(_),
        MaxResults: [],
        NextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_GetInvitationsCountCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/invitations/count");
    let body;
    body = "";
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetMasterAccountCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/master");
    let body;
    body = "";
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetMembersCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/members/get");
    let body;
    body = JSON.stringify(take(input, {
        AccountIds: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_GetSecurityControlDefinitionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/securityControl/definition");
    const query = map({
        [_SCI]: [, __expectNonNull(input[_SCI], `SecurityControlId`)],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_InviteMembersCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/members/invite");
    let body;
    body = JSON.stringify(take(input, {
        AccountIds: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListAutomationRulesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/automationrules/list");
    const query = map({
        [_NT]: [, input[_NT]],
        [_MR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListConfigurationPoliciesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/configurationPolicy/list");
    const query = map({
        [_NT]: [, input[_NT]],
        [_MR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListConfigurationPolicyAssociationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/configurationPolicyAssociation/list");
    let body;
    body = JSON.stringify(take(input, {
        Filters: (_) => _json(_),
        MaxResults: [],
        NextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListEnabledProductsForImportCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/productSubscriptions");
    const query = map({
        [_NT]: [, input[_NT]],
        [_MR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListFindingAggregatorsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/findingAggregator/list");
    const query = map({
        [_NT]: [, input[_NT]],
        [_MR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListInvitationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/invitations");
    const query = map({
        [_MR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_NT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListMembersCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/members");
    const query = map({
        [_OA]: [() => input.OnlyAssociated !== void 0, () => input[_OA].toString()],
        [_MR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_NT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListOrganizationAdminAccountsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/organization/admin");
    const query = map({
        [_MR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_NT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListSecurityControlDefinitionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/securityControls/definitions");
    const query = map({
        [_SA]: [, input[_SA]],
        [_NT]: [, input[_NT]],
        [_MR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListStandardsControlAssociationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/associations");
    const query = map({
        [_SCI]: [, __expectNonNull(input[_SCI], `SecurityControlId`)],
        [_NT]: [, input[_NT]],
        [_MR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_StartConfigurationPolicyAssociationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/configurationPolicyAssociation/associate");
    let body;
    body = JSON.stringify(take(input, {
        ConfigurationPolicyIdentifier: [],
        Target: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StartConfigurationPolicyDisassociationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/configurationPolicyAssociation/disassociate");
    let body;
    body = JSON.stringify(take(input, {
        ConfigurationPolicyIdentifier: [],
        Target: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_TagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UntagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    const query = map({
        [_tK]: [
            __expectNonNull(input.TagKeys, `TagKeys`) != null,
            () => (input[_TK] || []).map((_entry) => _entry),
        ],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateActionTargetCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/actionTargets/{ActionTargetArn+}");
    b.p("ActionTargetArn", () => input.ActionTargetArn, "{ActionTargetArn+}", true);
    let body;
    body = JSON.stringify(take(input, {
        Description: [],
        Name: [],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_UpdateConfigurationPolicyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/configurationPolicy/{Identifier}");
    b.p("Identifier", () => input.Identifier, "{Identifier}", false);
    let body;
    body = JSON.stringify(take(input, {
        ConfigurationPolicy: (_) => se_Policy(_, context),
        Description: [],
        Name: [],
        UpdatedReason: [],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_UpdateFindingAggregatorCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/findingAggregator/update");
    let body;
    body = JSON.stringify(take(input, {
        FindingAggregatorArn: [],
        RegionLinkingMode: [],
        Regions: (_) => _json(_),
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_UpdateFindingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/findings");
    let body;
    body = JSON.stringify(take(input, {
        Filters: (_) => se_AwsSecurityFindingFilters(_, context),
        Note: (_) => _json(_),
        RecordState: [],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_UpdateInsightCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/insights/{InsightArn+}");
    b.p("InsightArn", () => input.InsightArn, "{InsightArn+}", true);
    let body;
    body = JSON.stringify(take(input, {
        Filters: (_) => se_AwsSecurityFindingFilters(_, context),
        GroupByAttribute: [],
        Name: [],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_UpdateOrganizationConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/organization/configuration");
    let body;
    body = JSON.stringify(take(input, {
        AutoEnable: [],
        AutoEnableStandards: [],
        OrganizationConfiguration: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateSecurityControlCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/securityControl/update");
    let body;
    body = JSON.stringify(take(input, {
        LastUpdateReason: [],
        Parameters: (_) => se_Parameters(_, context),
        SecurityControlId: [],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_UpdateSecurityHubConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts");
    let body;
    body = JSON.stringify(take(input, {
        AutoEnableControls: [],
        ControlFindingGenerator: [],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_UpdateStandardsControlCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/standards/control/{StandardsControlArn+}");
    b.p("StandardsControlArn", () => input.StandardsControlArn, "{StandardsControlArn+}", true);
    let body;
    body = JSON.stringify(take(input, {
        ControlStatus: [],
        DisabledReason: [],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const de_AcceptAdministratorInvitationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_AcceptInvitationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_BatchDeleteAutomationRulesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ProcessedAutomationRules: _json,
        UnprocessedAutomationRules: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_BatchDisableStandardsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        StandardsSubscriptions: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_BatchEnableStandardsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        StandardsSubscriptions: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_BatchGetAutomationRulesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Rules: (_) => de_AutomationRulesConfigList(_, context),
        UnprocessedAutomationRules: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_BatchGetConfigurationPolicyAssociationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ConfigurationPolicyAssociations: (_) => de_ConfigurationPolicyAssociationList(_, context),
        UnprocessedConfigurationPolicyAssociations: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_BatchGetSecurityControlsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        SecurityControls: (_) => de_SecurityControls(_, context),
        UnprocessedIds: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_BatchGetStandardsControlAssociationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        StandardsControlAssociationDetails: (_) => de_StandardsControlAssociationDetails(_, context),
        UnprocessedAssociations: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_BatchImportFindingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        FailedCount: __expectInt32,
        FailedFindings: _json,
        SuccessCount: __expectInt32,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_BatchUpdateAutomationRulesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ProcessedAutomationRules: _json,
        UnprocessedAutomationRules: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_BatchUpdateFindingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ProcessedFindings: _json,
        UnprocessedFindings: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_BatchUpdateStandardsControlAssociationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        UnprocessedAssociationUpdates: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateActionTargetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ActionTargetArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateAutomationRuleCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        RuleArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateConfigurationPolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        ConfigurationPolicy: (_) => de_Policy(__expectUnion(_), context),
        CreatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        Description: __expectString,
        Id: __expectString,
        Name: __expectString,
        UpdatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateFindingAggregatorCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        FindingAggregationRegion: __expectString,
        FindingAggregatorArn: __expectString,
        RegionLinkingMode: __expectString,
        Regions: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateInsightCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        InsightArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateMembersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        UnprocessedAccounts: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeclineInvitationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        UnprocessedAccounts: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteActionTargetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ActionTargetArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteConfigurationPolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteFindingAggregatorCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteInsightCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        InsightArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteInvitationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        UnprocessedAccounts: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteMembersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        UnprocessedAccounts: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeActionTargetsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ActionTargets: _json,
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeHubCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AutoEnableControls: __expectBoolean,
        ControlFindingGenerator: __expectString,
        HubArn: __expectString,
        SubscribedAt: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeOrganizationConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AutoEnable: __expectBoolean,
        AutoEnableStandards: __expectString,
        MemberAccountLimitReached: __expectBoolean,
        OrganizationConfiguration: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeProductsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        Products: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeStandardsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        Standards: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeStandardsControlsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Controls: (_) => de_StandardsControls(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DisableImportFindingsForProductCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DisableOrganizationAdminAccountCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DisableSecurityHubCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DisassociateFromAdministratorAccountCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DisassociateFromMasterAccountCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DisassociateMembersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_EnableImportFindingsForProductCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ProductSubscriptionArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_EnableOrganizationAdminAccountCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_EnableSecurityHubCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_GetAdministratorAccountCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Administrator: (_) => de_Invitation(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetConfigurationPolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        ConfigurationPolicy: (_) => de_Policy(__expectUnion(_), context),
        CreatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        Description: __expectString,
        Id: __expectString,
        Name: __expectString,
        UpdatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetConfigurationPolicyAssociationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AssociationStatus: __expectString,
        AssociationStatusMessage: __expectString,
        AssociationType: __expectString,
        ConfigurationPolicyId: __expectString,
        TargetId: __expectString,
        TargetType: __expectString,
        UpdatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetEnabledStandardsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        StandardsSubscriptions: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetFindingAggregatorCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        FindingAggregationRegion: __expectString,
        FindingAggregatorArn: __expectString,
        RegionLinkingMode: __expectString,
        Regions: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetFindingHistoryCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        Records: (_) => de_FindingHistoryRecordList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetFindingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Findings: (_) => de_AwsSecurityFindingList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetInsightResultsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        InsightResults: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetInsightsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Insights: (_) => de_InsightList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetInvitationsCountCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        InvitationsCount: __expectInt32,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetMasterAccountCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Master: (_) => de_Invitation(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetMembersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Members: (_) => de_MemberList(_, context),
        UnprocessedAccounts: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetSecurityControlDefinitionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        SecurityControlDefinition: (_) => de_SecurityControlDefinition(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_InviteMembersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        UnprocessedAccounts: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListAutomationRulesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AutomationRulesMetadata: (_) => de_AutomationRulesMetadataList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListConfigurationPoliciesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ConfigurationPolicySummaries: (_) => de_ConfigurationPolicySummaryList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListConfigurationPolicyAssociationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ConfigurationPolicyAssociationSummaries: (_) => de_ConfigurationPolicyAssociationSummaryList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListEnabledProductsForImportCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        ProductSubscriptions: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListFindingAggregatorsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        FindingAggregators: _json,
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListInvitationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Invitations: (_) => de_InvitationList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListMembersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Members: (_) => de_MemberList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListOrganizationAdminAccountsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AdminAccounts: _json,
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListSecurityControlDefinitionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        SecurityControlDefinitions: (_) => de_SecurityControlDefinitions(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListStandardsControlAssociationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        StandardsControlAssociationSummaries: (_) => de_StandardsControlAssociationSummaries(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StartConfigurationPolicyAssociationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AssociationStatus: __expectString,
        AssociationStatusMessage: __expectString,
        AssociationType: __expectString,
        ConfigurationPolicyId: __expectString,
        TargetId: __expectString,
        TargetType: __expectString,
        UpdatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StartConfigurationPolicyDisassociationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateActionTargetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateConfigurationPolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        ConfigurationPolicy: (_) => de_Policy(__expectUnion(_), context),
        CreatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        Description: __expectString,
        Id: __expectString,
        Name: __expectString,
        UpdatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateFindingAggregatorCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        FindingAggregationRegion: __expectString,
        FindingAggregatorArn: __expectString,
        RegionLinkingMode: __expectString,
        Regions: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateFindingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateInsightCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateOrganizationConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateSecurityControlCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateSecurityHubConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateStandardsControlCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalException":
        case "com.amazonaws.securityhub#InternalException":
            throw await de_InternalExceptionRes(parsedOutput, context);
        case "InvalidAccessException":
        case "com.amazonaws.securityhub#InvalidAccessException":
            throw await de_InvalidAccessExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.securityhub#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.securityhub#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.securityhub#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "AccessDeniedException":
        case "com.amazonaws.securityhub#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.securityhub#ResourceConflictException":
            throw await de_ResourceConflictExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.securityhub#ResourceInUseException":
            throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Code: __expectString,
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InternalExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Code: __expectString,
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InternalException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InvalidAccessExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Code: __expectString,
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InvalidAccessException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InvalidInputExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Code: __expectString,
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InvalidInputException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_LimitExceededExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Code: __expectString,
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceConflictExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Code: __expectString,
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceInUseExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Code: __expectString,
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Code: __expectString,
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const se_Action = (input, context) => {
    return take(input, {
        ActionType: [],
        AwsApiCallAction: (_) => se_AwsApiCallAction(_, context),
        DnsRequestAction: _json,
        NetworkConnectionAction: (_) => se_NetworkConnectionAction(_, context),
        PortProbeAction: (_) => se_PortProbeAction(_, context),
    });
};
const se_ActionList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_AutomationRulesAction(entry, context);
    });
};
const se_ActionRemoteIpDetails = (input, context) => {
    return take(input, {
        City: _json,
        Country: _json,
        GeoLocation: (_) => se_GeoLocation(_, context),
        IpAddressV4: [],
        Organization: _json,
    });
};
const se_AutomationRulesAction = (input, context) => {
    return take(input, {
        FindingFieldsUpdate: (_) => se_AutomationRulesFindingFieldsUpdate(_, context),
        Type: [],
    });
};
const se_AutomationRulesFindingFieldsUpdate = (input, context) => {
    return take(input, {
        Confidence: [],
        Criticality: [],
        Note: _json,
        RelatedFindings: _json,
        Severity: (_) => se_SeverityUpdate(_, context),
        Types: _json,
        UserDefinedFields: _json,
        VerificationState: [],
        Workflow: _json,
    });
};
const se_AutomationRulesFindingFilters = (input, context) => {
    return take(input, {
        AwsAccountId: _json,
        AwsAccountName: _json,
        CompanyName: _json,
        ComplianceAssociatedStandardsId: _json,
        ComplianceSecurityControlId: _json,
        ComplianceStatus: _json,
        Confidence: (_) => se_NumberFilterList(_, context),
        CreatedAt: _json,
        Criticality: (_) => se_NumberFilterList(_, context),
        Description: _json,
        FirstObservedAt: _json,
        GeneratorId: _json,
        Id: _json,
        LastObservedAt: _json,
        NoteText: _json,
        NoteUpdatedAt: _json,
        NoteUpdatedBy: _json,
        ProductArn: _json,
        ProductName: _json,
        RecordState: _json,
        RelatedFindingsId: _json,
        RelatedFindingsProductArn: _json,
        ResourceApplicationArn: _json,
        ResourceApplicationName: _json,
        ResourceDetailsOther: _json,
        ResourceId: _json,
        ResourcePartition: _json,
        ResourceRegion: _json,
        ResourceTags: _json,
        ResourceType: _json,
        SeverityLabel: _json,
        SourceUrl: _json,
        Title: _json,
        Type: _json,
        UpdatedAt: _json,
        UserDefinedFields: _json,
        VerificationState: _json,
        WorkflowStatus: _json,
    });
};
const se_AwsApiCallAction = (input, context) => {
    return take(input, {
        AffectedResources: _json,
        Api: [],
        CallerType: [],
        DomainDetails: _json,
        FirstSeen: [],
        LastSeen: [],
        RemoteIpDetails: (_) => se_ActionRemoteIpDetails(_, context),
        ServiceName: [],
    });
};
const se_AwsApiGatewayCanarySettings = (input, context) => {
    return take(input, {
        DeploymentId: [],
        PercentTraffic: __serializeFloat,
        StageVariableOverrides: _json,
        UseStageCache: [],
    });
};
const se_AwsApiGatewayMethodSettings = (input, context) => {
    return take(input, {
        CacheDataEncrypted: [],
        CacheTtlInSeconds: [],
        CachingEnabled: [],
        DataTraceEnabled: [],
        HttpMethod: [],
        LoggingLevel: [],
        MetricsEnabled: [],
        RequireAuthorizationForCacheControl: [],
        ResourcePath: [],
        ThrottlingBurstLimit: [],
        ThrottlingRateLimit: __serializeFloat,
        UnauthorizedCacheControlHeaderStrategy: [],
    });
};
const se_AwsApiGatewayMethodSettingsList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_AwsApiGatewayMethodSettings(entry, context);
    });
};
const se_AwsApiGatewayStageDetails = (input, context) => {
    return take(input, {
        AccessLogSettings: _json,
        CacheClusterEnabled: [],
        CacheClusterSize: [],
        CacheClusterStatus: [],
        CanarySettings: (_) => se_AwsApiGatewayCanarySettings(_, context),
        ClientCertificateId: [],
        CreatedDate: [],
        DeploymentId: [],
        Description: [],
        DocumentationVersion: [],
        LastUpdatedDate: [],
        MethodSettings: (_) => se_AwsApiGatewayMethodSettingsList(_, context),
        StageName: [],
        TracingEnabled: [],
        Variables: _json,
        WebAclArn: [],
    });
};
const se_AwsApiGatewayV2RouteSettings = (input, context) => {
    return take(input, {
        DataTraceEnabled: [],
        DetailedMetricsEnabled: [],
        LoggingLevel: [],
        ThrottlingBurstLimit: [],
        ThrottlingRateLimit: __serializeFloat,
    });
};
const se_AwsApiGatewayV2StageDetails = (input, context) => {
    return take(input, {
        AccessLogSettings: _json,
        ApiGatewayManaged: [],
        AutoDeploy: [],
        ClientCertificateId: [],
        CreatedDate: [],
        DefaultRouteSettings: (_) => se_AwsApiGatewayV2RouteSettings(_, context),
        DeploymentId: [],
        Description: [],
        LastDeploymentStatusMessage: [],
        LastUpdatedDate: [],
        RouteSettings: (_) => se_AwsApiGatewayV2RouteSettings(_, context),
        StageName: [],
        StageVariables: _json,
    });
};
const se_AwsCloudWatchAlarmDetails = (input, context) => {
    return take(input, {
        ActionsEnabled: [],
        AlarmActions: _json,
        AlarmArn: [],
        AlarmConfigurationUpdatedTimestamp: [],
        AlarmDescription: [],
        AlarmName: [],
        ComparisonOperator: [],
        DatapointsToAlarm: [],
        Dimensions: _json,
        EvaluateLowSampleCountPercentile: [],
        EvaluationPeriods: [],
        ExtendedStatistic: [],
        InsufficientDataActions: _json,
        MetricName: [],
        Namespace: [],
        OkActions: _json,
        Period: [],
        Statistic: [],
        Threshold: __serializeFloat,
        ThresholdMetricId: [],
        TreatMissingData: [],
        Unit: [],
    });
};
const se_AwsEc2LaunchTemplateDataDetails = (input, context) => {
    return take(input, {
        BlockDeviceMappingSet: _json,
        CapacityReservationSpecification: _json,
        CpuOptions: _json,
        CreditSpecification: _json,
        DisableApiStop: [],
        DisableApiTermination: [],
        EbsOptimized: [],
        ElasticGpuSpecificationSet: _json,
        ElasticInferenceAcceleratorSet: _json,
        EnclaveOptions: _json,
        HibernationOptions: _json,
        IamInstanceProfile: _json,
        ImageId: [],
        InstanceInitiatedShutdownBehavior: [],
        InstanceMarketOptions: _json,
        InstanceRequirements: (_) => se_AwsEc2LaunchTemplateDataInstanceRequirementsDetails(_, context),
        InstanceType: [],
        KernelId: [],
        KeyName: [],
        LicenseSet: _json,
        MaintenanceOptions: _json,
        MetadataOptions: _json,
        Monitoring: _json,
        NetworkInterfaceSet: _json,
        Placement: _json,
        PrivateDnsNameOptions: _json,
        RamDiskId: [],
        SecurityGroupIdSet: _json,
        SecurityGroupSet: _json,
        UserData: [],
    });
};
const se_AwsEc2LaunchTemplateDataInstanceRequirementsDetails = (input, context) => {
    return take(input, {
        AcceleratorCount: _json,
        AcceleratorManufacturers: _json,
        AcceleratorNames: _json,
        AcceleratorTotalMemoryMiB: _json,
        AcceleratorTypes: _json,
        BareMetal: [],
        BaselineEbsBandwidthMbps: _json,
        BurstablePerformance: [],
        CpuManufacturers: _json,
        ExcludedInstanceTypes: _json,
        InstanceGenerations: _json,
        LocalStorage: [],
        LocalStorageTypes: _json,
        MemoryGiBPerVCpu: (_) => se_AwsEc2LaunchTemplateDataInstanceRequirementsMemoryGiBPerVCpuDetails(_, context),
        MemoryMiB: _json,
        NetworkInterfaceCount: _json,
        OnDemandMaxPricePercentageOverLowestPrice: [],
        RequireHibernateSupport: [],
        SpotMaxPricePercentageOverLowestPrice: [],
        TotalLocalStorageGB: (_) => se_AwsEc2LaunchTemplateDataInstanceRequirementsTotalLocalStorageGBDetails(_, context),
        VCpuCount: _json,
    });
};
const se_AwsEc2LaunchTemplateDataInstanceRequirementsMemoryGiBPerVCpuDetails = (input, context) => {
    return take(input, {
        Max: __serializeFloat,
        Min: __serializeFloat,
    });
};
const se_AwsEc2LaunchTemplateDataInstanceRequirementsTotalLocalStorageGBDetails = (input, context) => {
    return take(input, {
        Max: __serializeFloat,
        Min: __serializeFloat,
    });
};
const se_AwsEc2LaunchTemplateDetails = (input, context) => {
    return take(input, {
        DefaultVersionNumber: [],
        Id: [],
        LatestVersionNumber: [],
        LaunchTemplateData: (_) => se_AwsEc2LaunchTemplateDataDetails(_, context),
        LaunchTemplateName: [],
    });
};
const se_AwsKmsKeyDetails = (input, context) => {
    return take(input, {
        AWSAccountId: [],
        CreationDate: __serializeFloat,
        Description: [],
        KeyId: [],
        KeyManager: [],
        KeyRotationStatus: [],
        KeyState: [],
        Origin: [],
    });
};
const se_AwsNetworkFirewallRuleGroupDetails = (input, context) => {
    return take(input, {
        Capacity: [],
        Description: [],
        RuleGroup: _json,
        RuleGroupArn: [],
        RuleGroupId: [],
        RuleGroupName: [],
        Type: [],
    });
};
const se_AwsRedshiftClusterDetails = (input, context) => {
    return take(input, {
        AllowVersionUpgrade: [],
        AutomatedSnapshotRetentionPeriod: [],
        AvailabilityZone: [],
        ClusterAvailabilityStatus: [],
        ClusterCreateTime: [],
        ClusterIdentifier: [],
        ClusterNodes: _json,
        ClusterParameterGroups: _json,
        ClusterPublicKey: [],
        ClusterRevisionNumber: [],
        ClusterSecurityGroups: _json,
        ClusterSnapshotCopyStatus: _json,
        ClusterStatus: [],
        ClusterSubnetGroupName: [],
        ClusterVersion: [],
        DBName: [],
        DeferredMaintenanceWindows: _json,
        ElasticIpStatus: _json,
        ElasticResizeNumberOfNodeOptions: [],
        Encrypted: [],
        Endpoint: _json,
        EnhancedVpcRouting: [],
        ExpectedNextSnapshotScheduleTime: [],
        ExpectedNextSnapshotScheduleTimeStatus: [],
        HsmStatus: _json,
        IamRoles: _json,
        KmsKeyId: [],
        LoggingStatus: _json,
        MaintenanceTrackName: [],
        ManualSnapshotRetentionPeriod: [],
        MasterUsername: [],
        NextMaintenanceWindowStartTime: [],
        NodeType: [],
        NumberOfNodes: [],
        PendingActions: _json,
        PendingModifiedValues: _json,
        PreferredMaintenanceWindow: [],
        PubliclyAccessible: [],
        ResizeInfo: _json,
        RestoreStatus: (_) => se_AwsRedshiftClusterRestoreStatus(_, context),
        SnapshotScheduleIdentifier: [],
        SnapshotScheduleState: [],
        VpcId: [],
        VpcSecurityGroups: _json,
    });
};
const se_AwsRedshiftClusterRestoreStatus = (input, context) => {
    return take(input, {
        CurrentRestoreRateInMegaBytesPerSecond: __serializeFloat,
        ElapsedTimeInSeconds: [],
        EstimatedTimeToCompletionInSeconds: [],
        ProgressInMegaBytes: [],
        SnapshotSizeInMegaBytes: [],
        Status: [],
    });
};
const se_AwsSecurityFinding = (input, context) => {
    return take(input, {
        Action: (_) => se_Action(_, context),
        AwsAccountId: [],
        AwsAccountName: [],
        CompanyName: [],
        Compliance: _json,
        Confidence: [],
        CreatedAt: [],
        Criticality: [],
        Description: [],
        FindingProviderFields: _json,
        FirstObservedAt: [],
        GeneratorDetails: _json,
        GeneratorId: [],
        Id: [],
        LastObservedAt: [],
        Malware: _json,
        Network: _json,
        NetworkPath: _json,
        Note: _json,
        PatchSummary: _json,
        Process: _json,
        ProcessedAt: [],
        ProductArn: [],
        ProductFields: _json,
        ProductName: [],
        RecordState: [],
        Region: [],
        RelatedFindings: _json,
        Remediation: _json,
        Resources: (_) => se_ResourceList(_, context),
        Sample: [],
        SchemaVersion: [],
        Severity: (_) => se_Severity(_, context),
        SourceUrl: [],
        ThreatIntelIndicators: _json,
        Threats: _json,
        Title: [],
        Types: _json,
        UpdatedAt: [],
        UserDefinedFields: _json,
        VerificationState: [],
        Vulnerabilities: (_) => se_VulnerabilityList(_, context),
        Workflow: _json,
        WorkflowState: [],
    });
};
const se_AwsSecurityFindingFilters = (input, context) => {
    return take(input, {
        AwsAccountId: _json,
        AwsAccountName: _json,
        CompanyName: _json,
        ComplianceAssociatedStandardsId: _json,
        ComplianceSecurityControlId: _json,
        ComplianceSecurityControlParametersName: _json,
        ComplianceSecurityControlParametersValue: _json,
        ComplianceStatus: _json,
        Confidence: (_) => se_NumberFilterList(_, context),
        CreatedAt: _json,
        Criticality: (_) => se_NumberFilterList(_, context),
        Description: _json,
        FindingProviderFieldsConfidence: (_) => se_NumberFilterList(_, context),
        FindingProviderFieldsCriticality: (_) => se_NumberFilterList(_, context),
        FindingProviderFieldsRelatedFindingsId: _json,
        FindingProviderFieldsRelatedFindingsProductArn: _json,
        FindingProviderFieldsSeverityLabel: _json,
        FindingProviderFieldsSeverityOriginal: _json,
        FindingProviderFieldsTypes: _json,
        FirstObservedAt: _json,
        GeneratorId: _json,
        Id: _json,
        Keyword: _json,
        LastObservedAt: _json,
        MalwareName: _json,
        MalwarePath: _json,
        MalwareState: _json,
        MalwareType: _json,
        NetworkDestinationDomain: _json,
        NetworkDestinationIpV4: _json,
        NetworkDestinationIpV6: _json,
        NetworkDestinationPort: (_) => se_NumberFilterList(_, context),
        NetworkDirection: _json,
        NetworkProtocol: _json,
        NetworkSourceDomain: _json,
        NetworkSourceIpV4: _json,
        NetworkSourceIpV6: _json,
        NetworkSourceMac: _json,
        NetworkSourcePort: (_) => se_NumberFilterList(_, context),
        NoteText: _json,
        NoteUpdatedAt: _json,
        NoteUpdatedBy: _json,
        ProcessLaunchedAt: _json,
        ProcessName: _json,
        ProcessParentPid: (_) => se_NumberFilterList(_, context),
        ProcessPath: _json,
        ProcessPid: (_) => se_NumberFilterList(_, context),
        ProcessTerminatedAt: _json,
        ProductArn: _json,
        ProductFields: _json,
        ProductName: _json,
        RecommendationText: _json,
        RecordState: _json,
        Region: _json,
        RelatedFindingsId: _json,
        RelatedFindingsProductArn: _json,
        ResourceApplicationArn: _json,
        ResourceApplicationName: _json,
        ResourceAwsEc2InstanceIamInstanceProfileArn: _json,
        ResourceAwsEc2InstanceImageId: _json,
        ResourceAwsEc2InstanceIpV4Addresses: _json,
        ResourceAwsEc2InstanceIpV6Addresses: _json,
        ResourceAwsEc2InstanceKeyName: _json,
        ResourceAwsEc2InstanceLaunchedAt: _json,
        ResourceAwsEc2InstanceSubnetId: _json,
        ResourceAwsEc2InstanceType: _json,
        ResourceAwsEc2InstanceVpcId: _json,
        ResourceAwsIamAccessKeyCreatedAt: _json,
        ResourceAwsIamAccessKeyPrincipalName: _json,
        ResourceAwsIamAccessKeyStatus: _json,
        ResourceAwsIamAccessKeyUserName: _json,
        ResourceAwsIamUserUserName: _json,
        ResourceAwsS3BucketOwnerId: _json,
        ResourceAwsS3BucketOwnerName: _json,
        ResourceContainerImageId: _json,
        ResourceContainerImageName: _json,
        ResourceContainerLaunchedAt: _json,
        ResourceContainerName: _json,
        ResourceDetailsOther: _json,
        ResourceId: _json,
        ResourcePartition: _json,
        ResourceRegion: _json,
        ResourceTags: _json,
        ResourceType: _json,
        Sample: _json,
        SeverityLabel: _json,
        SeverityNormalized: (_) => se_NumberFilterList(_, context),
        SeverityProduct: (_) => se_NumberFilterList(_, context),
        SourceUrl: _json,
        ThreatIntelIndicatorCategory: _json,
        ThreatIntelIndicatorLastObservedAt: _json,
        ThreatIntelIndicatorSource: _json,
        ThreatIntelIndicatorSourceUrl: _json,
        ThreatIntelIndicatorType: _json,
        ThreatIntelIndicatorValue: _json,
        Title: _json,
        Type: _json,
        UpdatedAt: _json,
        UserDefinedFields: _json,
        VerificationState: _json,
        VulnerabilitiesExploitAvailable: _json,
        VulnerabilitiesFixAvailable: _json,
        WorkflowState: _json,
        WorkflowStatus: _json,
    });
};
const se_BatchImportFindingsRequestFindingList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_AwsSecurityFinding(entry, context);
    });
};
const se_Cvss = (input, context) => {
    return take(input, {
        Adjustments: _json,
        BaseScore: __serializeFloat,
        BaseVector: [],
        Source: [],
        Version: [],
    });
};
const se_CvssList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_Cvss(entry, context);
    });
};
const se_GeoLocation = (input, context) => {
    return take(input, {
        Lat: __serializeFloat,
        Lon: __serializeFloat,
    });
};
const se_NetworkConnectionAction = (input, context) => {
    return take(input, {
        Blocked: [],
        ConnectionDirection: [],
        LocalPortDetails: _json,
        Protocol: [],
        RemoteIpDetails: (_) => se_ActionRemoteIpDetails(_, context),
        RemotePortDetails: _json,
    });
};
const se_NumberFilter = (input, context) => {
    return take(input, {
        Eq: __serializeFloat,
        Gt: __serializeFloat,
        Gte: __serializeFloat,
        Lt: __serializeFloat,
        Lte: __serializeFloat,
    });
};
const se_NumberFilterList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_NumberFilter(entry, context);
    });
};
const se_ParameterConfiguration = (input, context) => {
    return take(input, {
        Value: (_) => se_ParameterValue(_, context),
        ValueType: [],
    });
};
const se_Parameters = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = se_ParameterConfiguration(value, context);
        return acc;
    }, {});
};
const se_ParameterValue = (input, context) => {
    return ParameterValue.visit(input, {
        Boolean: (value) => ({ Boolean: value }),
        Double: (value) => ({ Double: __serializeFloat(value) }),
        Enum: (value) => ({ Enum: value }),
        EnumList: (value) => ({ EnumList: _json(value) }),
        Integer: (value) => ({ Integer: value }),
        IntegerList: (value) => ({ IntegerList: _json(value) }),
        String: (value) => ({ String: value }),
        StringList: (value) => ({ StringList: _json(value) }),
        _: (name, value) => ({ name: value }),
    });
};
const se_Policy = (input, context) => {
    return Policy.visit(input, {
        SecurityHub: (value) => ({ SecurityHub: se_SecurityHubPolicy(value, context) }),
        _: (name, value) => ({ name: value }),
    });
};
const se_PortProbeAction = (input, context) => {
    return take(input, {
        Blocked: [],
        PortProbeDetails: (_) => se_PortProbeDetailList(_, context),
    });
};
const se_PortProbeDetail = (input, context) => {
    return take(input, {
        LocalIpDetails: _json,
        LocalPortDetails: _json,
        RemoteIpDetails: (_) => se_ActionRemoteIpDetails(_, context),
    });
};
const se_PortProbeDetailList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_PortProbeDetail(entry, context);
    });
};
const se_Resource = (input, context) => {
    return take(input, {
        ApplicationArn: [],
        ApplicationName: [],
        DataClassification: _json,
        Details: (_) => se_ResourceDetails(_, context),
        Id: [],
        Partition: [],
        Region: [],
        ResourceRole: [],
        Tags: _json,
        Type: [],
    });
};
const se_ResourceDetails = (input, context) => {
    return take(input, {
        AwsAmazonMqBroker: _json,
        AwsApiGatewayRestApi: _json,
        AwsApiGatewayStage: (_) => se_AwsApiGatewayStageDetails(_, context),
        AwsApiGatewayV2Api: _json,
        AwsApiGatewayV2Stage: (_) => se_AwsApiGatewayV2StageDetails(_, context),
        AwsAppSyncGraphQlApi: _json,
        AwsAthenaWorkGroup: _json,
        AwsAutoScalingAutoScalingGroup: _json,
        AwsAutoScalingLaunchConfiguration: _json,
        AwsBackupBackupPlan: _json,
        AwsBackupBackupVault: _json,
        AwsBackupRecoveryPoint: _json,
        AwsCertificateManagerCertificate: _json,
        AwsCloudFormationStack: _json,
        AwsCloudFrontDistribution: _json,
        AwsCloudTrailTrail: _json,
        AwsCloudWatchAlarm: (_) => se_AwsCloudWatchAlarmDetails(_, context),
        AwsCodeBuildProject: _json,
        AwsDmsEndpoint: _json,
        AwsDmsReplicationInstance: _json,
        AwsDmsReplicationTask: _json,
        AwsDynamoDbTable: _json,
        AwsEc2ClientVpnEndpoint: _json,
        AwsEc2Eip: _json,
        AwsEc2Instance: _json,
        AwsEc2LaunchTemplate: (_) => se_AwsEc2LaunchTemplateDetails(_, context),
        AwsEc2NetworkAcl: _json,
        AwsEc2NetworkInterface: _json,
        AwsEc2RouteTable: _json,
        AwsEc2SecurityGroup: _json,
        AwsEc2Subnet: _json,
        AwsEc2TransitGateway: _json,
        AwsEc2Volume: _json,
        AwsEc2Vpc: _json,
        AwsEc2VpcEndpointService: _json,
        AwsEc2VpcPeeringConnection: _json,
        AwsEc2VpnConnection: _json,
        AwsEcrContainerImage: _json,
        AwsEcrRepository: _json,
        AwsEcsCluster: _json,
        AwsEcsContainer: _json,
        AwsEcsService: _json,
        AwsEcsTask: _json,
        AwsEcsTaskDefinition: _json,
        AwsEfsAccessPoint: _json,
        AwsEksCluster: _json,
        AwsElasticBeanstalkEnvironment: _json,
        AwsElasticsearchDomain: _json,
        AwsElbLoadBalancer: _json,
        AwsElbv2LoadBalancer: _json,
        AwsEventSchemasRegistry: _json,
        AwsEventsEndpoint: _json,
        AwsEventsEventbus: _json,
        AwsGuardDutyDetector: _json,
        AwsIamAccessKey: _json,
        AwsIamGroup: _json,
        AwsIamPolicy: _json,
        AwsIamRole: _json,
        AwsIamUser: _json,
        AwsKinesisStream: _json,
        AwsKmsKey: (_) => se_AwsKmsKeyDetails(_, context),
        AwsLambdaFunction: _json,
        AwsLambdaLayerVersion: _json,
        AwsMskCluster: _json,
        AwsNetworkFirewallFirewall: _json,
        AwsNetworkFirewallFirewallPolicy: _json,
        AwsNetworkFirewallRuleGroup: (_) => se_AwsNetworkFirewallRuleGroupDetails(_, context),
        AwsOpenSearchServiceDomain: _json,
        AwsRdsDbCluster: _json,
        AwsRdsDbClusterSnapshot: _json,
        AwsRdsDbInstance: _json,
        AwsRdsDbSecurityGroup: _json,
        AwsRdsDbSnapshot: _json,
        AwsRdsEventSubscription: _json,
        AwsRedshiftCluster: (_) => se_AwsRedshiftClusterDetails(_, context),
        AwsRoute53HostedZone: _json,
        AwsS3AccessPoint: _json,
        AwsS3AccountPublicAccessBlock: _json,
        AwsS3Bucket: _json,
        AwsS3Object: _json,
        AwsSageMakerNotebookInstance: _json,
        AwsSecretsManagerSecret: _json,
        AwsSnsTopic: _json,
        AwsSqsQueue: _json,
        AwsSsmPatchCompliance: _json,
        AwsStepFunctionStateMachine: _json,
        AwsWafRateBasedRule: _json,
        AwsWafRegionalRateBasedRule: _json,
        AwsWafRegionalRule: _json,
        AwsWafRegionalRuleGroup: _json,
        AwsWafRegionalWebAcl: _json,
        AwsWafRule: _json,
        AwsWafRuleGroup: _json,
        AwsWafWebAcl: _json,
        AwsWafv2RuleGroup: _json,
        AwsWafv2WebAcl: _json,
        AwsXrayEncryptionConfig: _json,
        Container: _json,
        Other: _json,
    });
};
const se_ResourceList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_Resource(entry, context);
    });
};
const se_SecurityControlCustomParameter = (input, context) => {
    return take(input, {
        Parameters: (_) => se_Parameters(_, context),
        SecurityControlId: [],
    });
};
const se_SecurityControlCustomParametersList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_SecurityControlCustomParameter(entry, context);
    });
};
const se_SecurityControlsConfiguration = (input, context) => {
    return take(input, {
        DisabledSecurityControlIdentifiers: _json,
        EnabledSecurityControlIdentifiers: _json,
        SecurityControlCustomParameters: (_) => se_SecurityControlCustomParametersList(_, context),
    });
};
const se_SecurityHubPolicy = (input, context) => {
    return take(input, {
        EnabledStandardIdentifiers: _json,
        SecurityControlsConfiguration: (_) => se_SecurityControlsConfiguration(_, context),
        ServiceEnabled: [],
    });
};
const se_Severity = (input, context) => {
    return take(input, {
        Label: [],
        Normalized: [],
        Original: [],
        Product: __serializeFloat,
    });
};
const se_SeverityUpdate = (input, context) => {
    return take(input, {
        Label: [],
        Normalized: [],
        Product: __serializeFloat,
    });
};
const se_UpdateAutomationRulesRequestItem = (input, context) => {
    return take(input, {
        Actions: (_) => se_ActionList(_, context),
        Criteria: (_) => se_AutomationRulesFindingFilters(_, context),
        Description: [],
        IsTerminal: [],
        RuleArn: [],
        RuleName: [],
        RuleOrder: [],
        RuleStatus: [],
    });
};
const se_UpdateAutomationRulesRequestItemsList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_UpdateAutomationRulesRequestItem(entry, context);
    });
};
const se_Vulnerability = (input, context) => {
    return take(input, {
        CodeVulnerabilities: _json,
        Cvss: (_) => se_CvssList(_, context),
        EpssScore: __serializeFloat,
        ExploitAvailable: [],
        FixAvailable: [],
        Id: [],
        LastKnownExploitAt: [],
        ReferenceUrls: _json,
        RelatedVulnerabilities: _json,
        Vendor: _json,
        VulnerablePackages: _json,
    });
};
const se_VulnerabilityList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_Vulnerability(entry, context);
    });
};
const de_Action = (output, context) => {
    return take(output, {
        ActionType: __expectString,
        AwsApiCallAction: (_) => de_AwsApiCallAction(_, context),
        DnsRequestAction: _json,
        NetworkConnectionAction: (_) => de_NetworkConnectionAction(_, context),
        PortProbeAction: (_) => de_PortProbeAction(_, context),
    });
};
const de_ActionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AutomationRulesAction(entry, context);
    });
    return retVal;
};
const de_ActionRemoteIpDetails = (output, context) => {
    return take(output, {
        City: _json,
        Country: _json,
        GeoLocation: (_) => de_GeoLocation(_, context),
        IpAddressV4: __expectString,
        Organization: _json,
    });
};
const de_AutomationRulesAction = (output, context) => {
    return take(output, {
        FindingFieldsUpdate: (_) => de_AutomationRulesFindingFieldsUpdate(_, context),
        Type: __expectString,
    });
};
const de_AutomationRulesConfig = (output, context) => {
    return take(output, {
        Actions: (_) => de_ActionList(_, context),
        CreatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        CreatedBy: __expectString,
        Criteria: (_) => de_AutomationRulesFindingFilters(_, context),
        Description: __expectString,
        IsTerminal: __expectBoolean,
        RuleArn: __expectString,
        RuleName: __expectString,
        RuleOrder: __expectInt32,
        RuleStatus: __expectString,
        UpdatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_AutomationRulesConfigList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AutomationRulesConfig(entry, context);
    });
    return retVal;
};
const de_AutomationRulesFindingFieldsUpdate = (output, context) => {
    return take(output, {
        Confidence: __expectInt32,
        Criticality: __expectInt32,
        Note: _json,
        RelatedFindings: _json,
        Severity: (_) => de_SeverityUpdate(_, context),
        Types: _json,
        UserDefinedFields: _json,
        VerificationState: __expectString,
        Workflow: _json,
    });
};
const de_AutomationRulesFindingFilters = (output, context) => {
    return take(output, {
        AwsAccountId: _json,
        AwsAccountName: _json,
        CompanyName: _json,
        ComplianceAssociatedStandardsId: _json,
        ComplianceSecurityControlId: _json,
        ComplianceStatus: _json,
        Confidence: (_) => de_NumberFilterList(_, context),
        CreatedAt: _json,
        Criticality: (_) => de_NumberFilterList(_, context),
        Description: _json,
        FirstObservedAt: _json,
        GeneratorId: _json,
        Id: _json,
        LastObservedAt: _json,
        NoteText: _json,
        NoteUpdatedAt: _json,
        NoteUpdatedBy: _json,
        ProductArn: _json,
        ProductName: _json,
        RecordState: _json,
        RelatedFindingsId: _json,
        RelatedFindingsProductArn: _json,
        ResourceApplicationArn: _json,
        ResourceApplicationName: _json,
        ResourceDetailsOther: _json,
        ResourceId: _json,
        ResourcePartition: _json,
        ResourceRegion: _json,
        ResourceTags: _json,
        ResourceType: _json,
        SeverityLabel: _json,
        SourceUrl: _json,
        Title: _json,
        Type: _json,
        UpdatedAt: _json,
        UserDefinedFields: _json,
        VerificationState: _json,
        WorkflowStatus: _json,
    });
};
const de_AutomationRulesMetadata = (output, context) => {
    return take(output, {
        CreatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        CreatedBy: __expectString,
        Description: __expectString,
        IsTerminal: __expectBoolean,
        RuleArn: __expectString,
        RuleName: __expectString,
        RuleOrder: __expectInt32,
        RuleStatus: __expectString,
        UpdatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_AutomationRulesMetadataList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AutomationRulesMetadata(entry, context);
    });
    return retVal;
};
const de_AwsApiCallAction = (output, context) => {
    return take(output, {
        AffectedResources: _json,
        Api: __expectString,
        CallerType: __expectString,
        DomainDetails: _json,
        FirstSeen: __expectString,
        LastSeen: __expectString,
        RemoteIpDetails: (_) => de_ActionRemoteIpDetails(_, context),
        ServiceName: __expectString,
    });
};
const de_AwsApiGatewayCanarySettings = (output, context) => {
    return take(output, {
        DeploymentId: __expectString,
        PercentTraffic: __limitedParseDouble,
        StageVariableOverrides: _json,
        UseStageCache: __expectBoolean,
    });
};
const de_AwsApiGatewayMethodSettings = (output, context) => {
    return take(output, {
        CacheDataEncrypted: __expectBoolean,
        CacheTtlInSeconds: __expectInt32,
        CachingEnabled: __expectBoolean,
        DataTraceEnabled: __expectBoolean,
        HttpMethod: __expectString,
        LoggingLevel: __expectString,
        MetricsEnabled: __expectBoolean,
        RequireAuthorizationForCacheControl: __expectBoolean,
        ResourcePath: __expectString,
        ThrottlingBurstLimit: __expectInt32,
        ThrottlingRateLimit: __limitedParseDouble,
        UnauthorizedCacheControlHeaderStrategy: __expectString,
    });
};
const de_AwsApiGatewayMethodSettingsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AwsApiGatewayMethodSettings(entry, context);
    });
    return retVal;
};
const de_AwsApiGatewayStageDetails = (output, context) => {
    return take(output, {
        AccessLogSettings: _json,
        CacheClusterEnabled: __expectBoolean,
        CacheClusterSize: __expectString,
        CacheClusterStatus: __expectString,
        CanarySettings: (_) => de_AwsApiGatewayCanarySettings(_, context),
        ClientCertificateId: __expectString,
        CreatedDate: __expectString,
        DeploymentId: __expectString,
        Description: __expectString,
        DocumentationVersion: __expectString,
        LastUpdatedDate: __expectString,
        MethodSettings: (_) => de_AwsApiGatewayMethodSettingsList(_, context),
        StageName: __expectString,
        TracingEnabled: __expectBoolean,
        Variables: _json,
        WebAclArn: __expectString,
    });
};
const de_AwsApiGatewayV2RouteSettings = (output, context) => {
    return take(output, {
        DataTraceEnabled: __expectBoolean,
        DetailedMetricsEnabled: __expectBoolean,
        LoggingLevel: __expectString,
        ThrottlingBurstLimit: __expectInt32,
        ThrottlingRateLimit: __limitedParseDouble,
    });
};
const de_AwsApiGatewayV2StageDetails = (output, context) => {
    return take(output, {
        AccessLogSettings: _json,
        ApiGatewayManaged: __expectBoolean,
        AutoDeploy: __expectBoolean,
        ClientCertificateId: __expectString,
        CreatedDate: __expectString,
        DefaultRouteSettings: (_) => de_AwsApiGatewayV2RouteSettings(_, context),
        DeploymentId: __expectString,
        Description: __expectString,
        LastDeploymentStatusMessage: __expectString,
        LastUpdatedDate: __expectString,
        RouteSettings: (_) => de_AwsApiGatewayV2RouteSettings(_, context),
        StageName: __expectString,
        StageVariables: _json,
    });
};
const de_AwsCloudWatchAlarmDetails = (output, context) => {
    return take(output, {
        ActionsEnabled: __expectBoolean,
        AlarmActions: _json,
        AlarmArn: __expectString,
        AlarmConfigurationUpdatedTimestamp: __expectString,
        AlarmDescription: __expectString,
        AlarmName: __expectString,
        ComparisonOperator: __expectString,
        DatapointsToAlarm: __expectInt32,
        Dimensions: _json,
        EvaluateLowSampleCountPercentile: __expectString,
        EvaluationPeriods: __expectInt32,
        ExtendedStatistic: __expectString,
        InsufficientDataActions: _json,
        MetricName: __expectString,
        Namespace: __expectString,
        OkActions: _json,
        Period: __expectInt32,
        Statistic: __expectString,
        Threshold: __limitedParseDouble,
        ThresholdMetricId: __expectString,
        TreatMissingData: __expectString,
        Unit: __expectString,
    });
};
const de_AwsEc2LaunchTemplateDataDetails = (output, context) => {
    return take(output, {
        BlockDeviceMappingSet: _json,
        CapacityReservationSpecification: _json,
        CpuOptions: _json,
        CreditSpecification: _json,
        DisableApiStop: __expectBoolean,
        DisableApiTermination: __expectBoolean,
        EbsOptimized: __expectBoolean,
        ElasticGpuSpecificationSet: _json,
        ElasticInferenceAcceleratorSet: _json,
        EnclaveOptions: _json,
        HibernationOptions: _json,
        IamInstanceProfile: _json,
        ImageId: __expectString,
        InstanceInitiatedShutdownBehavior: __expectString,
        InstanceMarketOptions: _json,
        InstanceRequirements: (_) => de_AwsEc2LaunchTemplateDataInstanceRequirementsDetails(_, context),
        InstanceType: __expectString,
        KernelId: __expectString,
        KeyName: __expectString,
        LicenseSet: _json,
        MaintenanceOptions: _json,
        MetadataOptions: _json,
        Monitoring: _json,
        NetworkInterfaceSet: _json,
        Placement: _json,
        PrivateDnsNameOptions: _json,
        RamDiskId: __expectString,
        SecurityGroupIdSet: _json,
        SecurityGroupSet: _json,
        UserData: __expectString,
    });
};
const de_AwsEc2LaunchTemplateDataInstanceRequirementsDetails = (output, context) => {
    return take(output, {
        AcceleratorCount: _json,
        AcceleratorManufacturers: _json,
        AcceleratorNames: _json,
        AcceleratorTotalMemoryMiB: _json,
        AcceleratorTypes: _json,
        BareMetal: __expectString,
        BaselineEbsBandwidthMbps: _json,
        BurstablePerformance: __expectString,
        CpuManufacturers: _json,
        ExcludedInstanceTypes: _json,
        InstanceGenerations: _json,
        LocalStorage: __expectString,
        LocalStorageTypes: _json,
        MemoryGiBPerVCpu: (_) => de_AwsEc2LaunchTemplateDataInstanceRequirementsMemoryGiBPerVCpuDetails(_, context),
        MemoryMiB: _json,
        NetworkInterfaceCount: _json,
        OnDemandMaxPricePercentageOverLowestPrice: __expectInt32,
        RequireHibernateSupport: __expectBoolean,
        SpotMaxPricePercentageOverLowestPrice: __expectInt32,
        TotalLocalStorageGB: (_) => de_AwsEc2LaunchTemplateDataInstanceRequirementsTotalLocalStorageGBDetails(_, context),
        VCpuCount: _json,
    });
};
const de_AwsEc2LaunchTemplateDataInstanceRequirementsMemoryGiBPerVCpuDetails = (output, context) => {
    return take(output, {
        Max: __limitedParseDouble,
        Min: __limitedParseDouble,
    });
};
const de_AwsEc2LaunchTemplateDataInstanceRequirementsTotalLocalStorageGBDetails = (output, context) => {
    return take(output, {
        Max: __limitedParseDouble,
        Min: __limitedParseDouble,
    });
};
const de_AwsEc2LaunchTemplateDetails = (output, context) => {
    return take(output, {
        DefaultVersionNumber: __expectLong,
        Id: __expectString,
        LatestVersionNumber: __expectLong,
        LaunchTemplateData: (_) => de_AwsEc2LaunchTemplateDataDetails(_, context),
        LaunchTemplateName: __expectString,
    });
};
const de_AwsKmsKeyDetails = (output, context) => {
    return take(output, {
        AWSAccountId: __expectString,
        CreationDate: __limitedParseDouble,
        Description: __expectString,
        KeyId: __expectString,
        KeyManager: __expectString,
        KeyRotationStatus: __expectBoolean,
        KeyState: __expectString,
        Origin: __expectString,
    });
};
const de_AwsNetworkFirewallRuleGroupDetails = (output, context) => {
    return take(output, {
        Capacity: __expectInt32,
        Description: __expectString,
        RuleGroup: _json,
        RuleGroupArn: __expectString,
        RuleGroupId: __expectString,
        RuleGroupName: __expectString,
        Type: __expectString,
    });
};
const de_AwsRedshiftClusterDetails = (output, context) => {
    return take(output, {
        AllowVersionUpgrade: __expectBoolean,
        AutomatedSnapshotRetentionPeriod: __expectInt32,
        AvailabilityZone: __expectString,
        ClusterAvailabilityStatus: __expectString,
        ClusterCreateTime: __expectString,
        ClusterIdentifier: __expectString,
        ClusterNodes: _json,
        ClusterParameterGroups: _json,
        ClusterPublicKey: __expectString,
        ClusterRevisionNumber: __expectString,
        ClusterSecurityGroups: _json,
        ClusterSnapshotCopyStatus: _json,
        ClusterStatus: __expectString,
        ClusterSubnetGroupName: __expectString,
        ClusterVersion: __expectString,
        DBName: __expectString,
        DeferredMaintenanceWindows: _json,
        ElasticIpStatus: _json,
        ElasticResizeNumberOfNodeOptions: __expectString,
        Encrypted: __expectBoolean,
        Endpoint: _json,
        EnhancedVpcRouting: __expectBoolean,
        ExpectedNextSnapshotScheduleTime: __expectString,
        ExpectedNextSnapshotScheduleTimeStatus: __expectString,
        HsmStatus: _json,
        IamRoles: _json,
        KmsKeyId: __expectString,
        LoggingStatus: _json,
        MaintenanceTrackName: __expectString,
        ManualSnapshotRetentionPeriod: __expectInt32,
        MasterUsername: __expectString,
        NextMaintenanceWindowStartTime: __expectString,
        NodeType: __expectString,
        NumberOfNodes: __expectInt32,
        PendingActions: _json,
        PendingModifiedValues: _json,
        PreferredMaintenanceWindow: __expectString,
        PubliclyAccessible: __expectBoolean,
        ResizeInfo: _json,
        RestoreStatus: (_) => de_AwsRedshiftClusterRestoreStatus(_, context),
        SnapshotScheduleIdentifier: __expectString,
        SnapshotScheduleState: __expectString,
        VpcId: __expectString,
        VpcSecurityGroups: _json,
    });
};
const de_AwsRedshiftClusterRestoreStatus = (output, context) => {
    return take(output, {
        CurrentRestoreRateInMegaBytesPerSecond: __limitedParseDouble,
        ElapsedTimeInSeconds: __expectLong,
        EstimatedTimeToCompletionInSeconds: __expectLong,
        ProgressInMegaBytes: __expectLong,
        SnapshotSizeInMegaBytes: __expectLong,
        Status: __expectString,
    });
};
const de_AwsSecurityFinding = (output, context) => {
    return take(output, {
        Action: (_) => de_Action(_, context),
        AwsAccountId: __expectString,
        AwsAccountName: __expectString,
        CompanyName: __expectString,
        Compliance: _json,
        Confidence: __expectInt32,
        CreatedAt: __expectString,
        Criticality: __expectInt32,
        Description: __expectString,
        FindingProviderFields: _json,
        FirstObservedAt: __expectString,
        GeneratorDetails: _json,
        GeneratorId: __expectString,
        Id: __expectString,
        LastObservedAt: __expectString,
        Malware: _json,
        Network: _json,
        NetworkPath: _json,
        Note: _json,
        PatchSummary: _json,
        Process: _json,
        ProcessedAt: __expectString,
        ProductArn: __expectString,
        ProductFields: _json,
        ProductName: __expectString,
        RecordState: __expectString,
        Region: __expectString,
        RelatedFindings: _json,
        Remediation: _json,
        Resources: (_) => de_ResourceList(_, context),
        Sample: __expectBoolean,
        SchemaVersion: __expectString,
        Severity: (_) => de_Severity(_, context),
        SourceUrl: __expectString,
        ThreatIntelIndicators: _json,
        Threats: _json,
        Title: __expectString,
        Types: _json,
        UpdatedAt: __expectString,
        UserDefinedFields: _json,
        VerificationState: __expectString,
        Vulnerabilities: (_) => de_VulnerabilityList(_, context),
        Workflow: _json,
        WorkflowState: __expectString,
    });
};
const de_AwsSecurityFindingFilters = (output, context) => {
    return take(output, {
        AwsAccountId: _json,
        AwsAccountName: _json,
        CompanyName: _json,
        ComplianceAssociatedStandardsId: _json,
        ComplianceSecurityControlId: _json,
        ComplianceSecurityControlParametersName: _json,
        ComplianceSecurityControlParametersValue: _json,
        ComplianceStatus: _json,
        Confidence: (_) => de_NumberFilterList(_, context),
        CreatedAt: _json,
        Criticality: (_) => de_NumberFilterList(_, context),
        Description: _json,
        FindingProviderFieldsConfidence: (_) => de_NumberFilterList(_, context),
        FindingProviderFieldsCriticality: (_) => de_NumberFilterList(_, context),
        FindingProviderFieldsRelatedFindingsId: _json,
        FindingProviderFieldsRelatedFindingsProductArn: _json,
        FindingProviderFieldsSeverityLabel: _json,
        FindingProviderFieldsSeverityOriginal: _json,
        FindingProviderFieldsTypes: _json,
        FirstObservedAt: _json,
        GeneratorId: _json,
        Id: _json,
        Keyword: _json,
        LastObservedAt: _json,
        MalwareName: _json,
        MalwarePath: _json,
        MalwareState: _json,
        MalwareType: _json,
        NetworkDestinationDomain: _json,
        NetworkDestinationIpV4: _json,
        NetworkDestinationIpV6: _json,
        NetworkDestinationPort: (_) => de_NumberFilterList(_, context),
        NetworkDirection: _json,
        NetworkProtocol: _json,
        NetworkSourceDomain: _json,
        NetworkSourceIpV4: _json,
        NetworkSourceIpV6: _json,
        NetworkSourceMac: _json,
        NetworkSourcePort: (_) => de_NumberFilterList(_, context),
        NoteText: _json,
        NoteUpdatedAt: _json,
        NoteUpdatedBy: _json,
        ProcessLaunchedAt: _json,
        ProcessName: _json,
        ProcessParentPid: (_) => de_NumberFilterList(_, context),
        ProcessPath: _json,
        ProcessPid: (_) => de_NumberFilterList(_, context),
        ProcessTerminatedAt: _json,
        ProductArn: _json,
        ProductFields: _json,
        ProductName: _json,
        RecommendationText: _json,
        RecordState: _json,
        Region: _json,
        RelatedFindingsId: _json,
        RelatedFindingsProductArn: _json,
        ResourceApplicationArn: _json,
        ResourceApplicationName: _json,
        ResourceAwsEc2InstanceIamInstanceProfileArn: _json,
        ResourceAwsEc2InstanceImageId: _json,
        ResourceAwsEc2InstanceIpV4Addresses: _json,
        ResourceAwsEc2InstanceIpV6Addresses: _json,
        ResourceAwsEc2InstanceKeyName: _json,
        ResourceAwsEc2InstanceLaunchedAt: _json,
        ResourceAwsEc2InstanceSubnetId: _json,
        ResourceAwsEc2InstanceType: _json,
        ResourceAwsEc2InstanceVpcId: _json,
        ResourceAwsIamAccessKeyCreatedAt: _json,
        ResourceAwsIamAccessKeyPrincipalName: _json,
        ResourceAwsIamAccessKeyStatus: _json,
        ResourceAwsIamAccessKeyUserName: _json,
        ResourceAwsIamUserUserName: _json,
        ResourceAwsS3BucketOwnerId: _json,
        ResourceAwsS3BucketOwnerName: _json,
        ResourceContainerImageId: _json,
        ResourceContainerImageName: _json,
        ResourceContainerLaunchedAt: _json,
        ResourceContainerName: _json,
        ResourceDetailsOther: _json,
        ResourceId: _json,
        ResourcePartition: _json,
        ResourceRegion: _json,
        ResourceTags: _json,
        ResourceType: _json,
        Sample: _json,
        SeverityLabel: _json,
        SeverityNormalized: (_) => de_NumberFilterList(_, context),
        SeverityProduct: (_) => de_NumberFilterList(_, context),
        SourceUrl: _json,
        ThreatIntelIndicatorCategory: _json,
        ThreatIntelIndicatorLastObservedAt: _json,
        ThreatIntelIndicatorSource: _json,
        ThreatIntelIndicatorSourceUrl: _json,
        ThreatIntelIndicatorType: _json,
        ThreatIntelIndicatorValue: _json,
        Title: _json,
        Type: _json,
        UpdatedAt: _json,
        UserDefinedFields: _json,
        VerificationState: _json,
        VulnerabilitiesExploitAvailable: _json,
        VulnerabilitiesFixAvailable: _json,
        WorkflowState: _json,
        WorkflowStatus: _json,
    });
};
const de_AwsSecurityFindingList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AwsSecurityFinding(entry, context);
    });
    return retVal;
};
const de_ConfigurationOptions = (output, context) => {
    if (output.Boolean != null) {
        return {
            Boolean: _json(output.Boolean),
        };
    }
    if (output.Double != null) {
        return {
            Double: de_DoubleConfigurationOptions(output.Double, context),
        };
    }
    if (output.Enum != null) {
        return {
            Enum: _json(output.Enum),
        };
    }
    if (output.EnumList != null) {
        return {
            EnumList: _json(output.EnumList),
        };
    }
    if (output.Integer != null) {
        return {
            Integer: _json(output.Integer),
        };
    }
    if (output.IntegerList != null) {
        return {
            IntegerList: _json(output.IntegerList),
        };
    }
    if (output.String != null) {
        return {
            String: _json(output.String),
        };
    }
    if (output.StringList != null) {
        return {
            StringList: _json(output.StringList),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
const de_ConfigurationPolicyAssociationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ConfigurationPolicyAssociationSummary(entry, context);
    });
    return retVal;
};
const de_ConfigurationPolicyAssociationSummary = (output, context) => {
    return take(output, {
        AssociationStatus: __expectString,
        AssociationStatusMessage: __expectString,
        AssociationType: __expectString,
        ConfigurationPolicyId: __expectString,
        TargetId: __expectString,
        TargetType: __expectString,
        UpdatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_ConfigurationPolicyAssociationSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ConfigurationPolicyAssociationSummary(entry, context);
    });
    return retVal;
};
const de_ConfigurationPolicySummary = (output, context) => {
    return take(output, {
        Arn: __expectString,
        Description: __expectString,
        Id: __expectString,
        Name: __expectString,
        ServiceEnabled: __expectBoolean,
        UpdatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_ConfigurationPolicySummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ConfigurationPolicySummary(entry, context);
    });
    return retVal;
};
const de_Cvss = (output, context) => {
    return take(output, {
        Adjustments: _json,
        BaseScore: __limitedParseDouble,
        BaseVector: __expectString,
        Source: __expectString,
        Version: __expectString,
    });
};
const de_CvssList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Cvss(entry, context);
    });
    return retVal;
};
const de_DoubleConfigurationOptions = (output, context) => {
    return take(output, {
        DefaultValue: __limitedParseDouble,
        Max: __limitedParseDouble,
        Min: __limitedParseDouble,
    });
};
const de_FindingHistoryRecord = (output, context) => {
    return take(output, {
        FindingCreated: __expectBoolean,
        FindingIdentifier: _json,
        NextToken: __expectString,
        UpdateSource: _json,
        UpdateTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        Updates: _json,
    });
};
const de_FindingHistoryRecordList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FindingHistoryRecord(entry, context);
    });
    return retVal;
};
const de_GeoLocation = (output, context) => {
    return take(output, {
        Lat: __limitedParseDouble,
        Lon: __limitedParseDouble,
    });
};
const de_Insight = (output, context) => {
    return take(output, {
        Filters: (_) => de_AwsSecurityFindingFilters(_, context),
        GroupByAttribute: __expectString,
        InsightArn: __expectString,
        Name: __expectString,
    });
};
const de_InsightList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Insight(entry, context);
    });
    return retVal;
};
const de_Invitation = (output, context) => {
    return take(output, {
        AccountId: __expectString,
        InvitationId: __expectString,
        InvitedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        MemberStatus: __expectString,
    });
};
const de_InvitationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Invitation(entry, context);
    });
    return retVal;
};
const de_Member = (output, context) => {
    return take(output, {
        AccountId: __expectString,
        AdministratorId: __expectString,
        Email: __expectString,
        InvitedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        MasterId: __expectString,
        MemberStatus: __expectString,
        UpdatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_MemberList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Member(entry, context);
    });
    return retVal;
};
const de_NetworkConnectionAction = (output, context) => {
    return take(output, {
        Blocked: __expectBoolean,
        ConnectionDirection: __expectString,
        LocalPortDetails: _json,
        Protocol: __expectString,
        RemoteIpDetails: (_) => de_ActionRemoteIpDetails(_, context),
        RemotePortDetails: _json,
    });
};
const de_NumberFilter = (output, context) => {
    return take(output, {
        Eq: __limitedParseDouble,
        Gt: __limitedParseDouble,
        Gte: __limitedParseDouble,
        Lt: __limitedParseDouble,
        Lte: __limitedParseDouble,
    });
};
const de_NumberFilterList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_NumberFilter(entry, context);
    });
    return retVal;
};
const de_ParameterConfiguration = (output, context) => {
    return take(output, {
        Value: (_) => de_ParameterValue(__expectUnion(_), context),
        ValueType: __expectString,
    });
};
const de_ParameterDefinition = (output, context) => {
    return take(output, {
        ConfigurationOptions: (_) => de_ConfigurationOptions(__expectUnion(_), context),
        Description: __expectString,
    });
};
const de_ParameterDefinitions = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_ParameterDefinition(value, context);
        return acc;
    }, {});
};
const de_Parameters = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_ParameterConfiguration(value, context);
        return acc;
    }, {});
};
const de_ParameterValue = (output, context) => {
    if (__expectBoolean(output.Boolean) !== undefined) {
        return { Boolean: __expectBoolean(output.Boolean) };
    }
    if (__limitedParseDouble(output.Double) !== undefined) {
        return { Double: __limitedParseDouble(output.Double) };
    }
    if (__expectString(output.Enum) !== undefined) {
        return { Enum: __expectString(output.Enum) };
    }
    if (output.EnumList != null) {
        return {
            EnumList: _json(output.EnumList),
        };
    }
    if (__expectInt32(output.Integer) !== undefined) {
        return { Integer: __expectInt32(output.Integer) };
    }
    if (output.IntegerList != null) {
        return {
            IntegerList: _json(output.IntegerList),
        };
    }
    if (__expectString(output.String) !== undefined) {
        return { String: __expectString(output.String) };
    }
    if (output.StringList != null) {
        return {
            StringList: _json(output.StringList),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
const de_Policy = (output, context) => {
    if (output.SecurityHub != null) {
        return {
            SecurityHub: de_SecurityHubPolicy(output.SecurityHub, context),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
const de_PortProbeAction = (output, context) => {
    return take(output, {
        Blocked: __expectBoolean,
        PortProbeDetails: (_) => de_PortProbeDetailList(_, context),
    });
};
const de_PortProbeDetail = (output, context) => {
    return take(output, {
        LocalIpDetails: _json,
        LocalPortDetails: _json,
        RemoteIpDetails: (_) => de_ActionRemoteIpDetails(_, context),
    });
};
const de_PortProbeDetailList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PortProbeDetail(entry, context);
    });
    return retVal;
};
const de_Resource = (output, context) => {
    return take(output, {
        ApplicationArn: __expectString,
        ApplicationName: __expectString,
        DataClassification: _json,
        Details: (_) => de_ResourceDetails(_, context),
        Id: __expectString,
        Partition: __expectString,
        Region: __expectString,
        ResourceRole: __expectString,
        Tags: _json,
        Type: __expectString,
    });
};
const de_ResourceDetails = (output, context) => {
    return take(output, {
        AwsAmazonMqBroker: _json,
        AwsApiGatewayRestApi: _json,
        AwsApiGatewayStage: (_) => de_AwsApiGatewayStageDetails(_, context),
        AwsApiGatewayV2Api: _json,
        AwsApiGatewayV2Stage: (_) => de_AwsApiGatewayV2StageDetails(_, context),
        AwsAppSyncGraphQlApi: _json,
        AwsAthenaWorkGroup: _json,
        AwsAutoScalingAutoScalingGroup: _json,
        AwsAutoScalingLaunchConfiguration: _json,
        AwsBackupBackupPlan: _json,
        AwsBackupBackupVault: _json,
        AwsBackupRecoveryPoint: _json,
        AwsCertificateManagerCertificate: _json,
        AwsCloudFormationStack: _json,
        AwsCloudFrontDistribution: _json,
        AwsCloudTrailTrail: _json,
        AwsCloudWatchAlarm: (_) => de_AwsCloudWatchAlarmDetails(_, context),
        AwsCodeBuildProject: _json,
        AwsDmsEndpoint: _json,
        AwsDmsReplicationInstance: _json,
        AwsDmsReplicationTask: _json,
        AwsDynamoDbTable: _json,
        AwsEc2ClientVpnEndpoint: _json,
        AwsEc2Eip: _json,
        AwsEc2Instance: _json,
        AwsEc2LaunchTemplate: (_) => de_AwsEc2LaunchTemplateDetails(_, context),
        AwsEc2NetworkAcl: _json,
        AwsEc2NetworkInterface: _json,
        AwsEc2RouteTable: _json,
        AwsEc2SecurityGroup: _json,
        AwsEc2Subnet: _json,
        AwsEc2TransitGateway: _json,
        AwsEc2Volume: _json,
        AwsEc2Vpc: _json,
        AwsEc2VpcEndpointService: _json,
        AwsEc2VpcPeeringConnection: _json,
        AwsEc2VpnConnection: _json,
        AwsEcrContainerImage: _json,
        AwsEcrRepository: _json,
        AwsEcsCluster: _json,
        AwsEcsContainer: _json,
        AwsEcsService: _json,
        AwsEcsTask: _json,
        AwsEcsTaskDefinition: _json,
        AwsEfsAccessPoint: _json,
        AwsEksCluster: _json,
        AwsElasticBeanstalkEnvironment: _json,
        AwsElasticsearchDomain: _json,
        AwsElbLoadBalancer: _json,
        AwsElbv2LoadBalancer: _json,
        AwsEventSchemasRegistry: _json,
        AwsEventsEndpoint: _json,
        AwsEventsEventbus: _json,
        AwsGuardDutyDetector: _json,
        AwsIamAccessKey: _json,
        AwsIamGroup: _json,
        AwsIamPolicy: _json,
        AwsIamRole: _json,
        AwsIamUser: _json,
        AwsKinesisStream: _json,
        AwsKmsKey: (_) => de_AwsKmsKeyDetails(_, context),
        AwsLambdaFunction: _json,
        AwsLambdaLayerVersion: _json,
        AwsMskCluster: _json,
        AwsNetworkFirewallFirewall: _json,
        AwsNetworkFirewallFirewallPolicy: _json,
        AwsNetworkFirewallRuleGroup: (_) => de_AwsNetworkFirewallRuleGroupDetails(_, context),
        AwsOpenSearchServiceDomain: _json,
        AwsRdsDbCluster: _json,
        AwsRdsDbClusterSnapshot: _json,
        AwsRdsDbInstance: _json,
        AwsRdsDbSecurityGroup: _json,
        AwsRdsDbSnapshot: _json,
        AwsRdsEventSubscription: _json,
        AwsRedshiftCluster: (_) => de_AwsRedshiftClusterDetails(_, context),
        AwsRoute53HostedZone: _json,
        AwsS3AccessPoint: _json,
        AwsS3AccountPublicAccessBlock: _json,
        AwsS3Bucket: _json,
        AwsS3Object: _json,
        AwsSageMakerNotebookInstance: _json,
        AwsSecretsManagerSecret: _json,
        AwsSnsTopic: _json,
        AwsSqsQueue: _json,
        AwsSsmPatchCompliance: _json,
        AwsStepFunctionStateMachine: _json,
        AwsWafRateBasedRule: _json,
        AwsWafRegionalRateBasedRule: _json,
        AwsWafRegionalRule: _json,
        AwsWafRegionalRuleGroup: _json,
        AwsWafRegionalWebAcl: _json,
        AwsWafRule: _json,
        AwsWafRuleGroup: _json,
        AwsWafWebAcl: _json,
        AwsWafv2RuleGroup: _json,
        AwsWafv2WebAcl: _json,
        AwsXrayEncryptionConfig: _json,
        Container: _json,
        Other: _json,
    });
};
const de_ResourceList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Resource(entry, context);
    });
    return retVal;
};
const de_SecurityControl = (output, context) => {
    return take(output, {
        Description: __expectString,
        LastUpdateReason: __expectString,
        Parameters: (_) => de_Parameters(_, context),
        RemediationUrl: __expectString,
        SecurityControlArn: __expectString,
        SecurityControlId: __expectString,
        SecurityControlStatus: __expectString,
        SeverityRating: __expectString,
        Title: __expectString,
        UpdateStatus: __expectString,
    });
};
const de_SecurityControlCustomParameter = (output, context) => {
    return take(output, {
        Parameters: (_) => de_Parameters(_, context),
        SecurityControlId: __expectString,
    });
};
const de_SecurityControlCustomParametersList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SecurityControlCustomParameter(entry, context);
    });
    return retVal;
};
const de_SecurityControlDefinition = (output, context) => {
    return take(output, {
        CurrentRegionAvailability: __expectString,
        CustomizableProperties: _json,
        Description: __expectString,
        ParameterDefinitions: (_) => de_ParameterDefinitions(_, context),
        RemediationUrl: __expectString,
        SecurityControlId: __expectString,
        SeverityRating: __expectString,
        Title: __expectString,
    });
};
const de_SecurityControlDefinitions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SecurityControlDefinition(entry, context);
    });
    return retVal;
};
const de_SecurityControls = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SecurityControl(entry, context);
    });
    return retVal;
};
const de_SecurityControlsConfiguration = (output, context) => {
    return take(output, {
        DisabledSecurityControlIdentifiers: _json,
        EnabledSecurityControlIdentifiers: _json,
        SecurityControlCustomParameters: (_) => de_SecurityControlCustomParametersList(_, context),
    });
};
const de_SecurityHubPolicy = (output, context) => {
    return take(output, {
        EnabledStandardIdentifiers: _json,
        SecurityControlsConfiguration: (_) => de_SecurityControlsConfiguration(_, context),
        ServiceEnabled: __expectBoolean,
    });
};
const de_Severity = (output, context) => {
    return take(output, {
        Label: __expectString,
        Normalized: __expectInt32,
        Original: __expectString,
        Product: __limitedParseDouble,
    });
};
const de_SeverityUpdate = (output, context) => {
    return take(output, {
        Label: __expectString,
        Normalized: __expectInt32,
        Product: __limitedParseDouble,
    });
};
const de_StandardsControl = (output, context) => {
    return take(output, {
        ControlId: __expectString,
        ControlStatus: __expectString,
        ControlStatusUpdatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        Description: __expectString,
        DisabledReason: __expectString,
        RelatedRequirements: _json,
        RemediationUrl: __expectString,
        SeverityRating: __expectString,
        StandardsControlArn: __expectString,
        Title: __expectString,
    });
};
const de_StandardsControlAssociationDetail = (output, context) => {
    return take(output, {
        AssociationStatus: __expectString,
        RelatedRequirements: _json,
        SecurityControlArn: __expectString,
        SecurityControlId: __expectString,
        StandardsArn: __expectString,
        StandardsControlArns: _json,
        StandardsControlDescription: __expectString,
        StandardsControlTitle: __expectString,
        UpdatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        UpdatedReason: __expectString,
    });
};
const de_StandardsControlAssociationDetails = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_StandardsControlAssociationDetail(entry, context);
    });
    return retVal;
};
const de_StandardsControlAssociationSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_StandardsControlAssociationSummary(entry, context);
    });
    return retVal;
};
const de_StandardsControlAssociationSummary = (output, context) => {
    return take(output, {
        AssociationStatus: __expectString,
        RelatedRequirements: _json,
        SecurityControlArn: __expectString,
        SecurityControlId: __expectString,
        StandardsArn: __expectString,
        StandardsControlDescription: __expectString,
        StandardsControlTitle: __expectString,
        UpdatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        UpdatedReason: __expectString,
    });
};
const de_StandardsControls = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_StandardsControl(entry, context);
    });
    return retVal;
};
const de_Vulnerability = (output, context) => {
    return take(output, {
        CodeVulnerabilities: _json,
        Cvss: (_) => de_CvssList(_, context),
        EpssScore: __limitedParseDouble,
        ExploitAvailable: __expectString,
        FixAvailable: __expectString,
        Id: __expectString,
        LastKnownExploitAt: __expectString,
        ReferenceUrls: _json,
        RelatedVulnerabilities: _json,
        Vendor: _json,
        VulnerablePackages: _json,
    });
};
const de_VulnerabilityList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Vulnerability(entry, context);
    });
    return retVal;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const _HA = "HubArn";
const _MR = "MaxResults";
const _NT = "NextToken";
const _OA = "OnlyAssociated";
const _PA = "ProductArn";
const _SA = "StandardsArn";
const _SCI = "SecurityControlId";
const _TK = "TagKeys";
const _tK = "tagKeys";
