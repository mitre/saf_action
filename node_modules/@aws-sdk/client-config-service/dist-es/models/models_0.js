import { ConfigServiceServiceException as __BaseException } from "./ConfigServiceServiceException";
export const ComplianceType = {
    Compliant: "COMPLIANT",
    Insufficient_Data: "INSUFFICIENT_DATA",
    Non_Compliant: "NON_COMPLIANT",
    Not_Applicable: "NOT_APPLICABLE",
};
export const ConformancePackComplianceType = {
    COMPLIANT: "COMPLIANT",
    INSUFFICIENT_DATA: "INSUFFICIENT_DATA",
    NON_COMPLIANT: "NON_COMPLIANT",
};
export const AggregateConformancePackComplianceSummaryGroupKey = {
    ACCOUNT_ID: "ACCOUNT_ID",
    AWS_REGION: "AWS_REGION",
};
export const AggregatedSourceStatusType = {
    FAILED: "FAILED",
    OUTDATED: "OUTDATED",
    SUCCEEDED: "SUCCEEDED",
};
export const AggregatedSourceType = {
    ACCOUNT: "ACCOUNT",
    ORGANIZATION: "ORGANIZATION",
};
export const EvaluationMode = {
    DETECTIVE: "DETECTIVE",
    PROACTIVE: "PROACTIVE",
};
export const ResourceType = {
    ACMPCACertificateAuthority: "AWS::ACMPCA::CertificateAuthority",
    ACMPCACertificateAuthorityActivation: "AWS::ACMPCA::CertificateAuthorityActivation",
    APSRuleGroupsNamespace: "AWS::APS::RuleGroupsNamespace",
    AccessAnalyzerAnalyzer: "AWS::AccessAnalyzer::Analyzer",
    AccountPublicAccessBlock: "AWS::S3::AccountPublicAccessBlock",
    Alarm: "AWS::CloudWatch::Alarm",
    AmazonMQBroker: "AWS::AmazonMQ::Broker",
    AmplifyApp: "AWS::Amplify::App",
    AmplifyBranch: "AWS::Amplify::Branch",
    Api: "AWS::ApiGatewayV2::Api",
    AppConfigApplication: "AWS::AppConfig::Application",
    AppConfigConfigurationProfile: "AWS::AppConfig::ConfigurationProfile",
    AppConfigDeploymentStrategy: "AWS::AppConfig::DeploymentStrategy",
    AppConfigEnvironment: "AWS::AppConfig::Environment",
    AppConfigExtensionAssociation: "AWS::AppConfig::ExtensionAssociation",
    AppConfigHostedConfigurationVersion: "AWS::AppConfig::HostedConfigurationVersion",
    AppFlowFlow: "AWS::AppFlow::Flow",
    AppIntegrationsApplication: "AWS::AppIntegrations::Application",
    AppIntegrationsEventIntegration: "AWS::AppIntegrations::EventIntegration",
    AppMeshGatewayRoute: "AWS::AppMesh::GatewayRoute",
    AppMeshMesh: "AWS::AppMesh::Mesh",
    AppMeshRoute: "AWS::AppMesh::Route",
    AppMeshVirtualGateway: "AWS::AppMesh::VirtualGateway",
    AppMeshVirtualNode: "AWS::AppMesh::VirtualNode",
    AppMeshVirtualRouter: "AWS::AppMesh::VirtualRouter",
    AppMeshVirtualService: "AWS::AppMesh::VirtualService",
    AppRunnerService: "AWS::AppRunner::Service",
    AppRunnerVpcConnector: "AWS::AppRunner::VpcConnector",
    AppStreamApplication: "AWS::AppStream::Application",
    AppStreamDirectoryConfig: "AWS::AppStream::DirectoryConfig",
    AppStreamFleet: "AWS::AppStream::Fleet",
    AppStreamStack: "AWS::AppStream::Stack",
    AppSyncApiCache: "AWS::AppSync::ApiCache",
    AppSyncGraphQLApi: "AWS::AppSync::GraphQLApi",
    Application: "AWS::ElasticBeanstalk::Application",
    ApplicationVersion: "AWS::ElasticBeanstalk::ApplicationVersion",
    AssociationCompliance: "AWS::SSM::AssociationCompliance",
    AthenaDataCatalog: "AWS::Athena::DataCatalog",
    AthenaPreparedStatement: "AWS::Athena::PreparedStatement",
    AthenaWorkGroup: "AWS::Athena::WorkGroup",
    AuditManagerAssessment: "AWS::AuditManager::Assessment",
    AutoScalingGroup: "AWS::AutoScaling::AutoScalingGroup",
    AutoScalingWarmPool: "AWS::AutoScaling::WarmPool",
    BackupPlan: "AWS::Backup::BackupPlan",
    BackupRecoveryPoint: "AWS::Backup::RecoveryPoint",
    BackupReportPlan: "AWS::Backup::ReportPlan",
    BackupSelection: "AWS::Backup::BackupSelection",
    BackupVault: "AWS::Backup::BackupVault",
    BatchComputeEnvironment: "AWS::Batch::ComputeEnvironment",
    BatchJobQueue: "AWS::Batch::JobQueue",
    BatchSchedulingPolicy: "AWS::Batch::SchedulingPolicy",
    BedrockGuardrail: "AWS::Bedrock::Guardrail",
    BedrockKnowledgeBase: "AWS::Bedrock::KnowledgeBase",
    Bucket: "AWS::S3::Bucket",
    BudgetsBudgetsAction: "AWS::Budgets::BudgetsAction",
    CassandraKeyspace: "AWS::Cassandra::Keyspace",
    Certificate: "AWS::ACM::Certificate",
    Cloud9EnvironmentEC2: "AWS::Cloud9::EnvironmentEC2",
    CloudFormationProduct: "AWS::ServiceCatalog::CloudFormationProduct",
    CloudFormationProvisionedProduct: "AWS::ServiceCatalog::CloudFormationProvisionedProduct",
    CloudWatchMetricStream: "AWS::CloudWatch::MetricStream",
    Cluster: "AWS::Redshift::Cluster",
    ClusterParameterGroup: "AWS::Redshift::ClusterParameterGroup",
    ClusterSecurityGroup: "AWS::Redshift::ClusterSecurityGroup",
    ClusterSnapshot: "AWS::Redshift::ClusterSnapshot",
    ClusterSubnetGroup: "AWS::Redshift::ClusterSubnetGroup",
    CodeArtifactRepository: "AWS::CodeArtifact::Repository",
    CodeBuildReportGroup: "AWS::CodeBuild::ReportGroup",
    CodeDeployApplication: "AWS::CodeDeploy::Application",
    CodeDeployDeploymentConfig: "AWS::CodeDeploy::DeploymentConfig",
    CodeDeployDeploymentGroup: "AWS::CodeDeploy::DeploymentGroup",
    CodeGuruProfilerProfilingGroup: "AWS::CodeGuruProfiler::ProfilingGroup",
    CodeGuruReviewerRepositoryAssociation: "AWS::CodeGuruReviewer::RepositoryAssociation",
    CognitoIdentityPool: "AWS::Cognito::IdentityPool",
    CognitoUserPool: "AWS::Cognito::UserPool",
    CognitoUserPoolClient: "AWS::Cognito::UserPoolClient",
    CognitoUserPoolGroup: "AWS::Cognito::UserPoolGroup",
    ConformancePackCompliance: "AWS::Config::ConformancePackCompliance",
    ConnectInstance: "AWS::Connect::Instance",
    ConnectPhoneNumber: "AWS::Connect::PhoneNumber",
    ConnectQuickConnect: "AWS::Connect::QuickConnect",
    ConnectRule: "AWS::Connect::Rule",
    ConnectUser: "AWS::Connect::User",
    CustomerGateway: "AWS::EC2::CustomerGateway",
    CustomerProfilesDomain: "AWS::CustomerProfiles::Domain",
    CustomerProfilesObjectType: "AWS::CustomerProfiles::ObjectType",
    DBCluster: "AWS::RDS::DBCluster",
    DBClusterSnapshot: "AWS::RDS::DBClusterSnapshot",
    DBInstance: "AWS::RDS::DBInstance",
    DBSecurityGroup: "AWS::RDS::DBSecurityGroup",
    DBSnapshot: "AWS::RDS::DBSnapshot",
    DBSubnetGroup: "AWS::RDS::DBSubnetGroup",
    DMSCertificate: "AWS::DMS::Certificate",
    DMSEndpoint: "AWS::DMS::Endpoint",
    DMSEventSubscription: "AWS::DMS::EventSubscription",
    DMSReplicationSubnetGroup: "AWS::DMS::ReplicationSubnetGroup",
    DataSyncLocationEFS: "AWS::DataSync::LocationEFS",
    DataSyncLocationFSxLustre: "AWS::DataSync::LocationFSxLustre",
    DataSyncLocationFSxWindows: "AWS::DataSync::LocationFSxWindows",
    DataSyncLocationHDFS: "AWS::DataSync::LocationHDFS",
    DataSyncLocationNFS: "AWS::DataSync::LocationNFS",
    DataSyncLocationObjectStorage: "AWS::DataSync::LocationObjectStorage",
    DataSyncLocationS3: "AWS::DataSync::LocationS3",
    DataSyncLocationSMB: "AWS::DataSync::LocationSMB",
    DataSyncTask: "AWS::DataSync::Task",
    DetectiveGraph: "AWS::Detective::Graph",
    DeviceFarmInstanceProfile: "AWS::DeviceFarm::InstanceProfile",
    DeviceFarmProject: "AWS::DeviceFarm::Project",
    DeviceFarmTestGridProject: "AWS::DeviceFarm::TestGridProject",
    Distribution: "AWS::CloudFront::Distribution",
    Domain: "AWS::Elasticsearch::Domain",
    EC2CapacityReservation: "AWS::EC2::CapacityReservation",
    EC2CarrierGateway: "AWS::EC2::CarrierGateway",
    EC2ClientVpnEndpoint: "AWS::EC2::ClientVpnEndpoint",
    EC2ClientVpnTargetNetworkAssociation: "AWS::EC2::ClientVpnTargetNetworkAssociation",
    EC2DHCPOptions: "AWS::EC2::DHCPOptions",
    EC2EC2Fleet: "AWS::EC2::EC2Fleet",
    EC2EIPAssociation: "AWS::EC2::EIPAssociation",
    EC2IPAM: "AWS::EC2::IPAM",
    EC2IPAMPool: "AWS::EC2::IPAMPool",
    EC2IPAMResourceDiscovery: "AWS::EC2::IPAMResourceDiscovery",
    EC2IPAMResourceDiscoveryAssociation: "AWS::EC2::IPAMResourceDiscoveryAssociation",
    EC2IPAMScope: "AWS::EC2::IPAMScope",
    EC2InstanceConnectEndpoint: "AWS::EC2::InstanceConnectEndpoint",
    EC2NetworkInsightsAccessScope: "AWS::EC2::NetworkInsightsAccessScope",
    EC2NetworkInsightsAnalysis: "AWS::EC2::NetworkInsightsAnalysis",
    EC2NetworkInsightsPath: "AWS::EC2::NetworkInsightsPath",
    EC2PrefixList: "AWS::EC2::PrefixList",
    EC2SnapshotBlockPublicAccess: "AWS::EC2::SnapshotBlockPublicAccess",
    EC2SpotFleet: "AWS::EC2::SpotFleet",
    EC2SubnetRouteTableAssociation: "AWS::EC2::SubnetRouteTableAssociation",
    EC2TrafficMirrorFilter: "AWS::EC2::TrafficMirrorFilter",
    EC2TrafficMirrorSession: "AWS::EC2::TrafficMirrorSession",
    EC2TrafficMirrorTarget: "AWS::EC2::TrafficMirrorTarget",
    EC2TransitGatewayConnect: "AWS::EC2::TransitGatewayConnect",
    EC2TransitGatewayMulticastDomain: "AWS::EC2::TransitGatewayMulticastDomain",
    EC2VPCBlockPublicAccessExclusion: "AWS::EC2::VPCBlockPublicAccessExclusion",
    EC2VPCBlockPublicAccessOptions: "AWS::EC2::VPCBlockPublicAccessOptions",
    EC2VPCEndpointConnectionNotification: "AWS::EC2::VPCEndpointConnectionNotification",
    EC2VPNConnectionRoute: "AWS::EC2::VPNConnectionRoute",
    ECRPublicRepository: "AWS::ECR::PublicRepository",
    ECRPullThroughCacheRule: "AWS::ECR::PullThroughCacheRule",
    ECRRegistryPolicy: "AWS::ECR::RegistryPolicy",
    ECRRepository: "AWS::ECR::Repository",
    ECSCapacityProvider: "AWS::ECS::CapacityProvider",
    ECSCluster: "AWS::ECS::Cluster",
    ECSService: "AWS::ECS::Service",
    ECSTaskDefinition: "AWS::ECS::TaskDefinition",
    ECSTaskSet: "AWS::ECS::TaskSet",
    EFSAccessPoint: "AWS::EFS::AccessPoint",
    EFSFileSystem: "AWS::EFS::FileSystem",
    EIP: "AWS::EC2::EIP",
    EKSAddon: "AWS::EKS::Addon",
    EKSCluster: "AWS::EKS::Cluster",
    EKSFargateProfile: "AWS::EKS::FargateProfile",
    EKSIdentityProviderConfig: "AWS::EKS::IdentityProviderConfig",
    EMRSecurityConfiguration: "AWS::EMR::SecurityConfiguration",
    EgressOnlyInternetGateway: "AWS::EC2::EgressOnlyInternetGateway",
    EncryptionConfig: "AWS::XRay::EncryptionConfig",
    Environment: "AWS::ElasticBeanstalk::Environment",
    EventSchemasDiscoverer: "AWS::EventSchemas::Discoverer",
    EventSchemasRegistry: "AWS::EventSchemas::Registry",
    EventSchemasRegistryPolicy: "AWS::EventSchemas::RegistryPolicy",
    EventSchemasSchema: "AWS::EventSchemas::Schema",
    EventSubscription: "AWS::RDS::EventSubscription",
    EventsApiDestination: "AWS::Events::ApiDestination",
    EventsArchive: "AWS::Events::Archive",
    EventsConnection: "AWS::Events::Connection",
    EventsEndpoint: "AWS::Events::Endpoint",
    EventsEventBus: "AWS::Events::EventBus",
    EventsRule: "AWS::Events::Rule",
    EvidentlyLaunch: "AWS::Evidently::Launch",
    EvidentlyProject: "AWS::Evidently::Project",
    EvidentlySegment: "AWS::Evidently::Segment",
    FISExperimentTemplate: "AWS::FIS::ExperimentTemplate",
    FileData: "AWS::SSM::FileData",
    FlowLog: "AWS::EC2::FlowLog",
    ForecastDataset: "AWS::Forecast::Dataset",
    ForecastDatasetGroup: "AWS::Forecast::DatasetGroup",
    FraudDetectorEntityType: "AWS::FraudDetector::EntityType",
    FraudDetectorLabel: "AWS::FraudDetector::Label",
    FraudDetectorOutcome: "AWS::FraudDetector::Outcome",
    FraudDetectorVariable: "AWS::FraudDetector::Variable",
    Function: "AWS::Lambda::Function",
    GlobalAcceleratorAccelerator: "AWS::GlobalAccelerator::Accelerator",
    GlobalAcceleratorEndpointGroup: "AWS::GlobalAccelerator::EndpointGroup",
    GlobalAcceleratorListener: "AWS::GlobalAccelerator::Listener",
    GlueClassifier: "AWS::Glue::Classifier",
    GlueJob: "AWS::Glue::Job",
    GlueMLTransform: "AWS::Glue::MLTransform",
    GrafanaWorkspace: "AWS::Grafana::Workspace",
    GreengrassV2ComponentVersion: "AWS::GreengrassV2::ComponentVersion",
    GroundStationConfig: "AWS::GroundStation::Config",
    GroundStationDataflowEndpointGroup: "AWS::GroundStation::DataflowEndpointGroup",
    GroundStationMissionProfile: "AWS::GroundStation::MissionProfile",
    Group: "AWS::IAM::Group",
    GuardDutyDetector: "AWS::GuardDuty::Detector",
    GuardDutyFilter: "AWS::GuardDuty::Filter",
    GuardDutyIPSet: "AWS::GuardDuty::IPSet",
    GuardDutyThreatIntelSet: "AWS::GuardDuty::ThreatIntelSet",
    HealthLakeFHIRDatastore: "AWS::HealthLake::FHIRDatastore",
    Host: "AWS::EC2::Host",
    IAMInstanceProfile: "AWS::IAM::InstanceProfile",
    IAMOIDCProvider: "AWS::IAM::OIDCProvider",
    IAMSAMLProvider: "AWS::IAM::SAMLProvider",
    IAMServerCertificate: "AWS::IAM::ServerCertificate",
    IPSetV2: "AWS::WAFv2::IPSet",
    IVSChannel: "AWS::IVS::Channel",
    IVSPlaybackKeyPair: "AWS::IVS::PlaybackKeyPair",
    IVSRecordingConfiguration: "AWS::IVS::RecordingConfiguration",
    ImageBuilderContainerRecipe: "AWS::ImageBuilder::ContainerRecipe",
    ImageBuilderDistributionConfiguration: "AWS::ImageBuilder::DistributionConfiguration",
    ImageBuilderImagePipeline: "AWS::ImageBuilder::ImagePipeline",
    ImageBuilderImageRecipe: "AWS::ImageBuilder::ImageRecipe",
    ImageBuilderInfrastructureConfiguration: "AWS::ImageBuilder::InfrastructureConfiguration",
    InspectorV2Activation: "AWS::InspectorV2::Activation",
    InspectorV2Filter: "AWS::InspectorV2::Filter",
    Instance: "AWS::EC2::Instance",
    InternetGateway: "AWS::EC2::InternetGateway",
    IoTAccountAuditConfiguration: "AWS::IoT::AccountAuditConfiguration",
    IoTAnalyticsChannel: "AWS::IoTAnalytics::Channel",
    IoTAnalyticsDataset: "AWS::IoTAnalytics::Dataset",
    IoTAnalyticsDatastore: "AWS::IoTAnalytics::Datastore",
    IoTAnalyticsPipeline: "AWS::IoTAnalytics::Pipeline",
    IoTAuthorizer: "AWS::IoT::Authorizer",
    IoTCACertificate: "AWS::IoT::CACertificate",
    IoTCustomMetric: "AWS::IoT::CustomMetric",
    IoTDimension: "AWS::IoT::Dimension",
    IoTEventsAlarmModel: "AWS::IoTEvents::AlarmModel",
    IoTEventsDetectorModel: "AWS::IoTEvents::DetectorModel",
    IoTEventsInput: "AWS::IoTEvents::Input",
    IoTFleetMetric: "AWS::IoT::FleetMetric",
    IoTJobTemplate: "AWS::IoT::JobTemplate",
    IoTMitigationAction: "AWS::IoT::MitigationAction",
    IoTPolicy: "AWS::IoT::Policy",
    IoTProvisioningTemplate: "AWS::IoT::ProvisioningTemplate",
    IoTRoleAlias: "AWS::IoT::RoleAlias",
    IoTScheduledAudit: "AWS::IoT::ScheduledAudit",
    IoTSecurityProfile: "AWS::IoT::SecurityProfile",
    IoTSiteWiseAssetModel: "AWS::IoTSiteWise::AssetModel",
    IoTSiteWiseDashboard: "AWS::IoTSiteWise::Dashboard",
    IoTSiteWiseGateway: "AWS::IoTSiteWise::Gateway",
    IoTSiteWisePortal: "AWS::IoTSiteWise::Portal",
    IoTSiteWiseProject: "AWS::IoTSiteWise::Project",
    IoTTwinMakerComponentType: "AWS::IoTTwinMaker::ComponentType",
    IoTTwinMakerEntity: "AWS::IoTTwinMaker::Entity",
    IoTTwinMakerScene: "AWS::IoTTwinMaker::Scene",
    IoTTwinMakerSyncJob: "AWS::IoTTwinMaker::SyncJob",
    IoTTwinMakerWorkspace: "AWS::IoTTwinMaker::Workspace",
    IoTWirelessFuotaTask: "AWS::IoTWireless::FuotaTask",
    IoTWirelessMulticastGroup: "AWS::IoTWireless::MulticastGroup",
    IoTWirelessServiceProfile: "AWS::IoTWireless::ServiceProfile",
    KMSAlias: "AWS::KMS::Alias",
    KafkaConnectConnector: "AWS::KafkaConnect::Connector",
    KendraIndex: "AWS::Kendra::Index",
    Key: "AWS::KMS::Key",
    KinesisAnalyticsV2Application: "AWS::KinesisAnalyticsV2::Application",
    KinesisFirehoseDeliveryStream: "AWS::KinesisFirehose::DeliveryStream",
    KinesisStream: "AWS::Kinesis::Stream",
    KinesisStreamConsumer: "AWS::Kinesis::StreamConsumer",
    KinesisVideoSignalingChannel: "AWS::KinesisVideo::SignalingChannel",
    KinesisVideoStream: "AWS::KinesisVideo::Stream",
    LambdaCodeSigningConfig: "AWS::Lambda::CodeSigningConfig",
    LaunchConfiguration: "AWS::AutoScaling::LaunchConfiguration",
    LaunchTemplate: "AWS::EC2::LaunchTemplate",
    LexBot: "AWS::Lex::Bot",
    LexBotAlias: "AWS::Lex::BotAlias",
    LightsailBucket: "AWS::Lightsail::Bucket",
    LightsailCertificate: "AWS::Lightsail::Certificate",
    LightsailDisk: "AWS::Lightsail::Disk",
    LightsailStaticIp: "AWS::Lightsail::StaticIp",
    ListenerV2: "AWS::ElasticLoadBalancingV2::Listener",
    LoadBalancer: "AWS::ElasticLoadBalancing::LoadBalancer",
    LoadBalancerV2: "AWS::ElasticLoadBalancingV2::LoadBalancer",
    LogsDestination: "AWS::Logs::Destination",
    LookoutMetricsAlert: "AWS::LookoutMetrics::Alert",
    LookoutVisionProject: "AWS::LookoutVision::Project",
    M2Environment: "AWS::M2::Environment",
    MSKBatchScramSecret: "AWS::MSK::BatchScramSecret",
    MSKCluster: "AWS::MSK::Cluster",
    MSKClusterPolicy: "AWS::MSK::ClusterPolicy",
    MSKConfiguration: "AWS::MSK::Configuration",
    MSKVpcConnection: "AWS::MSK::VpcConnection",
    ManagedInstanceInventory: "AWS::SSM::ManagedInstanceInventory",
    ManagedRuleSetV2: "AWS::WAFv2::ManagedRuleSet",
    MediaConnectFlowEntitlement: "AWS::MediaConnect::FlowEntitlement",
    MediaConnectFlowSource: "AWS::MediaConnect::FlowSource",
    MediaConnectFlowVpcInterface: "AWS::MediaConnect::FlowVpcInterface",
    MediaConnectGateway: "AWS::MediaConnect::Gateway",
    MediaPackagePackagingConfiguration: "AWS::MediaPackage::PackagingConfiguration",
    MediaPackagePackagingGroup: "AWS::MediaPackage::PackagingGroup",
    MediaTailorPlaybackConfiguration: "AWS::MediaTailor::PlaybackConfiguration",
    MemoryDBSubnetGroup: "AWS::MemoryDB::SubnetGroup",
    NatGateway: "AWS::EC2::NatGateway",
    NetworkAcl: "AWS::EC2::NetworkAcl",
    NetworkFirewallFirewall: "AWS::NetworkFirewall::Firewall",
    NetworkFirewallFirewallPolicy: "AWS::NetworkFirewall::FirewallPolicy",
    NetworkFirewallRuleGroup: "AWS::NetworkFirewall::RuleGroup",
    NetworkInsightsAccessScopeAnalysis: "AWS::EC2::NetworkInsightsAccessScopeAnalysis",
    NetworkInterface: "AWS::EC2::NetworkInterface",
    NetworkManagerConnectPeer: "AWS::NetworkManager::ConnectPeer",
    NetworkManagerCustomerGatewayAssociation: "AWS::NetworkManager::CustomerGatewayAssociation",
    NetworkManagerDevice: "AWS::NetworkManager::Device",
    NetworkManagerGlobalNetwork: "AWS::NetworkManager::GlobalNetwork",
    NetworkManagerLink: "AWS::NetworkManager::Link",
    NetworkManagerLinkAssociation: "AWS::NetworkManager::LinkAssociation",
    NetworkManagerSite: "AWS::NetworkManager::Site",
    NetworkManagerTransitGatewayRegistration: "AWS::NetworkManager::TransitGatewayRegistration",
    OpenSearchDomain: "AWS::OpenSearch::Domain",
    OpenSearchServerlessCollection: "AWS::OpenSearchServerless::Collection",
    OpenSearchServerlessVpcEndpoint: "AWS::OpenSearchServerless::VpcEndpoint",
    PanoramaPackage: "AWS::Panorama::Package",
    PatchCompliance: "AWS::SSM::PatchCompliance",
    PersonalizeDataset: "AWS::Personalize::Dataset",
    PersonalizeDatasetGroup: "AWS::Personalize::DatasetGroup",
    PersonalizeSchema: "AWS::Personalize::Schema",
    PersonalizeSolution: "AWS::Personalize::Solution",
    PinpointApp: "AWS::Pinpoint::App",
    PinpointApplicationSettings: "AWS::Pinpoint::ApplicationSettings",
    PinpointCampaign: "AWS::Pinpoint::Campaign",
    PinpointEmailChannel: "AWS::Pinpoint::EmailChannel",
    PinpointEmailTemplate: "AWS::Pinpoint::EmailTemplate",
    PinpointEventStream: "AWS::Pinpoint::EventStream",
    PinpointInAppTemplate: "AWS::Pinpoint::InAppTemplate",
    PinpointSegment: "AWS::Pinpoint::Segment",
    Pipeline: "AWS::CodePipeline::Pipeline",
    Policy: "AWS::IAM::Policy",
    Portfolio: "AWS::ServiceCatalog::Portfolio",
    Project: "AWS::CodeBuild::Project",
    Protection: "AWS::Shield::Protection",
    QLDBLedger: "AWS::QLDB::Ledger",
    Queue: "AWS::SQS::Queue",
    QuickSightDataSource: "AWS::QuickSight::DataSource",
    QuickSightTemplate: "AWS::QuickSight::Template",
    QuickSightTheme: "AWS::QuickSight::Theme",
    RDSGlobalCluster: "AWS::RDS::GlobalCluster",
    RDSOptionGroup: "AWS::RDS::OptionGroup",
    RUMAppMonitor: "AWS::RUM::AppMonitor",
    RateBasedRule: "AWS::WAF::RateBasedRule",
    RedshiftEndpointAccess: "AWS::Redshift::EndpointAccess",
    RedshiftEndpointAuthorization: "AWS::Redshift::EndpointAuthorization",
    RedshiftEventSubscription: "AWS::Redshift::EventSubscription",
    RedshiftScheduledAction: "AWS::Redshift::ScheduledAction",
    RegexPatternSetV2: "AWS::WAFv2::RegexPatternSet",
    RegionalProtection: "AWS::ShieldRegional::Protection",
    RegionalRateBasedRule: "AWS::WAFRegional::RateBasedRule",
    RegionalRule: "AWS::WAFRegional::Rule",
    RegionalRuleGroup: "AWS::WAFRegional::RuleGroup",
    RegionalWebACL: "AWS::WAFRegional::WebACL",
    RegisteredHAInstance: "AWS::EC2::RegisteredHAInstance",
    ResilienceHubApp: "AWS::ResilienceHub::App",
    ResilienceHubResiliencyPolicy: "AWS::ResilienceHub::ResiliencyPolicy",
    ResourceCompliance: "AWS::Config::ResourceCompliance",
    ResourceExplorer2Index: "AWS::ResourceExplorer2::Index",
    RestApi: "AWS::ApiGateway::RestApi",
    RoboMakerRobotApplication: "AWS::RoboMaker::RobotApplication",
    RoboMakerRobotApplicationVersion: "AWS::RoboMaker::RobotApplicationVersion",
    RoboMakerSimulationApplication: "AWS::RoboMaker::SimulationApplication",
    Role: "AWS::IAM::Role",
    Route53HostedZone: "AWS::Route53::HostedZone",
    Route53ProfilesProfile: "AWS::Route53Profiles::Profile",
    Route53RecoveryControlCluster: "AWS::Route53RecoveryControl::Cluster",
    Route53RecoveryControlControlPanel: "AWS::Route53RecoveryControl::ControlPanel",
    Route53RecoveryControlRoutingControl: "AWS::Route53RecoveryControl::RoutingControl",
    Route53RecoveryControlSafetyRule: "AWS::Route53RecoveryControl::SafetyRule",
    Route53RecoveryReadinessCell: "AWS::Route53RecoveryReadiness::Cell",
    Route53RecoveryReadinessReadinessCheck: "AWS::Route53RecoveryReadiness::ReadinessCheck",
    Route53RecoveryReadinessRecoveryGroup: "AWS::Route53RecoveryReadiness::RecoveryGroup",
    Route53RecoveryReadinessResourceSet: "AWS::Route53RecoveryReadiness::ResourceSet",
    Route53ResolverFirewallDomainList: "AWS::Route53Resolver::FirewallDomainList",
    Route53ResolverFirewallRuleGroup: "AWS::Route53Resolver::FirewallRuleGroup",
    Route53ResolverFirewallRuleGroupAssociation: "AWS::Route53Resolver::FirewallRuleGroupAssociation",
    Route53ResolverResolverEndpoint: "AWS::Route53Resolver::ResolverEndpoint",
    Route53ResolverResolverQueryLoggingConfig: "AWS::Route53Resolver::ResolverQueryLoggingConfig",
    Route53ResolverResolverQueryLoggingConfigAssociation: "AWS::Route53Resolver::ResolverQueryLoggingConfigAssociation",
    Route53ResolverResolverRule: "AWS::Route53Resolver::ResolverRule",
    Route53ResolverResolverRuleAssociation: "AWS::Route53Resolver::ResolverRuleAssociation",
    RouteTable: "AWS::EC2::RouteTable",
    Rule: "AWS::WAF::Rule",
    RuleGroup: "AWS::WAF::RuleGroup",
    RuleGroupV2: "AWS::WAFv2::RuleGroup",
    S3AccessPoint: "AWS::S3::AccessPoint",
    S3ExpressBucketPolicy: "AWS::S3Express::BucketPolicy",
    S3ExpressDirectoryBucket: "AWS::S3Express::DirectoryBucket",
    S3MultiRegionAccessPoint: "AWS::S3::MultiRegionAccessPoint",
    S3StorageLens: "AWS::S3::StorageLens",
    S3StorageLensGroup: "AWS::S3::StorageLensGroup",
    SESConfigurationSet: "AWS::SES::ConfigurationSet",
    SESContactList: "AWS::SES::ContactList",
    SESReceiptFilter: "AWS::SES::ReceiptFilter",
    SESReceiptRuleSet: "AWS::SES::ReceiptRuleSet",
    SESTemplate: "AWS::SES::Template",
    SSMDocument: "AWS::SSM::Document",
    SageMakerAppImageConfig: "AWS::SageMaker::AppImageConfig",
    SageMakerCodeRepository: "AWS::SageMaker::CodeRepository",
    SageMakerDomain: "AWS::SageMaker::Domain",
    SageMakerFeatureGroup: "AWS::SageMaker::FeatureGroup",
    SageMakerImage: "AWS::SageMaker::Image",
    SageMakerInferenceExperiment: "AWS::SageMaker::InferenceExperiment",
    SageMakerModel: "AWS::SageMaker::Model",
    SageMakerNotebookInstanceLifecycleConfig: "AWS::SageMaker::NotebookInstanceLifecycleConfig",
    SageMakerWorkteam: "AWS::SageMaker::Workteam",
    ScalingPolicy: "AWS::AutoScaling::ScalingPolicy",
    ScheduledAction: "AWS::AutoScaling::ScheduledAction",
    Secret: "AWS::SecretsManager::Secret",
    SecurityGroup: "AWS::EC2::SecurityGroup",
    SecurityHubStandard: "AWS::SecurityHub::Standard",
    ServiceDiscoveryHttpNamespace: "AWS::ServiceDiscovery::HttpNamespace",
    ServiceDiscoveryInstance: "AWS::ServiceDiscovery::Instance",
    ServiceDiscoveryPublicDnsNamespace: "AWS::ServiceDiscovery::PublicDnsNamespace",
    ServiceDiscoveryService: "AWS::ServiceDiscovery::Service",
    SignerSigningProfile: "AWS::Signer::SigningProfile",
    Stack: "AWS::CloudFormation::Stack",
    Stage: "AWS::ApiGateway::Stage",
    StageV2: "AWS::ApiGatewayV2::Stage",
    StepFunctionsActivity: "AWS::StepFunctions::Activity",
    StepFunctionsStateMachine: "AWS::StepFunctions::StateMachine",
    StreamingDistribution: "AWS::CloudFront::StreamingDistribution",
    Subnet: "AWS::EC2::Subnet",
    Table: "AWS::DynamoDB::Table",
    Topic: "AWS::SNS::Topic",
    Trail: "AWS::CloudTrail::Trail",
    TransferAgreement: "AWS::Transfer::Agreement",
    TransferCertificate: "AWS::Transfer::Certificate",
    TransferConnector: "AWS::Transfer::Connector",
    TransferProfile: "AWS::Transfer::Profile",
    TransferWorkflow: "AWS::Transfer::Workflow",
    TransitGateway: "AWS::EC2::TransitGateway",
    TransitGatewayAttachment: "AWS::EC2::TransitGatewayAttachment",
    TransitGatewayRouteTable: "AWS::EC2::TransitGatewayRouteTable",
    User: "AWS::IAM::User",
    VPC: "AWS::EC2::VPC",
    VPCEndpoint: "AWS::EC2::VPCEndpoint",
    VPCEndpointService: "AWS::EC2::VPCEndpointService",
    VPCPeeringConnection: "AWS::EC2::VPCPeeringConnection",
    VPNConnection: "AWS::EC2::VPNConnection",
    VPNGateway: "AWS::EC2::VPNGateway",
    Volume: "AWS::EC2::Volume",
    WebACL: "AWS::WAF::WebACL",
    WebACLV2: "AWS::WAFv2::WebACL",
    WorkSpacesConnectionAlias: "AWS::WorkSpaces::ConnectionAlias",
    WorkSpacesWorkspace: "AWS::WorkSpaces::Workspace",
};
export const AggregatorFilterType = {
    INCLUDE: "INCLUDE",
};
export const RecordingStrategyType = {
    ALL_SUPPORTED_RESOURCE_TYPES: "ALL_SUPPORTED_RESOURCE_TYPES",
    EXCLUSION_BY_RESOURCE_TYPES: "EXCLUSION_BY_RESOURCE_TYPES",
    INCLUSION_BY_RESOURCE_TYPES: "INCLUSION_BY_RESOURCE_TYPES",
};
export const RecordingFrequency = {
    CONTINUOUS: "CONTINUOUS",
    DAILY: "DAILY",
};
export const RecordingScope = {
    INTERNAL: "INTERNAL",
    PAID: "PAID",
};
export class ConflictException extends __BaseException {
    name = "ConflictException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ConflictException.prototype);
    }
}
export class NoSuchConfigurationRecorderException extends __BaseException {
    name = "NoSuchConfigurationRecorderException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "NoSuchConfigurationRecorderException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, NoSuchConfigurationRecorderException.prototype);
    }
}
export class ValidationException extends __BaseException {
    name = "ValidationException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ValidationException.prototype);
    }
}
export const ConfigurationItemStatus = {
    OK: "OK",
    ResourceDeleted: "ResourceDeleted",
    ResourceDeletedNotRecorded: "ResourceDeletedNotRecorded",
    ResourceDiscovered: "ResourceDiscovered",
    ResourceNotRecorded: "ResourceNotRecorded",
};
export class NoSuchConfigurationAggregatorException extends __BaseException {
    name = "NoSuchConfigurationAggregatorException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "NoSuchConfigurationAggregatorException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, NoSuchConfigurationAggregatorException.prototype);
    }
}
export class NoAvailableConfigurationRecorderException extends __BaseException {
    name = "NoAvailableConfigurationRecorderException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "NoAvailableConfigurationRecorderException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, NoAvailableConfigurationRecorderException.prototype);
    }
}
export const ChronologicalOrder = {
    Forward: "Forward",
    Reverse: "Reverse",
};
export const DeliveryStatus = {
    Failure: "Failure",
    Not_Applicable: "Not_Applicable",
    Success: "Success",
};
export const ConfigRuleState = {
    ACTIVE: "ACTIVE",
    DELETING: "DELETING",
    DELETING_RESULTS: "DELETING_RESULTS",
    EVALUATING: "EVALUATING",
};
export const MaximumExecutionFrequency = {
    One_Hour: "One_Hour",
    Six_Hours: "Six_Hours",
    Three_Hours: "Three_Hours",
    Twelve_Hours: "Twelve_Hours",
    TwentyFour_Hours: "TwentyFour_Hours",
};
export const Owner = {
    Aws: "AWS",
    Custom_Lambda: "CUSTOM_LAMBDA",
    Custom_Policy: "CUSTOM_POLICY",
};
export const EventSource = {
    Aws_Config: "aws.config",
};
export const MessageType = {
    ConfigurationItemChangeNotification: "ConfigurationItemChangeNotification",
    ConfigurationSnapshotDeliveryCompleted: "ConfigurationSnapshotDeliveryCompleted",
    OversizedConfigurationItemChangeNotification: "OversizedConfigurationItemChangeNotification",
    ScheduledNotification: "ScheduledNotification",
};
export const ConfigRuleComplianceSummaryGroupKey = {
    ACCOUNT_ID: "ACCOUNT_ID",
    AWS_REGION: "AWS_REGION",
};
export const ConfigurationRecorderFilterName = {
    RecordingScope: "recordingScope",
};
export const RecorderStatus = {
    Failure: "Failure",
    NotApplicable: "NotApplicable",
    Pending: "Pending",
    Success: "Success",
};
export const ConformancePackState = {
    CREATE_COMPLETE: "CREATE_COMPLETE",
    CREATE_FAILED: "CREATE_FAILED",
    CREATE_IN_PROGRESS: "CREATE_IN_PROGRESS",
    DELETE_FAILED: "DELETE_FAILED",
    DELETE_IN_PROGRESS: "DELETE_IN_PROGRESS",
};
export class ConformancePackTemplateValidationException extends __BaseException {
    name = "ConformancePackTemplateValidationException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ConformancePackTemplateValidationException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ConformancePackTemplateValidationException.prototype);
    }
}
export class InvalidParameterValueException extends __BaseException {
    name = "InvalidParameterValueException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidParameterValueException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidParameterValueException.prototype);
    }
}
export class NoSuchConfigRuleException extends __BaseException {
    name = "NoSuchConfigRuleException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "NoSuchConfigRuleException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, NoSuchConfigRuleException.prototype);
    }
}
export class ResourceInUseException extends __BaseException {
    name = "ResourceInUseException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ResourceInUseException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ResourceInUseException.prototype);
    }
}
export class UnmodifiableEntityException extends __BaseException {
    name = "UnmodifiableEntityException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "UnmodifiableEntityException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, UnmodifiableEntityException.prototype);
    }
}
export class NoSuchConformancePackException extends __BaseException {
    name = "NoSuchConformancePackException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "NoSuchConformancePackException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, NoSuchConformancePackException.prototype);
    }
}
export class LastDeliveryChannelDeleteFailedException extends __BaseException {
    name = "LastDeliveryChannelDeleteFailedException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "LastDeliveryChannelDeleteFailedException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, LastDeliveryChannelDeleteFailedException.prototype);
    }
}
export class NoSuchDeliveryChannelException extends __BaseException {
    name = "NoSuchDeliveryChannelException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "NoSuchDeliveryChannelException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, NoSuchDeliveryChannelException.prototype);
    }
}
export class NoSuchOrganizationConfigRuleException extends __BaseException {
    name = "NoSuchOrganizationConfigRuleException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "NoSuchOrganizationConfigRuleException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, NoSuchOrganizationConfigRuleException.prototype);
    }
}
export class OrganizationAccessDeniedException extends __BaseException {
    name = "OrganizationAccessDeniedException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "OrganizationAccessDeniedException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, OrganizationAccessDeniedException.prototype);
    }
}
export class NoSuchOrganizationConformancePackException extends __BaseException {
    name = "NoSuchOrganizationConformancePackException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "NoSuchOrganizationConformancePackException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, NoSuchOrganizationConformancePackException.prototype);
    }
}
export class InsufficientPermissionsException extends __BaseException {
    name = "InsufficientPermissionsException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InsufficientPermissionsException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InsufficientPermissionsException.prototype);
    }
}
export class NoSuchRemediationConfigurationException extends __BaseException {
    name = "NoSuchRemediationConfigurationException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "NoSuchRemediationConfigurationException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, NoSuchRemediationConfigurationException.prototype);
    }
}
export class RemediationInProgressException extends __BaseException {
    name = "RemediationInProgressException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "RemediationInProgressException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, RemediationInProgressException.prototype);
    }
}
export class NoSuchRemediationExceptionException extends __BaseException {
    name = "NoSuchRemediationExceptionException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "NoSuchRemediationExceptionException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, NoSuchRemediationExceptionException.prototype);
    }
}
export class NoRunningConfigurationRecorderException extends __BaseException {
    name = "NoRunningConfigurationRecorderException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "NoRunningConfigurationRecorderException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, NoRunningConfigurationRecorderException.prototype);
    }
}
export class NoSuchRetentionConfigurationException extends __BaseException {
    name = "NoSuchRetentionConfigurationException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "NoSuchRetentionConfigurationException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, NoSuchRetentionConfigurationException.prototype);
    }
}
export class ResourceNotFoundException extends __BaseException {
    name = "ResourceNotFoundException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
    }
}
export class InvalidLimitException extends __BaseException {
    name = "InvalidLimitException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidLimitException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidLimitException.prototype);
    }
}
export class InvalidNextTokenException extends __BaseException {
    name = "InvalidNextTokenException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidNextTokenException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidNextTokenException.prototype);
    }
}
export class NoSuchConfigRuleInConformancePackException extends __BaseException {
    name = "NoSuchConfigRuleInConformancePackException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "NoSuchConfigRuleInConformancePackException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, NoSuchConfigRuleInConformancePackException.prototype);
    }
}
export const OrganizationConfigRuleTriggerTypeNoSN = {
    CONFIGURATION_ITEM_CHANGE_NOTIFICATION: "ConfigurationItemChangeNotification",
    OVERSIZED_CONFIGURATION_ITEM_CHANGE_NOTIFCATION: "OversizedConfigurationItemChangeNotification",
};
export const OrganizationConfigRuleTriggerType = {
    CONFIGURATION_ITEM_CHANGE_NOTIFICATION: "ConfigurationItemChangeNotification",
    OVERSIZED_CONFIGURATION_ITEM_CHANGE_NOTIFCATION: "OversizedConfigurationItemChangeNotification",
    SCHEDULED_NOTIFICATION: "ScheduledNotification",
};
export const OrganizationRuleStatus = {
    CREATE_FAILED: "CREATE_FAILED",
    CREATE_IN_PROGRESS: "CREATE_IN_PROGRESS",
    CREATE_SUCCESSFUL: "CREATE_SUCCESSFUL",
    DELETE_FAILED: "DELETE_FAILED",
    DELETE_IN_PROGRESS: "DELETE_IN_PROGRESS",
    DELETE_SUCCESSFUL: "DELETE_SUCCESSFUL",
    UPDATE_FAILED: "UPDATE_FAILED",
    UPDATE_IN_PROGRESS: "UPDATE_IN_PROGRESS",
    UPDATE_SUCCESSFUL: "UPDATE_SUCCESSFUL",
};
export const OrganizationResourceStatus = {
    CREATE_FAILED: "CREATE_FAILED",
    CREATE_IN_PROGRESS: "CREATE_IN_PROGRESS",
    CREATE_SUCCESSFUL: "CREATE_SUCCESSFUL",
    DELETE_FAILED: "DELETE_FAILED",
    DELETE_IN_PROGRESS: "DELETE_IN_PROGRESS",
    DELETE_SUCCESSFUL: "DELETE_SUCCESSFUL",
    UPDATE_FAILED: "UPDATE_FAILED",
    UPDATE_IN_PROGRESS: "UPDATE_IN_PROGRESS",
    UPDATE_SUCCESSFUL: "UPDATE_SUCCESSFUL",
};
export const ResourceValueType = {
    RESOURCE_ID: "RESOURCE_ID",
};
export const RemediationTargetType = {
    SSM_DOCUMENT: "SSM_DOCUMENT",
};
export const RemediationExecutionState = {
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    QUEUED: "QUEUED",
    SUCCEEDED: "SUCCEEDED",
};
export const RemediationExecutionStepState = {
    FAILED: "FAILED",
    PENDING: "PENDING",
    SUCCEEDED: "SUCCEEDED",
};
export const ResourceEvaluationStatus = {
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    SUCCEEDED: "SUCCEEDED",
};
export const ResourceCountGroupKey = {
    ACCOUNT_ID: "ACCOUNT_ID",
    AWS_REGION: "AWS_REGION",
    RESOURCE_TYPE: "RESOURCE_TYPE",
};
export class OversizedConfigurationItemException extends __BaseException {
    name = "OversizedConfigurationItemException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "OversizedConfigurationItemException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, OversizedConfigurationItemException.prototype);
    }
}
export class ResourceNotDiscoveredException extends __BaseException {
    name = "ResourceNotDiscoveredException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ResourceNotDiscoveredException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ResourceNotDiscoveredException.prototype);
    }
}
export const MemberAccountRuleStatus = {
    CREATE_FAILED: "CREATE_FAILED",
    CREATE_IN_PROGRESS: "CREATE_IN_PROGRESS",
    CREATE_SUCCESSFUL: "CREATE_SUCCESSFUL",
    DELETE_FAILED: "DELETE_FAILED",
    DELETE_IN_PROGRESS: "DELETE_IN_PROGRESS",
    DELETE_SUCCESSFUL: "DELETE_SUCCESSFUL",
    UPDATE_FAILED: "UPDATE_FAILED",
    UPDATE_IN_PROGRESS: "UPDATE_IN_PROGRESS",
    UPDATE_SUCCESSFUL: "UPDATE_SUCCESSFUL",
};
export const OrganizationResourceDetailedStatus = {
    CREATE_FAILED: "CREATE_FAILED",
    CREATE_IN_PROGRESS: "CREATE_IN_PROGRESS",
    CREATE_SUCCESSFUL: "CREATE_SUCCESSFUL",
    DELETE_FAILED: "DELETE_FAILED",
    DELETE_IN_PROGRESS: "DELETE_IN_PROGRESS",
    DELETE_SUCCESSFUL: "DELETE_SUCCESSFUL",
    UPDATE_FAILED: "UPDATE_FAILED",
    UPDATE_IN_PROGRESS: "UPDATE_IN_PROGRESS",
    UPDATE_SUCCESSFUL: "UPDATE_SUCCESSFUL",
};
export class InvalidTimeRangeException extends __BaseException {
    name = "InvalidTimeRangeException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidTimeRangeException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidTimeRangeException.prototype);
    }
}
export const ResourceConfigurationSchemaType = {
    CFN_RESOURCE_SCHEMA: "CFN_RESOURCE_SCHEMA",
};
export class IdempotentParameterMismatch extends __BaseException {
    name = "IdempotentParameterMismatch";
    $fault = "client";
    constructor(opts) {
        super({
            name: "IdempotentParameterMismatch",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, IdempotentParameterMismatch.prototype);
    }
}
export class InsufficientDeliveryPolicyException extends __BaseException {
    name = "InsufficientDeliveryPolicyException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InsufficientDeliveryPolicyException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InsufficientDeliveryPolicyException.prototype);
    }
}
export class InvalidConfigurationRecorderNameException extends __BaseException {
    name = "InvalidConfigurationRecorderNameException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidConfigurationRecorderNameException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidConfigurationRecorderNameException.prototype);
    }
}
export class InvalidDeliveryChannelNameException extends __BaseException {
    name = "InvalidDeliveryChannelNameException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidDeliveryChannelNameException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidDeliveryChannelNameException.prototype);
    }
}
export class InvalidExpressionException extends __BaseException {
    name = "InvalidExpressionException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidExpressionException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidExpressionException.prototype);
    }
}
export class InvalidRecordingGroupException extends __BaseException {
    name = "InvalidRecordingGroupException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidRecordingGroupException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidRecordingGroupException.prototype);
    }
}
export class InvalidResultTokenException extends __BaseException {
    name = "InvalidResultTokenException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidResultTokenException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidResultTokenException.prototype);
    }
}
export class InvalidRoleException extends __BaseException {
    name = "InvalidRoleException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidRoleException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidRoleException.prototype);
    }
}
export class InvalidS3KeyPrefixException extends __BaseException {
    name = "InvalidS3KeyPrefixException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidS3KeyPrefixException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidS3KeyPrefixException.prototype);
    }
}
export class InvalidS3KmsKeyArnException extends __BaseException {
    name = "InvalidS3KmsKeyArnException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidS3KmsKeyArnException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidS3KmsKeyArnException.prototype);
    }
}
export class InvalidSNSTopicARNException extends __BaseException {
    name = "InvalidSNSTopicARNException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidSNSTopicARNException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidSNSTopicARNException.prototype);
    }
}
export class LimitExceededException extends __BaseException {
    name = "LimitExceededException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, LimitExceededException.prototype);
    }
}
