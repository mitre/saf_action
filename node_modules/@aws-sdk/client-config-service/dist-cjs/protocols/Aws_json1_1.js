"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.se_GetComplianceDetailsByResourceCommand = exports.se_GetComplianceDetailsByConfigRuleCommand = exports.se_GetAggregateResourceConfigCommand = exports.se_GetAggregateDiscoveredResourceCountsCommand = exports.se_GetAggregateConformancePackComplianceSummaryCommand = exports.se_GetAggregateConfigRuleComplianceSummaryCommand = exports.se_GetAggregateComplianceDetailsByConfigRuleCommand = exports.se_DescribeRetentionConfigurationsCommand = exports.se_DescribeRemediationExecutionStatusCommand = exports.se_DescribeRemediationExceptionsCommand = exports.se_DescribeRemediationConfigurationsCommand = exports.se_DescribePendingAggregationRequestsCommand = exports.se_DescribeOrganizationConformancePackStatusesCommand = exports.se_DescribeOrganizationConformancePacksCommand = exports.se_DescribeOrganizationConfigRuleStatusesCommand = exports.se_DescribeOrganizationConfigRulesCommand = exports.se_DescribeDeliveryChannelStatusCommand = exports.se_DescribeDeliveryChannelsCommand = exports.se_DescribeConformancePackStatusCommand = exports.se_DescribeConformancePacksCommand = exports.se_DescribeConformancePackComplianceCommand = exports.se_DescribeConfigurationRecorderStatusCommand = exports.se_DescribeConfigurationRecordersCommand = exports.se_DescribeConfigurationAggregatorSourcesStatusCommand = exports.se_DescribeConfigurationAggregatorsCommand = exports.se_DescribeConfigRulesCommand = exports.se_DescribeConfigRuleEvaluationStatusCommand = exports.se_DescribeComplianceByResourceCommand = exports.se_DescribeComplianceByConfigRuleCommand = exports.se_DescribeAggregationAuthorizationsCommand = exports.se_DescribeAggregateComplianceByConformancePacksCommand = exports.se_DescribeAggregateComplianceByConfigRulesCommand = exports.se_DeliverConfigSnapshotCommand = exports.se_DeleteStoredQueryCommand = exports.se_DeleteRetentionConfigurationCommand = exports.se_DeleteResourceConfigCommand = exports.se_DeleteRemediationExceptionsCommand = exports.se_DeleteRemediationConfigurationCommand = exports.se_DeletePendingAggregationRequestCommand = exports.se_DeleteOrganizationConformancePackCommand = exports.se_DeleteOrganizationConfigRuleCommand = exports.se_DeleteEvaluationResultsCommand = exports.se_DeleteDeliveryChannelCommand = exports.se_DeleteConformancePackCommand = exports.se_DeleteConfigurationRecorderCommand = exports.se_DeleteConfigurationAggregatorCommand = exports.se_DeleteConfigRuleCommand = exports.se_DeleteAggregationAuthorizationCommand = exports.se_BatchGetResourceConfigCommand = exports.se_BatchGetAggregateResourceConfigCommand = void 0;
exports.de_DeleteDeliveryChannelCommand = exports.de_DeleteConformancePackCommand = exports.de_DeleteConfigurationRecorderCommand = exports.de_DeleteConfigurationAggregatorCommand = exports.de_DeleteConfigRuleCommand = exports.de_DeleteAggregationAuthorizationCommand = exports.de_BatchGetResourceConfigCommand = exports.de_BatchGetAggregateResourceConfigCommand = exports.se_UntagResourceCommand = exports.se_TagResourceCommand = exports.se_StopConfigurationRecorderCommand = exports.se_StartResourceEvaluationCommand = exports.se_StartRemediationExecutionCommand = exports.se_StartConfigurationRecorderCommand = exports.se_StartConfigRulesEvaluationCommand = exports.se_SelectResourceConfigCommand = exports.se_SelectAggregateResourceConfigCommand = exports.se_PutStoredQueryCommand = exports.se_PutRetentionConfigurationCommand = exports.se_PutResourceConfigCommand = exports.se_PutRemediationExceptionsCommand = exports.se_PutRemediationConfigurationsCommand = exports.se_PutOrganizationConformancePackCommand = exports.se_PutOrganizationConfigRuleCommand = exports.se_PutExternalEvaluationCommand = exports.se_PutEvaluationsCommand = exports.se_PutDeliveryChannelCommand = exports.se_PutConformancePackCommand = exports.se_PutConfigurationRecorderCommand = exports.se_PutConfigurationAggregatorCommand = exports.se_PutConfigRuleCommand = exports.se_PutAggregationAuthorizationCommand = exports.se_ListTagsForResourceCommand = exports.se_ListStoredQueriesCommand = exports.se_ListResourceEvaluationsCommand = exports.se_ListDiscoveredResourcesCommand = exports.se_ListConformancePackComplianceScoresCommand = exports.se_ListAggregateDiscoveredResourcesCommand = exports.se_GetStoredQueryCommand = exports.se_GetResourceEvaluationSummaryCommand = exports.se_GetResourceConfigHistoryCommand = exports.se_GetOrganizationCustomRulePolicyCommand = exports.se_GetOrganizationConformancePackDetailedStatusCommand = exports.se_GetOrganizationConfigRuleDetailedStatusCommand = exports.se_GetDiscoveredResourceCountsCommand = exports.se_GetCustomRulePolicyCommand = exports.se_GetConformancePackComplianceSummaryCommand = exports.se_GetConformancePackComplianceDetailsCommand = exports.se_GetComplianceSummaryByResourceTypeCommand = exports.se_GetComplianceSummaryByConfigRuleCommand = void 0;
exports.de_GetOrganizationConformancePackDetailedStatusCommand = exports.de_GetOrganizationConfigRuleDetailedStatusCommand = exports.de_GetDiscoveredResourceCountsCommand = exports.de_GetCustomRulePolicyCommand = exports.de_GetConformancePackComplianceSummaryCommand = exports.de_GetConformancePackComplianceDetailsCommand = exports.de_GetComplianceSummaryByResourceTypeCommand = exports.de_GetComplianceSummaryByConfigRuleCommand = exports.de_GetComplianceDetailsByResourceCommand = exports.de_GetComplianceDetailsByConfigRuleCommand = exports.de_GetAggregateResourceConfigCommand = exports.de_GetAggregateDiscoveredResourceCountsCommand = exports.de_GetAggregateConformancePackComplianceSummaryCommand = exports.de_GetAggregateConfigRuleComplianceSummaryCommand = exports.de_GetAggregateComplianceDetailsByConfigRuleCommand = exports.de_DescribeRetentionConfigurationsCommand = exports.de_DescribeRemediationExecutionStatusCommand = exports.de_DescribeRemediationExceptionsCommand = exports.de_DescribeRemediationConfigurationsCommand = exports.de_DescribePendingAggregationRequestsCommand = exports.de_DescribeOrganizationConformancePackStatusesCommand = exports.de_DescribeOrganizationConformancePacksCommand = exports.de_DescribeOrganizationConfigRuleStatusesCommand = exports.de_DescribeOrganizationConfigRulesCommand = exports.de_DescribeDeliveryChannelStatusCommand = exports.de_DescribeDeliveryChannelsCommand = exports.de_DescribeConformancePackStatusCommand = exports.de_DescribeConformancePacksCommand = exports.de_DescribeConformancePackComplianceCommand = exports.de_DescribeConfigurationRecorderStatusCommand = exports.de_DescribeConfigurationRecordersCommand = exports.de_DescribeConfigurationAggregatorSourcesStatusCommand = exports.de_DescribeConfigurationAggregatorsCommand = exports.de_DescribeConfigRulesCommand = exports.de_DescribeConfigRuleEvaluationStatusCommand = exports.de_DescribeComplianceByResourceCommand = exports.de_DescribeComplianceByConfigRuleCommand = exports.de_DescribeAggregationAuthorizationsCommand = exports.de_DescribeAggregateComplianceByConformancePacksCommand = exports.de_DescribeAggregateComplianceByConfigRulesCommand = exports.de_DeliverConfigSnapshotCommand = exports.de_DeleteStoredQueryCommand = exports.de_DeleteRetentionConfigurationCommand = exports.de_DeleteResourceConfigCommand = exports.de_DeleteRemediationExceptionsCommand = exports.de_DeleteRemediationConfigurationCommand = exports.de_DeletePendingAggregationRequestCommand = exports.de_DeleteOrganizationConformancePackCommand = exports.de_DeleteOrganizationConfigRuleCommand = exports.de_DeleteEvaluationResultsCommand = void 0;
exports.de_UntagResourceCommand = exports.de_TagResourceCommand = exports.de_StopConfigurationRecorderCommand = exports.de_StartResourceEvaluationCommand = exports.de_StartRemediationExecutionCommand = exports.de_StartConfigurationRecorderCommand = exports.de_StartConfigRulesEvaluationCommand = exports.de_SelectResourceConfigCommand = exports.de_SelectAggregateResourceConfigCommand = exports.de_PutStoredQueryCommand = exports.de_PutRetentionConfigurationCommand = exports.de_PutResourceConfigCommand = exports.de_PutRemediationExceptionsCommand = exports.de_PutRemediationConfigurationsCommand = exports.de_PutOrganizationConformancePackCommand = exports.de_PutOrganizationConfigRuleCommand = exports.de_PutExternalEvaluationCommand = exports.de_PutEvaluationsCommand = exports.de_PutDeliveryChannelCommand = exports.de_PutConformancePackCommand = exports.de_PutConfigurationRecorderCommand = exports.de_PutConfigurationAggregatorCommand = exports.de_PutConfigRuleCommand = exports.de_PutAggregationAuthorizationCommand = exports.de_ListTagsForResourceCommand = exports.de_ListStoredQueriesCommand = exports.de_ListResourceEvaluationsCommand = exports.de_ListDiscoveredResourcesCommand = exports.de_ListConformancePackComplianceScoresCommand = exports.de_ListAggregateDiscoveredResourcesCommand = exports.de_GetStoredQueryCommand = exports.de_GetResourceEvaluationSummaryCommand = exports.de_GetResourceConfigHistoryCommand = exports.de_GetOrganizationCustomRulePolicyCommand = void 0;
const protocol_http_1 = require("@aws-sdk/protocol-http");
const smithy_client_1 = require("@aws-sdk/smithy-client");
const ConfigServiceServiceException_1 = require("../models/ConfigServiceServiceException");
const models_0_1 = require("../models/models_0");
const models_1_1 = require("../models/models_1");
const se_BatchGetAggregateResourceConfigCommand = async (input, context) => {
    const headers = sharedHeaders("BatchGetAggregateResourceConfig");
    let body;
    body = JSON.stringify(se_BatchGetAggregateResourceConfigRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_BatchGetAggregateResourceConfigCommand = se_BatchGetAggregateResourceConfigCommand;
const se_BatchGetResourceConfigCommand = async (input, context) => {
    const headers = sharedHeaders("BatchGetResourceConfig");
    let body;
    body = JSON.stringify(se_BatchGetResourceConfigRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_BatchGetResourceConfigCommand = se_BatchGetResourceConfigCommand;
const se_DeleteAggregationAuthorizationCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteAggregationAuthorization");
    let body;
    body = JSON.stringify(se_DeleteAggregationAuthorizationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteAggregationAuthorizationCommand = se_DeleteAggregationAuthorizationCommand;
const se_DeleteConfigRuleCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteConfigRule");
    let body;
    body = JSON.stringify(se_DeleteConfigRuleRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteConfigRuleCommand = se_DeleteConfigRuleCommand;
const se_DeleteConfigurationAggregatorCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteConfigurationAggregator");
    let body;
    body = JSON.stringify(se_DeleteConfigurationAggregatorRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteConfigurationAggregatorCommand = se_DeleteConfigurationAggregatorCommand;
const se_DeleteConfigurationRecorderCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteConfigurationRecorder");
    let body;
    body = JSON.stringify(se_DeleteConfigurationRecorderRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteConfigurationRecorderCommand = se_DeleteConfigurationRecorderCommand;
const se_DeleteConformancePackCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteConformancePack");
    let body;
    body = JSON.stringify(se_DeleteConformancePackRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteConformancePackCommand = se_DeleteConformancePackCommand;
const se_DeleteDeliveryChannelCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteDeliveryChannel");
    let body;
    body = JSON.stringify(se_DeleteDeliveryChannelRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteDeliveryChannelCommand = se_DeleteDeliveryChannelCommand;
const se_DeleteEvaluationResultsCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteEvaluationResults");
    let body;
    body = JSON.stringify(se_DeleteEvaluationResultsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteEvaluationResultsCommand = se_DeleteEvaluationResultsCommand;
const se_DeleteOrganizationConfigRuleCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteOrganizationConfigRule");
    let body;
    body = JSON.stringify(se_DeleteOrganizationConfigRuleRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteOrganizationConfigRuleCommand = se_DeleteOrganizationConfigRuleCommand;
const se_DeleteOrganizationConformancePackCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteOrganizationConformancePack");
    let body;
    body = JSON.stringify(se_DeleteOrganizationConformancePackRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteOrganizationConformancePackCommand = se_DeleteOrganizationConformancePackCommand;
const se_DeletePendingAggregationRequestCommand = async (input, context) => {
    const headers = sharedHeaders("DeletePendingAggregationRequest");
    let body;
    body = JSON.stringify(se_DeletePendingAggregationRequestRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeletePendingAggregationRequestCommand = se_DeletePendingAggregationRequestCommand;
const se_DeleteRemediationConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteRemediationConfiguration");
    let body;
    body = JSON.stringify(se_DeleteRemediationConfigurationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteRemediationConfigurationCommand = se_DeleteRemediationConfigurationCommand;
const se_DeleteRemediationExceptionsCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteRemediationExceptions");
    let body;
    body = JSON.stringify(se_DeleteRemediationExceptionsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteRemediationExceptionsCommand = se_DeleteRemediationExceptionsCommand;
const se_DeleteResourceConfigCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteResourceConfig");
    let body;
    body = JSON.stringify(se_DeleteResourceConfigRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteResourceConfigCommand = se_DeleteResourceConfigCommand;
const se_DeleteRetentionConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteRetentionConfiguration");
    let body;
    body = JSON.stringify(se_DeleteRetentionConfigurationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteRetentionConfigurationCommand = se_DeleteRetentionConfigurationCommand;
const se_DeleteStoredQueryCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteStoredQuery");
    let body;
    body = JSON.stringify(se_DeleteStoredQueryRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteStoredQueryCommand = se_DeleteStoredQueryCommand;
const se_DeliverConfigSnapshotCommand = async (input, context) => {
    const headers = sharedHeaders("DeliverConfigSnapshot");
    let body;
    body = JSON.stringify(se_DeliverConfigSnapshotRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeliverConfigSnapshotCommand = se_DeliverConfigSnapshotCommand;
const se_DescribeAggregateComplianceByConfigRulesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeAggregateComplianceByConfigRules");
    let body;
    body = JSON.stringify(se_DescribeAggregateComplianceByConfigRulesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeAggregateComplianceByConfigRulesCommand = se_DescribeAggregateComplianceByConfigRulesCommand;
const se_DescribeAggregateComplianceByConformancePacksCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeAggregateComplianceByConformancePacks");
    let body;
    body = JSON.stringify(se_DescribeAggregateComplianceByConformancePacksRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeAggregateComplianceByConformancePacksCommand = se_DescribeAggregateComplianceByConformancePacksCommand;
const se_DescribeAggregationAuthorizationsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeAggregationAuthorizations");
    let body;
    body = JSON.stringify(se_DescribeAggregationAuthorizationsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeAggregationAuthorizationsCommand = se_DescribeAggregationAuthorizationsCommand;
const se_DescribeComplianceByConfigRuleCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeComplianceByConfigRule");
    let body;
    body = JSON.stringify(se_DescribeComplianceByConfigRuleRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeComplianceByConfigRuleCommand = se_DescribeComplianceByConfigRuleCommand;
const se_DescribeComplianceByResourceCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeComplianceByResource");
    let body;
    body = JSON.stringify(se_DescribeComplianceByResourceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeComplianceByResourceCommand = se_DescribeComplianceByResourceCommand;
const se_DescribeConfigRuleEvaluationStatusCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeConfigRuleEvaluationStatus");
    let body;
    body = JSON.stringify(se_DescribeConfigRuleEvaluationStatusRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeConfigRuleEvaluationStatusCommand = se_DescribeConfigRuleEvaluationStatusCommand;
const se_DescribeConfigRulesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeConfigRules");
    let body;
    body = JSON.stringify(se_DescribeConfigRulesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeConfigRulesCommand = se_DescribeConfigRulesCommand;
const se_DescribeConfigurationAggregatorsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeConfigurationAggregators");
    let body;
    body = JSON.stringify(se_DescribeConfigurationAggregatorsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeConfigurationAggregatorsCommand = se_DescribeConfigurationAggregatorsCommand;
const se_DescribeConfigurationAggregatorSourcesStatusCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeConfigurationAggregatorSourcesStatus");
    let body;
    body = JSON.stringify(se_DescribeConfigurationAggregatorSourcesStatusRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeConfigurationAggregatorSourcesStatusCommand = se_DescribeConfigurationAggregatorSourcesStatusCommand;
const se_DescribeConfigurationRecordersCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeConfigurationRecorders");
    let body;
    body = JSON.stringify(se_DescribeConfigurationRecordersRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeConfigurationRecordersCommand = se_DescribeConfigurationRecordersCommand;
const se_DescribeConfigurationRecorderStatusCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeConfigurationRecorderStatus");
    let body;
    body = JSON.stringify(se_DescribeConfigurationRecorderStatusRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeConfigurationRecorderStatusCommand = se_DescribeConfigurationRecorderStatusCommand;
const se_DescribeConformancePackComplianceCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeConformancePackCompliance");
    let body;
    body = JSON.stringify(se_DescribeConformancePackComplianceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeConformancePackComplianceCommand = se_DescribeConformancePackComplianceCommand;
const se_DescribeConformancePacksCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeConformancePacks");
    let body;
    body = JSON.stringify(se_DescribeConformancePacksRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeConformancePacksCommand = se_DescribeConformancePacksCommand;
const se_DescribeConformancePackStatusCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeConformancePackStatus");
    let body;
    body = JSON.stringify(se_DescribeConformancePackStatusRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeConformancePackStatusCommand = se_DescribeConformancePackStatusCommand;
const se_DescribeDeliveryChannelsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeDeliveryChannels");
    let body;
    body = JSON.stringify(se_DescribeDeliveryChannelsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeDeliveryChannelsCommand = se_DescribeDeliveryChannelsCommand;
const se_DescribeDeliveryChannelStatusCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeDeliveryChannelStatus");
    let body;
    body = JSON.stringify(se_DescribeDeliveryChannelStatusRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeDeliveryChannelStatusCommand = se_DescribeDeliveryChannelStatusCommand;
const se_DescribeOrganizationConfigRulesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeOrganizationConfigRules");
    let body;
    body = JSON.stringify(se_DescribeOrganizationConfigRulesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeOrganizationConfigRulesCommand = se_DescribeOrganizationConfigRulesCommand;
const se_DescribeOrganizationConfigRuleStatusesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeOrganizationConfigRuleStatuses");
    let body;
    body = JSON.stringify(se_DescribeOrganizationConfigRuleStatusesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeOrganizationConfigRuleStatusesCommand = se_DescribeOrganizationConfigRuleStatusesCommand;
const se_DescribeOrganizationConformancePacksCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeOrganizationConformancePacks");
    let body;
    body = JSON.stringify(se_DescribeOrganizationConformancePacksRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeOrganizationConformancePacksCommand = se_DescribeOrganizationConformancePacksCommand;
const se_DescribeOrganizationConformancePackStatusesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeOrganizationConformancePackStatuses");
    let body;
    body = JSON.stringify(se_DescribeOrganizationConformancePackStatusesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeOrganizationConformancePackStatusesCommand = se_DescribeOrganizationConformancePackStatusesCommand;
const se_DescribePendingAggregationRequestsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribePendingAggregationRequests");
    let body;
    body = JSON.stringify(se_DescribePendingAggregationRequestsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribePendingAggregationRequestsCommand = se_DescribePendingAggregationRequestsCommand;
const se_DescribeRemediationConfigurationsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeRemediationConfigurations");
    let body;
    body = JSON.stringify(se_DescribeRemediationConfigurationsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeRemediationConfigurationsCommand = se_DescribeRemediationConfigurationsCommand;
const se_DescribeRemediationExceptionsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeRemediationExceptions");
    let body;
    body = JSON.stringify(se_DescribeRemediationExceptionsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeRemediationExceptionsCommand = se_DescribeRemediationExceptionsCommand;
const se_DescribeRemediationExecutionStatusCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeRemediationExecutionStatus");
    let body;
    body = JSON.stringify(se_DescribeRemediationExecutionStatusRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeRemediationExecutionStatusCommand = se_DescribeRemediationExecutionStatusCommand;
const se_DescribeRetentionConfigurationsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeRetentionConfigurations");
    let body;
    body = JSON.stringify(se_DescribeRetentionConfigurationsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeRetentionConfigurationsCommand = se_DescribeRetentionConfigurationsCommand;
const se_GetAggregateComplianceDetailsByConfigRuleCommand = async (input, context) => {
    const headers = sharedHeaders("GetAggregateComplianceDetailsByConfigRule");
    let body;
    body = JSON.stringify(se_GetAggregateComplianceDetailsByConfigRuleRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetAggregateComplianceDetailsByConfigRuleCommand = se_GetAggregateComplianceDetailsByConfigRuleCommand;
const se_GetAggregateConfigRuleComplianceSummaryCommand = async (input, context) => {
    const headers = sharedHeaders("GetAggregateConfigRuleComplianceSummary");
    let body;
    body = JSON.stringify(se_GetAggregateConfigRuleComplianceSummaryRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetAggregateConfigRuleComplianceSummaryCommand = se_GetAggregateConfigRuleComplianceSummaryCommand;
const se_GetAggregateConformancePackComplianceSummaryCommand = async (input, context) => {
    const headers = sharedHeaders("GetAggregateConformancePackComplianceSummary");
    let body;
    body = JSON.stringify(se_GetAggregateConformancePackComplianceSummaryRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetAggregateConformancePackComplianceSummaryCommand = se_GetAggregateConformancePackComplianceSummaryCommand;
const se_GetAggregateDiscoveredResourceCountsCommand = async (input, context) => {
    const headers = sharedHeaders("GetAggregateDiscoveredResourceCounts");
    let body;
    body = JSON.stringify(se_GetAggregateDiscoveredResourceCountsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetAggregateDiscoveredResourceCountsCommand = se_GetAggregateDiscoveredResourceCountsCommand;
const se_GetAggregateResourceConfigCommand = async (input, context) => {
    const headers = sharedHeaders("GetAggregateResourceConfig");
    let body;
    body = JSON.stringify(se_GetAggregateResourceConfigRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetAggregateResourceConfigCommand = se_GetAggregateResourceConfigCommand;
const se_GetComplianceDetailsByConfigRuleCommand = async (input, context) => {
    const headers = sharedHeaders("GetComplianceDetailsByConfigRule");
    let body;
    body = JSON.stringify(se_GetComplianceDetailsByConfigRuleRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetComplianceDetailsByConfigRuleCommand = se_GetComplianceDetailsByConfigRuleCommand;
const se_GetComplianceDetailsByResourceCommand = async (input, context) => {
    const headers = sharedHeaders("GetComplianceDetailsByResource");
    let body;
    body = JSON.stringify(se_GetComplianceDetailsByResourceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetComplianceDetailsByResourceCommand = se_GetComplianceDetailsByResourceCommand;
const se_GetComplianceSummaryByConfigRuleCommand = async (input, context) => {
    const headers = sharedHeaders("GetComplianceSummaryByConfigRule");
    const body = "{}";
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetComplianceSummaryByConfigRuleCommand = se_GetComplianceSummaryByConfigRuleCommand;
const se_GetComplianceSummaryByResourceTypeCommand = async (input, context) => {
    const headers = sharedHeaders("GetComplianceSummaryByResourceType");
    let body;
    body = JSON.stringify(se_GetComplianceSummaryByResourceTypeRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetComplianceSummaryByResourceTypeCommand = se_GetComplianceSummaryByResourceTypeCommand;
const se_GetConformancePackComplianceDetailsCommand = async (input, context) => {
    const headers = sharedHeaders("GetConformancePackComplianceDetails");
    let body;
    body = JSON.stringify(se_GetConformancePackComplianceDetailsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetConformancePackComplianceDetailsCommand = se_GetConformancePackComplianceDetailsCommand;
const se_GetConformancePackComplianceSummaryCommand = async (input, context) => {
    const headers = sharedHeaders("GetConformancePackComplianceSummary");
    let body;
    body = JSON.stringify(se_GetConformancePackComplianceSummaryRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetConformancePackComplianceSummaryCommand = se_GetConformancePackComplianceSummaryCommand;
const se_GetCustomRulePolicyCommand = async (input, context) => {
    const headers = sharedHeaders("GetCustomRulePolicy");
    let body;
    body = JSON.stringify(se_GetCustomRulePolicyRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetCustomRulePolicyCommand = se_GetCustomRulePolicyCommand;
const se_GetDiscoveredResourceCountsCommand = async (input, context) => {
    const headers = sharedHeaders("GetDiscoveredResourceCounts");
    let body;
    body = JSON.stringify(se_GetDiscoveredResourceCountsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetDiscoveredResourceCountsCommand = se_GetDiscoveredResourceCountsCommand;
const se_GetOrganizationConfigRuleDetailedStatusCommand = async (input, context) => {
    const headers = sharedHeaders("GetOrganizationConfigRuleDetailedStatus");
    let body;
    body = JSON.stringify(se_GetOrganizationConfigRuleDetailedStatusRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetOrganizationConfigRuleDetailedStatusCommand = se_GetOrganizationConfigRuleDetailedStatusCommand;
const se_GetOrganizationConformancePackDetailedStatusCommand = async (input, context) => {
    const headers = sharedHeaders("GetOrganizationConformancePackDetailedStatus");
    let body;
    body = JSON.stringify(se_GetOrganizationConformancePackDetailedStatusRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetOrganizationConformancePackDetailedStatusCommand = se_GetOrganizationConformancePackDetailedStatusCommand;
const se_GetOrganizationCustomRulePolicyCommand = async (input, context) => {
    const headers = sharedHeaders("GetOrganizationCustomRulePolicy");
    let body;
    body = JSON.stringify(se_GetOrganizationCustomRulePolicyRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetOrganizationCustomRulePolicyCommand = se_GetOrganizationCustomRulePolicyCommand;
const se_GetResourceConfigHistoryCommand = async (input, context) => {
    const headers = sharedHeaders("GetResourceConfigHistory");
    let body;
    body = JSON.stringify(se_GetResourceConfigHistoryRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetResourceConfigHistoryCommand = se_GetResourceConfigHistoryCommand;
const se_GetResourceEvaluationSummaryCommand = async (input, context) => {
    const headers = sharedHeaders("GetResourceEvaluationSummary");
    let body;
    body = JSON.stringify(se_GetResourceEvaluationSummaryRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetResourceEvaluationSummaryCommand = se_GetResourceEvaluationSummaryCommand;
const se_GetStoredQueryCommand = async (input, context) => {
    const headers = sharedHeaders("GetStoredQuery");
    let body;
    body = JSON.stringify(se_GetStoredQueryRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetStoredQueryCommand = se_GetStoredQueryCommand;
const se_ListAggregateDiscoveredResourcesCommand = async (input, context) => {
    const headers = sharedHeaders("ListAggregateDiscoveredResources");
    let body;
    body = JSON.stringify(se_ListAggregateDiscoveredResourcesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListAggregateDiscoveredResourcesCommand = se_ListAggregateDiscoveredResourcesCommand;
const se_ListConformancePackComplianceScoresCommand = async (input, context) => {
    const headers = sharedHeaders("ListConformancePackComplianceScores");
    let body;
    body = JSON.stringify(se_ListConformancePackComplianceScoresRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListConformancePackComplianceScoresCommand = se_ListConformancePackComplianceScoresCommand;
const se_ListDiscoveredResourcesCommand = async (input, context) => {
    const headers = sharedHeaders("ListDiscoveredResources");
    let body;
    body = JSON.stringify(se_ListDiscoveredResourcesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListDiscoveredResourcesCommand = se_ListDiscoveredResourcesCommand;
const se_ListResourceEvaluationsCommand = async (input, context) => {
    const headers = sharedHeaders("ListResourceEvaluations");
    let body;
    body = JSON.stringify(se_ListResourceEvaluationsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListResourceEvaluationsCommand = se_ListResourceEvaluationsCommand;
const se_ListStoredQueriesCommand = async (input, context) => {
    const headers = sharedHeaders("ListStoredQueries");
    let body;
    body = JSON.stringify(se_ListStoredQueriesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListStoredQueriesCommand = se_ListStoredQueriesCommand;
const se_ListTagsForResourceCommand = async (input, context) => {
    const headers = sharedHeaders("ListTagsForResource");
    let body;
    body = JSON.stringify(se_ListTagsForResourceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListTagsForResourceCommand = se_ListTagsForResourceCommand;
const se_PutAggregationAuthorizationCommand = async (input, context) => {
    const headers = sharedHeaders("PutAggregationAuthorization");
    let body;
    body = JSON.stringify(se_PutAggregationAuthorizationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PutAggregationAuthorizationCommand = se_PutAggregationAuthorizationCommand;
const se_PutConfigRuleCommand = async (input, context) => {
    const headers = sharedHeaders("PutConfigRule");
    let body;
    body = JSON.stringify(se_PutConfigRuleRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PutConfigRuleCommand = se_PutConfigRuleCommand;
const se_PutConfigurationAggregatorCommand = async (input, context) => {
    const headers = sharedHeaders("PutConfigurationAggregator");
    let body;
    body = JSON.stringify(se_PutConfigurationAggregatorRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PutConfigurationAggregatorCommand = se_PutConfigurationAggregatorCommand;
const se_PutConfigurationRecorderCommand = async (input, context) => {
    const headers = sharedHeaders("PutConfigurationRecorder");
    let body;
    body = JSON.stringify(se_PutConfigurationRecorderRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PutConfigurationRecorderCommand = se_PutConfigurationRecorderCommand;
const se_PutConformancePackCommand = async (input, context) => {
    const headers = sharedHeaders("PutConformancePack");
    let body;
    body = JSON.stringify(se_PutConformancePackRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PutConformancePackCommand = se_PutConformancePackCommand;
const se_PutDeliveryChannelCommand = async (input, context) => {
    const headers = sharedHeaders("PutDeliveryChannel");
    let body;
    body = JSON.stringify(se_PutDeliveryChannelRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PutDeliveryChannelCommand = se_PutDeliveryChannelCommand;
const se_PutEvaluationsCommand = async (input, context) => {
    const headers = sharedHeaders("PutEvaluations");
    let body;
    body = JSON.stringify(se_PutEvaluationsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PutEvaluationsCommand = se_PutEvaluationsCommand;
const se_PutExternalEvaluationCommand = async (input, context) => {
    const headers = sharedHeaders("PutExternalEvaluation");
    let body;
    body = JSON.stringify(se_PutExternalEvaluationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PutExternalEvaluationCommand = se_PutExternalEvaluationCommand;
const se_PutOrganizationConfigRuleCommand = async (input, context) => {
    const headers = sharedHeaders("PutOrganizationConfigRule");
    let body;
    body = JSON.stringify(se_PutOrganizationConfigRuleRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PutOrganizationConfigRuleCommand = se_PutOrganizationConfigRuleCommand;
const se_PutOrganizationConformancePackCommand = async (input, context) => {
    const headers = sharedHeaders("PutOrganizationConformancePack");
    let body;
    body = JSON.stringify(se_PutOrganizationConformancePackRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PutOrganizationConformancePackCommand = se_PutOrganizationConformancePackCommand;
const se_PutRemediationConfigurationsCommand = async (input, context) => {
    const headers = sharedHeaders("PutRemediationConfigurations");
    let body;
    body = JSON.stringify(se_PutRemediationConfigurationsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PutRemediationConfigurationsCommand = se_PutRemediationConfigurationsCommand;
const se_PutRemediationExceptionsCommand = async (input, context) => {
    const headers = sharedHeaders("PutRemediationExceptions");
    let body;
    body = JSON.stringify(se_PutRemediationExceptionsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PutRemediationExceptionsCommand = se_PutRemediationExceptionsCommand;
const se_PutResourceConfigCommand = async (input, context) => {
    const headers = sharedHeaders("PutResourceConfig");
    let body;
    body = JSON.stringify(se_PutResourceConfigRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PutResourceConfigCommand = se_PutResourceConfigCommand;
const se_PutRetentionConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("PutRetentionConfiguration");
    let body;
    body = JSON.stringify(se_PutRetentionConfigurationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PutRetentionConfigurationCommand = se_PutRetentionConfigurationCommand;
const se_PutStoredQueryCommand = async (input, context) => {
    const headers = sharedHeaders("PutStoredQuery");
    let body;
    body = JSON.stringify(se_PutStoredQueryRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PutStoredQueryCommand = se_PutStoredQueryCommand;
const se_SelectAggregateResourceConfigCommand = async (input, context) => {
    const headers = sharedHeaders("SelectAggregateResourceConfig");
    let body;
    body = JSON.stringify(se_SelectAggregateResourceConfigRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_SelectAggregateResourceConfigCommand = se_SelectAggregateResourceConfigCommand;
const se_SelectResourceConfigCommand = async (input, context) => {
    const headers = sharedHeaders("SelectResourceConfig");
    let body;
    body = JSON.stringify(se_SelectResourceConfigRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_SelectResourceConfigCommand = se_SelectResourceConfigCommand;
const se_StartConfigRulesEvaluationCommand = async (input, context) => {
    const headers = sharedHeaders("StartConfigRulesEvaluation");
    let body;
    body = JSON.stringify(se_StartConfigRulesEvaluationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StartConfigRulesEvaluationCommand = se_StartConfigRulesEvaluationCommand;
const se_StartConfigurationRecorderCommand = async (input, context) => {
    const headers = sharedHeaders("StartConfigurationRecorder");
    let body;
    body = JSON.stringify(se_StartConfigurationRecorderRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StartConfigurationRecorderCommand = se_StartConfigurationRecorderCommand;
const se_StartRemediationExecutionCommand = async (input, context) => {
    const headers = sharedHeaders("StartRemediationExecution");
    let body;
    body = JSON.stringify(se_StartRemediationExecutionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StartRemediationExecutionCommand = se_StartRemediationExecutionCommand;
const se_StartResourceEvaluationCommand = async (input, context) => {
    const headers = sharedHeaders("StartResourceEvaluation");
    let body;
    body = JSON.stringify(se_StartResourceEvaluationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StartResourceEvaluationCommand = se_StartResourceEvaluationCommand;
const se_StopConfigurationRecorderCommand = async (input, context) => {
    const headers = sharedHeaders("StopConfigurationRecorder");
    let body;
    body = JSON.stringify(se_StopConfigurationRecorderRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StopConfigurationRecorderCommand = se_StopConfigurationRecorderCommand;
const se_TagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("TagResource");
    let body;
    body = JSON.stringify(se_TagResourceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_TagResourceCommand = se_TagResourceCommand;
const se_UntagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("UntagResource");
    let body;
    body = JSON.stringify(se_UntagResourceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UntagResourceCommand = se_UntagResourceCommand;
const de_BatchGetAggregateResourceConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_BatchGetAggregateResourceConfigCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_BatchGetAggregateResourceConfigResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_BatchGetAggregateResourceConfigCommand = de_BatchGetAggregateResourceConfigCommand;
const de_BatchGetAggregateResourceConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoSuchConfigurationAggregatorException":
        case "com.amazonaws.configservice#NoSuchConfigurationAggregatorException":
            throw await de_NoSuchConfigurationAggregatorExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_BatchGetResourceConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_BatchGetResourceConfigCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_BatchGetResourceConfigResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_BatchGetResourceConfigCommand = de_BatchGetResourceConfigCommand;
const de_BatchGetResourceConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoAvailableConfigurationRecorderException":
        case "com.amazonaws.configservice#NoAvailableConfigurationRecorderException":
            throw await de_NoAvailableConfigurationRecorderExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_DeleteAggregationAuthorizationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteAggregationAuthorizationCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.de_DeleteAggregationAuthorizationCommand = de_DeleteAggregationAuthorizationCommand;
const de_DeleteAggregationAuthorizationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_DeleteConfigRuleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteConfigRuleCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.de_DeleteConfigRuleCommand = de_DeleteConfigRuleCommand;
const de_DeleteConfigRuleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoSuchConfigRuleException":
        case "com.amazonaws.configservice#NoSuchConfigRuleException":
            throw await de_NoSuchConfigRuleExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.configservice#ResourceInUseException":
            throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_DeleteConfigurationAggregatorCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteConfigurationAggregatorCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.de_DeleteConfigurationAggregatorCommand = de_DeleteConfigurationAggregatorCommand;
const de_DeleteConfigurationAggregatorCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoSuchConfigurationAggregatorException":
        case "com.amazonaws.configservice#NoSuchConfigurationAggregatorException":
            throw await de_NoSuchConfigurationAggregatorExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_DeleteConfigurationRecorderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteConfigurationRecorderCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.de_DeleteConfigurationRecorderCommand = de_DeleteConfigurationRecorderCommand;
const de_DeleteConfigurationRecorderCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoSuchConfigurationRecorderException":
        case "com.amazonaws.configservice#NoSuchConfigurationRecorderException":
            throw await de_NoSuchConfigurationRecorderExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_DeleteConformancePackCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteConformancePackCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.de_DeleteConformancePackCommand = de_DeleteConformancePackCommand;
const de_DeleteConformancePackCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoSuchConformancePackException":
        case "com.amazonaws.configservice#NoSuchConformancePackException":
            throw await de_NoSuchConformancePackExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.configservice#ResourceInUseException":
            throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_DeleteDeliveryChannelCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteDeliveryChannelCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.de_DeleteDeliveryChannelCommand = de_DeleteDeliveryChannelCommand;
const de_DeleteDeliveryChannelCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "LastDeliveryChannelDeleteFailedException":
        case "com.amazonaws.configservice#LastDeliveryChannelDeleteFailedException":
            throw await de_LastDeliveryChannelDeleteFailedExceptionRes(parsedOutput, context);
        case "NoSuchDeliveryChannelException":
        case "com.amazonaws.configservice#NoSuchDeliveryChannelException":
            throw await de_NoSuchDeliveryChannelExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_DeleteEvaluationResultsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteEvaluationResultsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteEvaluationResultsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DeleteEvaluationResultsCommand = de_DeleteEvaluationResultsCommand;
const de_DeleteEvaluationResultsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoSuchConfigRuleException":
        case "com.amazonaws.configservice#NoSuchConfigRuleException":
            throw await de_NoSuchConfigRuleExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.configservice#ResourceInUseException":
            throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_DeleteOrganizationConfigRuleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteOrganizationConfigRuleCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.de_DeleteOrganizationConfigRuleCommand = de_DeleteOrganizationConfigRuleCommand;
const de_DeleteOrganizationConfigRuleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoSuchOrganizationConfigRuleException":
        case "com.amazonaws.configservice#NoSuchOrganizationConfigRuleException":
            throw await de_NoSuchOrganizationConfigRuleExceptionRes(parsedOutput, context);
        case "OrganizationAccessDeniedException":
        case "com.amazonaws.configservice#OrganizationAccessDeniedException":
            throw await de_OrganizationAccessDeniedExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.configservice#ResourceInUseException":
            throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_DeleteOrganizationConformancePackCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteOrganizationConformancePackCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.de_DeleteOrganizationConformancePackCommand = de_DeleteOrganizationConformancePackCommand;
const de_DeleteOrganizationConformancePackCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoSuchOrganizationConformancePackException":
        case "com.amazonaws.configservice#NoSuchOrganizationConformancePackException":
            throw await de_NoSuchOrganizationConformancePackExceptionRes(parsedOutput, context);
        case "OrganizationAccessDeniedException":
        case "com.amazonaws.configservice#OrganizationAccessDeniedException":
            throw await de_OrganizationAccessDeniedExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.configservice#ResourceInUseException":
            throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_DeletePendingAggregationRequestCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeletePendingAggregationRequestCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.de_DeletePendingAggregationRequestCommand = de_DeletePendingAggregationRequestCommand;
const de_DeletePendingAggregationRequestCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_DeleteRemediationConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteRemediationConfigurationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteRemediationConfigurationResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DeleteRemediationConfigurationCommand = de_DeleteRemediationConfigurationCommand;
const de_DeleteRemediationConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InsufficientPermissionsException":
        case "com.amazonaws.configservice#InsufficientPermissionsException":
            throw await de_InsufficientPermissionsExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "NoSuchRemediationConfigurationException":
        case "com.amazonaws.configservice#NoSuchRemediationConfigurationException":
            throw await de_NoSuchRemediationConfigurationExceptionRes(parsedOutput, context);
        case "RemediationInProgressException":
        case "com.amazonaws.configservice#RemediationInProgressException":
            throw await de_RemediationInProgressExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_DeleteRemediationExceptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteRemediationExceptionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteRemediationExceptionsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DeleteRemediationExceptionsCommand = de_DeleteRemediationExceptionsCommand;
const de_DeleteRemediationExceptionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoSuchRemediationExceptionException":
        case "com.amazonaws.configservice#NoSuchRemediationExceptionException":
            throw await de_NoSuchRemediationExceptionExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_DeleteResourceConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteResourceConfigCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.de_DeleteResourceConfigCommand = de_DeleteResourceConfigCommand;
const de_DeleteResourceConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoRunningConfigurationRecorderException":
        case "com.amazonaws.configservice#NoRunningConfigurationRecorderException":
            throw await de_NoRunningConfigurationRecorderExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_DeleteRetentionConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteRetentionConfigurationCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.de_DeleteRetentionConfigurationCommand = de_DeleteRetentionConfigurationCommand;
const de_DeleteRetentionConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "NoSuchRetentionConfigurationException":
        case "com.amazonaws.configservice#NoSuchRetentionConfigurationException":
            throw await de_NoSuchRetentionConfigurationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_DeleteStoredQueryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteStoredQueryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteStoredQueryResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DeleteStoredQueryCommand = de_DeleteStoredQueryCommand;
const de_DeleteStoredQueryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFoundException":
        case "com.amazonaws.configservice#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_DeliverConfigSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeliverConfigSnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeliverConfigSnapshotResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DeliverConfigSnapshotCommand = de_DeliverConfigSnapshotCommand;
const de_DeliverConfigSnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoAvailableConfigurationRecorderException":
        case "com.amazonaws.configservice#NoAvailableConfigurationRecorderException":
            throw await de_NoAvailableConfigurationRecorderExceptionRes(parsedOutput, context);
        case "NoRunningConfigurationRecorderException":
        case "com.amazonaws.configservice#NoRunningConfigurationRecorderException":
            throw await de_NoRunningConfigurationRecorderExceptionRes(parsedOutput, context);
        case "NoSuchDeliveryChannelException":
        case "com.amazonaws.configservice#NoSuchDeliveryChannelException":
            throw await de_NoSuchDeliveryChannelExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_DescribeAggregateComplianceByConfigRulesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeAggregateComplianceByConfigRulesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeAggregateComplianceByConfigRulesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DescribeAggregateComplianceByConfigRulesCommand = de_DescribeAggregateComplianceByConfigRulesCommand;
const de_DescribeAggregateComplianceByConfigRulesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await de_InvalidLimitExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "NoSuchConfigurationAggregatorException":
        case "com.amazonaws.configservice#NoSuchConfigurationAggregatorException":
            throw await de_NoSuchConfigurationAggregatorExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_DescribeAggregateComplianceByConformancePacksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeAggregateComplianceByConformancePacksCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeAggregateComplianceByConformancePacksResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DescribeAggregateComplianceByConformancePacksCommand = de_DescribeAggregateComplianceByConformancePacksCommand;
const de_DescribeAggregateComplianceByConformancePacksCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await de_InvalidLimitExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "NoSuchConfigurationAggregatorException":
        case "com.amazonaws.configservice#NoSuchConfigurationAggregatorException":
            throw await de_NoSuchConfigurationAggregatorExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_DescribeAggregationAuthorizationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeAggregationAuthorizationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeAggregationAuthorizationsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DescribeAggregationAuthorizationsCommand = de_DescribeAggregationAuthorizationsCommand;
const de_DescribeAggregationAuthorizationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await de_InvalidLimitExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_DescribeComplianceByConfigRuleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeComplianceByConfigRuleCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeComplianceByConfigRuleResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DescribeComplianceByConfigRuleCommand = de_DescribeComplianceByConfigRuleCommand;
const de_DescribeComplianceByConfigRuleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "NoSuchConfigRuleException":
        case "com.amazonaws.configservice#NoSuchConfigRuleException":
            throw await de_NoSuchConfigRuleExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_DescribeComplianceByResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeComplianceByResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeComplianceByResourceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DescribeComplianceByResourceCommand = de_DescribeComplianceByResourceCommand;
const de_DescribeComplianceByResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_DescribeConfigRuleEvaluationStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeConfigRuleEvaluationStatusCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeConfigRuleEvaluationStatusResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DescribeConfigRuleEvaluationStatusCommand = de_DescribeConfigRuleEvaluationStatusCommand;
const de_DescribeConfigRuleEvaluationStatusCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "NoSuchConfigRuleException":
        case "com.amazonaws.configservice#NoSuchConfigRuleException":
            throw await de_NoSuchConfigRuleExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_DescribeConfigRulesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeConfigRulesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeConfigRulesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DescribeConfigRulesCommand = de_DescribeConfigRulesCommand;
const de_DescribeConfigRulesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "NoSuchConfigRuleException":
        case "com.amazonaws.configservice#NoSuchConfigRuleException":
            throw await de_NoSuchConfigRuleExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_DescribeConfigurationAggregatorsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeConfigurationAggregatorsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeConfigurationAggregatorsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DescribeConfigurationAggregatorsCommand = de_DescribeConfigurationAggregatorsCommand;
const de_DescribeConfigurationAggregatorsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await de_InvalidLimitExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "NoSuchConfigurationAggregatorException":
        case "com.amazonaws.configservice#NoSuchConfigurationAggregatorException":
            throw await de_NoSuchConfigurationAggregatorExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_DescribeConfigurationAggregatorSourcesStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeConfigurationAggregatorSourcesStatusCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeConfigurationAggregatorSourcesStatusResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DescribeConfigurationAggregatorSourcesStatusCommand = de_DescribeConfigurationAggregatorSourcesStatusCommand;
const de_DescribeConfigurationAggregatorSourcesStatusCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await de_InvalidLimitExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "NoSuchConfigurationAggregatorException":
        case "com.amazonaws.configservice#NoSuchConfigurationAggregatorException":
            throw await de_NoSuchConfigurationAggregatorExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_DescribeConfigurationRecordersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeConfigurationRecordersCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeConfigurationRecordersResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DescribeConfigurationRecordersCommand = de_DescribeConfigurationRecordersCommand;
const de_DescribeConfigurationRecordersCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoSuchConfigurationRecorderException":
        case "com.amazonaws.configservice#NoSuchConfigurationRecorderException":
            throw await de_NoSuchConfigurationRecorderExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_DescribeConfigurationRecorderStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeConfigurationRecorderStatusCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeConfigurationRecorderStatusResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DescribeConfigurationRecorderStatusCommand = de_DescribeConfigurationRecorderStatusCommand;
const de_DescribeConfigurationRecorderStatusCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoSuchConfigurationRecorderException":
        case "com.amazonaws.configservice#NoSuchConfigurationRecorderException":
            throw await de_NoSuchConfigurationRecorderExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_DescribeConformancePackComplianceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeConformancePackComplianceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeConformancePackComplianceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DescribeConformancePackComplianceCommand = de_DescribeConformancePackComplianceCommand;
const de_DescribeConformancePackComplianceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await de_InvalidLimitExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "NoSuchConfigRuleInConformancePackException":
        case "com.amazonaws.configservice#NoSuchConfigRuleInConformancePackException":
            throw await de_NoSuchConfigRuleInConformancePackExceptionRes(parsedOutput, context);
        case "NoSuchConformancePackException":
        case "com.amazonaws.configservice#NoSuchConformancePackException":
            throw await de_NoSuchConformancePackExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_DescribeConformancePacksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeConformancePacksCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeConformancePacksResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DescribeConformancePacksCommand = de_DescribeConformancePacksCommand;
const de_DescribeConformancePacksCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await de_InvalidLimitExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "NoSuchConformancePackException":
        case "com.amazonaws.configservice#NoSuchConformancePackException":
            throw await de_NoSuchConformancePackExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_DescribeConformancePackStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeConformancePackStatusCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeConformancePackStatusResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DescribeConformancePackStatusCommand = de_DescribeConformancePackStatusCommand;
const de_DescribeConformancePackStatusCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await de_InvalidLimitExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_DescribeDeliveryChannelsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeDeliveryChannelsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeDeliveryChannelsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DescribeDeliveryChannelsCommand = de_DescribeDeliveryChannelsCommand;
const de_DescribeDeliveryChannelsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoSuchDeliveryChannelException":
        case "com.amazonaws.configservice#NoSuchDeliveryChannelException":
            throw await de_NoSuchDeliveryChannelExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_DescribeDeliveryChannelStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeDeliveryChannelStatusCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeDeliveryChannelStatusResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DescribeDeliveryChannelStatusCommand = de_DescribeDeliveryChannelStatusCommand;
const de_DescribeDeliveryChannelStatusCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoSuchDeliveryChannelException":
        case "com.amazonaws.configservice#NoSuchDeliveryChannelException":
            throw await de_NoSuchDeliveryChannelExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_DescribeOrganizationConfigRulesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeOrganizationConfigRulesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeOrganizationConfigRulesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DescribeOrganizationConfigRulesCommand = de_DescribeOrganizationConfigRulesCommand;
const de_DescribeOrganizationConfigRulesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await de_InvalidLimitExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "NoSuchOrganizationConfigRuleException":
        case "com.amazonaws.configservice#NoSuchOrganizationConfigRuleException":
            throw await de_NoSuchOrganizationConfigRuleExceptionRes(parsedOutput, context);
        case "OrganizationAccessDeniedException":
        case "com.amazonaws.configservice#OrganizationAccessDeniedException":
            throw await de_OrganizationAccessDeniedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_DescribeOrganizationConfigRuleStatusesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeOrganizationConfigRuleStatusesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeOrganizationConfigRuleStatusesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DescribeOrganizationConfigRuleStatusesCommand = de_DescribeOrganizationConfigRuleStatusesCommand;
const de_DescribeOrganizationConfigRuleStatusesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await de_InvalidLimitExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "NoSuchOrganizationConfigRuleException":
        case "com.amazonaws.configservice#NoSuchOrganizationConfigRuleException":
            throw await de_NoSuchOrganizationConfigRuleExceptionRes(parsedOutput, context);
        case "OrganizationAccessDeniedException":
        case "com.amazonaws.configservice#OrganizationAccessDeniedException":
            throw await de_OrganizationAccessDeniedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_DescribeOrganizationConformancePacksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeOrganizationConformancePacksCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeOrganizationConformancePacksResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DescribeOrganizationConformancePacksCommand = de_DescribeOrganizationConformancePacksCommand;
const de_DescribeOrganizationConformancePacksCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await de_InvalidLimitExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "NoSuchOrganizationConformancePackException":
        case "com.amazonaws.configservice#NoSuchOrganizationConformancePackException":
            throw await de_NoSuchOrganizationConformancePackExceptionRes(parsedOutput, context);
        case "OrganizationAccessDeniedException":
        case "com.amazonaws.configservice#OrganizationAccessDeniedException":
            throw await de_OrganizationAccessDeniedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_DescribeOrganizationConformancePackStatusesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeOrganizationConformancePackStatusesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeOrganizationConformancePackStatusesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DescribeOrganizationConformancePackStatusesCommand = de_DescribeOrganizationConformancePackStatusesCommand;
const de_DescribeOrganizationConformancePackStatusesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await de_InvalidLimitExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "NoSuchOrganizationConformancePackException":
        case "com.amazonaws.configservice#NoSuchOrganizationConformancePackException":
            throw await de_NoSuchOrganizationConformancePackExceptionRes(parsedOutput, context);
        case "OrganizationAccessDeniedException":
        case "com.amazonaws.configservice#OrganizationAccessDeniedException":
            throw await de_OrganizationAccessDeniedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_DescribePendingAggregationRequestsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribePendingAggregationRequestsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribePendingAggregationRequestsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DescribePendingAggregationRequestsCommand = de_DescribePendingAggregationRequestsCommand;
const de_DescribePendingAggregationRequestsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await de_InvalidLimitExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_DescribeRemediationConfigurationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeRemediationConfigurationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeRemediationConfigurationsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DescribeRemediationConfigurationsCommand = de_DescribeRemediationConfigurationsCommand;
const de_DescribeRemediationConfigurationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
        errorCode,
    });
};
const de_DescribeRemediationExceptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeRemediationExceptionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeRemediationExceptionsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DescribeRemediationExceptionsCommand = de_DescribeRemediationExceptionsCommand;
const de_DescribeRemediationExceptionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_DescribeRemediationExecutionStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeRemediationExecutionStatusCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeRemediationExecutionStatusResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DescribeRemediationExecutionStatusCommand = de_DescribeRemediationExecutionStatusCommand;
const de_DescribeRemediationExecutionStatusCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "NoSuchRemediationConfigurationException":
        case "com.amazonaws.configservice#NoSuchRemediationConfigurationException":
            throw await de_NoSuchRemediationConfigurationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_DescribeRetentionConfigurationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeRetentionConfigurationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeRetentionConfigurationsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DescribeRetentionConfigurationsCommand = de_DescribeRetentionConfigurationsCommand;
const de_DescribeRetentionConfigurationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "NoSuchRetentionConfigurationException":
        case "com.amazonaws.configservice#NoSuchRetentionConfigurationException":
            throw await de_NoSuchRetentionConfigurationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_GetAggregateComplianceDetailsByConfigRuleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetAggregateComplianceDetailsByConfigRuleCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetAggregateComplianceDetailsByConfigRuleResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetAggregateComplianceDetailsByConfigRuleCommand = de_GetAggregateComplianceDetailsByConfigRuleCommand;
const de_GetAggregateComplianceDetailsByConfigRuleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await de_InvalidLimitExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "NoSuchConfigurationAggregatorException":
        case "com.amazonaws.configservice#NoSuchConfigurationAggregatorException":
            throw await de_NoSuchConfigurationAggregatorExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_GetAggregateConfigRuleComplianceSummaryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetAggregateConfigRuleComplianceSummaryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetAggregateConfigRuleComplianceSummaryResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetAggregateConfigRuleComplianceSummaryCommand = de_GetAggregateConfigRuleComplianceSummaryCommand;
const de_GetAggregateConfigRuleComplianceSummaryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await de_InvalidLimitExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "NoSuchConfigurationAggregatorException":
        case "com.amazonaws.configservice#NoSuchConfigurationAggregatorException":
            throw await de_NoSuchConfigurationAggregatorExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_GetAggregateConformancePackComplianceSummaryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetAggregateConformancePackComplianceSummaryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetAggregateConformancePackComplianceSummaryResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetAggregateConformancePackComplianceSummaryCommand = de_GetAggregateConformancePackComplianceSummaryCommand;
const de_GetAggregateConformancePackComplianceSummaryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await de_InvalidLimitExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "NoSuchConfigurationAggregatorException":
        case "com.amazonaws.configservice#NoSuchConfigurationAggregatorException":
            throw await de_NoSuchConfigurationAggregatorExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_GetAggregateDiscoveredResourceCountsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetAggregateDiscoveredResourceCountsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetAggregateDiscoveredResourceCountsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetAggregateDiscoveredResourceCountsCommand = de_GetAggregateDiscoveredResourceCountsCommand;
const de_GetAggregateDiscoveredResourceCountsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await de_InvalidLimitExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "NoSuchConfigurationAggregatorException":
        case "com.amazonaws.configservice#NoSuchConfigurationAggregatorException":
            throw await de_NoSuchConfigurationAggregatorExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_GetAggregateResourceConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetAggregateResourceConfigCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetAggregateResourceConfigResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetAggregateResourceConfigCommand = de_GetAggregateResourceConfigCommand;
const de_GetAggregateResourceConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoSuchConfigurationAggregatorException":
        case "com.amazonaws.configservice#NoSuchConfigurationAggregatorException":
            throw await de_NoSuchConfigurationAggregatorExceptionRes(parsedOutput, context);
        case "OversizedConfigurationItemException":
        case "com.amazonaws.configservice#OversizedConfigurationItemException":
            throw await de_OversizedConfigurationItemExceptionRes(parsedOutput, context);
        case "ResourceNotDiscoveredException":
        case "com.amazonaws.configservice#ResourceNotDiscoveredException":
            throw await de_ResourceNotDiscoveredExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_GetComplianceDetailsByConfigRuleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetComplianceDetailsByConfigRuleCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetComplianceDetailsByConfigRuleResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetComplianceDetailsByConfigRuleCommand = de_GetComplianceDetailsByConfigRuleCommand;
const de_GetComplianceDetailsByConfigRuleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "NoSuchConfigRuleException":
        case "com.amazonaws.configservice#NoSuchConfigRuleException":
            throw await de_NoSuchConfigRuleExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_GetComplianceDetailsByResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetComplianceDetailsByResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetComplianceDetailsByResourceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetComplianceDetailsByResourceCommand = de_GetComplianceDetailsByResourceCommand;
const de_GetComplianceDetailsByResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_GetComplianceSummaryByConfigRuleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetComplianceSummaryByConfigRuleCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetComplianceSummaryByConfigRuleResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetComplianceSummaryByConfigRuleCommand = de_GetComplianceSummaryByConfigRuleCommand;
const de_GetComplianceSummaryByConfigRuleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
        errorCode,
    });
};
const de_GetComplianceSummaryByResourceTypeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetComplianceSummaryByResourceTypeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetComplianceSummaryByResourceTypeResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetComplianceSummaryByResourceTypeCommand = de_GetComplianceSummaryByResourceTypeCommand;
const de_GetComplianceSummaryByResourceTypeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_GetConformancePackComplianceDetailsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetConformancePackComplianceDetailsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetConformancePackComplianceDetailsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetConformancePackComplianceDetailsCommand = de_GetConformancePackComplianceDetailsCommand;
const de_GetConformancePackComplianceDetailsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await de_InvalidLimitExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "NoSuchConfigRuleInConformancePackException":
        case "com.amazonaws.configservice#NoSuchConfigRuleInConformancePackException":
            throw await de_NoSuchConfigRuleInConformancePackExceptionRes(parsedOutput, context);
        case "NoSuchConformancePackException":
        case "com.amazonaws.configservice#NoSuchConformancePackException":
            throw await de_NoSuchConformancePackExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_GetConformancePackComplianceSummaryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetConformancePackComplianceSummaryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetConformancePackComplianceSummaryResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetConformancePackComplianceSummaryCommand = de_GetConformancePackComplianceSummaryCommand;
const de_GetConformancePackComplianceSummaryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await de_InvalidLimitExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "NoSuchConformancePackException":
        case "com.amazonaws.configservice#NoSuchConformancePackException":
            throw await de_NoSuchConformancePackExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_GetCustomRulePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetCustomRulePolicyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetCustomRulePolicyResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetCustomRulePolicyCommand = de_GetCustomRulePolicyCommand;
const de_GetCustomRulePolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoSuchConfigRuleException":
        case "com.amazonaws.configservice#NoSuchConfigRuleException":
            throw await de_NoSuchConfigRuleExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_GetDiscoveredResourceCountsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetDiscoveredResourceCountsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetDiscoveredResourceCountsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetDiscoveredResourceCountsCommand = de_GetDiscoveredResourceCountsCommand;
const de_GetDiscoveredResourceCountsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await de_InvalidLimitExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_GetOrganizationConfigRuleDetailedStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetOrganizationConfigRuleDetailedStatusCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetOrganizationConfigRuleDetailedStatusResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetOrganizationConfigRuleDetailedStatusCommand = de_GetOrganizationConfigRuleDetailedStatusCommand;
const de_GetOrganizationConfigRuleDetailedStatusCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await de_InvalidLimitExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "NoSuchOrganizationConfigRuleException":
        case "com.amazonaws.configservice#NoSuchOrganizationConfigRuleException":
            throw await de_NoSuchOrganizationConfigRuleExceptionRes(parsedOutput, context);
        case "OrganizationAccessDeniedException":
        case "com.amazonaws.configservice#OrganizationAccessDeniedException":
            throw await de_OrganizationAccessDeniedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_GetOrganizationConformancePackDetailedStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetOrganizationConformancePackDetailedStatusCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetOrganizationConformancePackDetailedStatusResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetOrganizationConformancePackDetailedStatusCommand = de_GetOrganizationConformancePackDetailedStatusCommand;
const de_GetOrganizationConformancePackDetailedStatusCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await de_InvalidLimitExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "NoSuchOrganizationConformancePackException":
        case "com.amazonaws.configservice#NoSuchOrganizationConformancePackException":
            throw await de_NoSuchOrganizationConformancePackExceptionRes(parsedOutput, context);
        case "OrganizationAccessDeniedException":
        case "com.amazonaws.configservice#OrganizationAccessDeniedException":
            throw await de_OrganizationAccessDeniedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_GetOrganizationCustomRulePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetOrganizationCustomRulePolicyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetOrganizationCustomRulePolicyResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetOrganizationCustomRulePolicyCommand = de_GetOrganizationCustomRulePolicyCommand;
const de_GetOrganizationCustomRulePolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoSuchOrganizationConfigRuleException":
        case "com.amazonaws.configservice#NoSuchOrganizationConfigRuleException":
            throw await de_NoSuchOrganizationConfigRuleExceptionRes(parsedOutput, context);
        case "OrganizationAccessDeniedException":
        case "com.amazonaws.configservice#OrganizationAccessDeniedException":
            throw await de_OrganizationAccessDeniedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_GetResourceConfigHistoryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetResourceConfigHistoryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetResourceConfigHistoryResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetResourceConfigHistoryCommand = de_GetResourceConfigHistoryCommand;
const de_GetResourceConfigHistoryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await de_InvalidLimitExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "InvalidTimeRangeException":
        case "com.amazonaws.configservice#InvalidTimeRangeException":
            throw await de_InvalidTimeRangeExceptionRes(parsedOutput, context);
        case "NoAvailableConfigurationRecorderException":
        case "com.amazonaws.configservice#NoAvailableConfigurationRecorderException":
            throw await de_NoAvailableConfigurationRecorderExceptionRes(parsedOutput, context);
        case "ResourceNotDiscoveredException":
        case "com.amazonaws.configservice#ResourceNotDiscoveredException":
            throw await de_ResourceNotDiscoveredExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_GetResourceEvaluationSummaryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetResourceEvaluationSummaryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetResourceEvaluationSummaryResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetResourceEvaluationSummaryCommand = de_GetResourceEvaluationSummaryCommand;
const de_GetResourceEvaluationSummaryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFoundException":
        case "com.amazonaws.configservice#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_GetStoredQueryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetStoredQueryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetStoredQueryResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetStoredQueryCommand = de_GetStoredQueryCommand;
const de_GetStoredQueryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFoundException":
        case "com.amazonaws.configservice#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_ListAggregateDiscoveredResourcesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListAggregateDiscoveredResourcesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListAggregateDiscoveredResourcesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_ListAggregateDiscoveredResourcesCommand = de_ListAggregateDiscoveredResourcesCommand;
const de_ListAggregateDiscoveredResourcesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await de_InvalidLimitExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "NoSuchConfigurationAggregatorException":
        case "com.amazonaws.configservice#NoSuchConfigurationAggregatorException":
            throw await de_NoSuchConfigurationAggregatorExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_ListConformancePackComplianceScoresCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListConformancePackComplianceScoresCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListConformancePackComplianceScoresResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_ListConformancePackComplianceScoresCommand = de_ListConformancePackComplianceScoresCommand;
const de_ListConformancePackComplianceScoresCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await de_InvalidLimitExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_ListDiscoveredResourcesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListDiscoveredResourcesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListDiscoveredResourcesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_ListDiscoveredResourcesCommand = de_ListDiscoveredResourcesCommand;
const de_ListDiscoveredResourcesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await de_InvalidLimitExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "NoAvailableConfigurationRecorderException":
        case "com.amazonaws.configservice#NoAvailableConfigurationRecorderException":
            throw await de_NoAvailableConfigurationRecorderExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_ListResourceEvaluationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListResourceEvaluationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListResourceEvaluationsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_ListResourceEvaluationsCommand = de_ListResourceEvaluationsCommand;
const de_ListResourceEvaluationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "InvalidTimeRangeException":
        case "com.amazonaws.configservice#InvalidTimeRangeException":
            throw await de_InvalidTimeRangeExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_ListStoredQueriesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListStoredQueriesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListStoredQueriesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_ListStoredQueriesCommand = de_ListStoredQueriesCommand;
const de_ListStoredQueriesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListTagsForResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListTagsForResourceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_ListTagsForResourceCommand = de_ListTagsForResourceCommand;
const de_ListTagsForResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await de_InvalidLimitExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.configservice#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_PutAggregationAuthorizationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PutAggregationAuthorizationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_PutAggregationAuthorizationResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_PutAggregationAuthorizationCommand = de_PutAggregationAuthorizationCommand;
const de_PutAggregationAuthorizationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_PutConfigRuleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PutConfigRuleCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.de_PutConfigRuleCommand = de_PutConfigRuleCommand;
const de_PutConfigRuleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InsufficientPermissionsException":
        case "com.amazonaws.configservice#InsufficientPermissionsException":
            throw await de_InsufficientPermissionsExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "MaxNumberOfConfigRulesExceededException":
        case "com.amazonaws.configservice#MaxNumberOfConfigRulesExceededException":
            throw await de_MaxNumberOfConfigRulesExceededExceptionRes(parsedOutput, context);
        case "NoAvailableConfigurationRecorderException":
        case "com.amazonaws.configservice#NoAvailableConfigurationRecorderException":
            throw await de_NoAvailableConfigurationRecorderExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.configservice#ResourceInUseException":
            throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_PutConfigurationAggregatorCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PutConfigurationAggregatorCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_PutConfigurationAggregatorResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_PutConfigurationAggregatorCommand = de_PutConfigurationAggregatorCommand;
const de_PutConfigurationAggregatorCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "InvalidRoleException":
        case "com.amazonaws.configservice#InvalidRoleException":
            throw await de_InvalidRoleExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.configservice#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "NoAvailableOrganizationException":
        case "com.amazonaws.configservice#NoAvailableOrganizationException":
            throw await de_NoAvailableOrganizationExceptionRes(parsedOutput, context);
        case "OrganizationAccessDeniedException":
        case "com.amazonaws.configservice#OrganizationAccessDeniedException":
            throw await de_OrganizationAccessDeniedExceptionRes(parsedOutput, context);
        case "OrganizationAllFeaturesNotEnabledException":
        case "com.amazonaws.configservice#OrganizationAllFeaturesNotEnabledException":
            throw await de_OrganizationAllFeaturesNotEnabledExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_PutConfigurationRecorderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PutConfigurationRecorderCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.de_PutConfigurationRecorderCommand = de_PutConfigurationRecorderCommand;
const de_PutConfigurationRecorderCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidConfigurationRecorderNameException":
        case "com.amazonaws.configservice#InvalidConfigurationRecorderNameException":
            throw await de_InvalidConfigurationRecorderNameExceptionRes(parsedOutput, context);
        case "InvalidRecordingGroupException":
        case "com.amazonaws.configservice#InvalidRecordingGroupException":
            throw await de_InvalidRecordingGroupExceptionRes(parsedOutput, context);
        case "InvalidRoleException":
        case "com.amazonaws.configservice#InvalidRoleException":
            throw await de_InvalidRoleExceptionRes(parsedOutput, context);
        case "MaxNumberOfConfigurationRecordersExceededException":
        case "com.amazonaws.configservice#MaxNumberOfConfigurationRecordersExceededException":
            throw await de_MaxNumberOfConfigurationRecordersExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_PutConformancePackCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PutConformancePackCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_PutConformancePackResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_PutConformancePackCommand = de_PutConformancePackCommand;
const de_PutConformancePackCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConformancePackTemplateValidationException":
        case "com.amazonaws.configservice#ConformancePackTemplateValidationException":
            throw await de_ConformancePackTemplateValidationExceptionRes(parsedOutput, context);
        case "InsufficientPermissionsException":
        case "com.amazonaws.configservice#InsufficientPermissionsException":
            throw await de_InsufficientPermissionsExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "MaxNumberOfConformancePacksExceededException":
        case "com.amazonaws.configservice#MaxNumberOfConformancePacksExceededException":
            throw await de_MaxNumberOfConformancePacksExceededExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.configservice#ResourceInUseException":
            throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_PutDeliveryChannelCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PutDeliveryChannelCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.de_PutDeliveryChannelCommand = de_PutDeliveryChannelCommand;
const de_PutDeliveryChannelCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InsufficientDeliveryPolicyException":
        case "com.amazonaws.configservice#InsufficientDeliveryPolicyException":
            throw await de_InsufficientDeliveryPolicyExceptionRes(parsedOutput, context);
        case "InvalidDeliveryChannelNameException":
        case "com.amazonaws.configservice#InvalidDeliveryChannelNameException":
            throw await de_InvalidDeliveryChannelNameExceptionRes(parsedOutput, context);
        case "InvalidS3KeyPrefixException":
        case "com.amazonaws.configservice#InvalidS3KeyPrefixException":
            throw await de_InvalidS3KeyPrefixExceptionRes(parsedOutput, context);
        case "InvalidS3KmsKeyArnException":
        case "com.amazonaws.configservice#InvalidS3KmsKeyArnException":
            throw await de_InvalidS3KmsKeyArnExceptionRes(parsedOutput, context);
        case "InvalidSNSTopicARNException":
        case "com.amazonaws.configservice#InvalidSNSTopicARNException":
            throw await de_InvalidSNSTopicARNExceptionRes(parsedOutput, context);
        case "MaxNumberOfDeliveryChannelsExceededException":
        case "com.amazonaws.configservice#MaxNumberOfDeliveryChannelsExceededException":
            throw await de_MaxNumberOfDeliveryChannelsExceededExceptionRes(parsedOutput, context);
        case "NoAvailableConfigurationRecorderException":
        case "com.amazonaws.configservice#NoAvailableConfigurationRecorderException":
            throw await de_NoAvailableConfigurationRecorderExceptionRes(parsedOutput, context);
        case "NoSuchBucketException":
        case "com.amazonaws.configservice#NoSuchBucketException":
            throw await de_NoSuchBucketExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_PutEvaluationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PutEvaluationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_PutEvaluationsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_PutEvaluationsCommand = de_PutEvaluationsCommand;
const de_PutEvaluationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "InvalidResultTokenException":
        case "com.amazonaws.configservice#InvalidResultTokenException":
            throw await de_InvalidResultTokenExceptionRes(parsedOutput, context);
        case "NoSuchConfigRuleException":
        case "com.amazonaws.configservice#NoSuchConfigRuleException":
            throw await de_NoSuchConfigRuleExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_PutExternalEvaluationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PutExternalEvaluationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_PutExternalEvaluationResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_PutExternalEvaluationCommand = de_PutExternalEvaluationCommand;
const de_PutExternalEvaluationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "NoSuchConfigRuleException":
        case "com.amazonaws.configservice#NoSuchConfigRuleException":
            throw await de_NoSuchConfigRuleExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_PutOrganizationConfigRuleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PutOrganizationConfigRuleCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_PutOrganizationConfigRuleResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_PutOrganizationConfigRuleCommand = de_PutOrganizationConfigRuleCommand;
const de_PutOrganizationConfigRuleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InsufficientPermissionsException":
        case "com.amazonaws.configservice#InsufficientPermissionsException":
            throw await de_InsufficientPermissionsExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "MaxNumberOfOrganizationConfigRulesExceededException":
        case "com.amazonaws.configservice#MaxNumberOfOrganizationConfigRulesExceededException":
            throw await de_MaxNumberOfOrganizationConfigRulesExceededExceptionRes(parsedOutput, context);
        case "NoAvailableOrganizationException":
        case "com.amazonaws.configservice#NoAvailableOrganizationException":
            throw await de_NoAvailableOrganizationExceptionRes(parsedOutput, context);
        case "OrganizationAccessDeniedException":
        case "com.amazonaws.configservice#OrganizationAccessDeniedException":
            throw await de_OrganizationAccessDeniedExceptionRes(parsedOutput, context);
        case "OrganizationAllFeaturesNotEnabledException":
        case "com.amazonaws.configservice#OrganizationAllFeaturesNotEnabledException":
            throw await de_OrganizationAllFeaturesNotEnabledExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.configservice#ResourceInUseException":
            throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_PutOrganizationConformancePackCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PutOrganizationConformancePackCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_PutOrganizationConformancePackResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_PutOrganizationConformancePackCommand = de_PutOrganizationConformancePackCommand;
const de_PutOrganizationConformancePackCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InsufficientPermissionsException":
        case "com.amazonaws.configservice#InsufficientPermissionsException":
            throw await de_InsufficientPermissionsExceptionRes(parsedOutput, context);
        case "MaxNumberOfOrganizationConformancePacksExceededException":
        case "com.amazonaws.configservice#MaxNumberOfOrganizationConformancePacksExceededException":
            throw await de_MaxNumberOfOrganizationConformancePacksExceededExceptionRes(parsedOutput, context);
        case "NoAvailableOrganizationException":
        case "com.amazonaws.configservice#NoAvailableOrganizationException":
            throw await de_NoAvailableOrganizationExceptionRes(parsedOutput, context);
        case "OrganizationAccessDeniedException":
        case "com.amazonaws.configservice#OrganizationAccessDeniedException":
            throw await de_OrganizationAccessDeniedExceptionRes(parsedOutput, context);
        case "OrganizationAllFeaturesNotEnabledException":
        case "com.amazonaws.configservice#OrganizationAllFeaturesNotEnabledException":
            throw await de_OrganizationAllFeaturesNotEnabledExceptionRes(parsedOutput, context);
        case "OrganizationConformancePackTemplateValidationException":
        case "com.amazonaws.configservice#OrganizationConformancePackTemplateValidationException":
            throw await de_OrganizationConformancePackTemplateValidationExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.configservice#ResourceInUseException":
            throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_PutRemediationConfigurationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PutRemediationConfigurationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_PutRemediationConfigurationsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_PutRemediationConfigurationsCommand = de_PutRemediationConfigurationsCommand;
const de_PutRemediationConfigurationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InsufficientPermissionsException":
        case "com.amazonaws.configservice#InsufficientPermissionsException":
            throw await de_InsufficientPermissionsExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_PutRemediationExceptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PutRemediationExceptionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_PutRemediationExceptionsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_PutRemediationExceptionsCommand = de_PutRemediationExceptionsCommand;
const de_PutRemediationExceptionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InsufficientPermissionsException":
        case "com.amazonaws.configservice#InsufficientPermissionsException":
            throw await de_InsufficientPermissionsExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_PutResourceConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PutResourceConfigCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.de_PutResourceConfigCommand = de_PutResourceConfigCommand;
const de_PutResourceConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InsufficientPermissionsException":
        case "com.amazonaws.configservice#InsufficientPermissionsException":
            throw await de_InsufficientPermissionsExceptionRes(parsedOutput, context);
        case "MaxActiveResourcesExceededException":
        case "com.amazonaws.configservice#MaxActiveResourcesExceededException":
            throw await de_MaxActiveResourcesExceededExceptionRes(parsedOutput, context);
        case "NoRunningConfigurationRecorderException":
        case "com.amazonaws.configservice#NoRunningConfigurationRecorderException":
            throw await de_NoRunningConfigurationRecorderExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_PutRetentionConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PutRetentionConfigurationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_PutRetentionConfigurationResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_PutRetentionConfigurationCommand = de_PutRetentionConfigurationCommand;
const de_PutRetentionConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "MaxNumberOfRetentionConfigurationsExceededException":
        case "com.amazonaws.configservice#MaxNumberOfRetentionConfigurationsExceededException":
            throw await de_MaxNumberOfRetentionConfigurationsExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_PutStoredQueryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PutStoredQueryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_PutStoredQueryResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_PutStoredQueryCommand = de_PutStoredQueryCommand;
const de_PutStoredQueryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceConcurrentModificationException":
        case "com.amazonaws.configservice#ResourceConcurrentModificationException":
            throw await de_ResourceConcurrentModificationExceptionRes(parsedOutput, context);
        case "TooManyTagsException":
        case "com.amazonaws.configservice#TooManyTagsException":
            throw await de_TooManyTagsExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_SelectAggregateResourceConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_SelectAggregateResourceConfigCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_SelectAggregateResourceConfigResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_SelectAggregateResourceConfigCommand = de_SelectAggregateResourceConfigCommand;
const de_SelectAggregateResourceConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidExpressionException":
        case "com.amazonaws.configservice#InvalidExpressionException":
            throw await de_InvalidExpressionExceptionRes(parsedOutput, context);
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await de_InvalidLimitExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "NoSuchConfigurationAggregatorException":
        case "com.amazonaws.configservice#NoSuchConfigurationAggregatorException":
            throw await de_NoSuchConfigurationAggregatorExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_SelectResourceConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_SelectResourceConfigCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_SelectResourceConfigResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_SelectResourceConfigCommand = de_SelectResourceConfigCommand;
const de_SelectResourceConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidExpressionException":
        case "com.amazonaws.configservice#InvalidExpressionException":
            throw await de_InvalidExpressionExceptionRes(parsedOutput, context);
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await de_InvalidLimitExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_StartConfigRulesEvaluationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StartConfigRulesEvaluationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StartConfigRulesEvaluationResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_StartConfigRulesEvaluationCommand = de_StartConfigRulesEvaluationCommand;
const de_StartConfigRulesEvaluationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.configservice#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "NoSuchConfigRuleException":
        case "com.amazonaws.configservice#NoSuchConfigRuleException":
            throw await de_NoSuchConfigRuleExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.configservice#ResourceInUseException":
            throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_StartConfigurationRecorderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StartConfigurationRecorderCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.de_StartConfigurationRecorderCommand = de_StartConfigurationRecorderCommand;
const de_StartConfigurationRecorderCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoAvailableDeliveryChannelException":
        case "com.amazonaws.configservice#NoAvailableDeliveryChannelException":
            throw await de_NoAvailableDeliveryChannelExceptionRes(parsedOutput, context);
        case "NoSuchConfigurationRecorderException":
        case "com.amazonaws.configservice#NoSuchConfigurationRecorderException":
            throw await de_NoSuchConfigurationRecorderExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_StartRemediationExecutionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StartRemediationExecutionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StartRemediationExecutionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_StartRemediationExecutionCommand = de_StartRemediationExecutionCommand;
const de_StartRemediationExecutionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InsufficientPermissionsException":
        case "com.amazonaws.configservice#InsufficientPermissionsException":
            throw await de_InsufficientPermissionsExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "NoSuchRemediationConfigurationException":
        case "com.amazonaws.configservice#NoSuchRemediationConfigurationException":
            throw await de_NoSuchRemediationConfigurationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_StartResourceEvaluationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StartResourceEvaluationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StartResourceEvaluationResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_StartResourceEvaluationCommand = de_StartResourceEvaluationCommand;
const de_StartResourceEvaluationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "IdempotentParameterMismatch":
        case "com.amazonaws.configservice#IdempotentParameterMismatch":
            throw await de_IdempotentParameterMismatchRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_StopConfigurationRecorderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StopConfigurationRecorderCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.de_StopConfigurationRecorderCommand = de_StopConfigurationRecorderCommand;
const de_StopConfigurationRecorderCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoSuchConfigurationRecorderException":
        case "com.amazonaws.configservice#NoSuchConfigurationRecorderException":
            throw await de_NoSuchConfigurationRecorderExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_TagResourceCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.de_TagResourceCommand = de_TagResourceCommand;
const de_TagResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFoundException":
        case "com.amazonaws.configservice#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyTagsException":
        case "com.amazonaws.configservice#TooManyTagsException":
            throw await de_TooManyTagsExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UntagResourceCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.de_UntagResourceCommand = de_UntagResourceCommand;
const de_UntagResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFoundException":
        case "com.amazonaws.configservice#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: ConfigServiceServiceException_1.ConfigServiceServiceException,
                errorCode,
            });
    }
};
const de_ConformancePackTemplateValidationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_ConformancePackTemplateValidationException(body, context);
    const exception = new models_0_1.ConformancePackTemplateValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_IdempotentParameterMismatchRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_IdempotentParameterMismatch(body, context);
    const exception = new models_0_1.IdempotentParameterMismatch({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InsufficientDeliveryPolicyExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InsufficientDeliveryPolicyException(body, context);
    const exception = new models_0_1.InsufficientDeliveryPolicyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InsufficientPermissionsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InsufficientPermissionsException(body, context);
    const exception = new models_0_1.InsufficientPermissionsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidConfigurationRecorderNameExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidConfigurationRecorderNameException(body, context);
    const exception = new models_0_1.InvalidConfigurationRecorderNameException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidDeliveryChannelNameExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidDeliveryChannelNameException(body, context);
    const exception = new models_0_1.InvalidDeliveryChannelNameException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidExpressionExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidExpressionException(body, context);
    const exception = new models_0_1.InvalidExpressionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidLimitExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidLimitException(body, context);
    const exception = new models_0_1.InvalidLimitException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidNextTokenExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidNextTokenException(body, context);
    const exception = new models_0_1.InvalidNextTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidParameterValueExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidParameterValueException(body, context);
    const exception = new models_0_1.InvalidParameterValueException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidRecordingGroupExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidRecordingGroupException(body, context);
    const exception = new models_0_1.InvalidRecordingGroupException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidResultTokenExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidResultTokenException(body, context);
    const exception = new models_0_1.InvalidResultTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidRoleExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidRoleException(body, context);
    const exception = new models_0_1.InvalidRoleException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidS3KeyPrefixExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidS3KeyPrefixException(body, context);
    const exception = new models_0_1.InvalidS3KeyPrefixException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidS3KmsKeyArnExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidS3KmsKeyArnException(body, context);
    const exception = new models_0_1.InvalidS3KmsKeyArnException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidSNSTopicARNExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidSNSTopicARNException(body, context);
    const exception = new models_0_1.InvalidSNSTopicARNException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidTimeRangeExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidTimeRangeException(body, context);
    const exception = new models_0_1.InvalidTimeRangeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_LastDeliveryChannelDeleteFailedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_LastDeliveryChannelDeleteFailedException(body, context);
    const exception = new models_0_1.LastDeliveryChannelDeleteFailedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_LimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_LimitExceededException(body, context);
    const exception = new models_0_1.LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_MaxActiveResourcesExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_MaxActiveResourcesExceededException(body, context);
    const exception = new models_0_1.MaxActiveResourcesExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_MaxNumberOfConfigRulesExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_MaxNumberOfConfigRulesExceededException(body, context);
    const exception = new models_0_1.MaxNumberOfConfigRulesExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_MaxNumberOfConfigurationRecordersExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_MaxNumberOfConfigurationRecordersExceededException(body, context);
    const exception = new models_0_1.MaxNumberOfConfigurationRecordersExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_MaxNumberOfConformancePacksExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_MaxNumberOfConformancePacksExceededException(body, context);
    const exception = new models_0_1.MaxNumberOfConformancePacksExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_MaxNumberOfDeliveryChannelsExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_MaxNumberOfDeliveryChannelsExceededException(body, context);
    const exception = new models_1_1.MaxNumberOfDeliveryChannelsExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_MaxNumberOfOrganizationConfigRulesExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_MaxNumberOfOrganizationConfigRulesExceededException(body, context);
    const exception = new models_1_1.MaxNumberOfOrganizationConfigRulesExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_MaxNumberOfOrganizationConformancePacksExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_MaxNumberOfOrganizationConformancePacksExceededException(body, context);
    const exception = new models_1_1.MaxNumberOfOrganizationConformancePacksExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_MaxNumberOfRetentionConfigurationsExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_MaxNumberOfRetentionConfigurationsExceededException(body, context);
    const exception = new models_1_1.MaxNumberOfRetentionConfigurationsExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_NoAvailableConfigurationRecorderExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_NoAvailableConfigurationRecorderException(body, context);
    const exception = new models_0_1.NoAvailableConfigurationRecorderException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_NoAvailableDeliveryChannelExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_NoAvailableDeliveryChannelException(body, context);
    const exception = new models_1_1.NoAvailableDeliveryChannelException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_NoAvailableOrganizationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_NoAvailableOrganizationException(body, context);
    const exception = new models_1_1.NoAvailableOrganizationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_NoRunningConfigurationRecorderExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_NoRunningConfigurationRecorderException(body, context);
    const exception = new models_0_1.NoRunningConfigurationRecorderException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_NoSuchBucketExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_NoSuchBucketException(body, context);
    const exception = new models_1_1.NoSuchBucketException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_NoSuchConfigRuleExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_NoSuchConfigRuleException(body, context);
    const exception = new models_0_1.NoSuchConfigRuleException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_NoSuchConfigRuleInConformancePackExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_NoSuchConfigRuleInConformancePackException(body, context);
    const exception = new models_0_1.NoSuchConfigRuleInConformancePackException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_NoSuchConfigurationAggregatorExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_NoSuchConfigurationAggregatorException(body, context);
    const exception = new models_0_1.NoSuchConfigurationAggregatorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_NoSuchConfigurationRecorderExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_NoSuchConfigurationRecorderException(body, context);
    const exception = new models_0_1.NoSuchConfigurationRecorderException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_NoSuchConformancePackExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_NoSuchConformancePackException(body, context);
    const exception = new models_0_1.NoSuchConformancePackException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_NoSuchDeliveryChannelExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_NoSuchDeliveryChannelException(body, context);
    const exception = new models_0_1.NoSuchDeliveryChannelException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_NoSuchOrganizationConfigRuleExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_NoSuchOrganizationConfigRuleException(body, context);
    const exception = new models_0_1.NoSuchOrganizationConfigRuleException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_NoSuchOrganizationConformancePackExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_NoSuchOrganizationConformancePackException(body, context);
    const exception = new models_0_1.NoSuchOrganizationConformancePackException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_NoSuchRemediationConfigurationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_NoSuchRemediationConfigurationException(body, context);
    const exception = new models_0_1.NoSuchRemediationConfigurationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_NoSuchRemediationExceptionExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_NoSuchRemediationExceptionException(body, context);
    const exception = new models_0_1.NoSuchRemediationExceptionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_NoSuchRetentionConfigurationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_NoSuchRetentionConfigurationException(body, context);
    const exception = new models_0_1.NoSuchRetentionConfigurationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_OrganizationAccessDeniedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_OrganizationAccessDeniedException(body, context);
    const exception = new models_0_1.OrganizationAccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_OrganizationAllFeaturesNotEnabledExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_OrganizationAllFeaturesNotEnabledException(body, context);
    const exception = new models_1_1.OrganizationAllFeaturesNotEnabledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_OrganizationConformancePackTemplateValidationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_OrganizationConformancePackTemplateValidationException(body, context);
    const exception = new models_1_1.OrganizationConformancePackTemplateValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_OversizedConfigurationItemExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_OversizedConfigurationItemException(body, context);
    const exception = new models_0_1.OversizedConfigurationItemException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_RemediationInProgressExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_RemediationInProgressException(body, context);
    const exception = new models_0_1.RemediationInProgressException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ResourceConcurrentModificationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_ResourceConcurrentModificationException(body, context);
    const exception = new models_1_1.ResourceConcurrentModificationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ResourceInUseExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_ResourceInUseException(body, context);
    const exception = new models_0_1.ResourceInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ResourceNotDiscoveredExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_ResourceNotDiscoveredException(body, context);
    const exception = new models_0_1.ResourceNotDiscoveredException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_ResourceNotFoundException(body, context);
    const exception = new models_0_1.ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_TooManyTagsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_TooManyTagsException(body, context);
    const exception = new models_1_1.TooManyTagsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_ValidationException(body, context);
    const exception = new models_0_1.ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const se_AccountAggregationSource = (input, context) => {
    return {
        ...(input.AccountIds != null && { AccountIds: se_AccountAggregationSourceAccountList(input.AccountIds, context) }),
        ...(input.AllAwsRegions != null && { AllAwsRegions: input.AllAwsRegions }),
        ...(input.AwsRegions != null && { AwsRegions: se_AggregatorRegionList(input.AwsRegions, context) }),
    };
};
const se_AccountAggregationSourceAccountList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_AccountAggregationSourceList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_AccountAggregationSource(entry, context);
    });
};
const se_AggregateConformancePackComplianceFilters = (input, context) => {
    return {
        ...(input.AccountId != null && { AccountId: input.AccountId }),
        ...(input.AwsRegion != null && { AwsRegion: input.AwsRegion }),
        ...(input.ComplianceType != null && { ComplianceType: input.ComplianceType }),
        ...(input.ConformancePackName != null && { ConformancePackName: input.ConformancePackName }),
    };
};
const se_AggregateConformancePackComplianceSummaryFilters = (input, context) => {
    return {
        ...(input.AccountId != null && { AccountId: input.AccountId }),
        ...(input.AwsRegion != null && { AwsRegion: input.AwsRegion }),
    };
};
const se_AggregatedSourceStatusTypeList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_AggregateResourceIdentifier = (input, context) => {
    return {
        ...(input.ResourceId != null && { ResourceId: input.ResourceId }),
        ...(input.ResourceName != null && { ResourceName: input.ResourceName }),
        ...(input.ResourceType != null && { ResourceType: input.ResourceType }),
        ...(input.SourceAccountId != null && { SourceAccountId: input.SourceAccountId }),
        ...(input.SourceRegion != null && { SourceRegion: input.SourceRegion }),
    };
};
const se_AggregatorRegionList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_BatchGetAggregateResourceConfigRequest = (input, context) => {
    return {
        ...(input.ConfigurationAggregatorName != null && {
            ConfigurationAggregatorName: input.ConfigurationAggregatorName,
        }),
        ...(input.ResourceIdentifiers != null && {
            ResourceIdentifiers: se_ResourceIdentifiersList(input.ResourceIdentifiers, context),
        }),
    };
};
const se_BatchGetResourceConfigRequest = (input, context) => {
    return {
        ...(input.resourceKeys != null && { resourceKeys: se_ResourceKeys(input.resourceKeys, context) }),
    };
};
const se_ComplianceResourceTypes = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_ComplianceTypes = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_ConfigRule = (input, context) => {
    return {
        ...(input.ConfigRuleArn != null && { ConfigRuleArn: input.ConfigRuleArn }),
        ...(input.ConfigRuleId != null && { ConfigRuleId: input.ConfigRuleId }),
        ...(input.ConfigRuleName != null && { ConfigRuleName: input.ConfigRuleName }),
        ...(input.ConfigRuleState != null && { ConfigRuleState: input.ConfigRuleState }),
        ...(input.CreatedBy != null && { CreatedBy: input.CreatedBy }),
        ...(input.Description != null && { Description: input.Description }),
        ...(input.EvaluationModes != null && { EvaluationModes: se_EvaluationModes(input.EvaluationModes, context) }),
        ...(input.InputParameters != null && { InputParameters: input.InputParameters }),
        ...(input.MaximumExecutionFrequency != null && { MaximumExecutionFrequency: input.MaximumExecutionFrequency }),
        ...(input.Scope != null && { Scope: se_Scope(input.Scope, context) }),
        ...(input.Source != null && { Source: se_Source(input.Source, context) }),
    };
};
const se_ConfigRuleComplianceFilters = (input, context) => {
    return {
        ...(input.AccountId != null && { AccountId: input.AccountId }),
        ...(input.AwsRegion != null && { AwsRegion: input.AwsRegion }),
        ...(input.ComplianceType != null && { ComplianceType: input.ComplianceType }),
        ...(input.ConfigRuleName != null && { ConfigRuleName: input.ConfigRuleName }),
    };
};
const se_ConfigRuleComplianceSummaryFilters = (input, context) => {
    return {
        ...(input.AccountId != null && { AccountId: input.AccountId }),
        ...(input.AwsRegion != null && { AwsRegion: input.AwsRegion }),
    };
};
const se_ConfigRuleNames = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_ConfigSnapshotDeliveryProperties = (input, context) => {
    return {
        ...(input.deliveryFrequency != null && { deliveryFrequency: input.deliveryFrequency }),
    };
};
const se_ConfigurationAggregatorNameList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_ConfigurationRecorder = (input, context) => {
    return {
        ...(input.name != null && { name: input.name }),
        ...(input.recordingGroup != null && { recordingGroup: se_RecordingGroup(input.recordingGroup, context) }),
        ...(input.roleARN != null && { roleARN: input.roleARN }),
    };
};
const se_ConfigurationRecorderNameList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_ConformancePackComplianceFilters = (input, context) => {
    return {
        ...(input.ComplianceType != null && { ComplianceType: input.ComplianceType }),
        ...(input.ConfigRuleNames != null && {
            ConfigRuleNames: se_ConformancePackConfigRuleNames(input.ConfigRuleNames, context),
        }),
    };
};
const se_ConformancePackComplianceResourceIds = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_ConformancePackComplianceScoresFilters = (input, context) => {
    return {
        ...(input.ConformancePackNames != null && {
            ConformancePackNames: se_ConformancePackNameFilter(input.ConformancePackNames, context),
        }),
    };
};
const se_ConformancePackConfigRuleNames = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_ConformancePackEvaluationFilters = (input, context) => {
    return {
        ...(input.ComplianceType != null && { ComplianceType: input.ComplianceType }),
        ...(input.ConfigRuleNames != null && {
            ConfigRuleNames: se_ConformancePackConfigRuleNames(input.ConfigRuleNames, context),
        }),
        ...(input.ResourceIds != null && {
            ResourceIds: se_ConformancePackComplianceResourceIds(input.ResourceIds, context),
        }),
        ...(input.ResourceType != null && { ResourceType: input.ResourceType }),
    };
};
const se_ConformancePackInputParameter = (input, context) => {
    return {
        ...(input.ParameterName != null && { ParameterName: input.ParameterName }),
        ...(input.ParameterValue != null && { ParameterValue: input.ParameterValue }),
    };
};
const se_ConformancePackInputParameters = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ConformancePackInputParameter(entry, context);
    });
};
const se_ConformancePackNameFilter = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_ConformancePackNamesList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_ConformancePackNamesToSummarizeList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_CustomPolicyDetails = (input, context) => {
    return {
        ...(input.EnableDebugLogDelivery != null && { EnableDebugLogDelivery: input.EnableDebugLogDelivery }),
        ...(input.PolicyRuntime != null && { PolicyRuntime: input.PolicyRuntime }),
        ...(input.PolicyText != null && { PolicyText: input.PolicyText }),
    };
};
const se_DebugLogDeliveryAccounts = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_DeleteAggregationAuthorizationRequest = (input, context) => {
    return {
        ...(input.AuthorizedAccountId != null && { AuthorizedAccountId: input.AuthorizedAccountId }),
        ...(input.AuthorizedAwsRegion != null && { AuthorizedAwsRegion: input.AuthorizedAwsRegion }),
    };
};
const se_DeleteConfigRuleRequest = (input, context) => {
    return {
        ...(input.ConfigRuleName != null && { ConfigRuleName: input.ConfigRuleName }),
    };
};
const se_DeleteConfigurationAggregatorRequest = (input, context) => {
    return {
        ...(input.ConfigurationAggregatorName != null && {
            ConfigurationAggregatorName: input.ConfigurationAggregatorName,
        }),
    };
};
const se_DeleteConfigurationRecorderRequest = (input, context) => {
    return {
        ...(input.ConfigurationRecorderName != null && { ConfigurationRecorderName: input.ConfigurationRecorderName }),
    };
};
const se_DeleteConformancePackRequest = (input, context) => {
    return {
        ...(input.ConformancePackName != null && { ConformancePackName: input.ConformancePackName }),
    };
};
const se_DeleteDeliveryChannelRequest = (input, context) => {
    return {
        ...(input.DeliveryChannelName != null && { DeliveryChannelName: input.DeliveryChannelName }),
    };
};
const se_DeleteEvaluationResultsRequest = (input, context) => {
    return {
        ...(input.ConfigRuleName != null && { ConfigRuleName: input.ConfigRuleName }),
    };
};
const se_DeleteOrganizationConfigRuleRequest = (input, context) => {
    return {
        ...(input.OrganizationConfigRuleName != null && { OrganizationConfigRuleName: input.OrganizationConfigRuleName }),
    };
};
const se_DeleteOrganizationConformancePackRequest = (input, context) => {
    return {
        ...(input.OrganizationConformancePackName != null && {
            OrganizationConformancePackName: input.OrganizationConformancePackName,
        }),
    };
};
const se_DeletePendingAggregationRequestRequest = (input, context) => {
    return {
        ...(input.RequesterAccountId != null && { RequesterAccountId: input.RequesterAccountId }),
        ...(input.RequesterAwsRegion != null && { RequesterAwsRegion: input.RequesterAwsRegion }),
    };
};
const se_DeleteRemediationConfigurationRequest = (input, context) => {
    return {
        ...(input.ConfigRuleName != null && { ConfigRuleName: input.ConfigRuleName }),
        ...(input.ResourceType != null && { ResourceType: input.ResourceType }),
    };
};
const se_DeleteRemediationExceptionsRequest = (input, context) => {
    return {
        ...(input.ConfigRuleName != null && { ConfigRuleName: input.ConfigRuleName }),
        ...(input.ResourceKeys != null && {
            ResourceKeys: se_RemediationExceptionResourceKeys(input.ResourceKeys, context),
        }),
    };
};
const se_DeleteResourceConfigRequest = (input, context) => {
    return {
        ...(input.ResourceId != null && { ResourceId: input.ResourceId }),
        ...(input.ResourceType != null && { ResourceType: input.ResourceType }),
    };
};
const se_DeleteRetentionConfigurationRequest = (input, context) => {
    return {
        ...(input.RetentionConfigurationName != null && { RetentionConfigurationName: input.RetentionConfigurationName }),
    };
};
const se_DeleteStoredQueryRequest = (input, context) => {
    return {
        ...(input.QueryName != null && { QueryName: input.QueryName }),
    };
};
const se_DeliverConfigSnapshotRequest = (input, context) => {
    return {
        ...(input.deliveryChannelName != null && { deliveryChannelName: input.deliveryChannelName }),
    };
};
const se_DeliveryChannel = (input, context) => {
    return {
        ...(input.configSnapshotDeliveryProperties != null && {
            configSnapshotDeliveryProperties: se_ConfigSnapshotDeliveryProperties(input.configSnapshotDeliveryProperties, context),
        }),
        ...(input.name != null && { name: input.name }),
        ...(input.s3BucketName != null && { s3BucketName: input.s3BucketName }),
        ...(input.s3KeyPrefix != null && { s3KeyPrefix: input.s3KeyPrefix }),
        ...(input.s3KmsKeyArn != null && { s3KmsKeyArn: input.s3KmsKeyArn }),
        ...(input.snsTopicARN != null && { snsTopicARN: input.snsTopicARN }),
    };
};
const se_DeliveryChannelNameList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_DescribeAggregateComplianceByConfigRulesRequest = (input, context) => {
    return {
        ...(input.ConfigurationAggregatorName != null && {
            ConfigurationAggregatorName: input.ConfigurationAggregatorName,
        }),
        ...(input.Filters != null && { Filters: se_ConfigRuleComplianceFilters(input.Filters, context) }),
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const se_DescribeAggregateComplianceByConformancePacksRequest = (input, context) => {
    return {
        ...(input.ConfigurationAggregatorName != null && {
            ConfigurationAggregatorName: input.ConfigurationAggregatorName,
        }),
        ...(input.Filters != null && { Filters: se_AggregateConformancePackComplianceFilters(input.Filters, context) }),
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const se_DescribeAggregationAuthorizationsRequest = (input, context) => {
    return {
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const se_DescribeComplianceByConfigRuleRequest = (input, context) => {
    return {
        ...(input.ComplianceTypes != null && { ComplianceTypes: se_ComplianceTypes(input.ComplianceTypes, context) }),
        ...(input.ConfigRuleNames != null && { ConfigRuleNames: se_ConfigRuleNames(input.ConfigRuleNames, context) }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const se_DescribeComplianceByResourceRequest = (input, context) => {
    return {
        ...(input.ComplianceTypes != null && { ComplianceTypes: se_ComplianceTypes(input.ComplianceTypes, context) }),
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
        ...(input.ResourceId != null && { ResourceId: input.ResourceId }),
        ...(input.ResourceType != null && { ResourceType: input.ResourceType }),
    };
};
const se_DescribeConfigRuleEvaluationStatusRequest = (input, context) => {
    return {
        ...(input.ConfigRuleNames != null && { ConfigRuleNames: se_ConfigRuleNames(input.ConfigRuleNames, context) }),
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const se_DescribeConfigRulesFilters = (input, context) => {
    return {
        ...(input.EvaluationMode != null && { EvaluationMode: input.EvaluationMode }),
    };
};
const se_DescribeConfigRulesRequest = (input, context) => {
    return {
        ...(input.ConfigRuleNames != null && { ConfigRuleNames: se_ConfigRuleNames(input.ConfigRuleNames, context) }),
        ...(input.Filters != null && { Filters: se_DescribeConfigRulesFilters(input.Filters, context) }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const se_DescribeConfigurationAggregatorSourcesStatusRequest = (input, context) => {
    return {
        ...(input.ConfigurationAggregatorName != null && {
            ConfigurationAggregatorName: input.ConfigurationAggregatorName,
        }),
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
        ...(input.UpdateStatus != null && { UpdateStatus: se_AggregatedSourceStatusTypeList(input.UpdateStatus, context) }),
    };
};
const se_DescribeConfigurationAggregatorsRequest = (input, context) => {
    return {
        ...(input.ConfigurationAggregatorNames != null && {
            ConfigurationAggregatorNames: se_ConfigurationAggregatorNameList(input.ConfigurationAggregatorNames, context),
        }),
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const se_DescribeConfigurationRecordersRequest = (input, context) => {
    return {
        ...(input.ConfigurationRecorderNames != null && {
            ConfigurationRecorderNames: se_ConfigurationRecorderNameList(input.ConfigurationRecorderNames, context),
        }),
    };
};
const se_DescribeConfigurationRecorderStatusRequest = (input, context) => {
    return {
        ...(input.ConfigurationRecorderNames != null && {
            ConfigurationRecorderNames: se_ConfigurationRecorderNameList(input.ConfigurationRecorderNames, context),
        }),
    };
};
const se_DescribeConformancePackComplianceRequest = (input, context) => {
    return {
        ...(input.ConformancePackName != null && { ConformancePackName: input.ConformancePackName }),
        ...(input.Filters != null && { Filters: se_ConformancePackComplianceFilters(input.Filters, context) }),
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const se_DescribeConformancePacksRequest = (input, context) => {
    return {
        ...(input.ConformancePackNames != null && {
            ConformancePackNames: se_ConformancePackNamesList(input.ConformancePackNames, context),
        }),
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const se_DescribeConformancePackStatusRequest = (input, context) => {
    return {
        ...(input.ConformancePackNames != null && {
            ConformancePackNames: se_ConformancePackNamesList(input.ConformancePackNames, context),
        }),
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const se_DescribeDeliveryChannelsRequest = (input, context) => {
    return {
        ...(input.DeliveryChannelNames != null && {
            DeliveryChannelNames: se_DeliveryChannelNameList(input.DeliveryChannelNames, context),
        }),
    };
};
const se_DescribeDeliveryChannelStatusRequest = (input, context) => {
    return {
        ...(input.DeliveryChannelNames != null && {
            DeliveryChannelNames: se_DeliveryChannelNameList(input.DeliveryChannelNames, context),
        }),
    };
};
const se_DescribeOrganizationConfigRulesRequest = (input, context) => {
    return {
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
        ...(input.OrganizationConfigRuleNames != null && {
            OrganizationConfigRuleNames: se_OrganizationConfigRuleNames(input.OrganizationConfigRuleNames, context),
        }),
    };
};
const se_DescribeOrganizationConfigRuleStatusesRequest = (input, context) => {
    return {
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
        ...(input.OrganizationConfigRuleNames != null && {
            OrganizationConfigRuleNames: se_OrganizationConfigRuleNames(input.OrganizationConfigRuleNames, context),
        }),
    };
};
const se_DescribeOrganizationConformancePacksRequest = (input, context) => {
    return {
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
        ...(input.OrganizationConformancePackNames != null && {
            OrganizationConformancePackNames: se_OrganizationConformancePackNames(input.OrganizationConformancePackNames, context),
        }),
    };
};
const se_DescribeOrganizationConformancePackStatusesRequest = (input, context) => {
    return {
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
        ...(input.OrganizationConformancePackNames != null && {
            OrganizationConformancePackNames: se_OrganizationConformancePackNames(input.OrganizationConformancePackNames, context),
        }),
    };
};
const se_DescribePendingAggregationRequestsRequest = (input, context) => {
    return {
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const se_DescribeRemediationConfigurationsRequest = (input, context) => {
    return {
        ...(input.ConfigRuleNames != null && { ConfigRuleNames: se_ConfigRuleNames(input.ConfigRuleNames, context) }),
    };
};
const se_DescribeRemediationExceptionsRequest = (input, context) => {
    return {
        ...(input.ConfigRuleName != null && { ConfigRuleName: input.ConfigRuleName }),
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
        ...(input.ResourceKeys != null && {
            ResourceKeys: se_RemediationExceptionResourceKeys(input.ResourceKeys, context),
        }),
    };
};
const se_DescribeRemediationExecutionStatusRequest = (input, context) => {
    return {
        ...(input.ConfigRuleName != null && { ConfigRuleName: input.ConfigRuleName }),
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
        ...(input.ResourceKeys != null && { ResourceKeys: se_ResourceKeys(input.ResourceKeys, context) }),
    };
};
const se_DescribeRetentionConfigurationsRequest = (input, context) => {
    return {
        ...(input.NextToken != null && { NextToken: input.NextToken }),
        ...(input.RetentionConfigurationNames != null && {
            RetentionConfigurationNames: se_RetentionConfigurationNameList(input.RetentionConfigurationNames, context),
        }),
    };
};
const se_Evaluation = (input, context) => {
    return {
        ...(input.Annotation != null && { Annotation: input.Annotation }),
        ...(input.ComplianceResourceId != null && { ComplianceResourceId: input.ComplianceResourceId }),
        ...(input.ComplianceResourceType != null && { ComplianceResourceType: input.ComplianceResourceType }),
        ...(input.ComplianceType != null && { ComplianceType: input.ComplianceType }),
        ...(input.OrderingTimestamp != null && { OrderingTimestamp: Math.round(input.OrderingTimestamp.getTime() / 1000) }),
    };
};
const se_EvaluationContext = (input, context) => {
    return {
        ...(input.EvaluationContextIdentifier != null && {
            EvaluationContextIdentifier: input.EvaluationContextIdentifier,
        }),
    };
};
const se_EvaluationModeConfiguration = (input, context) => {
    return {
        ...(input.Mode != null && { Mode: input.Mode }),
    };
};
const se_EvaluationModes = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_EvaluationModeConfiguration(entry, context);
    });
};
const se_Evaluations = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_Evaluation(entry, context);
    });
};
const se_ExcludedAccounts = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_ExecutionControls = (input, context) => {
    return {
        ...(input.SsmControls != null && { SsmControls: se_SsmControls(input.SsmControls, context) }),
    };
};
const se_ExternalEvaluation = (input, context) => {
    return {
        ...(input.Annotation != null && { Annotation: input.Annotation }),
        ...(input.ComplianceResourceId != null && { ComplianceResourceId: input.ComplianceResourceId }),
        ...(input.ComplianceResourceType != null && { ComplianceResourceType: input.ComplianceResourceType }),
        ...(input.ComplianceType != null && { ComplianceType: input.ComplianceType }),
        ...(input.OrderingTimestamp != null && { OrderingTimestamp: Math.round(input.OrderingTimestamp.getTime() / 1000) }),
    };
};
const se_GetAggregateComplianceDetailsByConfigRuleRequest = (input, context) => {
    return {
        ...(input.AccountId != null && { AccountId: input.AccountId }),
        ...(input.AwsRegion != null && { AwsRegion: input.AwsRegion }),
        ...(input.ComplianceType != null && { ComplianceType: input.ComplianceType }),
        ...(input.ConfigRuleName != null && { ConfigRuleName: input.ConfigRuleName }),
        ...(input.ConfigurationAggregatorName != null && {
            ConfigurationAggregatorName: input.ConfigurationAggregatorName,
        }),
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const se_GetAggregateConfigRuleComplianceSummaryRequest = (input, context) => {
    return {
        ...(input.ConfigurationAggregatorName != null && {
            ConfigurationAggregatorName: input.ConfigurationAggregatorName,
        }),
        ...(input.Filters != null && { Filters: se_ConfigRuleComplianceSummaryFilters(input.Filters, context) }),
        ...(input.GroupByKey != null && { GroupByKey: input.GroupByKey }),
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const se_GetAggregateConformancePackComplianceSummaryRequest = (input, context) => {
    return {
        ...(input.ConfigurationAggregatorName != null && {
            ConfigurationAggregatorName: input.ConfigurationAggregatorName,
        }),
        ...(input.Filters != null && {
            Filters: se_AggregateConformancePackComplianceSummaryFilters(input.Filters, context),
        }),
        ...(input.GroupByKey != null && { GroupByKey: input.GroupByKey }),
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const se_GetAggregateDiscoveredResourceCountsRequest = (input, context) => {
    return {
        ...(input.ConfigurationAggregatorName != null && {
            ConfigurationAggregatorName: input.ConfigurationAggregatorName,
        }),
        ...(input.Filters != null && { Filters: se_ResourceCountFilters(input.Filters, context) }),
        ...(input.GroupByKey != null && { GroupByKey: input.GroupByKey }),
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const se_GetAggregateResourceConfigRequest = (input, context) => {
    return {
        ...(input.ConfigurationAggregatorName != null && {
            ConfigurationAggregatorName: input.ConfigurationAggregatorName,
        }),
        ...(input.ResourceIdentifier != null && {
            ResourceIdentifier: se_AggregateResourceIdentifier(input.ResourceIdentifier, context),
        }),
    };
};
const se_GetComplianceDetailsByConfigRuleRequest = (input, context) => {
    return {
        ...(input.ComplianceTypes != null && { ComplianceTypes: se_ComplianceTypes(input.ComplianceTypes, context) }),
        ...(input.ConfigRuleName != null && { ConfigRuleName: input.ConfigRuleName }),
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const se_GetComplianceDetailsByResourceRequest = (input, context) => {
    return {
        ...(input.ComplianceTypes != null && { ComplianceTypes: se_ComplianceTypes(input.ComplianceTypes, context) }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
        ...(input.ResourceEvaluationId != null && { ResourceEvaluationId: input.ResourceEvaluationId }),
        ...(input.ResourceId != null && { ResourceId: input.ResourceId }),
        ...(input.ResourceType != null && { ResourceType: input.ResourceType }),
    };
};
const se_GetComplianceSummaryByResourceTypeRequest = (input, context) => {
    return {
        ...(input.ResourceTypes != null && { ResourceTypes: se_ResourceTypes(input.ResourceTypes, context) }),
    };
};
const se_GetConformancePackComplianceDetailsRequest = (input, context) => {
    return {
        ...(input.ConformancePackName != null && { ConformancePackName: input.ConformancePackName }),
        ...(input.Filters != null && { Filters: se_ConformancePackEvaluationFilters(input.Filters, context) }),
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const se_GetConformancePackComplianceSummaryRequest = (input, context) => {
    return {
        ...(input.ConformancePackNames != null && {
            ConformancePackNames: se_ConformancePackNamesToSummarizeList(input.ConformancePackNames, context),
        }),
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const se_GetCustomRulePolicyRequest = (input, context) => {
    return {
        ...(input.ConfigRuleName != null && { ConfigRuleName: input.ConfigRuleName }),
    };
};
const se_GetDiscoveredResourceCountsRequest = (input, context) => {
    return {
        ...(input.limit != null && { limit: input.limit }),
        ...(input.nextToken != null && { nextToken: input.nextToken }),
        ...(input.resourceTypes != null && { resourceTypes: se_ResourceTypes(input.resourceTypes, context) }),
    };
};
const se_GetOrganizationConfigRuleDetailedStatusRequest = (input, context) => {
    return {
        ...(input.Filters != null && { Filters: se_StatusDetailFilters(input.Filters, context) }),
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
        ...(input.OrganizationConfigRuleName != null && { OrganizationConfigRuleName: input.OrganizationConfigRuleName }),
    };
};
const se_GetOrganizationConformancePackDetailedStatusRequest = (input, context) => {
    return {
        ...(input.Filters != null && { Filters: se_OrganizationResourceDetailedStatusFilters(input.Filters, context) }),
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
        ...(input.OrganizationConformancePackName != null && {
            OrganizationConformancePackName: input.OrganizationConformancePackName,
        }),
    };
};
const se_GetOrganizationCustomRulePolicyRequest = (input, context) => {
    return {
        ...(input.OrganizationConfigRuleName != null && { OrganizationConfigRuleName: input.OrganizationConfigRuleName }),
    };
};
const se_GetResourceConfigHistoryRequest = (input, context) => {
    return {
        ...(input.chronologicalOrder != null && { chronologicalOrder: input.chronologicalOrder }),
        ...(input.earlierTime != null && { earlierTime: Math.round(input.earlierTime.getTime() / 1000) }),
        ...(input.laterTime != null && { laterTime: Math.round(input.laterTime.getTime() / 1000) }),
        ...(input.limit != null && { limit: input.limit }),
        ...(input.nextToken != null && { nextToken: input.nextToken }),
        ...(input.resourceId != null && { resourceId: input.resourceId }),
        ...(input.resourceType != null && { resourceType: input.resourceType }),
    };
};
const se_GetResourceEvaluationSummaryRequest = (input, context) => {
    return {
        ...(input.ResourceEvaluationId != null && { ResourceEvaluationId: input.ResourceEvaluationId }),
    };
};
const se_GetStoredQueryRequest = (input, context) => {
    return {
        ...(input.QueryName != null && { QueryName: input.QueryName }),
    };
};
const se_ListAggregateDiscoveredResourcesRequest = (input, context) => {
    return {
        ...(input.ConfigurationAggregatorName != null && {
            ConfigurationAggregatorName: input.ConfigurationAggregatorName,
        }),
        ...(input.Filters != null && { Filters: se_ResourceFilters(input.Filters, context) }),
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
        ...(input.ResourceType != null && { ResourceType: input.ResourceType }),
    };
};
const se_ListConformancePackComplianceScoresRequest = (input, context) => {
    return {
        ...(input.Filters != null && { Filters: se_ConformancePackComplianceScoresFilters(input.Filters, context) }),
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
        ...(input.SortBy != null && { SortBy: input.SortBy }),
        ...(input.SortOrder != null && { SortOrder: input.SortOrder }),
    };
};
const se_ListDiscoveredResourcesRequest = (input, context) => {
    return {
        ...(input.includeDeletedResources != null && { includeDeletedResources: input.includeDeletedResources }),
        ...(input.limit != null && { limit: input.limit }),
        ...(input.nextToken != null && { nextToken: input.nextToken }),
        ...(input.resourceIds != null && { resourceIds: se_ResourceIdList(input.resourceIds, context) }),
        ...(input.resourceName != null && { resourceName: input.resourceName }),
        ...(input.resourceType != null && { resourceType: input.resourceType }),
    };
};
const se_ListResourceEvaluationsRequest = (input, context) => {
    return {
        ...(input.Filters != null && { Filters: se_ResourceEvaluationFilters(input.Filters, context) }),
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const se_ListStoredQueriesRequest = (input, context) => {
    return {
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const se_ListTagsForResourceRequest = (input, context) => {
    return {
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
        ...(input.ResourceArn != null && { ResourceArn: input.ResourceArn }),
    };
};
const se_OrganizationAggregationSource = (input, context) => {
    return {
        ...(input.AllAwsRegions != null && { AllAwsRegions: input.AllAwsRegions }),
        ...(input.AwsRegions != null && { AwsRegions: se_AggregatorRegionList(input.AwsRegions, context) }),
        ...(input.RoleArn != null && { RoleArn: input.RoleArn }),
    };
};
const se_OrganizationConfigRuleNames = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_OrganizationConfigRuleTriggerTypeNoSNs = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_OrganizationConfigRuleTriggerTypes = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_OrganizationConformancePackNames = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_OrganizationCustomPolicyRuleMetadata = (input, context) => {
    return {
        ...(input.DebugLogDeliveryAccounts != null && {
            DebugLogDeliveryAccounts: se_DebugLogDeliveryAccounts(input.DebugLogDeliveryAccounts, context),
        }),
        ...(input.Description != null && { Description: input.Description }),
        ...(input.InputParameters != null && { InputParameters: input.InputParameters }),
        ...(input.MaximumExecutionFrequency != null && { MaximumExecutionFrequency: input.MaximumExecutionFrequency }),
        ...(input.OrganizationConfigRuleTriggerTypes != null && {
            OrganizationConfigRuleTriggerTypes: se_OrganizationConfigRuleTriggerTypeNoSNs(input.OrganizationConfigRuleTriggerTypes, context),
        }),
        ...(input.PolicyRuntime != null && { PolicyRuntime: input.PolicyRuntime }),
        ...(input.PolicyText != null && { PolicyText: input.PolicyText }),
        ...(input.ResourceIdScope != null && { ResourceIdScope: input.ResourceIdScope }),
        ...(input.ResourceTypesScope != null && {
            ResourceTypesScope: se_ResourceTypesScope(input.ResourceTypesScope, context),
        }),
        ...(input.TagKeyScope != null && { TagKeyScope: input.TagKeyScope }),
        ...(input.TagValueScope != null && { TagValueScope: input.TagValueScope }),
    };
};
const se_OrganizationCustomRuleMetadata = (input, context) => {
    return {
        ...(input.Description != null && { Description: input.Description }),
        ...(input.InputParameters != null && { InputParameters: input.InputParameters }),
        ...(input.LambdaFunctionArn != null && { LambdaFunctionArn: input.LambdaFunctionArn }),
        ...(input.MaximumExecutionFrequency != null && { MaximumExecutionFrequency: input.MaximumExecutionFrequency }),
        ...(input.OrganizationConfigRuleTriggerTypes != null && {
            OrganizationConfigRuleTriggerTypes: se_OrganizationConfigRuleTriggerTypes(input.OrganizationConfigRuleTriggerTypes, context),
        }),
        ...(input.ResourceIdScope != null && { ResourceIdScope: input.ResourceIdScope }),
        ...(input.ResourceTypesScope != null && {
            ResourceTypesScope: se_ResourceTypesScope(input.ResourceTypesScope, context),
        }),
        ...(input.TagKeyScope != null && { TagKeyScope: input.TagKeyScope }),
        ...(input.TagValueScope != null && { TagValueScope: input.TagValueScope }),
    };
};
const se_OrganizationManagedRuleMetadata = (input, context) => {
    return {
        ...(input.Description != null && { Description: input.Description }),
        ...(input.InputParameters != null && { InputParameters: input.InputParameters }),
        ...(input.MaximumExecutionFrequency != null && { MaximumExecutionFrequency: input.MaximumExecutionFrequency }),
        ...(input.ResourceIdScope != null && { ResourceIdScope: input.ResourceIdScope }),
        ...(input.ResourceTypesScope != null && {
            ResourceTypesScope: se_ResourceTypesScope(input.ResourceTypesScope, context),
        }),
        ...(input.RuleIdentifier != null && { RuleIdentifier: input.RuleIdentifier }),
        ...(input.TagKeyScope != null && { TagKeyScope: input.TagKeyScope }),
        ...(input.TagValueScope != null && { TagValueScope: input.TagValueScope }),
    };
};
const se_OrganizationResourceDetailedStatusFilters = (input, context) => {
    return {
        ...(input.AccountId != null && { AccountId: input.AccountId }),
        ...(input.Status != null && { Status: input.Status }),
    };
};
const se_PutAggregationAuthorizationRequest = (input, context) => {
    return {
        ...(input.AuthorizedAccountId != null && { AuthorizedAccountId: input.AuthorizedAccountId }),
        ...(input.AuthorizedAwsRegion != null && { AuthorizedAwsRegion: input.AuthorizedAwsRegion }),
        ...(input.Tags != null && { Tags: se_TagsList(input.Tags, context) }),
    };
};
const se_PutConfigRuleRequest = (input, context) => {
    return {
        ...(input.ConfigRule != null && { ConfigRule: se_ConfigRule(input.ConfigRule, context) }),
        ...(input.Tags != null && { Tags: se_TagsList(input.Tags, context) }),
    };
};
const se_PutConfigurationAggregatorRequest = (input, context) => {
    return {
        ...(input.AccountAggregationSources != null && {
            AccountAggregationSources: se_AccountAggregationSourceList(input.AccountAggregationSources, context),
        }),
        ...(input.ConfigurationAggregatorName != null && {
            ConfigurationAggregatorName: input.ConfigurationAggregatorName,
        }),
        ...(input.OrganizationAggregationSource != null && {
            OrganizationAggregationSource: se_OrganizationAggregationSource(input.OrganizationAggregationSource, context),
        }),
        ...(input.Tags != null && { Tags: se_TagsList(input.Tags, context) }),
    };
};
const se_PutConfigurationRecorderRequest = (input, context) => {
    return {
        ...(input.ConfigurationRecorder != null && {
            ConfigurationRecorder: se_ConfigurationRecorder(input.ConfigurationRecorder, context),
        }),
    };
};
const se_PutConformancePackRequest = (input, context) => {
    return {
        ...(input.ConformancePackInputParameters != null && {
            ConformancePackInputParameters: se_ConformancePackInputParameters(input.ConformancePackInputParameters, context),
        }),
        ...(input.ConformancePackName != null && { ConformancePackName: input.ConformancePackName }),
        ...(input.DeliveryS3Bucket != null && { DeliveryS3Bucket: input.DeliveryS3Bucket }),
        ...(input.DeliveryS3KeyPrefix != null && { DeliveryS3KeyPrefix: input.DeliveryS3KeyPrefix }),
        ...(input.TemplateBody != null && { TemplateBody: input.TemplateBody }),
        ...(input.TemplateS3Uri != null && { TemplateS3Uri: input.TemplateS3Uri }),
        ...(input.TemplateSSMDocumentDetails != null && {
            TemplateSSMDocumentDetails: se_TemplateSSMDocumentDetails(input.TemplateSSMDocumentDetails, context),
        }),
    };
};
const se_PutDeliveryChannelRequest = (input, context) => {
    return {
        ...(input.DeliveryChannel != null && { DeliveryChannel: se_DeliveryChannel(input.DeliveryChannel, context) }),
    };
};
const se_PutEvaluationsRequest = (input, context) => {
    return {
        ...(input.Evaluations != null && { Evaluations: se_Evaluations(input.Evaluations, context) }),
        ...(input.ResultToken != null && { ResultToken: input.ResultToken }),
        ...(input.TestMode != null && { TestMode: input.TestMode }),
    };
};
const se_PutExternalEvaluationRequest = (input, context) => {
    return {
        ...(input.ConfigRuleName != null && { ConfigRuleName: input.ConfigRuleName }),
        ...(input.ExternalEvaluation != null && {
            ExternalEvaluation: se_ExternalEvaluation(input.ExternalEvaluation, context),
        }),
    };
};
const se_PutOrganizationConfigRuleRequest = (input, context) => {
    return {
        ...(input.ExcludedAccounts != null && { ExcludedAccounts: se_ExcludedAccounts(input.ExcludedAccounts, context) }),
        ...(input.OrganizationConfigRuleName != null && { OrganizationConfigRuleName: input.OrganizationConfigRuleName }),
        ...(input.OrganizationCustomPolicyRuleMetadata != null && {
            OrganizationCustomPolicyRuleMetadata: se_OrganizationCustomPolicyRuleMetadata(input.OrganizationCustomPolicyRuleMetadata, context),
        }),
        ...(input.OrganizationCustomRuleMetadata != null && {
            OrganizationCustomRuleMetadata: se_OrganizationCustomRuleMetadata(input.OrganizationCustomRuleMetadata, context),
        }),
        ...(input.OrganizationManagedRuleMetadata != null && {
            OrganizationManagedRuleMetadata: se_OrganizationManagedRuleMetadata(input.OrganizationManagedRuleMetadata, context),
        }),
    };
};
const se_PutOrganizationConformancePackRequest = (input, context) => {
    return {
        ...(input.ConformancePackInputParameters != null && {
            ConformancePackInputParameters: se_ConformancePackInputParameters(input.ConformancePackInputParameters, context),
        }),
        ...(input.DeliveryS3Bucket != null && { DeliveryS3Bucket: input.DeliveryS3Bucket }),
        ...(input.DeliveryS3KeyPrefix != null && { DeliveryS3KeyPrefix: input.DeliveryS3KeyPrefix }),
        ...(input.ExcludedAccounts != null && { ExcludedAccounts: se_ExcludedAccounts(input.ExcludedAccounts, context) }),
        ...(input.OrganizationConformancePackName != null && {
            OrganizationConformancePackName: input.OrganizationConformancePackName,
        }),
        ...(input.TemplateBody != null && { TemplateBody: input.TemplateBody }),
        ...(input.TemplateS3Uri != null && { TemplateS3Uri: input.TemplateS3Uri }),
    };
};
const se_PutRemediationConfigurationsRequest = (input, context) => {
    return {
        ...(input.RemediationConfigurations != null && {
            RemediationConfigurations: se_RemediationConfigurations(input.RemediationConfigurations, context),
        }),
    };
};
const se_PutRemediationExceptionsRequest = (input, context) => {
    return {
        ...(input.ConfigRuleName != null && { ConfigRuleName: input.ConfigRuleName }),
        ...(input.ExpirationTime != null && { ExpirationTime: Math.round(input.ExpirationTime.getTime() / 1000) }),
        ...(input.Message != null && { Message: input.Message }),
        ...(input.ResourceKeys != null && {
            ResourceKeys: se_RemediationExceptionResourceKeys(input.ResourceKeys, context),
        }),
    };
};
const se_PutResourceConfigRequest = (input, context) => {
    return {
        ...(input.Configuration != null && { Configuration: input.Configuration }),
        ...(input.ResourceId != null && { ResourceId: input.ResourceId }),
        ...(input.ResourceName != null && { ResourceName: input.ResourceName }),
        ...(input.ResourceType != null && { ResourceType: input.ResourceType }),
        ...(input.SchemaVersionId != null && { SchemaVersionId: input.SchemaVersionId }),
        ...(input.Tags != null && { Tags: se_Tags(input.Tags, context) }),
    };
};
const se_PutRetentionConfigurationRequest = (input, context) => {
    return {
        ...(input.RetentionPeriodInDays != null && { RetentionPeriodInDays: input.RetentionPeriodInDays }),
    };
};
const se_PutStoredQueryRequest = (input, context) => {
    return {
        ...(input.StoredQuery != null && { StoredQuery: se_StoredQuery(input.StoredQuery, context) }),
        ...(input.Tags != null && { Tags: se_TagsList(input.Tags, context) }),
    };
};
const se_RecordingGroup = (input, context) => {
    return {
        ...(input.allSupported != null && { allSupported: input.allSupported }),
        ...(input.includeGlobalResourceTypes != null && { includeGlobalResourceTypes: input.includeGlobalResourceTypes }),
        ...(input.resourceTypes != null && { resourceTypes: se_ResourceTypeList(input.resourceTypes, context) }),
    };
};
const se_ReevaluateConfigRuleNames = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_RemediationConfiguration = (input, context) => {
    return {
        ...(input.Arn != null && { Arn: input.Arn }),
        ...(input.Automatic != null && { Automatic: input.Automatic }),
        ...(input.ConfigRuleName != null && { ConfigRuleName: input.ConfigRuleName }),
        ...(input.CreatedByService != null && { CreatedByService: input.CreatedByService }),
        ...(input.ExecutionControls != null && {
            ExecutionControls: se_ExecutionControls(input.ExecutionControls, context),
        }),
        ...(input.MaximumAutomaticAttempts != null && { MaximumAutomaticAttempts: input.MaximumAutomaticAttempts }),
        ...(input.Parameters != null && { Parameters: se_RemediationParameters(input.Parameters, context) }),
        ...(input.ResourceType != null && { ResourceType: input.ResourceType }),
        ...(input.RetryAttemptSeconds != null && { RetryAttemptSeconds: input.RetryAttemptSeconds }),
        ...(input.TargetId != null && { TargetId: input.TargetId }),
        ...(input.TargetType != null && { TargetType: input.TargetType }),
        ...(input.TargetVersion != null && { TargetVersion: input.TargetVersion }),
    };
};
const se_RemediationConfigurations = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_RemediationConfiguration(entry, context);
    });
};
const se_RemediationExceptionResourceKey = (input, context) => {
    return {
        ...(input.ResourceId != null && { ResourceId: input.ResourceId }),
        ...(input.ResourceType != null && { ResourceType: input.ResourceType }),
    };
};
const se_RemediationExceptionResourceKeys = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_RemediationExceptionResourceKey(entry, context);
    });
};
const se_RemediationParameters = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = se_RemediationParameterValue(value, context);
        return acc;
    }, {});
};
const se_RemediationParameterValue = (input, context) => {
    return {
        ...(input.ResourceValue != null && { ResourceValue: se_ResourceValue(input.ResourceValue, context) }),
        ...(input.StaticValue != null && { StaticValue: se_StaticValue(input.StaticValue, context) }),
    };
};
const se_ResourceCountFilters = (input, context) => {
    return {
        ...(input.AccountId != null && { AccountId: input.AccountId }),
        ...(input.Region != null && { Region: input.Region }),
        ...(input.ResourceType != null && { ResourceType: input.ResourceType }),
    };
};
const se_ResourceDetails = (input, context) => {
    return {
        ...(input.ResourceConfiguration != null && { ResourceConfiguration: input.ResourceConfiguration }),
        ...(input.ResourceConfigurationSchemaType != null && {
            ResourceConfigurationSchemaType: input.ResourceConfigurationSchemaType,
        }),
        ...(input.ResourceId != null && { ResourceId: input.ResourceId }),
        ...(input.ResourceType != null && { ResourceType: input.ResourceType }),
    };
};
const se_ResourceEvaluationFilters = (input, context) => {
    return {
        ...(input.EvaluationContextIdentifier != null && {
            EvaluationContextIdentifier: input.EvaluationContextIdentifier,
        }),
        ...(input.EvaluationMode != null && { EvaluationMode: input.EvaluationMode }),
        ...(input.TimeWindow != null && { TimeWindow: se_TimeWindow(input.TimeWindow, context) }),
    };
};
const se_ResourceFilters = (input, context) => {
    return {
        ...(input.AccountId != null && { AccountId: input.AccountId }),
        ...(input.Region != null && { Region: input.Region }),
        ...(input.ResourceId != null && { ResourceId: input.ResourceId }),
        ...(input.ResourceName != null && { ResourceName: input.ResourceName }),
    };
};
const se_ResourceIdentifiersList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_AggregateResourceIdentifier(entry, context);
    });
};
const se_ResourceIdList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_ResourceKey = (input, context) => {
    return {
        ...(input.resourceId != null && { resourceId: input.resourceId }),
        ...(input.resourceType != null && { resourceType: input.resourceType }),
    };
};
const se_ResourceKeys = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ResourceKey(entry, context);
    });
};
const se_ResourceTypeList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_ResourceTypes = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_ResourceTypesScope = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_ResourceValue = (input, context) => {
    return {
        ...(input.Value != null && { Value: input.Value }),
    };
};
const se_RetentionConfigurationNameList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_Scope = (input, context) => {
    return {
        ...(input.ComplianceResourceId != null && { ComplianceResourceId: input.ComplianceResourceId }),
        ...(input.ComplianceResourceTypes != null && {
            ComplianceResourceTypes: se_ComplianceResourceTypes(input.ComplianceResourceTypes, context),
        }),
        ...(input.TagKey != null && { TagKey: input.TagKey }),
        ...(input.TagValue != null && { TagValue: input.TagValue }),
    };
};
const se_SelectAggregateResourceConfigRequest = (input, context) => {
    return {
        ...(input.ConfigurationAggregatorName != null && {
            ConfigurationAggregatorName: input.ConfigurationAggregatorName,
        }),
        ...(input.Expression != null && { Expression: input.Expression }),
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const se_SelectResourceConfigRequest = (input, context) => {
    return {
        ...(input.Expression != null && { Expression: input.Expression }),
        ...(input.Limit != null && { Limit: input.Limit }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const se_Source = (input, context) => {
    return {
        ...(input.CustomPolicyDetails != null && {
            CustomPolicyDetails: se_CustomPolicyDetails(input.CustomPolicyDetails, context),
        }),
        ...(input.Owner != null && { Owner: input.Owner }),
        ...(input.SourceDetails != null && { SourceDetails: se_SourceDetails(input.SourceDetails, context) }),
        ...(input.SourceIdentifier != null && { SourceIdentifier: input.SourceIdentifier }),
    };
};
const se_SourceDetail = (input, context) => {
    return {
        ...(input.EventSource != null && { EventSource: input.EventSource }),
        ...(input.MaximumExecutionFrequency != null && { MaximumExecutionFrequency: input.MaximumExecutionFrequency }),
        ...(input.MessageType != null && { MessageType: input.MessageType }),
    };
};
const se_SourceDetails = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_SourceDetail(entry, context);
    });
};
const se_SsmControls = (input, context) => {
    return {
        ...(input.ConcurrentExecutionRatePercentage != null && {
            ConcurrentExecutionRatePercentage: input.ConcurrentExecutionRatePercentage,
        }),
        ...(input.ErrorPercentage != null && { ErrorPercentage: input.ErrorPercentage }),
    };
};
const se_StartConfigRulesEvaluationRequest = (input, context) => {
    return {
        ...(input.ConfigRuleNames != null && {
            ConfigRuleNames: se_ReevaluateConfigRuleNames(input.ConfigRuleNames, context),
        }),
    };
};
const se_StartConfigurationRecorderRequest = (input, context) => {
    return {
        ...(input.ConfigurationRecorderName != null && { ConfigurationRecorderName: input.ConfigurationRecorderName }),
    };
};
const se_StartRemediationExecutionRequest = (input, context) => {
    return {
        ...(input.ConfigRuleName != null && { ConfigRuleName: input.ConfigRuleName }),
        ...(input.ResourceKeys != null && { ResourceKeys: se_ResourceKeys(input.ResourceKeys, context) }),
    };
};
const se_StartResourceEvaluationRequest = (input, context) => {
    return {
        ...(input.ClientToken != null && { ClientToken: input.ClientToken }),
        ...(input.EvaluationContext != null && {
            EvaluationContext: se_EvaluationContext(input.EvaluationContext, context),
        }),
        ...(input.EvaluationMode != null && { EvaluationMode: input.EvaluationMode }),
        ...(input.EvaluationTimeout != null && { EvaluationTimeout: input.EvaluationTimeout }),
        ...(input.ResourceDetails != null && { ResourceDetails: se_ResourceDetails(input.ResourceDetails, context) }),
    };
};
const se_StaticParameterValues = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_StaticValue = (input, context) => {
    return {
        ...(input.Values != null && { Values: se_StaticParameterValues(input.Values, context) }),
    };
};
const se_StatusDetailFilters = (input, context) => {
    return {
        ...(input.AccountId != null && { AccountId: input.AccountId }),
        ...(input.MemberAccountRuleStatus != null && { MemberAccountRuleStatus: input.MemberAccountRuleStatus }),
    };
};
const se_StopConfigurationRecorderRequest = (input, context) => {
    return {
        ...(input.ConfigurationRecorderName != null && { ConfigurationRecorderName: input.ConfigurationRecorderName }),
    };
};
const se_StoredQuery = (input, context) => {
    return {
        ...(input.Description != null && { Description: input.Description }),
        ...(input.Expression != null && { Expression: input.Expression }),
        ...(input.QueryArn != null && { QueryArn: input.QueryArn }),
        ...(input.QueryId != null && { QueryId: input.QueryId }),
        ...(input.QueryName != null && { QueryName: input.QueryName }),
    };
};
const se_Tag = (input, context) => {
    return {
        ...(input.Key != null && { Key: input.Key }),
        ...(input.Value != null && { Value: input.Value }),
    };
};
const se_TagKeyList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_TagList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_Tag(entry, context);
    });
};
const se_TagResourceRequest = (input, context) => {
    return {
        ...(input.ResourceArn != null && { ResourceArn: input.ResourceArn }),
        ...(input.Tags != null && { Tags: se_TagList(input.Tags, context) }),
    };
};
const se_Tags = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = value;
        return acc;
    }, {});
};
const se_TagsList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_Tag(entry, context);
    });
};
const se_TemplateSSMDocumentDetails = (input, context) => {
    return {
        ...(input.DocumentName != null && { DocumentName: input.DocumentName }),
        ...(input.DocumentVersion != null && { DocumentVersion: input.DocumentVersion }),
    };
};
const se_TimeWindow = (input, context) => {
    return {
        ...(input.EndTime != null && { EndTime: Math.round(input.EndTime.getTime() / 1000) }),
        ...(input.StartTime != null && { StartTime: Math.round(input.StartTime.getTime() / 1000) }),
    };
};
const se_UntagResourceRequest = (input, context) => {
    return {
        ...(input.ResourceArn != null && { ResourceArn: input.ResourceArn }),
        ...(input.TagKeys != null && { TagKeys: se_TagKeyList(input.TagKeys, context) }),
    };
};
const de_AccountAggregationSource = (output, context) => {
    return {
        AccountIds: output.AccountIds != null ? de_AccountAggregationSourceAccountList(output.AccountIds, context) : undefined,
        AllAwsRegions: (0, smithy_client_1.expectBoolean)(output.AllAwsRegions),
        AwsRegions: output.AwsRegions != null ? de_AggregatorRegionList(output.AwsRegions, context) : undefined,
    };
};
const de_AccountAggregationSourceAccountList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const de_AccountAggregationSourceList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_AccountAggregationSource(entry, context);
    });
    return retVal;
};
const de_AggregateComplianceByConfigRule = (output, context) => {
    return {
        AccountId: (0, smithy_client_1.expectString)(output.AccountId),
        AwsRegion: (0, smithy_client_1.expectString)(output.AwsRegion),
        Compliance: output.Compliance != null ? de_Compliance(output.Compliance, context) : undefined,
        ConfigRuleName: (0, smithy_client_1.expectString)(output.ConfigRuleName),
    };
};
const de_AggregateComplianceByConfigRuleList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_AggregateComplianceByConfigRule(entry, context);
    });
    return retVal;
};
const de_AggregateComplianceByConformancePack = (output, context) => {
    return {
        AccountId: (0, smithy_client_1.expectString)(output.AccountId),
        AwsRegion: (0, smithy_client_1.expectString)(output.AwsRegion),
        Compliance: output.Compliance != null ? de_AggregateConformancePackCompliance(output.Compliance, context) : undefined,
        ConformancePackName: (0, smithy_client_1.expectString)(output.ConformancePackName),
    };
};
const de_AggregateComplianceByConformancePackList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_AggregateComplianceByConformancePack(entry, context);
    });
    return retVal;
};
const de_AggregateComplianceCount = (output, context) => {
    return {
        ComplianceSummary: output.ComplianceSummary != null ? de_ComplianceSummary(output.ComplianceSummary, context) : undefined,
        GroupName: (0, smithy_client_1.expectString)(output.GroupName),
    };
};
const de_AggregateComplianceCountList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_AggregateComplianceCount(entry, context);
    });
    return retVal;
};
const de_AggregateConformancePackCompliance = (output, context) => {
    return {
        ComplianceType: (0, smithy_client_1.expectString)(output.ComplianceType),
        CompliantRuleCount: (0, smithy_client_1.expectInt32)(output.CompliantRuleCount),
        NonCompliantRuleCount: (0, smithy_client_1.expectInt32)(output.NonCompliantRuleCount),
        TotalRuleCount: (0, smithy_client_1.expectInt32)(output.TotalRuleCount),
    };
};
const de_AggregateConformancePackComplianceCount = (output, context) => {
    return {
        CompliantConformancePackCount: (0, smithy_client_1.expectInt32)(output.CompliantConformancePackCount),
        NonCompliantConformancePackCount: (0, smithy_client_1.expectInt32)(output.NonCompliantConformancePackCount),
    };
};
const de_AggregateConformancePackComplianceSummary = (output, context) => {
    return {
        ComplianceSummary: output.ComplianceSummary != null
            ? de_AggregateConformancePackComplianceCount(output.ComplianceSummary, context)
            : undefined,
        GroupName: (0, smithy_client_1.expectString)(output.GroupName),
    };
};
const de_AggregateConformancePackComplianceSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_AggregateConformancePackComplianceSummary(entry, context);
    });
    return retVal;
};
const de_AggregatedSourceStatus = (output, context) => {
    return {
        AwsRegion: (0, smithy_client_1.expectString)(output.AwsRegion),
        LastErrorCode: (0, smithy_client_1.expectString)(output.LastErrorCode),
        LastErrorMessage: (0, smithy_client_1.expectString)(output.LastErrorMessage),
        LastUpdateStatus: (0, smithy_client_1.expectString)(output.LastUpdateStatus),
        LastUpdateTime: output.LastUpdateTime != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastUpdateTime)))
            : undefined,
        SourceId: (0, smithy_client_1.expectString)(output.SourceId),
        SourceType: (0, smithy_client_1.expectString)(output.SourceType),
    };
};
const de_AggregatedSourceStatusList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_AggregatedSourceStatus(entry, context);
    });
    return retVal;
};
const de_AggregateEvaluationResult = (output, context) => {
    return {
        AccountId: (0, smithy_client_1.expectString)(output.AccountId),
        Annotation: (0, smithy_client_1.expectString)(output.Annotation),
        AwsRegion: (0, smithy_client_1.expectString)(output.AwsRegion),
        ComplianceType: (0, smithy_client_1.expectString)(output.ComplianceType),
        ConfigRuleInvokedTime: output.ConfigRuleInvokedTime != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ConfigRuleInvokedTime)))
            : undefined,
        EvaluationResultIdentifier: output.EvaluationResultIdentifier != null
            ? de_EvaluationResultIdentifier(output.EvaluationResultIdentifier, context)
            : undefined,
        ResultRecordedTime: output.ResultRecordedTime != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ResultRecordedTime)))
            : undefined,
    };
};
const de_AggregateEvaluationResultList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_AggregateEvaluationResult(entry, context);
    });
    return retVal;
};
const de_AggregateResourceIdentifier = (output, context) => {
    return {
        ResourceId: (0, smithy_client_1.expectString)(output.ResourceId),
        ResourceName: (0, smithy_client_1.expectString)(output.ResourceName),
        ResourceType: (0, smithy_client_1.expectString)(output.ResourceType),
        SourceAccountId: (0, smithy_client_1.expectString)(output.SourceAccountId),
        SourceRegion: (0, smithy_client_1.expectString)(output.SourceRegion),
    };
};
const de_AggregationAuthorization = (output, context) => {
    return {
        AggregationAuthorizationArn: (0, smithy_client_1.expectString)(output.AggregationAuthorizationArn),
        AuthorizedAccountId: (0, smithy_client_1.expectString)(output.AuthorizedAccountId),
        AuthorizedAwsRegion: (0, smithy_client_1.expectString)(output.AuthorizedAwsRegion),
        CreationTime: output.CreationTime != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreationTime)))
            : undefined,
    };
};
const de_AggregationAuthorizationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_AggregationAuthorization(entry, context);
    });
    return retVal;
};
const de_AggregatorRegionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const de_BaseConfigurationItem = (output, context) => {
    return {
        accountId: (0, smithy_client_1.expectString)(output.accountId),
        arn: (0, smithy_client_1.expectString)(output.arn),
        availabilityZone: (0, smithy_client_1.expectString)(output.availabilityZone),
        awsRegion: (0, smithy_client_1.expectString)(output.awsRegion),
        configuration: (0, smithy_client_1.expectString)(output.configuration),
        configurationItemCaptureTime: output.configurationItemCaptureTime != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.configurationItemCaptureTime)))
            : undefined,
        configurationItemStatus: (0, smithy_client_1.expectString)(output.configurationItemStatus),
        configurationStateId: (0, smithy_client_1.expectString)(output.configurationStateId),
        resourceCreationTime: output.resourceCreationTime != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.resourceCreationTime)))
            : undefined,
        resourceId: (0, smithy_client_1.expectString)(output.resourceId),
        resourceName: (0, smithy_client_1.expectString)(output.resourceName),
        resourceType: (0, smithy_client_1.expectString)(output.resourceType),
        supplementaryConfiguration: output.supplementaryConfiguration != null
            ? de_SupplementaryConfiguration(output.supplementaryConfiguration, context)
            : undefined,
        version: (0, smithy_client_1.expectString)(output.version),
    };
};
const de_BaseConfigurationItems = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_BaseConfigurationItem(entry, context);
    });
    return retVal;
};
const de_BatchGetAggregateResourceConfigResponse = (output, context) => {
    return {
        BaseConfigurationItems: output.BaseConfigurationItems != null
            ? de_BaseConfigurationItems(output.BaseConfigurationItems, context)
            : undefined,
        UnprocessedResourceIdentifiers: output.UnprocessedResourceIdentifiers != null
            ? de_UnprocessedResourceIdentifierList(output.UnprocessedResourceIdentifiers, context)
            : undefined,
    };
};
const de_BatchGetResourceConfigResponse = (output, context) => {
    return {
        baseConfigurationItems: output.baseConfigurationItems != null
            ? de_BaseConfigurationItems(output.baseConfigurationItems, context)
            : undefined,
        unprocessedResourceKeys: output.unprocessedResourceKeys != null ? de_ResourceKeys(output.unprocessedResourceKeys, context) : undefined,
    };
};
const de_Compliance = (output, context) => {
    return {
        ComplianceContributorCount: output.ComplianceContributorCount != null
            ? de_ComplianceContributorCount(output.ComplianceContributorCount, context)
            : undefined,
        ComplianceType: (0, smithy_client_1.expectString)(output.ComplianceType),
    };
};
const de_ComplianceByConfigRule = (output, context) => {
    return {
        Compliance: output.Compliance != null ? de_Compliance(output.Compliance, context) : undefined,
        ConfigRuleName: (0, smithy_client_1.expectString)(output.ConfigRuleName),
    };
};
const de_ComplianceByConfigRules = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_ComplianceByConfigRule(entry, context);
    });
    return retVal;
};
const de_ComplianceByResource = (output, context) => {
    return {
        Compliance: output.Compliance != null ? de_Compliance(output.Compliance, context) : undefined,
        ResourceId: (0, smithy_client_1.expectString)(output.ResourceId),
        ResourceType: (0, smithy_client_1.expectString)(output.ResourceType),
    };
};
const de_ComplianceByResources = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_ComplianceByResource(entry, context);
    });
    return retVal;
};
const de_ComplianceContributorCount = (output, context) => {
    return {
        CapExceeded: (0, smithy_client_1.expectBoolean)(output.CapExceeded),
        CappedCount: (0, smithy_client_1.expectInt32)(output.CappedCount),
    };
};
const de_ComplianceResourceTypes = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const de_ComplianceSummariesByResourceType = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_ComplianceSummaryByResourceType(entry, context);
    });
    return retVal;
};
const de_ComplianceSummary = (output, context) => {
    return {
        ComplianceSummaryTimestamp: output.ComplianceSummaryTimestamp != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ComplianceSummaryTimestamp)))
            : undefined,
        CompliantResourceCount: output.CompliantResourceCount != null
            ? de_ComplianceContributorCount(output.CompliantResourceCount, context)
            : undefined,
        NonCompliantResourceCount: output.NonCompliantResourceCount != null
            ? de_ComplianceContributorCount(output.NonCompliantResourceCount, context)
            : undefined,
    };
};
const de_ComplianceSummaryByResourceType = (output, context) => {
    return {
        ComplianceSummary: output.ComplianceSummary != null ? de_ComplianceSummary(output.ComplianceSummary, context) : undefined,
        ResourceType: (0, smithy_client_1.expectString)(output.ResourceType),
    };
};
const de_ConfigExportDeliveryInfo = (output, context) => {
    return {
        lastAttemptTime: output.lastAttemptTime != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.lastAttemptTime)))
            : undefined,
        lastErrorCode: (0, smithy_client_1.expectString)(output.lastErrorCode),
        lastErrorMessage: (0, smithy_client_1.expectString)(output.lastErrorMessage),
        lastStatus: (0, smithy_client_1.expectString)(output.lastStatus),
        lastSuccessfulTime: output.lastSuccessfulTime != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.lastSuccessfulTime)))
            : undefined,
        nextDeliveryTime: output.nextDeliveryTime != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.nextDeliveryTime)))
            : undefined,
    };
};
const de_ConfigRule = (output, context) => {
    return {
        ConfigRuleArn: (0, smithy_client_1.expectString)(output.ConfigRuleArn),
        ConfigRuleId: (0, smithy_client_1.expectString)(output.ConfigRuleId),
        ConfigRuleName: (0, smithy_client_1.expectString)(output.ConfigRuleName),
        ConfigRuleState: (0, smithy_client_1.expectString)(output.ConfigRuleState),
        CreatedBy: (0, smithy_client_1.expectString)(output.CreatedBy),
        Description: (0, smithy_client_1.expectString)(output.Description),
        EvaluationModes: output.EvaluationModes != null ? de_EvaluationModes(output.EvaluationModes, context) : undefined,
        InputParameters: (0, smithy_client_1.expectString)(output.InputParameters),
        MaximumExecutionFrequency: (0, smithy_client_1.expectString)(output.MaximumExecutionFrequency),
        Scope: output.Scope != null ? de_Scope(output.Scope, context) : undefined,
        Source: output.Source != null ? de_Source(output.Source, context) : undefined,
    };
};
const de_ConfigRuleEvaluationStatus = (output, context) => {
    return {
        ConfigRuleArn: (0, smithy_client_1.expectString)(output.ConfigRuleArn),
        ConfigRuleId: (0, smithy_client_1.expectString)(output.ConfigRuleId),
        ConfigRuleName: (0, smithy_client_1.expectString)(output.ConfigRuleName),
        FirstActivatedTime: output.FirstActivatedTime != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.FirstActivatedTime)))
            : undefined,
        FirstEvaluationStarted: (0, smithy_client_1.expectBoolean)(output.FirstEvaluationStarted),
        LastDeactivatedTime: output.LastDeactivatedTime != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastDeactivatedTime)))
            : undefined,
        LastDebugLogDeliveryStatus: (0, smithy_client_1.expectString)(output.LastDebugLogDeliveryStatus),
        LastDebugLogDeliveryStatusReason: (0, smithy_client_1.expectString)(output.LastDebugLogDeliveryStatusReason),
        LastDebugLogDeliveryTime: output.LastDebugLogDeliveryTime != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastDebugLogDeliveryTime)))
            : undefined,
        LastErrorCode: (0, smithy_client_1.expectString)(output.LastErrorCode),
        LastErrorMessage: (0, smithy_client_1.expectString)(output.LastErrorMessage),
        LastFailedEvaluationTime: output.LastFailedEvaluationTime != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastFailedEvaluationTime)))
            : undefined,
        LastFailedInvocationTime: output.LastFailedInvocationTime != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastFailedInvocationTime)))
            : undefined,
        LastSuccessfulEvaluationTime: output.LastSuccessfulEvaluationTime != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastSuccessfulEvaluationTime)))
            : undefined,
        LastSuccessfulInvocationTime: output.LastSuccessfulInvocationTime != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastSuccessfulInvocationTime)))
            : undefined,
    };
};
const de_ConfigRuleEvaluationStatusList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_ConfigRuleEvaluationStatus(entry, context);
    });
    return retVal;
};
const de_ConfigRules = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_ConfigRule(entry, context);
    });
    return retVal;
};
const de_ConfigSnapshotDeliveryProperties = (output, context) => {
    return {
        deliveryFrequency: (0, smithy_client_1.expectString)(output.deliveryFrequency),
    };
};
const de_ConfigStreamDeliveryInfo = (output, context) => {
    return {
        lastErrorCode: (0, smithy_client_1.expectString)(output.lastErrorCode),
        lastErrorMessage: (0, smithy_client_1.expectString)(output.lastErrorMessage),
        lastStatus: (0, smithy_client_1.expectString)(output.lastStatus),
        lastStatusChangeTime: output.lastStatusChangeTime != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.lastStatusChangeTime)))
            : undefined,
    };
};
const de_ConfigurationAggregator = (output, context) => {
    return {
        AccountAggregationSources: output.AccountAggregationSources != null
            ? de_AccountAggregationSourceList(output.AccountAggregationSources, context)
            : undefined,
        ConfigurationAggregatorArn: (0, smithy_client_1.expectString)(output.ConfigurationAggregatorArn),
        ConfigurationAggregatorName: (0, smithy_client_1.expectString)(output.ConfigurationAggregatorName),
        CreatedBy: (0, smithy_client_1.expectString)(output.CreatedBy),
        CreationTime: output.CreationTime != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreationTime)))
            : undefined,
        LastUpdatedTime: output.LastUpdatedTime != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastUpdatedTime)))
            : undefined,
        OrganizationAggregationSource: output.OrganizationAggregationSource != null
            ? de_OrganizationAggregationSource(output.OrganizationAggregationSource, context)
            : undefined,
    };
};
const de_ConfigurationAggregatorList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_ConfigurationAggregator(entry, context);
    });
    return retVal;
};
const de_ConfigurationItem = (output, context) => {
    return {
        accountId: (0, smithy_client_1.expectString)(output.accountId),
        arn: (0, smithy_client_1.expectString)(output.arn),
        availabilityZone: (0, smithy_client_1.expectString)(output.availabilityZone),
        awsRegion: (0, smithy_client_1.expectString)(output.awsRegion),
        configuration: (0, smithy_client_1.expectString)(output.configuration),
        configurationItemCaptureTime: output.configurationItemCaptureTime != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.configurationItemCaptureTime)))
            : undefined,
        configurationItemMD5Hash: (0, smithy_client_1.expectString)(output.configurationItemMD5Hash),
        configurationItemStatus: (0, smithy_client_1.expectString)(output.configurationItemStatus),
        configurationStateId: (0, smithy_client_1.expectString)(output.configurationStateId),
        relatedEvents: output.relatedEvents != null ? de_RelatedEventList(output.relatedEvents, context) : undefined,
        relationships: output.relationships != null ? de_RelationshipList(output.relationships, context) : undefined,
        resourceCreationTime: output.resourceCreationTime != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.resourceCreationTime)))
            : undefined,
        resourceId: (0, smithy_client_1.expectString)(output.resourceId),
        resourceName: (0, smithy_client_1.expectString)(output.resourceName),
        resourceType: (0, smithy_client_1.expectString)(output.resourceType),
        supplementaryConfiguration: output.supplementaryConfiguration != null
            ? de_SupplementaryConfiguration(output.supplementaryConfiguration, context)
            : undefined,
        tags: output.tags != null ? de_Tags(output.tags, context) : undefined,
        version: (0, smithy_client_1.expectString)(output.version),
    };
};
const de_ConfigurationItemList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_ConfigurationItem(entry, context);
    });
    return retVal;
};
const de_ConfigurationRecorder = (output, context) => {
    return {
        name: (0, smithy_client_1.expectString)(output.name),
        recordingGroup: output.recordingGroup != null ? de_RecordingGroup(output.recordingGroup, context) : undefined,
        roleARN: (0, smithy_client_1.expectString)(output.roleARN),
    };
};
const de_ConfigurationRecorderList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_ConfigurationRecorder(entry, context);
    });
    return retVal;
};
const de_ConfigurationRecorderStatus = (output, context) => {
    return {
        lastErrorCode: (0, smithy_client_1.expectString)(output.lastErrorCode),
        lastErrorMessage: (0, smithy_client_1.expectString)(output.lastErrorMessage),
        lastStartTime: output.lastStartTime != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.lastStartTime)))
            : undefined,
        lastStatus: (0, smithy_client_1.expectString)(output.lastStatus),
        lastStatusChangeTime: output.lastStatusChangeTime != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.lastStatusChangeTime)))
            : undefined,
        lastStopTime: output.lastStopTime != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.lastStopTime)))
            : undefined,
        name: (0, smithy_client_1.expectString)(output.name),
        recording: (0, smithy_client_1.expectBoolean)(output.recording),
    };
};
const de_ConfigurationRecorderStatusList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_ConfigurationRecorderStatus(entry, context);
    });
    return retVal;
};
const de_ConformancePackComplianceScore = (output, context) => {
    return {
        ConformancePackName: (0, smithy_client_1.expectString)(output.ConformancePackName),
        LastUpdatedTime: output.LastUpdatedTime != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastUpdatedTime)))
            : undefined,
        Score: (0, smithy_client_1.expectString)(output.Score),
    };
};
const de_ConformancePackComplianceScores = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_ConformancePackComplianceScore(entry, context);
    });
    return retVal;
};
const de_ConformancePackComplianceSummary = (output, context) => {
    return {
        ConformancePackComplianceStatus: (0, smithy_client_1.expectString)(output.ConformancePackComplianceStatus),
        ConformancePackName: (0, smithy_client_1.expectString)(output.ConformancePackName),
    };
};
const de_ConformancePackComplianceSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_ConformancePackComplianceSummary(entry, context);
    });
    return retVal;
};
const de_ConformancePackDetail = (output, context) => {
    return {
        ConformancePackArn: (0, smithy_client_1.expectString)(output.ConformancePackArn),
        ConformancePackId: (0, smithy_client_1.expectString)(output.ConformancePackId),
        ConformancePackInputParameters: output.ConformancePackInputParameters != null
            ? de_ConformancePackInputParameters(output.ConformancePackInputParameters, context)
            : undefined,
        ConformancePackName: (0, smithy_client_1.expectString)(output.ConformancePackName),
        CreatedBy: (0, smithy_client_1.expectString)(output.CreatedBy),
        DeliveryS3Bucket: (0, smithy_client_1.expectString)(output.DeliveryS3Bucket),
        DeliveryS3KeyPrefix: (0, smithy_client_1.expectString)(output.DeliveryS3KeyPrefix),
        LastUpdateRequestedTime: output.LastUpdateRequestedTime != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastUpdateRequestedTime)))
            : undefined,
        TemplateSSMDocumentDetails: output.TemplateSSMDocumentDetails != null
            ? de_TemplateSSMDocumentDetails(output.TemplateSSMDocumentDetails, context)
            : undefined,
    };
};
const de_ConformancePackDetailList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_ConformancePackDetail(entry, context);
    });
    return retVal;
};
const de_ConformancePackEvaluationResult = (output, context) => {
    return {
        Annotation: (0, smithy_client_1.expectString)(output.Annotation),
        ComplianceType: (0, smithy_client_1.expectString)(output.ComplianceType),
        ConfigRuleInvokedTime: output.ConfigRuleInvokedTime != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ConfigRuleInvokedTime)))
            : undefined,
        EvaluationResultIdentifier: output.EvaluationResultIdentifier != null
            ? de_EvaluationResultIdentifier(output.EvaluationResultIdentifier, context)
            : undefined,
        ResultRecordedTime: output.ResultRecordedTime != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ResultRecordedTime)))
            : undefined,
    };
};
const de_ConformancePackInputParameter = (output, context) => {
    return {
        ParameterName: (0, smithy_client_1.expectString)(output.ParameterName),
        ParameterValue: (0, smithy_client_1.expectString)(output.ParameterValue),
    };
};
const de_ConformancePackInputParameters = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_ConformancePackInputParameter(entry, context);
    });
    return retVal;
};
const de_ConformancePackRuleCompliance = (output, context) => {
    return {
        ComplianceType: (0, smithy_client_1.expectString)(output.ComplianceType),
        ConfigRuleName: (0, smithy_client_1.expectString)(output.ConfigRuleName),
        Controls: output.Controls != null ? de_ControlsList(output.Controls, context) : undefined,
    };
};
const de_ConformancePackRuleComplianceList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_ConformancePackRuleCompliance(entry, context);
    });
    return retVal;
};
const de_ConformancePackRuleEvaluationResultsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_ConformancePackEvaluationResult(entry, context);
    });
    return retVal;
};
const de_ConformancePackStatusDetail = (output, context) => {
    return {
        ConformancePackArn: (0, smithy_client_1.expectString)(output.ConformancePackArn),
        ConformancePackId: (0, smithy_client_1.expectString)(output.ConformancePackId),
        ConformancePackName: (0, smithy_client_1.expectString)(output.ConformancePackName),
        ConformancePackState: (0, smithy_client_1.expectString)(output.ConformancePackState),
        ConformancePackStatusReason: (0, smithy_client_1.expectString)(output.ConformancePackStatusReason),
        LastUpdateCompletedTime: output.LastUpdateCompletedTime != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastUpdateCompletedTime)))
            : undefined,
        LastUpdateRequestedTime: output.LastUpdateRequestedTime != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastUpdateRequestedTime)))
            : undefined,
        StackArn: (0, smithy_client_1.expectString)(output.StackArn),
    };
};
const de_ConformancePackStatusDetailsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_ConformancePackStatusDetail(entry, context);
    });
    return retVal;
};
const de_ConformancePackTemplateValidationException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_ControlsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const de_CustomPolicyDetails = (output, context) => {
    return {
        EnableDebugLogDelivery: (0, smithy_client_1.expectBoolean)(output.EnableDebugLogDelivery),
        PolicyRuntime: (0, smithy_client_1.expectString)(output.PolicyRuntime),
        PolicyText: (0, smithy_client_1.expectString)(output.PolicyText),
    };
};
const de_DebugLogDeliveryAccounts = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const de_DeleteEvaluationResultsResponse = (output, context) => {
    return {};
};
const de_DeleteRemediationConfigurationResponse = (output, context) => {
    return {};
};
const de_DeleteRemediationExceptionsResponse = (output, context) => {
    return {
        FailedBatches: output.FailedBatches != null
            ? de_FailedDeleteRemediationExceptionsBatches(output.FailedBatches, context)
            : undefined,
    };
};
const de_DeleteStoredQueryResponse = (output, context) => {
    return {};
};
const de_DeliverConfigSnapshotResponse = (output, context) => {
    return {
        configSnapshotId: (0, smithy_client_1.expectString)(output.configSnapshotId),
    };
};
const de_DeliveryChannel = (output, context) => {
    return {
        configSnapshotDeliveryProperties: output.configSnapshotDeliveryProperties != null
            ? de_ConfigSnapshotDeliveryProperties(output.configSnapshotDeliveryProperties, context)
            : undefined,
        name: (0, smithy_client_1.expectString)(output.name),
        s3BucketName: (0, smithy_client_1.expectString)(output.s3BucketName),
        s3KeyPrefix: (0, smithy_client_1.expectString)(output.s3KeyPrefix),
        s3KmsKeyArn: (0, smithy_client_1.expectString)(output.s3KmsKeyArn),
        snsTopicARN: (0, smithy_client_1.expectString)(output.snsTopicARN),
    };
};
const de_DeliveryChannelList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_DeliveryChannel(entry, context);
    });
    return retVal;
};
const de_DeliveryChannelStatus = (output, context) => {
    return {
        configHistoryDeliveryInfo: output.configHistoryDeliveryInfo != null
            ? de_ConfigExportDeliveryInfo(output.configHistoryDeliveryInfo, context)
            : undefined,
        configSnapshotDeliveryInfo: output.configSnapshotDeliveryInfo != null
            ? de_ConfigExportDeliveryInfo(output.configSnapshotDeliveryInfo, context)
            : undefined,
        configStreamDeliveryInfo: output.configStreamDeliveryInfo != null
            ? de_ConfigStreamDeliveryInfo(output.configStreamDeliveryInfo, context)
            : undefined,
        name: (0, smithy_client_1.expectString)(output.name),
    };
};
const de_DeliveryChannelStatusList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_DeliveryChannelStatus(entry, context);
    });
    return retVal;
};
const de_DescribeAggregateComplianceByConfigRulesResponse = (output, context) => {
    return {
        AggregateComplianceByConfigRules: output.AggregateComplianceByConfigRules != null
            ? de_AggregateComplianceByConfigRuleList(output.AggregateComplianceByConfigRules, context)
            : undefined,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
    };
};
const de_DescribeAggregateComplianceByConformancePacksResponse = (output, context) => {
    return {
        AggregateComplianceByConformancePacks: output.AggregateComplianceByConformancePacks != null
            ? de_AggregateComplianceByConformancePackList(output.AggregateComplianceByConformancePacks, context)
            : undefined,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
    };
};
const de_DescribeAggregationAuthorizationsResponse = (output, context) => {
    return {
        AggregationAuthorizations: output.AggregationAuthorizations != null
            ? de_AggregationAuthorizationList(output.AggregationAuthorizations, context)
            : undefined,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
    };
};
const de_DescribeComplianceByConfigRuleResponse = (output, context) => {
    return {
        ComplianceByConfigRules: output.ComplianceByConfigRules != null
            ? de_ComplianceByConfigRules(output.ComplianceByConfigRules, context)
            : undefined,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
    };
};
const de_DescribeComplianceByResourceResponse = (output, context) => {
    return {
        ComplianceByResources: output.ComplianceByResources != null
            ? de_ComplianceByResources(output.ComplianceByResources, context)
            : undefined,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
    };
};
const de_DescribeConfigRuleEvaluationStatusResponse = (output, context) => {
    return {
        ConfigRulesEvaluationStatus: output.ConfigRulesEvaluationStatus != null
            ? de_ConfigRuleEvaluationStatusList(output.ConfigRulesEvaluationStatus, context)
            : undefined,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
    };
};
const de_DescribeConfigRulesResponse = (output, context) => {
    return {
        ConfigRules: output.ConfigRules != null ? de_ConfigRules(output.ConfigRules, context) : undefined,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
    };
};
const de_DescribeConfigurationAggregatorSourcesStatusResponse = (output, context) => {
    return {
        AggregatedSourceStatusList: output.AggregatedSourceStatusList != null
            ? de_AggregatedSourceStatusList(output.AggregatedSourceStatusList, context)
            : undefined,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
    };
};
const de_DescribeConfigurationAggregatorsResponse = (output, context) => {
    return {
        ConfigurationAggregators: output.ConfigurationAggregators != null
            ? de_ConfigurationAggregatorList(output.ConfigurationAggregators, context)
            : undefined,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
    };
};
const de_DescribeConfigurationRecordersResponse = (output, context) => {
    return {
        ConfigurationRecorders: output.ConfigurationRecorders != null
            ? de_ConfigurationRecorderList(output.ConfigurationRecorders, context)
            : undefined,
    };
};
const de_DescribeConfigurationRecorderStatusResponse = (output, context) => {
    return {
        ConfigurationRecordersStatus: output.ConfigurationRecordersStatus != null
            ? de_ConfigurationRecorderStatusList(output.ConfigurationRecordersStatus, context)
            : undefined,
    };
};
const de_DescribeConformancePackComplianceResponse = (output, context) => {
    return {
        ConformancePackName: (0, smithy_client_1.expectString)(output.ConformancePackName),
        ConformancePackRuleComplianceList: output.ConformancePackRuleComplianceList != null
            ? de_ConformancePackRuleComplianceList(output.ConformancePackRuleComplianceList, context)
            : undefined,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
    };
};
const de_DescribeConformancePacksResponse = (output, context) => {
    return {
        ConformancePackDetails: output.ConformancePackDetails != null
            ? de_ConformancePackDetailList(output.ConformancePackDetails, context)
            : undefined,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
    };
};
const de_DescribeConformancePackStatusResponse = (output, context) => {
    return {
        ConformancePackStatusDetails: output.ConformancePackStatusDetails != null
            ? de_ConformancePackStatusDetailsList(output.ConformancePackStatusDetails, context)
            : undefined,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
    };
};
const de_DescribeDeliveryChannelsResponse = (output, context) => {
    return {
        DeliveryChannels: output.DeliveryChannels != null ? de_DeliveryChannelList(output.DeliveryChannels, context) : undefined,
    };
};
const de_DescribeDeliveryChannelStatusResponse = (output, context) => {
    return {
        DeliveryChannelsStatus: output.DeliveryChannelsStatus != null
            ? de_DeliveryChannelStatusList(output.DeliveryChannelsStatus, context)
            : undefined,
    };
};
const de_DescribeOrganizationConfigRulesResponse = (output, context) => {
    return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        OrganizationConfigRules: output.OrganizationConfigRules != null
            ? de_OrganizationConfigRules(output.OrganizationConfigRules, context)
            : undefined,
    };
};
const de_DescribeOrganizationConfigRuleStatusesResponse = (output, context) => {
    return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        OrganizationConfigRuleStatuses: output.OrganizationConfigRuleStatuses != null
            ? de_OrganizationConfigRuleStatuses(output.OrganizationConfigRuleStatuses, context)
            : undefined,
    };
};
const de_DescribeOrganizationConformancePacksResponse = (output, context) => {
    return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        OrganizationConformancePacks: output.OrganizationConformancePacks != null
            ? de_OrganizationConformancePacks(output.OrganizationConformancePacks, context)
            : undefined,
    };
};
const de_DescribeOrganizationConformancePackStatusesResponse = (output, context) => {
    return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        OrganizationConformancePackStatuses: output.OrganizationConformancePackStatuses != null
            ? de_OrganizationConformancePackStatuses(output.OrganizationConformancePackStatuses, context)
            : undefined,
    };
};
const de_DescribePendingAggregationRequestsResponse = (output, context) => {
    return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        PendingAggregationRequests: output.PendingAggregationRequests != null
            ? de_PendingAggregationRequestList(output.PendingAggregationRequests, context)
            : undefined,
    };
};
const de_DescribeRemediationConfigurationsResponse = (output, context) => {
    return {
        RemediationConfigurations: output.RemediationConfigurations != null
            ? de_RemediationConfigurations(output.RemediationConfigurations, context)
            : undefined,
    };
};
const de_DescribeRemediationExceptionsResponse = (output, context) => {
    return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        RemediationExceptions: output.RemediationExceptions != null
            ? de_RemediationExceptions(output.RemediationExceptions, context)
            : undefined,
    };
};
const de_DescribeRemediationExecutionStatusResponse = (output, context) => {
    return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        RemediationExecutionStatuses: output.RemediationExecutionStatuses != null
            ? de_RemediationExecutionStatuses(output.RemediationExecutionStatuses, context)
            : undefined,
    };
};
const de_DescribeRetentionConfigurationsResponse = (output, context) => {
    return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        RetentionConfigurations: output.RetentionConfigurations != null
            ? de_RetentionConfigurationList(output.RetentionConfigurations, context)
            : undefined,
    };
};
const de_DiscoveredResourceIdentifierList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_AggregateResourceIdentifier(entry, context);
    });
    return retVal;
};
const de_Evaluation = (output, context) => {
    return {
        Annotation: (0, smithy_client_1.expectString)(output.Annotation),
        ComplianceResourceId: (0, smithy_client_1.expectString)(output.ComplianceResourceId),
        ComplianceResourceType: (0, smithy_client_1.expectString)(output.ComplianceResourceType),
        ComplianceType: (0, smithy_client_1.expectString)(output.ComplianceType),
        OrderingTimestamp: output.OrderingTimestamp != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.OrderingTimestamp)))
            : undefined,
    };
};
const de_EvaluationContext = (output, context) => {
    return {
        EvaluationContextIdentifier: (0, smithy_client_1.expectString)(output.EvaluationContextIdentifier),
    };
};
const de_EvaluationModeConfiguration = (output, context) => {
    return {
        Mode: (0, smithy_client_1.expectString)(output.Mode),
    };
};
const de_EvaluationModes = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_EvaluationModeConfiguration(entry, context);
    });
    return retVal;
};
const de_EvaluationResult = (output, context) => {
    return {
        Annotation: (0, smithy_client_1.expectString)(output.Annotation),
        ComplianceType: (0, smithy_client_1.expectString)(output.ComplianceType),
        ConfigRuleInvokedTime: output.ConfigRuleInvokedTime != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ConfigRuleInvokedTime)))
            : undefined,
        EvaluationResultIdentifier: output.EvaluationResultIdentifier != null
            ? de_EvaluationResultIdentifier(output.EvaluationResultIdentifier, context)
            : undefined,
        ResultRecordedTime: output.ResultRecordedTime != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ResultRecordedTime)))
            : undefined,
        ResultToken: (0, smithy_client_1.expectString)(output.ResultToken),
    };
};
const de_EvaluationResultIdentifier = (output, context) => {
    return {
        EvaluationResultQualifier: output.EvaluationResultQualifier != null
            ? de_EvaluationResultQualifier(output.EvaluationResultQualifier, context)
            : undefined,
        OrderingTimestamp: output.OrderingTimestamp != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.OrderingTimestamp)))
            : undefined,
        ResourceEvaluationId: (0, smithy_client_1.expectString)(output.ResourceEvaluationId),
    };
};
const de_EvaluationResultQualifier = (output, context) => {
    return {
        ConfigRuleName: (0, smithy_client_1.expectString)(output.ConfigRuleName),
        EvaluationMode: (0, smithy_client_1.expectString)(output.EvaluationMode),
        ResourceId: (0, smithy_client_1.expectString)(output.ResourceId),
        ResourceType: (0, smithy_client_1.expectString)(output.ResourceType),
    };
};
const de_EvaluationResults = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_EvaluationResult(entry, context);
    });
    return retVal;
};
const de_Evaluations = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_Evaluation(entry, context);
    });
    return retVal;
};
const de_EvaluationStatus = (output, context) => {
    return {
        FailureReason: (0, smithy_client_1.expectString)(output.FailureReason),
        Status: (0, smithy_client_1.expectString)(output.Status),
    };
};
const de_ExcludedAccounts = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const de_ExecutionControls = (output, context) => {
    return {
        SsmControls: output.SsmControls != null ? de_SsmControls(output.SsmControls, context) : undefined,
    };
};
const de_FailedDeleteRemediationExceptionsBatch = (output, context) => {
    return {
        FailedItems: output.FailedItems != null ? de_RemediationExceptionResourceKeys(output.FailedItems, context) : undefined,
        FailureMessage: (0, smithy_client_1.expectString)(output.FailureMessage),
    };
};
const de_FailedDeleteRemediationExceptionsBatches = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_FailedDeleteRemediationExceptionsBatch(entry, context);
    });
    return retVal;
};
const de_FailedRemediationBatch = (output, context) => {
    return {
        FailedItems: output.FailedItems != null ? de_RemediationConfigurations(output.FailedItems, context) : undefined,
        FailureMessage: (0, smithy_client_1.expectString)(output.FailureMessage),
    };
};
const de_FailedRemediationBatches = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_FailedRemediationBatch(entry, context);
    });
    return retVal;
};
const de_FailedRemediationExceptionBatch = (output, context) => {
    return {
        FailedItems: output.FailedItems != null ? de_RemediationExceptions(output.FailedItems, context) : undefined,
        FailureMessage: (0, smithy_client_1.expectString)(output.FailureMessage),
    };
};
const de_FailedRemediationExceptionBatches = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_FailedRemediationExceptionBatch(entry, context);
    });
    return retVal;
};
const de_FieldInfo = (output, context) => {
    return {
        Name: (0, smithy_client_1.expectString)(output.Name),
    };
};
const de_FieldInfoList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_FieldInfo(entry, context);
    });
    return retVal;
};
const de_GetAggregateComplianceDetailsByConfigRuleResponse = (output, context) => {
    return {
        AggregateEvaluationResults: output.AggregateEvaluationResults != null
            ? de_AggregateEvaluationResultList(output.AggregateEvaluationResults, context)
            : undefined,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
    };
};
const de_GetAggregateConfigRuleComplianceSummaryResponse = (output, context) => {
    return {
        AggregateComplianceCounts: output.AggregateComplianceCounts != null
            ? de_AggregateComplianceCountList(output.AggregateComplianceCounts, context)
            : undefined,
        GroupByKey: (0, smithy_client_1.expectString)(output.GroupByKey),
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
    };
};
const de_GetAggregateConformancePackComplianceSummaryResponse = (output, context) => {
    return {
        AggregateConformancePackComplianceSummaries: output.AggregateConformancePackComplianceSummaries != null
            ? de_AggregateConformancePackComplianceSummaryList(output.AggregateConformancePackComplianceSummaries, context)
            : undefined,
        GroupByKey: (0, smithy_client_1.expectString)(output.GroupByKey),
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
    };
};
const de_GetAggregateDiscoveredResourceCountsResponse = (output, context) => {
    return {
        GroupByKey: (0, smithy_client_1.expectString)(output.GroupByKey),
        GroupedResourceCounts: output.GroupedResourceCounts != null
            ? de_GroupedResourceCountList(output.GroupedResourceCounts, context)
            : undefined,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        TotalDiscoveredResources: (0, smithy_client_1.expectLong)(output.TotalDiscoveredResources),
    };
};
const de_GetAggregateResourceConfigResponse = (output, context) => {
    return {
        ConfigurationItem: output.ConfigurationItem != null ? de_ConfigurationItem(output.ConfigurationItem, context) : undefined,
    };
};
const de_GetComplianceDetailsByConfigRuleResponse = (output, context) => {
    return {
        EvaluationResults: output.EvaluationResults != null ? de_EvaluationResults(output.EvaluationResults, context) : undefined,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
    };
};
const de_GetComplianceDetailsByResourceResponse = (output, context) => {
    return {
        EvaluationResults: output.EvaluationResults != null ? de_EvaluationResults(output.EvaluationResults, context) : undefined,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
    };
};
const de_GetComplianceSummaryByConfigRuleResponse = (output, context) => {
    return {
        ComplianceSummary: output.ComplianceSummary != null ? de_ComplianceSummary(output.ComplianceSummary, context) : undefined,
    };
};
const de_GetComplianceSummaryByResourceTypeResponse = (output, context) => {
    return {
        ComplianceSummariesByResourceType: output.ComplianceSummariesByResourceType != null
            ? de_ComplianceSummariesByResourceType(output.ComplianceSummariesByResourceType, context)
            : undefined,
    };
};
const de_GetConformancePackComplianceDetailsResponse = (output, context) => {
    return {
        ConformancePackName: (0, smithy_client_1.expectString)(output.ConformancePackName),
        ConformancePackRuleEvaluationResults: output.ConformancePackRuleEvaluationResults != null
            ? de_ConformancePackRuleEvaluationResultsList(output.ConformancePackRuleEvaluationResults, context)
            : undefined,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
    };
};
const de_GetConformancePackComplianceSummaryResponse = (output, context) => {
    return {
        ConformancePackComplianceSummaryList: output.ConformancePackComplianceSummaryList != null
            ? de_ConformancePackComplianceSummaryList(output.ConformancePackComplianceSummaryList, context)
            : undefined,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
    };
};
const de_GetCustomRulePolicyResponse = (output, context) => {
    return {
        PolicyText: (0, smithy_client_1.expectString)(output.PolicyText),
    };
};
const de_GetDiscoveredResourceCountsResponse = (output, context) => {
    return {
        nextToken: (0, smithy_client_1.expectString)(output.nextToken),
        resourceCounts: output.resourceCounts != null ? de_ResourceCounts(output.resourceCounts, context) : undefined,
        totalDiscoveredResources: (0, smithy_client_1.expectLong)(output.totalDiscoveredResources),
    };
};
const de_GetOrganizationConfigRuleDetailedStatusResponse = (output, context) => {
    return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        OrganizationConfigRuleDetailedStatus: output.OrganizationConfigRuleDetailedStatus != null
            ? de_OrganizationConfigRuleDetailedStatus(output.OrganizationConfigRuleDetailedStatus, context)
            : undefined,
    };
};
const de_GetOrganizationConformancePackDetailedStatusResponse = (output, context) => {
    return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        OrganizationConformancePackDetailedStatuses: output.OrganizationConformancePackDetailedStatuses != null
            ? de_OrganizationConformancePackDetailedStatuses(output.OrganizationConformancePackDetailedStatuses, context)
            : undefined,
    };
};
const de_GetOrganizationCustomRulePolicyResponse = (output, context) => {
    return {
        PolicyText: (0, smithy_client_1.expectString)(output.PolicyText),
    };
};
const de_GetResourceConfigHistoryResponse = (output, context) => {
    return {
        configurationItems: output.configurationItems != null ? de_ConfigurationItemList(output.configurationItems, context) : undefined,
        nextToken: (0, smithy_client_1.expectString)(output.nextToken),
    };
};
const de_GetResourceEvaluationSummaryResponse = (output, context) => {
    return {
        Compliance: (0, smithy_client_1.expectString)(output.Compliance),
        EvaluationContext: output.EvaluationContext != null ? de_EvaluationContext(output.EvaluationContext, context) : undefined,
        EvaluationMode: (0, smithy_client_1.expectString)(output.EvaluationMode),
        EvaluationStartTimestamp: output.EvaluationStartTimestamp != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.EvaluationStartTimestamp)))
            : undefined,
        EvaluationStatus: output.EvaluationStatus != null ? de_EvaluationStatus(output.EvaluationStatus, context) : undefined,
        ResourceDetails: output.ResourceDetails != null ? de_ResourceDetails(output.ResourceDetails, context) : undefined,
        ResourceEvaluationId: (0, smithy_client_1.expectString)(output.ResourceEvaluationId),
    };
};
const de_GetStoredQueryResponse = (output, context) => {
    return {
        StoredQuery: output.StoredQuery != null ? de_StoredQuery(output.StoredQuery, context) : undefined,
    };
};
const de_GroupedResourceCount = (output, context) => {
    return {
        GroupName: (0, smithy_client_1.expectString)(output.GroupName),
        ResourceCount: (0, smithy_client_1.expectLong)(output.ResourceCount),
    };
};
const de_GroupedResourceCountList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_GroupedResourceCount(entry, context);
    });
    return retVal;
};
const de_IdempotentParameterMismatch = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_InsufficientDeliveryPolicyException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_InsufficientPermissionsException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_InvalidConfigurationRecorderNameException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_InvalidDeliveryChannelNameException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_InvalidExpressionException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_InvalidLimitException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_InvalidNextTokenException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_InvalidParameterValueException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_InvalidRecordingGroupException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_InvalidResultTokenException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_InvalidRoleException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_InvalidS3KeyPrefixException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_InvalidS3KmsKeyArnException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_InvalidSNSTopicARNException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_InvalidTimeRangeException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_LastDeliveryChannelDeleteFailedException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_LimitExceededException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_ListAggregateDiscoveredResourcesResponse = (output, context) => {
    return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        ResourceIdentifiers: output.ResourceIdentifiers != null
            ? de_DiscoveredResourceIdentifierList(output.ResourceIdentifiers, context)
            : undefined,
    };
};
const de_ListConformancePackComplianceScoresResponse = (output, context) => {
    return {
        ConformancePackComplianceScores: output.ConformancePackComplianceScores != null
            ? de_ConformancePackComplianceScores(output.ConformancePackComplianceScores, context)
            : undefined,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
    };
};
const de_ListDiscoveredResourcesResponse = (output, context) => {
    return {
        nextToken: (0, smithy_client_1.expectString)(output.nextToken),
        resourceIdentifiers: output.resourceIdentifiers != null ? de_ResourceIdentifierList(output.resourceIdentifiers, context) : undefined,
    };
};
const de_ListResourceEvaluationsResponse = (output, context) => {
    return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        ResourceEvaluations: output.ResourceEvaluations != null ? de_ResourceEvaluations(output.ResourceEvaluations, context) : undefined,
    };
};
const de_ListStoredQueriesResponse = (output, context) => {
    return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        StoredQueryMetadata: output.StoredQueryMetadata != null ? de_StoredQueryMetadataList(output.StoredQueryMetadata, context) : undefined,
    };
};
const de_ListTagsForResourceResponse = (output, context) => {
    return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        Tags: output.Tags != null ? de_TagList(output.Tags, context) : undefined,
    };
};
const de_MaxActiveResourcesExceededException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_MaxNumberOfConfigRulesExceededException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_MaxNumberOfConfigurationRecordersExceededException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_MaxNumberOfConformancePacksExceededException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_MaxNumberOfDeliveryChannelsExceededException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_MaxNumberOfOrganizationConfigRulesExceededException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_MaxNumberOfOrganizationConformancePacksExceededException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_MaxNumberOfRetentionConfigurationsExceededException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_MemberAccountStatus = (output, context) => {
    return {
        AccountId: (0, smithy_client_1.expectString)(output.AccountId),
        ConfigRuleName: (0, smithy_client_1.expectString)(output.ConfigRuleName),
        ErrorCode: (0, smithy_client_1.expectString)(output.ErrorCode),
        ErrorMessage: (0, smithy_client_1.expectString)(output.ErrorMessage),
        LastUpdateTime: output.LastUpdateTime != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastUpdateTime)))
            : undefined,
        MemberAccountRuleStatus: (0, smithy_client_1.expectString)(output.MemberAccountRuleStatus),
    };
};
const de_NoAvailableConfigurationRecorderException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_NoAvailableDeliveryChannelException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_NoAvailableOrganizationException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_NoRunningConfigurationRecorderException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_NoSuchBucketException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_NoSuchConfigRuleException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_NoSuchConfigRuleInConformancePackException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_NoSuchConfigurationAggregatorException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_NoSuchConfigurationRecorderException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_NoSuchConformancePackException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_NoSuchDeliveryChannelException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_NoSuchOrganizationConfigRuleException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_NoSuchOrganizationConformancePackException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_NoSuchRemediationConfigurationException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_NoSuchRemediationExceptionException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_NoSuchRetentionConfigurationException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_OrganizationAccessDeniedException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_OrganizationAggregationSource = (output, context) => {
    return {
        AllAwsRegions: (0, smithy_client_1.expectBoolean)(output.AllAwsRegions),
        AwsRegions: output.AwsRegions != null ? de_AggregatorRegionList(output.AwsRegions, context) : undefined,
        RoleArn: (0, smithy_client_1.expectString)(output.RoleArn),
    };
};
const de_OrganizationAllFeaturesNotEnabledException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_OrganizationConfigRule = (output, context) => {
    return {
        ExcludedAccounts: output.ExcludedAccounts != null ? de_ExcludedAccounts(output.ExcludedAccounts, context) : undefined,
        LastUpdateTime: output.LastUpdateTime != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastUpdateTime)))
            : undefined,
        OrganizationConfigRuleArn: (0, smithy_client_1.expectString)(output.OrganizationConfigRuleArn),
        OrganizationConfigRuleName: (0, smithy_client_1.expectString)(output.OrganizationConfigRuleName),
        OrganizationCustomPolicyRuleMetadata: output.OrganizationCustomPolicyRuleMetadata != null
            ? de_OrganizationCustomPolicyRuleMetadataNoPolicy(output.OrganizationCustomPolicyRuleMetadata, context)
            : undefined,
        OrganizationCustomRuleMetadata: output.OrganizationCustomRuleMetadata != null
            ? de_OrganizationCustomRuleMetadata(output.OrganizationCustomRuleMetadata, context)
            : undefined,
        OrganizationManagedRuleMetadata: output.OrganizationManagedRuleMetadata != null
            ? de_OrganizationManagedRuleMetadata(output.OrganizationManagedRuleMetadata, context)
            : undefined,
    };
};
const de_OrganizationConfigRuleDetailedStatus = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_MemberAccountStatus(entry, context);
    });
    return retVal;
};
const de_OrganizationConfigRules = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_OrganizationConfigRule(entry, context);
    });
    return retVal;
};
const de_OrganizationConfigRuleStatus = (output, context) => {
    return {
        ErrorCode: (0, smithy_client_1.expectString)(output.ErrorCode),
        ErrorMessage: (0, smithy_client_1.expectString)(output.ErrorMessage),
        LastUpdateTime: output.LastUpdateTime != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastUpdateTime)))
            : undefined,
        OrganizationConfigRuleName: (0, smithy_client_1.expectString)(output.OrganizationConfigRuleName),
        OrganizationRuleStatus: (0, smithy_client_1.expectString)(output.OrganizationRuleStatus),
    };
};
const de_OrganizationConfigRuleStatuses = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_OrganizationConfigRuleStatus(entry, context);
    });
    return retVal;
};
const de_OrganizationConfigRuleTriggerTypeNoSNs = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const de_OrganizationConfigRuleTriggerTypes = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const de_OrganizationConformancePack = (output, context) => {
    return {
        ConformancePackInputParameters: output.ConformancePackInputParameters != null
            ? de_ConformancePackInputParameters(output.ConformancePackInputParameters, context)
            : undefined,
        DeliveryS3Bucket: (0, smithy_client_1.expectString)(output.DeliveryS3Bucket),
        DeliveryS3KeyPrefix: (0, smithy_client_1.expectString)(output.DeliveryS3KeyPrefix),
        ExcludedAccounts: output.ExcludedAccounts != null ? de_ExcludedAccounts(output.ExcludedAccounts, context) : undefined,
        LastUpdateTime: output.LastUpdateTime != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastUpdateTime)))
            : undefined,
        OrganizationConformancePackArn: (0, smithy_client_1.expectString)(output.OrganizationConformancePackArn),
        OrganizationConformancePackName: (0, smithy_client_1.expectString)(output.OrganizationConformancePackName),
    };
};
const de_OrganizationConformancePackDetailedStatus = (output, context) => {
    return {
        AccountId: (0, smithy_client_1.expectString)(output.AccountId),
        ConformancePackName: (0, smithy_client_1.expectString)(output.ConformancePackName),
        ErrorCode: (0, smithy_client_1.expectString)(output.ErrorCode),
        ErrorMessage: (0, smithy_client_1.expectString)(output.ErrorMessage),
        LastUpdateTime: output.LastUpdateTime != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastUpdateTime)))
            : undefined,
        Status: (0, smithy_client_1.expectString)(output.Status),
    };
};
const de_OrganizationConformancePackDetailedStatuses = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_OrganizationConformancePackDetailedStatus(entry, context);
    });
    return retVal;
};
const de_OrganizationConformancePacks = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_OrganizationConformancePack(entry, context);
    });
    return retVal;
};
const de_OrganizationConformancePackStatus = (output, context) => {
    return {
        ErrorCode: (0, smithy_client_1.expectString)(output.ErrorCode),
        ErrorMessage: (0, smithy_client_1.expectString)(output.ErrorMessage),
        LastUpdateTime: output.LastUpdateTime != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastUpdateTime)))
            : undefined,
        OrganizationConformancePackName: (0, smithy_client_1.expectString)(output.OrganizationConformancePackName),
        Status: (0, smithy_client_1.expectString)(output.Status),
    };
};
const de_OrganizationConformancePackStatuses = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_OrganizationConformancePackStatus(entry, context);
    });
    return retVal;
};
const de_OrganizationConformancePackTemplateValidationException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_OrganizationCustomPolicyRuleMetadataNoPolicy = (output, context) => {
    return {
        DebugLogDeliveryAccounts: output.DebugLogDeliveryAccounts != null
            ? de_DebugLogDeliveryAccounts(output.DebugLogDeliveryAccounts, context)
            : undefined,
        Description: (0, smithy_client_1.expectString)(output.Description),
        InputParameters: (0, smithy_client_1.expectString)(output.InputParameters),
        MaximumExecutionFrequency: (0, smithy_client_1.expectString)(output.MaximumExecutionFrequency),
        OrganizationConfigRuleTriggerTypes: output.OrganizationConfigRuleTriggerTypes != null
            ? de_OrganizationConfigRuleTriggerTypeNoSNs(output.OrganizationConfigRuleTriggerTypes, context)
            : undefined,
        PolicyRuntime: (0, smithy_client_1.expectString)(output.PolicyRuntime),
        ResourceIdScope: (0, smithy_client_1.expectString)(output.ResourceIdScope),
        ResourceTypesScope: output.ResourceTypesScope != null ? de_ResourceTypesScope(output.ResourceTypesScope, context) : undefined,
        TagKeyScope: (0, smithy_client_1.expectString)(output.TagKeyScope),
        TagValueScope: (0, smithy_client_1.expectString)(output.TagValueScope),
    };
};
const de_OrganizationCustomRuleMetadata = (output, context) => {
    return {
        Description: (0, smithy_client_1.expectString)(output.Description),
        InputParameters: (0, smithy_client_1.expectString)(output.InputParameters),
        LambdaFunctionArn: (0, smithy_client_1.expectString)(output.LambdaFunctionArn),
        MaximumExecutionFrequency: (0, smithy_client_1.expectString)(output.MaximumExecutionFrequency),
        OrganizationConfigRuleTriggerTypes: output.OrganizationConfigRuleTriggerTypes != null
            ? de_OrganizationConfigRuleTriggerTypes(output.OrganizationConfigRuleTriggerTypes, context)
            : undefined,
        ResourceIdScope: (0, smithy_client_1.expectString)(output.ResourceIdScope),
        ResourceTypesScope: output.ResourceTypesScope != null ? de_ResourceTypesScope(output.ResourceTypesScope, context) : undefined,
        TagKeyScope: (0, smithy_client_1.expectString)(output.TagKeyScope),
        TagValueScope: (0, smithy_client_1.expectString)(output.TagValueScope),
    };
};
const de_OrganizationManagedRuleMetadata = (output, context) => {
    return {
        Description: (0, smithy_client_1.expectString)(output.Description),
        InputParameters: (0, smithy_client_1.expectString)(output.InputParameters),
        MaximumExecutionFrequency: (0, smithy_client_1.expectString)(output.MaximumExecutionFrequency),
        ResourceIdScope: (0, smithy_client_1.expectString)(output.ResourceIdScope),
        ResourceTypesScope: output.ResourceTypesScope != null ? de_ResourceTypesScope(output.ResourceTypesScope, context) : undefined,
        RuleIdentifier: (0, smithy_client_1.expectString)(output.RuleIdentifier),
        TagKeyScope: (0, smithy_client_1.expectString)(output.TagKeyScope),
        TagValueScope: (0, smithy_client_1.expectString)(output.TagValueScope),
    };
};
const de_OversizedConfigurationItemException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_PendingAggregationRequest = (output, context) => {
    return {
        RequesterAccountId: (0, smithy_client_1.expectString)(output.RequesterAccountId),
        RequesterAwsRegion: (0, smithy_client_1.expectString)(output.RequesterAwsRegion),
    };
};
const de_PendingAggregationRequestList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_PendingAggregationRequest(entry, context);
    });
    return retVal;
};
const de_PutAggregationAuthorizationResponse = (output, context) => {
    return {
        AggregationAuthorization: output.AggregationAuthorization != null
            ? de_AggregationAuthorization(output.AggregationAuthorization, context)
            : undefined,
    };
};
const de_PutConfigurationAggregatorResponse = (output, context) => {
    return {
        ConfigurationAggregator: output.ConfigurationAggregator != null
            ? de_ConfigurationAggregator(output.ConfigurationAggregator, context)
            : undefined,
    };
};
const de_PutConformancePackResponse = (output, context) => {
    return {
        ConformancePackArn: (0, smithy_client_1.expectString)(output.ConformancePackArn),
    };
};
const de_PutEvaluationsResponse = (output, context) => {
    return {
        FailedEvaluations: output.FailedEvaluations != null ? de_Evaluations(output.FailedEvaluations, context) : undefined,
    };
};
const de_PutExternalEvaluationResponse = (output, context) => {
    return {};
};
const de_PutOrganizationConfigRuleResponse = (output, context) => {
    return {
        OrganizationConfigRuleArn: (0, smithy_client_1.expectString)(output.OrganizationConfigRuleArn),
    };
};
const de_PutOrganizationConformancePackResponse = (output, context) => {
    return {
        OrganizationConformancePackArn: (0, smithy_client_1.expectString)(output.OrganizationConformancePackArn),
    };
};
const de_PutRemediationConfigurationsResponse = (output, context) => {
    return {
        FailedBatches: output.FailedBatches != null ? de_FailedRemediationBatches(output.FailedBatches, context) : undefined,
    };
};
const de_PutRemediationExceptionsResponse = (output, context) => {
    return {
        FailedBatches: output.FailedBatches != null ? de_FailedRemediationExceptionBatches(output.FailedBatches, context) : undefined,
    };
};
const de_PutRetentionConfigurationResponse = (output, context) => {
    return {
        RetentionConfiguration: output.RetentionConfiguration != null
            ? de_RetentionConfiguration(output.RetentionConfiguration, context)
            : undefined,
    };
};
const de_PutStoredQueryResponse = (output, context) => {
    return {
        QueryArn: (0, smithy_client_1.expectString)(output.QueryArn),
    };
};
const de_QueryInfo = (output, context) => {
    return {
        SelectFields: output.SelectFields != null ? de_FieldInfoList(output.SelectFields, context) : undefined,
    };
};
const de_RecordingGroup = (output, context) => {
    return {
        allSupported: (0, smithy_client_1.expectBoolean)(output.allSupported),
        includeGlobalResourceTypes: (0, smithy_client_1.expectBoolean)(output.includeGlobalResourceTypes),
        resourceTypes: output.resourceTypes != null ? de_ResourceTypeList(output.resourceTypes, context) : undefined,
    };
};
const de_RelatedEventList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const de_Relationship = (output, context) => {
    return {
        relationshipName: (0, smithy_client_1.expectString)(output.relationshipName),
        resourceId: (0, smithy_client_1.expectString)(output.resourceId),
        resourceName: (0, smithy_client_1.expectString)(output.resourceName),
        resourceType: (0, smithy_client_1.expectString)(output.resourceType),
    };
};
const de_RelationshipList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_Relationship(entry, context);
    });
    return retVal;
};
const de_RemediationConfiguration = (output, context) => {
    return {
        Arn: (0, smithy_client_1.expectString)(output.Arn),
        Automatic: (0, smithy_client_1.expectBoolean)(output.Automatic),
        ConfigRuleName: (0, smithy_client_1.expectString)(output.ConfigRuleName),
        CreatedByService: (0, smithy_client_1.expectString)(output.CreatedByService),
        ExecutionControls: output.ExecutionControls != null ? de_ExecutionControls(output.ExecutionControls, context) : undefined,
        MaximumAutomaticAttempts: (0, smithy_client_1.expectInt32)(output.MaximumAutomaticAttempts),
        Parameters: output.Parameters != null ? de_RemediationParameters(output.Parameters, context) : undefined,
        ResourceType: (0, smithy_client_1.expectString)(output.ResourceType),
        RetryAttemptSeconds: (0, smithy_client_1.expectLong)(output.RetryAttemptSeconds),
        TargetId: (0, smithy_client_1.expectString)(output.TargetId),
        TargetType: (0, smithy_client_1.expectString)(output.TargetType),
        TargetVersion: (0, smithy_client_1.expectString)(output.TargetVersion),
    };
};
const de_RemediationConfigurations = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_RemediationConfiguration(entry, context);
    });
    return retVal;
};
const de_RemediationException = (output, context) => {
    return {
        ConfigRuleName: (0, smithy_client_1.expectString)(output.ConfigRuleName),
        ExpirationTime: output.ExpirationTime != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ExpirationTime)))
            : undefined,
        Message: (0, smithy_client_1.expectString)(output.Message),
        ResourceId: (0, smithy_client_1.expectString)(output.ResourceId),
        ResourceType: (0, smithy_client_1.expectString)(output.ResourceType),
    };
};
const de_RemediationExceptionResourceKey = (output, context) => {
    return {
        ResourceId: (0, smithy_client_1.expectString)(output.ResourceId),
        ResourceType: (0, smithy_client_1.expectString)(output.ResourceType),
    };
};
const de_RemediationExceptionResourceKeys = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_RemediationExceptionResourceKey(entry, context);
    });
    return retVal;
};
const de_RemediationExceptions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_RemediationException(entry, context);
    });
    return retVal;
};
const de_RemediationExecutionStatus = (output, context) => {
    return {
        InvocationTime: output.InvocationTime != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.InvocationTime)))
            : undefined,
        LastUpdatedTime: output.LastUpdatedTime != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastUpdatedTime)))
            : undefined,
        ResourceKey: output.ResourceKey != null ? de_ResourceKey(output.ResourceKey, context) : undefined,
        State: (0, smithy_client_1.expectString)(output.State),
        StepDetails: output.StepDetails != null ? de_RemediationExecutionSteps(output.StepDetails, context) : undefined,
    };
};
const de_RemediationExecutionStatuses = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_RemediationExecutionStatus(entry, context);
    });
    return retVal;
};
const de_RemediationExecutionStep = (output, context) => {
    return {
        ErrorMessage: (0, smithy_client_1.expectString)(output.ErrorMessage),
        Name: (0, smithy_client_1.expectString)(output.Name),
        StartTime: output.StartTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.StartTime))) : undefined,
        State: (0, smithy_client_1.expectString)(output.State),
        StopTime: output.StopTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.StopTime))) : undefined,
    };
};
const de_RemediationExecutionSteps = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_RemediationExecutionStep(entry, context);
    });
    return retVal;
};
const de_RemediationInProgressException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_RemediationParameters = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_RemediationParameterValue(value, context);
        return acc;
    }, {});
};
const de_RemediationParameterValue = (output, context) => {
    return {
        ResourceValue: output.ResourceValue != null ? de_ResourceValue(output.ResourceValue, context) : undefined,
        StaticValue: output.StaticValue != null ? de_StaticValue(output.StaticValue, context) : undefined,
    };
};
const de_ResourceConcurrentModificationException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_ResourceCount = (output, context) => {
    return {
        count: (0, smithy_client_1.expectLong)(output.count),
        resourceType: (0, smithy_client_1.expectString)(output.resourceType),
    };
};
const de_ResourceCounts = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_ResourceCount(entry, context);
    });
    return retVal;
};
const de_ResourceDetails = (output, context) => {
    return {
        ResourceConfiguration: (0, smithy_client_1.expectString)(output.ResourceConfiguration),
        ResourceConfigurationSchemaType: (0, smithy_client_1.expectString)(output.ResourceConfigurationSchemaType),
        ResourceId: (0, smithy_client_1.expectString)(output.ResourceId),
        ResourceType: (0, smithy_client_1.expectString)(output.ResourceType),
    };
};
const de_ResourceEvaluation = (output, context) => {
    return {
        EvaluationMode: (0, smithy_client_1.expectString)(output.EvaluationMode),
        EvaluationStartTimestamp: output.EvaluationStartTimestamp != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.EvaluationStartTimestamp)))
            : undefined,
        ResourceEvaluationId: (0, smithy_client_1.expectString)(output.ResourceEvaluationId),
    };
};
const de_ResourceEvaluations = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_ResourceEvaluation(entry, context);
    });
    return retVal;
};
const de_ResourceIdentifier = (output, context) => {
    return {
        resourceDeletionTime: output.resourceDeletionTime != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.resourceDeletionTime)))
            : undefined,
        resourceId: (0, smithy_client_1.expectString)(output.resourceId),
        resourceName: (0, smithy_client_1.expectString)(output.resourceName),
        resourceType: (0, smithy_client_1.expectString)(output.resourceType),
    };
};
const de_ResourceIdentifierList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_ResourceIdentifier(entry, context);
    });
    return retVal;
};
const de_ResourceInUseException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_ResourceKey = (output, context) => {
    return {
        resourceId: (0, smithy_client_1.expectString)(output.resourceId),
        resourceType: (0, smithy_client_1.expectString)(output.resourceType),
    };
};
const de_ResourceKeys = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_ResourceKey(entry, context);
    });
    return retVal;
};
const de_ResourceNotDiscoveredException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_ResourceNotFoundException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_ResourceTypeList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const de_ResourceTypesScope = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const de_ResourceValue = (output, context) => {
    return {
        Value: (0, smithy_client_1.expectString)(output.Value),
    };
};
const de_Results = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const de_RetentionConfiguration = (output, context) => {
    return {
        Name: (0, smithy_client_1.expectString)(output.Name),
        RetentionPeriodInDays: (0, smithy_client_1.expectInt32)(output.RetentionPeriodInDays),
    };
};
const de_RetentionConfigurationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_RetentionConfiguration(entry, context);
    });
    return retVal;
};
const de_Scope = (output, context) => {
    return {
        ComplianceResourceId: (0, smithy_client_1.expectString)(output.ComplianceResourceId),
        ComplianceResourceTypes: output.ComplianceResourceTypes != null
            ? de_ComplianceResourceTypes(output.ComplianceResourceTypes, context)
            : undefined,
        TagKey: (0, smithy_client_1.expectString)(output.TagKey),
        TagValue: (0, smithy_client_1.expectString)(output.TagValue),
    };
};
const de_SelectAggregateResourceConfigResponse = (output, context) => {
    return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        QueryInfo: output.QueryInfo != null ? de_QueryInfo(output.QueryInfo, context) : undefined,
        Results: output.Results != null ? de_Results(output.Results, context) : undefined,
    };
};
const de_SelectResourceConfigResponse = (output, context) => {
    return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        QueryInfo: output.QueryInfo != null ? de_QueryInfo(output.QueryInfo, context) : undefined,
        Results: output.Results != null ? de_Results(output.Results, context) : undefined,
    };
};
const de_Source = (output, context) => {
    return {
        CustomPolicyDetails: output.CustomPolicyDetails != null ? de_CustomPolicyDetails(output.CustomPolicyDetails, context) : undefined,
        Owner: (0, smithy_client_1.expectString)(output.Owner),
        SourceDetails: output.SourceDetails != null ? de_SourceDetails(output.SourceDetails, context) : undefined,
        SourceIdentifier: (0, smithy_client_1.expectString)(output.SourceIdentifier),
    };
};
const de_SourceDetail = (output, context) => {
    return {
        EventSource: (0, smithy_client_1.expectString)(output.EventSource),
        MaximumExecutionFrequency: (0, smithy_client_1.expectString)(output.MaximumExecutionFrequency),
        MessageType: (0, smithy_client_1.expectString)(output.MessageType),
    };
};
const de_SourceDetails = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_SourceDetail(entry, context);
    });
    return retVal;
};
const de_SsmControls = (output, context) => {
    return {
        ConcurrentExecutionRatePercentage: (0, smithy_client_1.expectInt32)(output.ConcurrentExecutionRatePercentage),
        ErrorPercentage: (0, smithy_client_1.expectInt32)(output.ErrorPercentage),
    };
};
const de_StartConfigRulesEvaluationResponse = (output, context) => {
    return {};
};
const de_StartRemediationExecutionResponse = (output, context) => {
    return {
        FailedItems: output.FailedItems != null ? de_ResourceKeys(output.FailedItems, context) : undefined,
        FailureMessage: (0, smithy_client_1.expectString)(output.FailureMessage),
    };
};
const de_StartResourceEvaluationResponse = (output, context) => {
    return {
        ResourceEvaluationId: (0, smithy_client_1.expectString)(output.ResourceEvaluationId),
    };
};
const de_StaticParameterValues = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const de_StaticValue = (output, context) => {
    return {
        Values: output.Values != null ? de_StaticParameterValues(output.Values, context) : undefined,
    };
};
const de_StoredQuery = (output, context) => {
    return {
        Description: (0, smithy_client_1.expectString)(output.Description),
        Expression: (0, smithy_client_1.expectString)(output.Expression),
        QueryArn: (0, smithy_client_1.expectString)(output.QueryArn),
        QueryId: (0, smithy_client_1.expectString)(output.QueryId),
        QueryName: (0, smithy_client_1.expectString)(output.QueryName),
    };
};
const de_StoredQueryMetadata = (output, context) => {
    return {
        Description: (0, smithy_client_1.expectString)(output.Description),
        QueryArn: (0, smithy_client_1.expectString)(output.QueryArn),
        QueryId: (0, smithy_client_1.expectString)(output.QueryId),
        QueryName: (0, smithy_client_1.expectString)(output.QueryName),
    };
};
const de_StoredQueryMetadataList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_StoredQueryMetadata(entry, context);
    });
    return retVal;
};
const de_SupplementaryConfiguration = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = (0, smithy_client_1.expectString)(value);
        return acc;
    }, {});
};
const de_Tag = (output, context) => {
    return {
        Key: (0, smithy_client_1.expectString)(output.Key),
        Value: (0, smithy_client_1.expectString)(output.Value),
    };
};
const de_TagList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_Tag(entry, context);
    });
    return retVal;
};
const de_Tags = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = (0, smithy_client_1.expectString)(value);
        return acc;
    }, {});
};
const de_TemplateSSMDocumentDetails = (output, context) => {
    return {
        DocumentName: (0, smithy_client_1.expectString)(output.DocumentName),
        DocumentVersion: (0, smithy_client_1.expectString)(output.DocumentVersion),
    };
};
const de_TooManyTagsException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_UnprocessedResourceIdentifierList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_AggregateResourceIdentifier(entry, context);
    });
    return retVal;
};
const de_ValidationException = (output, context) => {
    return {
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBody = (streamBody = new Uint8Array(), context) => {
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new protocol_http_1.HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `StarlingDoveService.${operation}`,
    };
}
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
