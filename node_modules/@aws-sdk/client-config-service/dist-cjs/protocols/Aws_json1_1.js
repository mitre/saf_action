"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.se_GetComplianceDetailsByResourceCommand = exports.se_GetComplianceDetailsByConfigRuleCommand = exports.se_GetAggregateResourceConfigCommand = exports.se_GetAggregateDiscoveredResourceCountsCommand = exports.se_GetAggregateConformancePackComplianceSummaryCommand = exports.se_GetAggregateConfigRuleComplianceSummaryCommand = exports.se_GetAggregateComplianceDetailsByConfigRuleCommand = exports.se_DescribeRetentionConfigurationsCommand = exports.se_DescribeRemediationExecutionStatusCommand = exports.se_DescribeRemediationExceptionsCommand = exports.se_DescribeRemediationConfigurationsCommand = exports.se_DescribePendingAggregationRequestsCommand = exports.se_DescribeOrganizationConformancePackStatusesCommand = exports.se_DescribeOrganizationConformancePacksCommand = exports.se_DescribeOrganizationConfigRuleStatusesCommand = exports.se_DescribeOrganizationConfigRulesCommand = exports.se_DescribeDeliveryChannelStatusCommand = exports.se_DescribeDeliveryChannelsCommand = exports.se_DescribeConformancePackStatusCommand = exports.se_DescribeConformancePacksCommand = exports.se_DescribeConformancePackComplianceCommand = exports.se_DescribeConfigurationRecorderStatusCommand = exports.se_DescribeConfigurationRecordersCommand = exports.se_DescribeConfigurationAggregatorSourcesStatusCommand = exports.se_DescribeConfigurationAggregatorsCommand = exports.se_DescribeConfigRulesCommand = exports.se_DescribeConfigRuleEvaluationStatusCommand = exports.se_DescribeComplianceByResourceCommand = exports.se_DescribeComplianceByConfigRuleCommand = exports.se_DescribeAggregationAuthorizationsCommand = exports.se_DescribeAggregateComplianceByConformancePacksCommand = exports.se_DescribeAggregateComplianceByConfigRulesCommand = exports.se_DeliverConfigSnapshotCommand = exports.se_DeleteStoredQueryCommand = exports.se_DeleteRetentionConfigurationCommand = exports.se_DeleteResourceConfigCommand = exports.se_DeleteRemediationExceptionsCommand = exports.se_DeleteRemediationConfigurationCommand = exports.se_DeletePendingAggregationRequestCommand = exports.se_DeleteOrganizationConformancePackCommand = exports.se_DeleteOrganizationConfigRuleCommand = exports.se_DeleteEvaluationResultsCommand = exports.se_DeleteDeliveryChannelCommand = exports.se_DeleteConformancePackCommand = exports.se_DeleteConfigurationRecorderCommand = exports.se_DeleteConfigurationAggregatorCommand = exports.se_DeleteConfigRuleCommand = exports.se_DeleteAggregationAuthorizationCommand = exports.se_BatchGetResourceConfigCommand = exports.se_BatchGetAggregateResourceConfigCommand = void 0;
exports.de_DeleteDeliveryChannelCommand = exports.de_DeleteConformancePackCommand = exports.de_DeleteConfigurationRecorderCommand = exports.de_DeleteConfigurationAggregatorCommand = exports.de_DeleteConfigRuleCommand = exports.de_DeleteAggregationAuthorizationCommand = exports.de_BatchGetResourceConfigCommand = exports.de_BatchGetAggregateResourceConfigCommand = exports.se_UntagResourceCommand = exports.se_TagResourceCommand = exports.se_StopConfigurationRecorderCommand = exports.se_StartResourceEvaluationCommand = exports.se_StartRemediationExecutionCommand = exports.se_StartConfigurationRecorderCommand = exports.se_StartConfigRulesEvaluationCommand = exports.se_SelectResourceConfigCommand = exports.se_SelectAggregateResourceConfigCommand = exports.se_PutStoredQueryCommand = exports.se_PutRetentionConfigurationCommand = exports.se_PutResourceConfigCommand = exports.se_PutRemediationExceptionsCommand = exports.se_PutRemediationConfigurationsCommand = exports.se_PutOrganizationConformancePackCommand = exports.se_PutOrganizationConfigRuleCommand = exports.se_PutExternalEvaluationCommand = exports.se_PutEvaluationsCommand = exports.se_PutDeliveryChannelCommand = exports.se_PutConformancePackCommand = exports.se_PutConfigurationRecorderCommand = exports.se_PutConfigurationAggregatorCommand = exports.se_PutConfigRuleCommand = exports.se_PutAggregationAuthorizationCommand = exports.se_ListTagsForResourceCommand = exports.se_ListStoredQueriesCommand = exports.se_ListResourceEvaluationsCommand = exports.se_ListDiscoveredResourcesCommand = exports.se_ListConformancePackComplianceScoresCommand = exports.se_ListAggregateDiscoveredResourcesCommand = exports.se_GetStoredQueryCommand = exports.se_GetResourceEvaluationSummaryCommand = exports.se_GetResourceConfigHistoryCommand = exports.se_GetOrganizationCustomRulePolicyCommand = exports.se_GetOrganizationConformancePackDetailedStatusCommand = exports.se_GetOrganizationConfigRuleDetailedStatusCommand = exports.se_GetDiscoveredResourceCountsCommand = exports.se_GetCustomRulePolicyCommand = exports.se_GetConformancePackComplianceSummaryCommand = exports.se_GetConformancePackComplianceDetailsCommand = exports.se_GetComplianceSummaryByResourceTypeCommand = exports.se_GetComplianceSummaryByConfigRuleCommand = void 0;
exports.de_GetOrganizationConformancePackDetailedStatusCommand = exports.de_GetOrganizationConfigRuleDetailedStatusCommand = exports.de_GetDiscoveredResourceCountsCommand = exports.de_GetCustomRulePolicyCommand = exports.de_GetConformancePackComplianceSummaryCommand = exports.de_GetConformancePackComplianceDetailsCommand = exports.de_GetComplianceSummaryByResourceTypeCommand = exports.de_GetComplianceSummaryByConfigRuleCommand = exports.de_GetComplianceDetailsByResourceCommand = exports.de_GetComplianceDetailsByConfigRuleCommand = exports.de_GetAggregateResourceConfigCommand = exports.de_GetAggregateDiscoveredResourceCountsCommand = exports.de_GetAggregateConformancePackComplianceSummaryCommand = exports.de_GetAggregateConfigRuleComplianceSummaryCommand = exports.de_GetAggregateComplianceDetailsByConfigRuleCommand = exports.de_DescribeRetentionConfigurationsCommand = exports.de_DescribeRemediationExecutionStatusCommand = exports.de_DescribeRemediationExceptionsCommand = exports.de_DescribeRemediationConfigurationsCommand = exports.de_DescribePendingAggregationRequestsCommand = exports.de_DescribeOrganizationConformancePackStatusesCommand = exports.de_DescribeOrganizationConformancePacksCommand = exports.de_DescribeOrganizationConfigRuleStatusesCommand = exports.de_DescribeOrganizationConfigRulesCommand = exports.de_DescribeDeliveryChannelStatusCommand = exports.de_DescribeDeliveryChannelsCommand = exports.de_DescribeConformancePackStatusCommand = exports.de_DescribeConformancePacksCommand = exports.de_DescribeConformancePackComplianceCommand = exports.de_DescribeConfigurationRecorderStatusCommand = exports.de_DescribeConfigurationRecordersCommand = exports.de_DescribeConfigurationAggregatorSourcesStatusCommand = exports.de_DescribeConfigurationAggregatorsCommand = exports.de_DescribeConfigRulesCommand = exports.de_DescribeConfigRuleEvaluationStatusCommand = exports.de_DescribeComplianceByResourceCommand = exports.de_DescribeComplianceByConfigRuleCommand = exports.de_DescribeAggregationAuthorizationsCommand = exports.de_DescribeAggregateComplianceByConformancePacksCommand = exports.de_DescribeAggregateComplianceByConfigRulesCommand = exports.de_DeliverConfigSnapshotCommand = exports.de_DeleteStoredQueryCommand = exports.de_DeleteRetentionConfigurationCommand = exports.de_DeleteResourceConfigCommand = exports.de_DeleteRemediationExceptionsCommand = exports.de_DeleteRemediationConfigurationCommand = exports.de_DeletePendingAggregationRequestCommand = exports.de_DeleteOrganizationConformancePackCommand = exports.de_DeleteOrganizationConfigRuleCommand = exports.de_DeleteEvaluationResultsCommand = void 0;
exports.de_UntagResourceCommand = exports.de_TagResourceCommand = exports.de_StopConfigurationRecorderCommand = exports.de_StartResourceEvaluationCommand = exports.de_StartRemediationExecutionCommand = exports.de_StartConfigurationRecorderCommand = exports.de_StartConfigRulesEvaluationCommand = exports.de_SelectResourceConfigCommand = exports.de_SelectAggregateResourceConfigCommand = exports.de_PutStoredQueryCommand = exports.de_PutRetentionConfigurationCommand = exports.de_PutResourceConfigCommand = exports.de_PutRemediationExceptionsCommand = exports.de_PutRemediationConfigurationsCommand = exports.de_PutOrganizationConformancePackCommand = exports.de_PutOrganizationConfigRuleCommand = exports.de_PutExternalEvaluationCommand = exports.de_PutEvaluationsCommand = exports.de_PutDeliveryChannelCommand = exports.de_PutConformancePackCommand = exports.de_PutConfigurationRecorderCommand = exports.de_PutConfigurationAggregatorCommand = exports.de_PutConfigRuleCommand = exports.de_PutAggregationAuthorizationCommand = exports.de_ListTagsForResourceCommand = exports.de_ListStoredQueriesCommand = exports.de_ListResourceEvaluationsCommand = exports.de_ListDiscoveredResourcesCommand = exports.de_ListConformancePackComplianceScoresCommand = exports.de_ListAggregateDiscoveredResourcesCommand = exports.de_GetStoredQueryCommand = exports.de_GetResourceEvaluationSummaryCommand = exports.de_GetResourceConfigHistoryCommand = exports.de_GetOrganizationCustomRulePolicyCommand = void 0;
const smithy_client_1 = require("@aws-sdk/smithy-client");
const protocol_http_1 = require("@smithy/protocol-http");
const ConfigServiceServiceException_1 = require("../models/ConfigServiceServiceException");
const models_0_1 = require("../models/models_0");
const models_1_1 = require("../models/models_1");
const se_BatchGetAggregateResourceConfigCommand = async (input, context) => {
    const headers = sharedHeaders("BatchGetAggregateResourceConfig");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_BatchGetAggregateResourceConfigCommand = se_BatchGetAggregateResourceConfigCommand;
const se_BatchGetResourceConfigCommand = async (input, context) => {
    const headers = sharedHeaders("BatchGetResourceConfig");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_BatchGetResourceConfigCommand = se_BatchGetResourceConfigCommand;
const se_DeleteAggregationAuthorizationCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteAggregationAuthorization");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteAggregationAuthorizationCommand = se_DeleteAggregationAuthorizationCommand;
const se_DeleteConfigRuleCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteConfigRule");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteConfigRuleCommand = se_DeleteConfigRuleCommand;
const se_DeleteConfigurationAggregatorCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteConfigurationAggregator");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteConfigurationAggregatorCommand = se_DeleteConfigurationAggregatorCommand;
const se_DeleteConfigurationRecorderCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteConfigurationRecorder");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteConfigurationRecorderCommand = se_DeleteConfigurationRecorderCommand;
const se_DeleteConformancePackCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteConformancePack");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteConformancePackCommand = se_DeleteConformancePackCommand;
const se_DeleteDeliveryChannelCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteDeliveryChannel");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteDeliveryChannelCommand = se_DeleteDeliveryChannelCommand;
const se_DeleteEvaluationResultsCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteEvaluationResults");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteEvaluationResultsCommand = se_DeleteEvaluationResultsCommand;
const se_DeleteOrganizationConfigRuleCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteOrganizationConfigRule");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteOrganizationConfigRuleCommand = se_DeleteOrganizationConfigRuleCommand;
const se_DeleteOrganizationConformancePackCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteOrganizationConformancePack");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteOrganizationConformancePackCommand = se_DeleteOrganizationConformancePackCommand;
const se_DeletePendingAggregationRequestCommand = async (input, context) => {
    const headers = sharedHeaders("DeletePendingAggregationRequest");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeletePendingAggregationRequestCommand = se_DeletePendingAggregationRequestCommand;
const se_DeleteRemediationConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteRemediationConfiguration");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteRemediationConfigurationCommand = se_DeleteRemediationConfigurationCommand;
const se_DeleteRemediationExceptionsCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteRemediationExceptions");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteRemediationExceptionsCommand = se_DeleteRemediationExceptionsCommand;
const se_DeleteResourceConfigCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteResourceConfig");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteResourceConfigCommand = se_DeleteResourceConfigCommand;
const se_DeleteRetentionConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteRetentionConfiguration");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteRetentionConfigurationCommand = se_DeleteRetentionConfigurationCommand;
const se_DeleteStoredQueryCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteStoredQuery");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteStoredQueryCommand = se_DeleteStoredQueryCommand;
const se_DeliverConfigSnapshotCommand = async (input, context) => {
    const headers = sharedHeaders("DeliverConfigSnapshot");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeliverConfigSnapshotCommand = se_DeliverConfigSnapshotCommand;
const se_DescribeAggregateComplianceByConfigRulesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeAggregateComplianceByConfigRules");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeAggregateComplianceByConfigRulesCommand = se_DescribeAggregateComplianceByConfigRulesCommand;
const se_DescribeAggregateComplianceByConformancePacksCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeAggregateComplianceByConformancePacks");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeAggregateComplianceByConformancePacksCommand = se_DescribeAggregateComplianceByConformancePacksCommand;
const se_DescribeAggregationAuthorizationsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeAggregationAuthorizations");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeAggregationAuthorizationsCommand = se_DescribeAggregationAuthorizationsCommand;
const se_DescribeComplianceByConfigRuleCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeComplianceByConfigRule");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeComplianceByConfigRuleCommand = se_DescribeComplianceByConfigRuleCommand;
const se_DescribeComplianceByResourceCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeComplianceByResource");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeComplianceByResourceCommand = se_DescribeComplianceByResourceCommand;
const se_DescribeConfigRuleEvaluationStatusCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeConfigRuleEvaluationStatus");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeConfigRuleEvaluationStatusCommand = se_DescribeConfigRuleEvaluationStatusCommand;
const se_DescribeConfigRulesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeConfigRules");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeConfigRulesCommand = se_DescribeConfigRulesCommand;
const se_DescribeConfigurationAggregatorsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeConfigurationAggregators");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeConfigurationAggregatorsCommand = se_DescribeConfigurationAggregatorsCommand;
const se_DescribeConfigurationAggregatorSourcesStatusCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeConfigurationAggregatorSourcesStatus");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeConfigurationAggregatorSourcesStatusCommand = se_DescribeConfigurationAggregatorSourcesStatusCommand;
const se_DescribeConfigurationRecordersCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeConfigurationRecorders");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeConfigurationRecordersCommand = se_DescribeConfigurationRecordersCommand;
const se_DescribeConfigurationRecorderStatusCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeConfigurationRecorderStatus");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeConfigurationRecorderStatusCommand = se_DescribeConfigurationRecorderStatusCommand;
const se_DescribeConformancePackComplianceCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeConformancePackCompliance");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeConformancePackComplianceCommand = se_DescribeConformancePackComplianceCommand;
const se_DescribeConformancePacksCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeConformancePacks");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeConformancePacksCommand = se_DescribeConformancePacksCommand;
const se_DescribeConformancePackStatusCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeConformancePackStatus");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeConformancePackStatusCommand = se_DescribeConformancePackStatusCommand;
const se_DescribeDeliveryChannelsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeDeliveryChannels");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeDeliveryChannelsCommand = se_DescribeDeliveryChannelsCommand;
const se_DescribeDeliveryChannelStatusCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeDeliveryChannelStatus");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeDeliveryChannelStatusCommand = se_DescribeDeliveryChannelStatusCommand;
const se_DescribeOrganizationConfigRulesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeOrganizationConfigRules");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeOrganizationConfigRulesCommand = se_DescribeOrganizationConfigRulesCommand;
const se_DescribeOrganizationConfigRuleStatusesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeOrganizationConfigRuleStatuses");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeOrganizationConfigRuleStatusesCommand = se_DescribeOrganizationConfigRuleStatusesCommand;
const se_DescribeOrganizationConformancePacksCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeOrganizationConformancePacks");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeOrganizationConformancePacksCommand = se_DescribeOrganizationConformancePacksCommand;
const se_DescribeOrganizationConformancePackStatusesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeOrganizationConformancePackStatuses");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeOrganizationConformancePackStatusesCommand = se_DescribeOrganizationConformancePackStatusesCommand;
const se_DescribePendingAggregationRequestsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribePendingAggregationRequests");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribePendingAggregationRequestsCommand = se_DescribePendingAggregationRequestsCommand;
const se_DescribeRemediationConfigurationsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeRemediationConfigurations");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeRemediationConfigurationsCommand = se_DescribeRemediationConfigurationsCommand;
const se_DescribeRemediationExceptionsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeRemediationExceptions");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeRemediationExceptionsCommand = se_DescribeRemediationExceptionsCommand;
const se_DescribeRemediationExecutionStatusCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeRemediationExecutionStatus");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeRemediationExecutionStatusCommand = se_DescribeRemediationExecutionStatusCommand;
const se_DescribeRetentionConfigurationsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeRetentionConfigurations");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeRetentionConfigurationsCommand = se_DescribeRetentionConfigurationsCommand;
const se_GetAggregateComplianceDetailsByConfigRuleCommand = async (input, context) => {
    const headers = sharedHeaders("GetAggregateComplianceDetailsByConfigRule");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetAggregateComplianceDetailsByConfigRuleCommand = se_GetAggregateComplianceDetailsByConfigRuleCommand;
const se_GetAggregateConfigRuleComplianceSummaryCommand = async (input, context) => {
    const headers = sharedHeaders("GetAggregateConfigRuleComplianceSummary");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetAggregateConfigRuleComplianceSummaryCommand = se_GetAggregateConfigRuleComplianceSummaryCommand;
const se_GetAggregateConformancePackComplianceSummaryCommand = async (input, context) => {
    const headers = sharedHeaders("GetAggregateConformancePackComplianceSummary");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetAggregateConformancePackComplianceSummaryCommand = se_GetAggregateConformancePackComplianceSummaryCommand;
const se_GetAggregateDiscoveredResourceCountsCommand = async (input, context) => {
    const headers = sharedHeaders("GetAggregateDiscoveredResourceCounts");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetAggregateDiscoveredResourceCountsCommand = se_GetAggregateDiscoveredResourceCountsCommand;
const se_GetAggregateResourceConfigCommand = async (input, context) => {
    const headers = sharedHeaders("GetAggregateResourceConfig");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetAggregateResourceConfigCommand = se_GetAggregateResourceConfigCommand;
const se_GetComplianceDetailsByConfigRuleCommand = async (input, context) => {
    const headers = sharedHeaders("GetComplianceDetailsByConfigRule");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetComplianceDetailsByConfigRuleCommand = se_GetComplianceDetailsByConfigRuleCommand;
const se_GetComplianceDetailsByResourceCommand = async (input, context) => {
    const headers = sharedHeaders("GetComplianceDetailsByResource");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetComplianceDetailsByResourceCommand = se_GetComplianceDetailsByResourceCommand;
const se_GetComplianceSummaryByConfigRuleCommand = async (input, context) => {
    const headers = sharedHeaders("GetComplianceSummaryByConfigRule");
    const body = "{}";
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetComplianceSummaryByConfigRuleCommand = se_GetComplianceSummaryByConfigRuleCommand;
const se_GetComplianceSummaryByResourceTypeCommand = async (input, context) => {
    const headers = sharedHeaders("GetComplianceSummaryByResourceType");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetComplianceSummaryByResourceTypeCommand = se_GetComplianceSummaryByResourceTypeCommand;
const se_GetConformancePackComplianceDetailsCommand = async (input, context) => {
    const headers = sharedHeaders("GetConformancePackComplianceDetails");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetConformancePackComplianceDetailsCommand = se_GetConformancePackComplianceDetailsCommand;
const se_GetConformancePackComplianceSummaryCommand = async (input, context) => {
    const headers = sharedHeaders("GetConformancePackComplianceSummary");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetConformancePackComplianceSummaryCommand = se_GetConformancePackComplianceSummaryCommand;
const se_GetCustomRulePolicyCommand = async (input, context) => {
    const headers = sharedHeaders("GetCustomRulePolicy");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetCustomRulePolicyCommand = se_GetCustomRulePolicyCommand;
const se_GetDiscoveredResourceCountsCommand = async (input, context) => {
    const headers = sharedHeaders("GetDiscoveredResourceCounts");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetDiscoveredResourceCountsCommand = se_GetDiscoveredResourceCountsCommand;
const se_GetOrganizationConfigRuleDetailedStatusCommand = async (input, context) => {
    const headers = sharedHeaders("GetOrganizationConfigRuleDetailedStatus");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetOrganizationConfigRuleDetailedStatusCommand = se_GetOrganizationConfigRuleDetailedStatusCommand;
const se_GetOrganizationConformancePackDetailedStatusCommand = async (input, context) => {
    const headers = sharedHeaders("GetOrganizationConformancePackDetailedStatus");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetOrganizationConformancePackDetailedStatusCommand = se_GetOrganizationConformancePackDetailedStatusCommand;
const se_GetOrganizationCustomRulePolicyCommand = async (input, context) => {
    const headers = sharedHeaders("GetOrganizationCustomRulePolicy");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetOrganizationCustomRulePolicyCommand = se_GetOrganizationCustomRulePolicyCommand;
const se_GetResourceConfigHistoryCommand = async (input, context) => {
    const headers = sharedHeaders("GetResourceConfigHistory");
    let body;
    body = JSON.stringify(se_GetResourceConfigHistoryRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetResourceConfigHistoryCommand = se_GetResourceConfigHistoryCommand;
const se_GetResourceEvaluationSummaryCommand = async (input, context) => {
    const headers = sharedHeaders("GetResourceEvaluationSummary");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetResourceEvaluationSummaryCommand = se_GetResourceEvaluationSummaryCommand;
const se_GetStoredQueryCommand = async (input, context) => {
    const headers = sharedHeaders("GetStoredQuery");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetStoredQueryCommand = se_GetStoredQueryCommand;
const se_ListAggregateDiscoveredResourcesCommand = async (input, context) => {
    const headers = sharedHeaders("ListAggregateDiscoveredResources");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListAggregateDiscoveredResourcesCommand = se_ListAggregateDiscoveredResourcesCommand;
const se_ListConformancePackComplianceScoresCommand = async (input, context) => {
    const headers = sharedHeaders("ListConformancePackComplianceScores");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListConformancePackComplianceScoresCommand = se_ListConformancePackComplianceScoresCommand;
const se_ListDiscoveredResourcesCommand = async (input, context) => {
    const headers = sharedHeaders("ListDiscoveredResources");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListDiscoveredResourcesCommand = se_ListDiscoveredResourcesCommand;
const se_ListResourceEvaluationsCommand = async (input, context) => {
    const headers = sharedHeaders("ListResourceEvaluations");
    let body;
    body = JSON.stringify(se_ListResourceEvaluationsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListResourceEvaluationsCommand = se_ListResourceEvaluationsCommand;
const se_ListStoredQueriesCommand = async (input, context) => {
    const headers = sharedHeaders("ListStoredQueries");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListStoredQueriesCommand = se_ListStoredQueriesCommand;
const se_ListTagsForResourceCommand = async (input, context) => {
    const headers = sharedHeaders("ListTagsForResource");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListTagsForResourceCommand = se_ListTagsForResourceCommand;
const se_PutAggregationAuthorizationCommand = async (input, context) => {
    const headers = sharedHeaders("PutAggregationAuthorization");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PutAggregationAuthorizationCommand = se_PutAggregationAuthorizationCommand;
const se_PutConfigRuleCommand = async (input, context) => {
    const headers = sharedHeaders("PutConfigRule");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PutConfigRuleCommand = se_PutConfigRuleCommand;
const se_PutConfigurationAggregatorCommand = async (input, context) => {
    const headers = sharedHeaders("PutConfigurationAggregator");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PutConfigurationAggregatorCommand = se_PutConfigurationAggregatorCommand;
const se_PutConfigurationRecorderCommand = async (input, context) => {
    const headers = sharedHeaders("PutConfigurationRecorder");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PutConfigurationRecorderCommand = se_PutConfigurationRecorderCommand;
const se_PutConformancePackCommand = async (input, context) => {
    const headers = sharedHeaders("PutConformancePack");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PutConformancePackCommand = se_PutConformancePackCommand;
const se_PutDeliveryChannelCommand = async (input, context) => {
    const headers = sharedHeaders("PutDeliveryChannel");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PutDeliveryChannelCommand = se_PutDeliveryChannelCommand;
const se_PutEvaluationsCommand = async (input, context) => {
    const headers = sharedHeaders("PutEvaluations");
    let body;
    body = JSON.stringify(se_PutEvaluationsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PutEvaluationsCommand = se_PutEvaluationsCommand;
const se_PutExternalEvaluationCommand = async (input, context) => {
    const headers = sharedHeaders("PutExternalEvaluation");
    let body;
    body = JSON.stringify(se_PutExternalEvaluationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PutExternalEvaluationCommand = se_PutExternalEvaluationCommand;
const se_PutOrganizationConfigRuleCommand = async (input, context) => {
    const headers = sharedHeaders("PutOrganizationConfigRule");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PutOrganizationConfigRuleCommand = se_PutOrganizationConfigRuleCommand;
const se_PutOrganizationConformancePackCommand = async (input, context) => {
    const headers = sharedHeaders("PutOrganizationConformancePack");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PutOrganizationConformancePackCommand = se_PutOrganizationConformancePackCommand;
const se_PutRemediationConfigurationsCommand = async (input, context) => {
    const headers = sharedHeaders("PutRemediationConfigurations");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PutRemediationConfigurationsCommand = se_PutRemediationConfigurationsCommand;
const se_PutRemediationExceptionsCommand = async (input, context) => {
    const headers = sharedHeaders("PutRemediationExceptions");
    let body;
    body = JSON.stringify(se_PutRemediationExceptionsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PutRemediationExceptionsCommand = se_PutRemediationExceptionsCommand;
const se_PutResourceConfigCommand = async (input, context) => {
    const headers = sharedHeaders("PutResourceConfig");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PutResourceConfigCommand = se_PutResourceConfigCommand;
const se_PutRetentionConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("PutRetentionConfiguration");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PutRetentionConfigurationCommand = se_PutRetentionConfigurationCommand;
const se_PutStoredQueryCommand = async (input, context) => {
    const headers = sharedHeaders("PutStoredQuery");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PutStoredQueryCommand = se_PutStoredQueryCommand;
const se_SelectAggregateResourceConfigCommand = async (input, context) => {
    const headers = sharedHeaders("SelectAggregateResourceConfig");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_SelectAggregateResourceConfigCommand = se_SelectAggregateResourceConfigCommand;
const se_SelectResourceConfigCommand = async (input, context) => {
    const headers = sharedHeaders("SelectResourceConfig");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_SelectResourceConfigCommand = se_SelectResourceConfigCommand;
const se_StartConfigRulesEvaluationCommand = async (input, context) => {
    const headers = sharedHeaders("StartConfigRulesEvaluation");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StartConfigRulesEvaluationCommand = se_StartConfigRulesEvaluationCommand;
const se_StartConfigurationRecorderCommand = async (input, context) => {
    const headers = sharedHeaders("StartConfigurationRecorder");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StartConfigurationRecorderCommand = se_StartConfigurationRecorderCommand;
const se_StartRemediationExecutionCommand = async (input, context) => {
    const headers = sharedHeaders("StartRemediationExecution");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StartRemediationExecutionCommand = se_StartRemediationExecutionCommand;
const se_StartResourceEvaluationCommand = async (input, context) => {
    const headers = sharedHeaders("StartResourceEvaluation");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StartResourceEvaluationCommand = se_StartResourceEvaluationCommand;
const se_StopConfigurationRecorderCommand = async (input, context) => {
    const headers = sharedHeaders("StopConfigurationRecorder");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StopConfigurationRecorderCommand = se_StopConfigurationRecorderCommand;
const se_TagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("TagResource");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_TagResourceCommand = se_TagResourceCommand;
const se_UntagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("UntagResource");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UntagResourceCommand = se_UntagResourceCommand;
const de_BatchGetAggregateResourceConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_BatchGetAggregateResourceConfigCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_BatchGetAggregateResourceConfigResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_BatchGetAggregateResourceConfigCommand = de_BatchGetAggregateResourceConfigCommand;
const de_BatchGetAggregateResourceConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoSuchConfigurationAggregatorException":
        case "com.amazonaws.configservice#NoSuchConfigurationAggregatorException":
            throw await de_NoSuchConfigurationAggregatorExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_BatchGetResourceConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_BatchGetResourceConfigCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_BatchGetResourceConfigResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_BatchGetResourceConfigCommand = de_BatchGetResourceConfigCommand;
const de_BatchGetResourceConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoAvailableConfigurationRecorderException":
        case "com.amazonaws.configservice#NoAvailableConfigurationRecorderException":
            throw await de_NoAvailableConfigurationRecorderExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteAggregationAuthorizationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteAggregationAuthorizationCommandError(output, context);
    }
    await (0, smithy_client_1.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_DeleteAggregationAuthorizationCommand = de_DeleteAggregationAuthorizationCommand;
const de_DeleteAggregationAuthorizationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteConfigRuleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteConfigRuleCommandError(output, context);
    }
    await (0, smithy_client_1.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_DeleteConfigRuleCommand = de_DeleteConfigRuleCommand;
const de_DeleteConfigRuleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoSuchConfigRuleException":
        case "com.amazonaws.configservice#NoSuchConfigRuleException":
            throw await de_NoSuchConfigRuleExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.configservice#ResourceInUseException":
            throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteConfigurationAggregatorCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteConfigurationAggregatorCommandError(output, context);
    }
    await (0, smithy_client_1.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_DeleteConfigurationAggregatorCommand = de_DeleteConfigurationAggregatorCommand;
const de_DeleteConfigurationAggregatorCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoSuchConfigurationAggregatorException":
        case "com.amazonaws.configservice#NoSuchConfigurationAggregatorException":
            throw await de_NoSuchConfigurationAggregatorExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteConfigurationRecorderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteConfigurationRecorderCommandError(output, context);
    }
    await (0, smithy_client_1.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_DeleteConfigurationRecorderCommand = de_DeleteConfigurationRecorderCommand;
const de_DeleteConfigurationRecorderCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoSuchConfigurationRecorderException":
        case "com.amazonaws.configservice#NoSuchConfigurationRecorderException":
            throw await de_NoSuchConfigurationRecorderExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteConformancePackCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteConformancePackCommandError(output, context);
    }
    await (0, smithy_client_1.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_DeleteConformancePackCommand = de_DeleteConformancePackCommand;
const de_DeleteConformancePackCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoSuchConformancePackException":
        case "com.amazonaws.configservice#NoSuchConformancePackException":
            throw await de_NoSuchConformancePackExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.configservice#ResourceInUseException":
            throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteDeliveryChannelCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteDeliveryChannelCommandError(output, context);
    }
    await (0, smithy_client_1.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_DeleteDeliveryChannelCommand = de_DeleteDeliveryChannelCommand;
const de_DeleteDeliveryChannelCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "LastDeliveryChannelDeleteFailedException":
        case "com.amazonaws.configservice#LastDeliveryChannelDeleteFailedException":
            throw await de_LastDeliveryChannelDeleteFailedExceptionRes(parsedOutput, context);
        case "NoSuchDeliveryChannelException":
        case "com.amazonaws.configservice#NoSuchDeliveryChannelException":
            throw await de_NoSuchDeliveryChannelExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteEvaluationResultsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteEvaluationResultsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteEvaluationResultsCommand = de_DeleteEvaluationResultsCommand;
const de_DeleteEvaluationResultsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoSuchConfigRuleException":
        case "com.amazonaws.configservice#NoSuchConfigRuleException":
            throw await de_NoSuchConfigRuleExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.configservice#ResourceInUseException":
            throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteOrganizationConfigRuleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteOrganizationConfigRuleCommandError(output, context);
    }
    await (0, smithy_client_1.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_DeleteOrganizationConfigRuleCommand = de_DeleteOrganizationConfigRuleCommand;
const de_DeleteOrganizationConfigRuleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoSuchOrganizationConfigRuleException":
        case "com.amazonaws.configservice#NoSuchOrganizationConfigRuleException":
            throw await de_NoSuchOrganizationConfigRuleExceptionRes(parsedOutput, context);
        case "OrganizationAccessDeniedException":
        case "com.amazonaws.configservice#OrganizationAccessDeniedException":
            throw await de_OrganizationAccessDeniedExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.configservice#ResourceInUseException":
            throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteOrganizationConformancePackCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteOrganizationConformancePackCommandError(output, context);
    }
    await (0, smithy_client_1.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_DeleteOrganizationConformancePackCommand = de_DeleteOrganizationConformancePackCommand;
const de_DeleteOrganizationConformancePackCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoSuchOrganizationConformancePackException":
        case "com.amazonaws.configservice#NoSuchOrganizationConformancePackException":
            throw await de_NoSuchOrganizationConformancePackExceptionRes(parsedOutput, context);
        case "OrganizationAccessDeniedException":
        case "com.amazonaws.configservice#OrganizationAccessDeniedException":
            throw await de_OrganizationAccessDeniedExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.configservice#ResourceInUseException":
            throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeletePendingAggregationRequestCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeletePendingAggregationRequestCommandError(output, context);
    }
    await (0, smithy_client_1.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_DeletePendingAggregationRequestCommand = de_DeletePendingAggregationRequestCommand;
const de_DeletePendingAggregationRequestCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteRemediationConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteRemediationConfigurationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteRemediationConfigurationCommand = de_DeleteRemediationConfigurationCommand;
const de_DeleteRemediationConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InsufficientPermissionsException":
        case "com.amazonaws.configservice#InsufficientPermissionsException":
            throw await de_InsufficientPermissionsExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "NoSuchRemediationConfigurationException":
        case "com.amazonaws.configservice#NoSuchRemediationConfigurationException":
            throw await de_NoSuchRemediationConfigurationExceptionRes(parsedOutput, context);
        case "RemediationInProgressException":
        case "com.amazonaws.configservice#RemediationInProgressException":
            throw await de_RemediationInProgressExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteRemediationExceptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteRemediationExceptionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteRemediationExceptionsCommand = de_DeleteRemediationExceptionsCommand;
const de_DeleteRemediationExceptionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoSuchRemediationExceptionException":
        case "com.amazonaws.configservice#NoSuchRemediationExceptionException":
            throw await de_NoSuchRemediationExceptionExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteResourceConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteResourceConfigCommandError(output, context);
    }
    await (0, smithy_client_1.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_DeleteResourceConfigCommand = de_DeleteResourceConfigCommand;
const de_DeleteResourceConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoRunningConfigurationRecorderException":
        case "com.amazonaws.configservice#NoRunningConfigurationRecorderException":
            throw await de_NoRunningConfigurationRecorderExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteRetentionConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteRetentionConfigurationCommandError(output, context);
    }
    await (0, smithy_client_1.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_DeleteRetentionConfigurationCommand = de_DeleteRetentionConfigurationCommand;
const de_DeleteRetentionConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "NoSuchRetentionConfigurationException":
        case "com.amazonaws.configservice#NoSuchRetentionConfigurationException":
            throw await de_NoSuchRetentionConfigurationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteStoredQueryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteStoredQueryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteStoredQueryCommand = de_DeleteStoredQueryCommand;
const de_DeleteStoredQueryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFoundException":
        case "com.amazonaws.configservice#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeliverConfigSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeliverConfigSnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeliverConfigSnapshotCommand = de_DeliverConfigSnapshotCommand;
const de_DeliverConfigSnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoAvailableConfigurationRecorderException":
        case "com.amazonaws.configservice#NoAvailableConfigurationRecorderException":
            throw await de_NoAvailableConfigurationRecorderExceptionRes(parsedOutput, context);
        case "NoRunningConfigurationRecorderException":
        case "com.amazonaws.configservice#NoRunningConfigurationRecorderException":
            throw await de_NoRunningConfigurationRecorderExceptionRes(parsedOutput, context);
        case "NoSuchDeliveryChannelException":
        case "com.amazonaws.configservice#NoSuchDeliveryChannelException":
            throw await de_NoSuchDeliveryChannelExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DescribeAggregateComplianceByConfigRulesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeAggregateComplianceByConfigRulesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeAggregateComplianceByConfigRulesCommand = de_DescribeAggregateComplianceByConfigRulesCommand;
const de_DescribeAggregateComplianceByConfigRulesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await de_InvalidLimitExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "NoSuchConfigurationAggregatorException":
        case "com.amazonaws.configservice#NoSuchConfigurationAggregatorException":
            throw await de_NoSuchConfigurationAggregatorExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DescribeAggregateComplianceByConformancePacksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeAggregateComplianceByConformancePacksCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeAggregateComplianceByConformancePacksCommand = de_DescribeAggregateComplianceByConformancePacksCommand;
const de_DescribeAggregateComplianceByConformancePacksCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await de_InvalidLimitExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "NoSuchConfigurationAggregatorException":
        case "com.amazonaws.configservice#NoSuchConfigurationAggregatorException":
            throw await de_NoSuchConfigurationAggregatorExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DescribeAggregationAuthorizationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeAggregationAuthorizationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeAggregationAuthorizationsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeAggregationAuthorizationsCommand = de_DescribeAggregationAuthorizationsCommand;
const de_DescribeAggregationAuthorizationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await de_InvalidLimitExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DescribeComplianceByConfigRuleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeComplianceByConfigRuleCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeComplianceByConfigRuleCommand = de_DescribeComplianceByConfigRuleCommand;
const de_DescribeComplianceByConfigRuleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "NoSuchConfigRuleException":
        case "com.amazonaws.configservice#NoSuchConfigRuleException":
            throw await de_NoSuchConfigRuleExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DescribeComplianceByResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeComplianceByResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeComplianceByResourceCommand = de_DescribeComplianceByResourceCommand;
const de_DescribeComplianceByResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DescribeConfigRuleEvaluationStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeConfigRuleEvaluationStatusCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeConfigRuleEvaluationStatusResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeConfigRuleEvaluationStatusCommand = de_DescribeConfigRuleEvaluationStatusCommand;
const de_DescribeConfigRuleEvaluationStatusCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "NoSuchConfigRuleException":
        case "com.amazonaws.configservice#NoSuchConfigRuleException":
            throw await de_NoSuchConfigRuleExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DescribeConfigRulesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeConfigRulesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeConfigRulesCommand = de_DescribeConfigRulesCommand;
const de_DescribeConfigRulesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "NoSuchConfigRuleException":
        case "com.amazonaws.configservice#NoSuchConfigRuleException":
            throw await de_NoSuchConfigRuleExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DescribeConfigurationAggregatorsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeConfigurationAggregatorsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeConfigurationAggregatorsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeConfigurationAggregatorsCommand = de_DescribeConfigurationAggregatorsCommand;
const de_DescribeConfigurationAggregatorsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await de_InvalidLimitExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "NoSuchConfigurationAggregatorException":
        case "com.amazonaws.configservice#NoSuchConfigurationAggregatorException":
            throw await de_NoSuchConfigurationAggregatorExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DescribeConfigurationAggregatorSourcesStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeConfigurationAggregatorSourcesStatusCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeConfigurationAggregatorSourcesStatusResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeConfigurationAggregatorSourcesStatusCommand = de_DescribeConfigurationAggregatorSourcesStatusCommand;
const de_DescribeConfigurationAggregatorSourcesStatusCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await de_InvalidLimitExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "NoSuchConfigurationAggregatorException":
        case "com.amazonaws.configservice#NoSuchConfigurationAggregatorException":
            throw await de_NoSuchConfigurationAggregatorExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DescribeConfigurationRecordersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeConfigurationRecordersCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeConfigurationRecordersCommand = de_DescribeConfigurationRecordersCommand;
const de_DescribeConfigurationRecordersCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoSuchConfigurationRecorderException":
        case "com.amazonaws.configservice#NoSuchConfigurationRecorderException":
            throw await de_NoSuchConfigurationRecorderExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DescribeConfigurationRecorderStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeConfigurationRecorderStatusCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeConfigurationRecorderStatusResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeConfigurationRecorderStatusCommand = de_DescribeConfigurationRecorderStatusCommand;
const de_DescribeConfigurationRecorderStatusCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoSuchConfigurationRecorderException":
        case "com.amazonaws.configservice#NoSuchConfigurationRecorderException":
            throw await de_NoSuchConfigurationRecorderExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DescribeConformancePackComplianceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeConformancePackComplianceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeConformancePackComplianceCommand = de_DescribeConformancePackComplianceCommand;
const de_DescribeConformancePackComplianceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await de_InvalidLimitExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "NoSuchConfigRuleInConformancePackException":
        case "com.amazonaws.configservice#NoSuchConfigRuleInConformancePackException":
            throw await de_NoSuchConfigRuleInConformancePackExceptionRes(parsedOutput, context);
        case "NoSuchConformancePackException":
        case "com.amazonaws.configservice#NoSuchConformancePackException":
            throw await de_NoSuchConformancePackExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DescribeConformancePacksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeConformancePacksCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeConformancePacksResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeConformancePacksCommand = de_DescribeConformancePacksCommand;
const de_DescribeConformancePacksCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await de_InvalidLimitExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "NoSuchConformancePackException":
        case "com.amazonaws.configservice#NoSuchConformancePackException":
            throw await de_NoSuchConformancePackExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DescribeConformancePackStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeConformancePackStatusCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeConformancePackStatusResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeConformancePackStatusCommand = de_DescribeConformancePackStatusCommand;
const de_DescribeConformancePackStatusCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await de_InvalidLimitExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DescribeDeliveryChannelsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeDeliveryChannelsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeDeliveryChannelsCommand = de_DescribeDeliveryChannelsCommand;
const de_DescribeDeliveryChannelsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoSuchDeliveryChannelException":
        case "com.amazonaws.configservice#NoSuchDeliveryChannelException":
            throw await de_NoSuchDeliveryChannelExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DescribeDeliveryChannelStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeDeliveryChannelStatusCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeDeliveryChannelStatusResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeDeliveryChannelStatusCommand = de_DescribeDeliveryChannelStatusCommand;
const de_DescribeDeliveryChannelStatusCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoSuchDeliveryChannelException":
        case "com.amazonaws.configservice#NoSuchDeliveryChannelException":
            throw await de_NoSuchDeliveryChannelExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DescribeOrganizationConfigRulesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeOrganizationConfigRulesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeOrganizationConfigRulesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeOrganizationConfigRulesCommand = de_DescribeOrganizationConfigRulesCommand;
const de_DescribeOrganizationConfigRulesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await de_InvalidLimitExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "NoSuchOrganizationConfigRuleException":
        case "com.amazonaws.configservice#NoSuchOrganizationConfigRuleException":
            throw await de_NoSuchOrganizationConfigRuleExceptionRes(parsedOutput, context);
        case "OrganizationAccessDeniedException":
        case "com.amazonaws.configservice#OrganizationAccessDeniedException":
            throw await de_OrganizationAccessDeniedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DescribeOrganizationConfigRuleStatusesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeOrganizationConfigRuleStatusesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeOrganizationConfigRuleStatusesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeOrganizationConfigRuleStatusesCommand = de_DescribeOrganizationConfigRuleStatusesCommand;
const de_DescribeOrganizationConfigRuleStatusesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await de_InvalidLimitExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "NoSuchOrganizationConfigRuleException":
        case "com.amazonaws.configservice#NoSuchOrganizationConfigRuleException":
            throw await de_NoSuchOrganizationConfigRuleExceptionRes(parsedOutput, context);
        case "OrganizationAccessDeniedException":
        case "com.amazonaws.configservice#OrganizationAccessDeniedException":
            throw await de_OrganizationAccessDeniedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DescribeOrganizationConformancePacksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeOrganizationConformancePacksCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeOrganizationConformancePacksResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeOrganizationConformancePacksCommand = de_DescribeOrganizationConformancePacksCommand;
const de_DescribeOrganizationConformancePacksCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await de_InvalidLimitExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "NoSuchOrganizationConformancePackException":
        case "com.amazonaws.configservice#NoSuchOrganizationConformancePackException":
            throw await de_NoSuchOrganizationConformancePackExceptionRes(parsedOutput, context);
        case "OrganizationAccessDeniedException":
        case "com.amazonaws.configservice#OrganizationAccessDeniedException":
            throw await de_OrganizationAccessDeniedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DescribeOrganizationConformancePackStatusesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeOrganizationConformancePackStatusesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeOrganizationConformancePackStatusesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeOrganizationConformancePackStatusesCommand = de_DescribeOrganizationConformancePackStatusesCommand;
const de_DescribeOrganizationConformancePackStatusesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await de_InvalidLimitExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "NoSuchOrganizationConformancePackException":
        case "com.amazonaws.configservice#NoSuchOrganizationConformancePackException":
            throw await de_NoSuchOrganizationConformancePackExceptionRes(parsedOutput, context);
        case "OrganizationAccessDeniedException":
        case "com.amazonaws.configservice#OrganizationAccessDeniedException":
            throw await de_OrganizationAccessDeniedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DescribePendingAggregationRequestsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribePendingAggregationRequestsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribePendingAggregationRequestsCommand = de_DescribePendingAggregationRequestsCommand;
const de_DescribePendingAggregationRequestsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await de_InvalidLimitExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DescribeRemediationConfigurationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeRemediationConfigurationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeRemediationConfigurationsCommand = de_DescribeRemediationConfigurationsCommand;
const de_DescribeRemediationConfigurationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
const de_DescribeRemediationExceptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeRemediationExceptionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeRemediationExceptionsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeRemediationExceptionsCommand = de_DescribeRemediationExceptionsCommand;
const de_DescribeRemediationExceptionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DescribeRemediationExecutionStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeRemediationExecutionStatusCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeRemediationExecutionStatusResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeRemediationExecutionStatusCommand = de_DescribeRemediationExecutionStatusCommand;
const de_DescribeRemediationExecutionStatusCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "NoSuchRemediationConfigurationException":
        case "com.amazonaws.configservice#NoSuchRemediationConfigurationException":
            throw await de_NoSuchRemediationConfigurationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DescribeRetentionConfigurationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeRetentionConfigurationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeRetentionConfigurationsCommand = de_DescribeRetentionConfigurationsCommand;
const de_DescribeRetentionConfigurationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "NoSuchRetentionConfigurationException":
        case "com.amazonaws.configservice#NoSuchRetentionConfigurationException":
            throw await de_NoSuchRetentionConfigurationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetAggregateComplianceDetailsByConfigRuleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetAggregateComplianceDetailsByConfigRuleCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetAggregateComplianceDetailsByConfigRuleResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetAggregateComplianceDetailsByConfigRuleCommand = de_GetAggregateComplianceDetailsByConfigRuleCommand;
const de_GetAggregateComplianceDetailsByConfigRuleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await de_InvalidLimitExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "NoSuchConfigurationAggregatorException":
        case "com.amazonaws.configservice#NoSuchConfigurationAggregatorException":
            throw await de_NoSuchConfigurationAggregatorExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetAggregateConfigRuleComplianceSummaryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetAggregateConfigRuleComplianceSummaryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetAggregateConfigRuleComplianceSummaryResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetAggregateConfigRuleComplianceSummaryCommand = de_GetAggregateConfigRuleComplianceSummaryCommand;
const de_GetAggregateConfigRuleComplianceSummaryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await de_InvalidLimitExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "NoSuchConfigurationAggregatorException":
        case "com.amazonaws.configservice#NoSuchConfigurationAggregatorException":
            throw await de_NoSuchConfigurationAggregatorExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetAggregateConformancePackComplianceSummaryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetAggregateConformancePackComplianceSummaryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetAggregateConformancePackComplianceSummaryCommand = de_GetAggregateConformancePackComplianceSummaryCommand;
const de_GetAggregateConformancePackComplianceSummaryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await de_InvalidLimitExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "NoSuchConfigurationAggregatorException":
        case "com.amazonaws.configservice#NoSuchConfigurationAggregatorException":
            throw await de_NoSuchConfigurationAggregatorExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetAggregateDiscoveredResourceCountsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetAggregateDiscoveredResourceCountsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetAggregateDiscoveredResourceCountsCommand = de_GetAggregateDiscoveredResourceCountsCommand;
const de_GetAggregateDiscoveredResourceCountsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await de_InvalidLimitExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "NoSuchConfigurationAggregatorException":
        case "com.amazonaws.configservice#NoSuchConfigurationAggregatorException":
            throw await de_NoSuchConfigurationAggregatorExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetAggregateResourceConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetAggregateResourceConfigCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetAggregateResourceConfigResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetAggregateResourceConfigCommand = de_GetAggregateResourceConfigCommand;
const de_GetAggregateResourceConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoSuchConfigurationAggregatorException":
        case "com.amazonaws.configservice#NoSuchConfigurationAggregatorException":
            throw await de_NoSuchConfigurationAggregatorExceptionRes(parsedOutput, context);
        case "OversizedConfigurationItemException":
        case "com.amazonaws.configservice#OversizedConfigurationItemException":
            throw await de_OversizedConfigurationItemExceptionRes(parsedOutput, context);
        case "ResourceNotDiscoveredException":
        case "com.amazonaws.configservice#ResourceNotDiscoveredException":
            throw await de_ResourceNotDiscoveredExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetComplianceDetailsByConfigRuleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetComplianceDetailsByConfigRuleCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetComplianceDetailsByConfigRuleResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetComplianceDetailsByConfigRuleCommand = de_GetComplianceDetailsByConfigRuleCommand;
const de_GetComplianceDetailsByConfigRuleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "NoSuchConfigRuleException":
        case "com.amazonaws.configservice#NoSuchConfigRuleException":
            throw await de_NoSuchConfigRuleExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetComplianceDetailsByResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetComplianceDetailsByResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetComplianceDetailsByResourceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetComplianceDetailsByResourceCommand = de_GetComplianceDetailsByResourceCommand;
const de_GetComplianceDetailsByResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetComplianceSummaryByConfigRuleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetComplianceSummaryByConfigRuleCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetComplianceSummaryByConfigRuleResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetComplianceSummaryByConfigRuleCommand = de_GetComplianceSummaryByConfigRuleCommand;
const de_GetComplianceSummaryByConfigRuleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
const de_GetComplianceSummaryByResourceTypeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetComplianceSummaryByResourceTypeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetComplianceSummaryByResourceTypeResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetComplianceSummaryByResourceTypeCommand = de_GetComplianceSummaryByResourceTypeCommand;
const de_GetComplianceSummaryByResourceTypeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetConformancePackComplianceDetailsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetConformancePackComplianceDetailsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetConformancePackComplianceDetailsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetConformancePackComplianceDetailsCommand = de_GetConformancePackComplianceDetailsCommand;
const de_GetConformancePackComplianceDetailsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await de_InvalidLimitExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "NoSuchConfigRuleInConformancePackException":
        case "com.amazonaws.configservice#NoSuchConfigRuleInConformancePackException":
            throw await de_NoSuchConfigRuleInConformancePackExceptionRes(parsedOutput, context);
        case "NoSuchConformancePackException":
        case "com.amazonaws.configservice#NoSuchConformancePackException":
            throw await de_NoSuchConformancePackExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetConformancePackComplianceSummaryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetConformancePackComplianceSummaryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetConformancePackComplianceSummaryCommand = de_GetConformancePackComplianceSummaryCommand;
const de_GetConformancePackComplianceSummaryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await de_InvalidLimitExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "NoSuchConformancePackException":
        case "com.amazonaws.configservice#NoSuchConformancePackException":
            throw await de_NoSuchConformancePackExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetCustomRulePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetCustomRulePolicyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetCustomRulePolicyCommand = de_GetCustomRulePolicyCommand;
const de_GetCustomRulePolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoSuchConfigRuleException":
        case "com.amazonaws.configservice#NoSuchConfigRuleException":
            throw await de_NoSuchConfigRuleExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetDiscoveredResourceCountsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetDiscoveredResourceCountsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetDiscoveredResourceCountsCommand = de_GetDiscoveredResourceCountsCommand;
const de_GetDiscoveredResourceCountsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await de_InvalidLimitExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetOrganizationConfigRuleDetailedStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetOrganizationConfigRuleDetailedStatusCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetOrganizationConfigRuleDetailedStatusResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetOrganizationConfigRuleDetailedStatusCommand = de_GetOrganizationConfigRuleDetailedStatusCommand;
const de_GetOrganizationConfigRuleDetailedStatusCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await de_InvalidLimitExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "NoSuchOrganizationConfigRuleException":
        case "com.amazonaws.configservice#NoSuchOrganizationConfigRuleException":
            throw await de_NoSuchOrganizationConfigRuleExceptionRes(parsedOutput, context);
        case "OrganizationAccessDeniedException":
        case "com.amazonaws.configservice#OrganizationAccessDeniedException":
            throw await de_OrganizationAccessDeniedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetOrganizationConformancePackDetailedStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetOrganizationConformancePackDetailedStatusCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetOrganizationConformancePackDetailedStatusResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetOrganizationConformancePackDetailedStatusCommand = de_GetOrganizationConformancePackDetailedStatusCommand;
const de_GetOrganizationConformancePackDetailedStatusCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await de_InvalidLimitExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "NoSuchOrganizationConformancePackException":
        case "com.amazonaws.configservice#NoSuchOrganizationConformancePackException":
            throw await de_NoSuchOrganizationConformancePackExceptionRes(parsedOutput, context);
        case "OrganizationAccessDeniedException":
        case "com.amazonaws.configservice#OrganizationAccessDeniedException":
            throw await de_OrganizationAccessDeniedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetOrganizationCustomRulePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetOrganizationCustomRulePolicyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetOrganizationCustomRulePolicyCommand = de_GetOrganizationCustomRulePolicyCommand;
const de_GetOrganizationCustomRulePolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoSuchOrganizationConfigRuleException":
        case "com.amazonaws.configservice#NoSuchOrganizationConfigRuleException":
            throw await de_NoSuchOrganizationConfigRuleExceptionRes(parsedOutput, context);
        case "OrganizationAccessDeniedException":
        case "com.amazonaws.configservice#OrganizationAccessDeniedException":
            throw await de_OrganizationAccessDeniedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetResourceConfigHistoryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetResourceConfigHistoryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetResourceConfigHistoryResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetResourceConfigHistoryCommand = de_GetResourceConfigHistoryCommand;
const de_GetResourceConfigHistoryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await de_InvalidLimitExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "InvalidTimeRangeException":
        case "com.amazonaws.configservice#InvalidTimeRangeException":
            throw await de_InvalidTimeRangeExceptionRes(parsedOutput, context);
        case "NoAvailableConfigurationRecorderException":
        case "com.amazonaws.configservice#NoAvailableConfigurationRecorderException":
            throw await de_NoAvailableConfigurationRecorderExceptionRes(parsedOutput, context);
        case "ResourceNotDiscoveredException":
        case "com.amazonaws.configservice#ResourceNotDiscoveredException":
            throw await de_ResourceNotDiscoveredExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetResourceEvaluationSummaryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetResourceEvaluationSummaryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetResourceEvaluationSummaryResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetResourceEvaluationSummaryCommand = de_GetResourceEvaluationSummaryCommand;
const de_GetResourceEvaluationSummaryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFoundException":
        case "com.amazonaws.configservice#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetStoredQueryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetStoredQueryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetStoredQueryCommand = de_GetStoredQueryCommand;
const de_GetStoredQueryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFoundException":
        case "com.amazonaws.configservice#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListAggregateDiscoveredResourcesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListAggregateDiscoveredResourcesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListAggregateDiscoveredResourcesCommand = de_ListAggregateDiscoveredResourcesCommand;
const de_ListAggregateDiscoveredResourcesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await de_InvalidLimitExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "NoSuchConfigurationAggregatorException":
        case "com.amazonaws.configservice#NoSuchConfigurationAggregatorException":
            throw await de_NoSuchConfigurationAggregatorExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListConformancePackComplianceScoresCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListConformancePackComplianceScoresCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListConformancePackComplianceScoresResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListConformancePackComplianceScoresCommand = de_ListConformancePackComplianceScoresCommand;
const de_ListConformancePackComplianceScoresCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await de_InvalidLimitExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListDiscoveredResourcesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListDiscoveredResourcesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListDiscoveredResourcesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListDiscoveredResourcesCommand = de_ListDiscoveredResourcesCommand;
const de_ListDiscoveredResourcesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await de_InvalidLimitExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "NoAvailableConfigurationRecorderException":
        case "com.amazonaws.configservice#NoAvailableConfigurationRecorderException":
            throw await de_NoAvailableConfigurationRecorderExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListResourceEvaluationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListResourceEvaluationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListResourceEvaluationsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListResourceEvaluationsCommand = de_ListResourceEvaluationsCommand;
const de_ListResourceEvaluationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "InvalidTimeRangeException":
        case "com.amazonaws.configservice#InvalidTimeRangeException":
            throw await de_InvalidTimeRangeExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListStoredQueriesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListStoredQueriesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListStoredQueriesCommand = de_ListStoredQueriesCommand;
const de_ListStoredQueriesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListTagsForResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListTagsForResourceCommand = de_ListTagsForResourceCommand;
const de_ListTagsForResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await de_InvalidLimitExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.configservice#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_PutAggregationAuthorizationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PutAggregationAuthorizationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_PutAggregationAuthorizationResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_PutAggregationAuthorizationCommand = de_PutAggregationAuthorizationCommand;
const de_PutAggregationAuthorizationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_PutConfigRuleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PutConfigRuleCommandError(output, context);
    }
    await (0, smithy_client_1.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_PutConfigRuleCommand = de_PutConfigRuleCommand;
const de_PutConfigRuleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InsufficientPermissionsException":
        case "com.amazonaws.configservice#InsufficientPermissionsException":
            throw await de_InsufficientPermissionsExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "MaxNumberOfConfigRulesExceededException":
        case "com.amazonaws.configservice#MaxNumberOfConfigRulesExceededException":
            throw await de_MaxNumberOfConfigRulesExceededExceptionRes(parsedOutput, context);
        case "NoAvailableConfigurationRecorderException":
        case "com.amazonaws.configservice#NoAvailableConfigurationRecorderException":
            throw await de_NoAvailableConfigurationRecorderExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.configservice#ResourceInUseException":
            throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_PutConfigurationAggregatorCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PutConfigurationAggregatorCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_PutConfigurationAggregatorResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_PutConfigurationAggregatorCommand = de_PutConfigurationAggregatorCommand;
const de_PutConfigurationAggregatorCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "InvalidRoleException":
        case "com.amazonaws.configservice#InvalidRoleException":
            throw await de_InvalidRoleExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.configservice#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "NoAvailableOrganizationException":
        case "com.amazonaws.configservice#NoAvailableOrganizationException":
            throw await de_NoAvailableOrganizationExceptionRes(parsedOutput, context);
        case "OrganizationAccessDeniedException":
        case "com.amazonaws.configservice#OrganizationAccessDeniedException":
            throw await de_OrganizationAccessDeniedExceptionRes(parsedOutput, context);
        case "OrganizationAllFeaturesNotEnabledException":
        case "com.amazonaws.configservice#OrganizationAllFeaturesNotEnabledException":
            throw await de_OrganizationAllFeaturesNotEnabledExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_PutConfigurationRecorderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PutConfigurationRecorderCommandError(output, context);
    }
    await (0, smithy_client_1.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_PutConfigurationRecorderCommand = de_PutConfigurationRecorderCommand;
const de_PutConfigurationRecorderCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidConfigurationRecorderNameException":
        case "com.amazonaws.configservice#InvalidConfigurationRecorderNameException":
            throw await de_InvalidConfigurationRecorderNameExceptionRes(parsedOutput, context);
        case "InvalidRecordingGroupException":
        case "com.amazonaws.configservice#InvalidRecordingGroupException":
            throw await de_InvalidRecordingGroupExceptionRes(parsedOutput, context);
        case "InvalidRoleException":
        case "com.amazonaws.configservice#InvalidRoleException":
            throw await de_InvalidRoleExceptionRes(parsedOutput, context);
        case "MaxNumberOfConfigurationRecordersExceededException":
        case "com.amazonaws.configservice#MaxNumberOfConfigurationRecordersExceededException":
            throw await de_MaxNumberOfConfigurationRecordersExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_PutConformancePackCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PutConformancePackCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_PutConformancePackCommand = de_PutConformancePackCommand;
const de_PutConformancePackCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConformancePackTemplateValidationException":
        case "com.amazonaws.configservice#ConformancePackTemplateValidationException":
            throw await de_ConformancePackTemplateValidationExceptionRes(parsedOutput, context);
        case "InsufficientPermissionsException":
        case "com.amazonaws.configservice#InsufficientPermissionsException":
            throw await de_InsufficientPermissionsExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "MaxNumberOfConformancePacksExceededException":
        case "com.amazonaws.configservice#MaxNumberOfConformancePacksExceededException":
            throw await de_MaxNumberOfConformancePacksExceededExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.configservice#ResourceInUseException":
            throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_PutDeliveryChannelCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PutDeliveryChannelCommandError(output, context);
    }
    await (0, smithy_client_1.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_PutDeliveryChannelCommand = de_PutDeliveryChannelCommand;
const de_PutDeliveryChannelCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InsufficientDeliveryPolicyException":
        case "com.amazonaws.configservice#InsufficientDeliveryPolicyException":
            throw await de_InsufficientDeliveryPolicyExceptionRes(parsedOutput, context);
        case "InvalidDeliveryChannelNameException":
        case "com.amazonaws.configservice#InvalidDeliveryChannelNameException":
            throw await de_InvalidDeliveryChannelNameExceptionRes(parsedOutput, context);
        case "InvalidS3KeyPrefixException":
        case "com.amazonaws.configservice#InvalidS3KeyPrefixException":
            throw await de_InvalidS3KeyPrefixExceptionRes(parsedOutput, context);
        case "InvalidS3KmsKeyArnException":
        case "com.amazonaws.configservice#InvalidS3KmsKeyArnException":
            throw await de_InvalidS3KmsKeyArnExceptionRes(parsedOutput, context);
        case "InvalidSNSTopicARNException":
        case "com.amazonaws.configservice#InvalidSNSTopicARNException":
            throw await de_InvalidSNSTopicARNExceptionRes(parsedOutput, context);
        case "MaxNumberOfDeliveryChannelsExceededException":
        case "com.amazonaws.configservice#MaxNumberOfDeliveryChannelsExceededException":
            throw await de_MaxNumberOfDeliveryChannelsExceededExceptionRes(parsedOutput, context);
        case "NoAvailableConfigurationRecorderException":
        case "com.amazonaws.configservice#NoAvailableConfigurationRecorderException":
            throw await de_NoAvailableConfigurationRecorderExceptionRes(parsedOutput, context);
        case "NoSuchBucketException":
        case "com.amazonaws.configservice#NoSuchBucketException":
            throw await de_NoSuchBucketExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_PutEvaluationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PutEvaluationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_PutEvaluationsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_PutEvaluationsCommand = de_PutEvaluationsCommand;
const de_PutEvaluationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "InvalidResultTokenException":
        case "com.amazonaws.configservice#InvalidResultTokenException":
            throw await de_InvalidResultTokenExceptionRes(parsedOutput, context);
        case "NoSuchConfigRuleException":
        case "com.amazonaws.configservice#NoSuchConfigRuleException":
            throw await de_NoSuchConfigRuleExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_PutExternalEvaluationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PutExternalEvaluationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_PutExternalEvaluationCommand = de_PutExternalEvaluationCommand;
const de_PutExternalEvaluationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "NoSuchConfigRuleException":
        case "com.amazonaws.configservice#NoSuchConfigRuleException":
            throw await de_NoSuchConfigRuleExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_PutOrganizationConfigRuleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PutOrganizationConfigRuleCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_PutOrganizationConfigRuleCommand = de_PutOrganizationConfigRuleCommand;
const de_PutOrganizationConfigRuleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InsufficientPermissionsException":
        case "com.amazonaws.configservice#InsufficientPermissionsException":
            throw await de_InsufficientPermissionsExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "MaxNumberOfOrganizationConfigRulesExceededException":
        case "com.amazonaws.configservice#MaxNumberOfOrganizationConfigRulesExceededException":
            throw await de_MaxNumberOfOrganizationConfigRulesExceededExceptionRes(parsedOutput, context);
        case "NoAvailableOrganizationException":
        case "com.amazonaws.configservice#NoAvailableOrganizationException":
            throw await de_NoAvailableOrganizationExceptionRes(parsedOutput, context);
        case "OrganizationAccessDeniedException":
        case "com.amazonaws.configservice#OrganizationAccessDeniedException":
            throw await de_OrganizationAccessDeniedExceptionRes(parsedOutput, context);
        case "OrganizationAllFeaturesNotEnabledException":
        case "com.amazonaws.configservice#OrganizationAllFeaturesNotEnabledException":
            throw await de_OrganizationAllFeaturesNotEnabledExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.configservice#ResourceInUseException":
            throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_PutOrganizationConformancePackCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PutOrganizationConformancePackCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_PutOrganizationConformancePackCommand = de_PutOrganizationConformancePackCommand;
const de_PutOrganizationConformancePackCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InsufficientPermissionsException":
        case "com.amazonaws.configservice#InsufficientPermissionsException":
            throw await de_InsufficientPermissionsExceptionRes(parsedOutput, context);
        case "MaxNumberOfOrganizationConformancePacksExceededException":
        case "com.amazonaws.configservice#MaxNumberOfOrganizationConformancePacksExceededException":
            throw await de_MaxNumberOfOrganizationConformancePacksExceededExceptionRes(parsedOutput, context);
        case "NoAvailableOrganizationException":
        case "com.amazonaws.configservice#NoAvailableOrganizationException":
            throw await de_NoAvailableOrganizationExceptionRes(parsedOutput, context);
        case "OrganizationAccessDeniedException":
        case "com.amazonaws.configservice#OrganizationAccessDeniedException":
            throw await de_OrganizationAccessDeniedExceptionRes(parsedOutput, context);
        case "OrganizationAllFeaturesNotEnabledException":
        case "com.amazonaws.configservice#OrganizationAllFeaturesNotEnabledException":
            throw await de_OrganizationAllFeaturesNotEnabledExceptionRes(parsedOutput, context);
        case "OrganizationConformancePackTemplateValidationException":
        case "com.amazonaws.configservice#OrganizationConformancePackTemplateValidationException":
            throw await de_OrganizationConformancePackTemplateValidationExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.configservice#ResourceInUseException":
            throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_PutRemediationConfigurationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PutRemediationConfigurationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_PutRemediationConfigurationsCommand = de_PutRemediationConfigurationsCommand;
const de_PutRemediationConfigurationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InsufficientPermissionsException":
        case "com.amazonaws.configservice#InsufficientPermissionsException":
            throw await de_InsufficientPermissionsExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_PutRemediationExceptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PutRemediationExceptionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_PutRemediationExceptionsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_PutRemediationExceptionsCommand = de_PutRemediationExceptionsCommand;
const de_PutRemediationExceptionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InsufficientPermissionsException":
        case "com.amazonaws.configservice#InsufficientPermissionsException":
            throw await de_InsufficientPermissionsExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_PutResourceConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PutResourceConfigCommandError(output, context);
    }
    await (0, smithy_client_1.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_PutResourceConfigCommand = de_PutResourceConfigCommand;
const de_PutResourceConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InsufficientPermissionsException":
        case "com.amazonaws.configservice#InsufficientPermissionsException":
            throw await de_InsufficientPermissionsExceptionRes(parsedOutput, context);
        case "MaxActiveResourcesExceededException":
        case "com.amazonaws.configservice#MaxActiveResourcesExceededException":
            throw await de_MaxActiveResourcesExceededExceptionRes(parsedOutput, context);
        case "NoRunningConfigurationRecorderException":
        case "com.amazonaws.configservice#NoRunningConfigurationRecorderException":
            throw await de_NoRunningConfigurationRecorderExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_PutRetentionConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PutRetentionConfigurationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_PutRetentionConfigurationCommand = de_PutRetentionConfigurationCommand;
const de_PutRetentionConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "MaxNumberOfRetentionConfigurationsExceededException":
        case "com.amazonaws.configservice#MaxNumberOfRetentionConfigurationsExceededException":
            throw await de_MaxNumberOfRetentionConfigurationsExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_PutStoredQueryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PutStoredQueryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_PutStoredQueryCommand = de_PutStoredQueryCommand;
const de_PutStoredQueryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceConcurrentModificationException":
        case "com.amazonaws.configservice#ResourceConcurrentModificationException":
            throw await de_ResourceConcurrentModificationExceptionRes(parsedOutput, context);
        case "TooManyTagsException":
        case "com.amazonaws.configservice#TooManyTagsException":
            throw await de_TooManyTagsExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_SelectAggregateResourceConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_SelectAggregateResourceConfigCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_SelectAggregateResourceConfigCommand = de_SelectAggregateResourceConfigCommand;
const de_SelectAggregateResourceConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidExpressionException":
        case "com.amazonaws.configservice#InvalidExpressionException":
            throw await de_InvalidExpressionExceptionRes(parsedOutput, context);
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await de_InvalidLimitExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "NoSuchConfigurationAggregatorException":
        case "com.amazonaws.configservice#NoSuchConfigurationAggregatorException":
            throw await de_NoSuchConfigurationAggregatorExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_SelectResourceConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_SelectResourceConfigCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_SelectResourceConfigCommand = de_SelectResourceConfigCommand;
const de_SelectResourceConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidExpressionException":
        case "com.amazonaws.configservice#InvalidExpressionException":
            throw await de_InvalidExpressionExceptionRes(parsedOutput, context);
        case "InvalidLimitException":
        case "com.amazonaws.configservice#InvalidLimitException":
            throw await de_InvalidLimitExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.configservice#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_StartConfigRulesEvaluationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StartConfigRulesEvaluationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_StartConfigRulesEvaluationCommand = de_StartConfigRulesEvaluationCommand;
const de_StartConfigRulesEvaluationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.configservice#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "NoSuchConfigRuleException":
        case "com.amazonaws.configservice#NoSuchConfigRuleException":
            throw await de_NoSuchConfigRuleExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.configservice#ResourceInUseException":
            throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_StartConfigurationRecorderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StartConfigurationRecorderCommandError(output, context);
    }
    await (0, smithy_client_1.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_StartConfigurationRecorderCommand = de_StartConfigurationRecorderCommand;
const de_StartConfigurationRecorderCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoAvailableDeliveryChannelException":
        case "com.amazonaws.configservice#NoAvailableDeliveryChannelException":
            throw await de_NoAvailableDeliveryChannelExceptionRes(parsedOutput, context);
        case "NoSuchConfigurationRecorderException":
        case "com.amazonaws.configservice#NoSuchConfigurationRecorderException":
            throw await de_NoSuchConfigurationRecorderExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_StartRemediationExecutionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StartRemediationExecutionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_StartRemediationExecutionCommand = de_StartRemediationExecutionCommand;
const de_StartRemediationExecutionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InsufficientPermissionsException":
        case "com.amazonaws.configservice#InsufficientPermissionsException":
            throw await de_InsufficientPermissionsExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "NoSuchRemediationConfigurationException":
        case "com.amazonaws.configservice#NoSuchRemediationConfigurationException":
            throw await de_NoSuchRemediationConfigurationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_StartResourceEvaluationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StartResourceEvaluationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_StartResourceEvaluationCommand = de_StartResourceEvaluationCommand;
const de_StartResourceEvaluationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "IdempotentParameterMismatch":
        case "com.amazonaws.configservice#IdempotentParameterMismatch":
            throw await de_IdempotentParameterMismatchRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.configservice#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_StopConfigurationRecorderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StopConfigurationRecorderCommandError(output, context);
    }
    await (0, smithy_client_1.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_StopConfigurationRecorderCommand = de_StopConfigurationRecorderCommand;
const de_StopConfigurationRecorderCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NoSuchConfigurationRecorderException":
        case "com.amazonaws.configservice#NoSuchConfigurationRecorderException":
            throw await de_NoSuchConfigurationRecorderExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_TagResourceCommandError(output, context);
    }
    await (0, smithy_client_1.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_TagResourceCommand = de_TagResourceCommand;
const de_TagResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFoundException":
        case "com.amazonaws.configservice#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyTagsException":
        case "com.amazonaws.configservice#TooManyTagsException":
            throw await de_TooManyTagsExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UntagResourceCommandError(output, context);
    }
    await (0, smithy_client_1.collectBody)(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_UntagResourceCommand = de_UntagResourceCommand;
const de_UntagResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFoundException":
        case "com.amazonaws.configservice#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.configservice#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ConformancePackTemplateValidationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.ConformancePackTemplateValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_IdempotentParameterMismatchRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.IdempotentParameterMismatch({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InsufficientDeliveryPolicyExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InsufficientDeliveryPolicyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InsufficientPermissionsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InsufficientPermissionsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidConfigurationRecorderNameExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidConfigurationRecorderNameException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidDeliveryChannelNameExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidDeliveryChannelNameException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidExpressionExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidExpressionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidLimitExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidLimitException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidNextTokenExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidNextTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidParameterValueExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidParameterValueException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidRecordingGroupExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidRecordingGroupException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidResultTokenExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidResultTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidRoleExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidRoleException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidS3KeyPrefixExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidS3KeyPrefixException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidS3KmsKeyArnExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidS3KmsKeyArnException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidSNSTopicARNExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidSNSTopicARNException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidTimeRangeExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidTimeRangeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_LastDeliveryChannelDeleteFailedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.LastDeliveryChannelDeleteFailedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_LimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_MaxActiveResourcesExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.MaxActiveResourcesExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_MaxNumberOfConfigRulesExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.MaxNumberOfConfigRulesExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_MaxNumberOfConfigurationRecordersExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.MaxNumberOfConfigurationRecordersExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_MaxNumberOfConformancePacksExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.MaxNumberOfConformancePacksExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_MaxNumberOfDeliveryChannelsExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.MaxNumberOfDeliveryChannelsExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_MaxNumberOfOrganizationConfigRulesExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.MaxNumberOfOrganizationConfigRulesExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_MaxNumberOfOrganizationConformancePacksExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.MaxNumberOfOrganizationConformancePacksExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_MaxNumberOfRetentionConfigurationsExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.MaxNumberOfRetentionConfigurationsExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_NoAvailableConfigurationRecorderExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.NoAvailableConfigurationRecorderException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_NoAvailableDeliveryChannelExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.NoAvailableDeliveryChannelException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_NoAvailableOrganizationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.NoAvailableOrganizationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_NoRunningConfigurationRecorderExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.NoRunningConfigurationRecorderException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_NoSuchBucketExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.NoSuchBucketException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_NoSuchConfigRuleExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.NoSuchConfigRuleException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_NoSuchConfigRuleInConformancePackExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.NoSuchConfigRuleInConformancePackException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_NoSuchConfigurationAggregatorExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.NoSuchConfigurationAggregatorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_NoSuchConfigurationRecorderExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.NoSuchConfigurationRecorderException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_NoSuchConformancePackExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.NoSuchConformancePackException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_NoSuchDeliveryChannelExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.NoSuchDeliveryChannelException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_NoSuchOrganizationConfigRuleExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.NoSuchOrganizationConfigRuleException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_NoSuchOrganizationConformancePackExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.NoSuchOrganizationConformancePackException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_NoSuchRemediationConfigurationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.NoSuchRemediationConfigurationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_NoSuchRemediationExceptionExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.NoSuchRemediationExceptionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_NoSuchRetentionConfigurationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.NoSuchRetentionConfigurationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_OrganizationAccessDeniedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.OrganizationAccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_OrganizationAllFeaturesNotEnabledExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.OrganizationAllFeaturesNotEnabledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_OrganizationConformancePackTemplateValidationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.OrganizationConformancePackTemplateValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_OversizedConfigurationItemExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.OversizedConfigurationItemException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_RemediationInProgressExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.RemediationInProgressException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ResourceConcurrentModificationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.ResourceConcurrentModificationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ResourceInUseExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.ResourceInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ResourceNotDiscoveredExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.ResourceNotDiscoveredException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_TooManyTagsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_1_1.TooManyTagsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const se_Evaluation = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        Annotation: [],
        ComplianceResourceId: [],
        ComplianceResourceType: [],
        ComplianceType: [],
        OrderingTimestamp: (_) => Math.round(_.getTime() / 1000),
    });
};
const se_Evaluations = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_Evaluation(entry, context);
    });
};
const se_ExternalEvaluation = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        Annotation: [],
        ComplianceResourceId: [],
        ComplianceResourceType: [],
        ComplianceType: [],
        OrderingTimestamp: (_) => Math.round(_.getTime() / 1000),
    });
};
const se_GetResourceConfigHistoryRequest = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        chronologicalOrder: [],
        earlierTime: (_) => Math.round(_.getTime() / 1000),
        laterTime: (_) => Math.round(_.getTime() / 1000),
        limit: [],
        nextToken: [],
        resourceId: [],
        resourceType: [],
    });
};
const se_ListResourceEvaluationsRequest = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        Filters: (_) => se_ResourceEvaluationFilters(_, context),
        Limit: [],
        NextToken: [],
    });
};
const se_PutEvaluationsRequest = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        Evaluations: (_) => se_Evaluations(_, context),
        ResultToken: [],
        TestMode: [],
    });
};
const se_PutExternalEvaluationRequest = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        ConfigRuleName: [],
        ExternalEvaluation: (_) => se_ExternalEvaluation(_, context),
    });
};
const se_PutRemediationExceptionsRequest = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        ConfigRuleName: [],
        ExpirationTime: (_) => Math.round(_.getTime() / 1000),
        Message: [],
        ResourceKeys: smithy_client_1._json,
    });
};
const se_ResourceEvaluationFilters = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        EvaluationContextIdentifier: [],
        EvaluationMode: [],
        TimeWindow: (_) => se_TimeWindow(_, context),
    });
};
const se_TimeWindow = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        EndTime: (_) => Math.round(_.getTime() / 1000),
        StartTime: (_) => Math.round(_.getTime() / 1000),
    });
};
const de_AggregateComplianceCount = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        ComplianceSummary: (_) => de_ComplianceSummary(_, context),
        GroupName: smithy_client_1.expectString,
    });
};
const de_AggregateComplianceCountList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AggregateComplianceCount(entry, context);
    });
    return retVal;
};
const de_AggregatedSourceStatus = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        AwsRegion: smithy_client_1.expectString,
        LastErrorCode: smithy_client_1.expectString,
        LastErrorMessage: smithy_client_1.expectString,
        LastUpdateStatus: smithy_client_1.expectString,
        LastUpdateTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        SourceId: smithy_client_1.expectString,
        SourceType: smithy_client_1.expectString,
    });
};
const de_AggregatedSourceStatusList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AggregatedSourceStatus(entry, context);
    });
    return retVal;
};
const de_AggregateEvaluationResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        AccountId: smithy_client_1.expectString,
        Annotation: smithy_client_1.expectString,
        AwsRegion: smithy_client_1.expectString,
        ComplianceType: smithy_client_1.expectString,
        ConfigRuleInvokedTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        EvaluationResultIdentifier: (_) => de_EvaluationResultIdentifier(_, context),
        ResultRecordedTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
    });
};
const de_AggregateEvaluationResultList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AggregateEvaluationResult(entry, context);
    });
    return retVal;
};
const de_AggregationAuthorization = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        AggregationAuthorizationArn: smithy_client_1.expectString,
        AuthorizedAccountId: smithy_client_1.expectString,
        AuthorizedAwsRegion: smithy_client_1.expectString,
        CreationTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
    });
};
const de_AggregationAuthorizationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AggregationAuthorization(entry, context);
    });
    return retVal;
};
const de_BaseConfigurationItem = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        accountId: smithy_client_1.expectString,
        arn: smithy_client_1.expectString,
        availabilityZone: smithy_client_1.expectString,
        awsRegion: smithy_client_1.expectString,
        configuration: smithy_client_1.expectString,
        configurationItemCaptureTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        configurationItemStatus: smithy_client_1.expectString,
        configurationStateId: smithy_client_1.expectString,
        resourceCreationTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        resourceId: smithy_client_1.expectString,
        resourceName: smithy_client_1.expectString,
        resourceType: smithy_client_1.expectString,
        supplementaryConfiguration: smithy_client_1._json,
        version: smithy_client_1.expectString,
    });
};
const de_BaseConfigurationItems = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BaseConfigurationItem(entry, context);
    });
    return retVal;
};
const de_BatchGetAggregateResourceConfigResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        BaseConfigurationItems: (_) => de_BaseConfigurationItems(_, context),
        UnprocessedResourceIdentifiers: smithy_client_1._json,
    });
};
const de_BatchGetResourceConfigResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        baseConfigurationItems: (_) => de_BaseConfigurationItems(_, context),
        unprocessedResourceKeys: smithy_client_1._json,
    });
};
const de_ComplianceSummariesByResourceType = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ComplianceSummaryByResourceType(entry, context);
    });
    return retVal;
};
const de_ComplianceSummary = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        ComplianceSummaryTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        CompliantResourceCount: smithy_client_1._json,
        NonCompliantResourceCount: smithy_client_1._json,
    });
};
const de_ComplianceSummaryByResourceType = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        ComplianceSummary: (_) => de_ComplianceSummary(_, context),
        ResourceType: smithy_client_1.expectString,
    });
};
const de_ConfigExportDeliveryInfo = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        lastAttemptTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        lastErrorCode: smithy_client_1.expectString,
        lastErrorMessage: smithy_client_1.expectString,
        lastStatus: smithy_client_1.expectString,
        lastSuccessfulTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        nextDeliveryTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
    });
};
const de_ConfigRuleEvaluationStatus = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        ConfigRuleArn: smithy_client_1.expectString,
        ConfigRuleId: smithy_client_1.expectString,
        ConfigRuleName: smithy_client_1.expectString,
        FirstActivatedTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        FirstEvaluationStarted: smithy_client_1.expectBoolean,
        LastDeactivatedTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        LastDebugLogDeliveryStatus: smithy_client_1.expectString,
        LastDebugLogDeliveryStatusReason: smithy_client_1.expectString,
        LastDebugLogDeliveryTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        LastErrorCode: smithy_client_1.expectString,
        LastErrorMessage: smithy_client_1.expectString,
        LastFailedEvaluationTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        LastFailedInvocationTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        LastSuccessfulEvaluationTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        LastSuccessfulInvocationTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
    });
};
const de_ConfigRuleEvaluationStatusList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ConfigRuleEvaluationStatus(entry, context);
    });
    return retVal;
};
const de_ConfigStreamDeliveryInfo = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        lastErrorCode: smithy_client_1.expectString,
        lastErrorMessage: smithy_client_1.expectString,
        lastStatus: smithy_client_1.expectString,
        lastStatusChangeTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
    });
};
const de_ConfigurationAggregator = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        AccountAggregationSources: smithy_client_1._json,
        ConfigurationAggregatorArn: smithy_client_1.expectString,
        ConfigurationAggregatorName: smithy_client_1.expectString,
        CreatedBy: smithy_client_1.expectString,
        CreationTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        LastUpdatedTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        OrganizationAggregationSource: smithy_client_1._json,
    });
};
const de_ConfigurationAggregatorList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ConfigurationAggregator(entry, context);
    });
    return retVal;
};
const de_ConfigurationItem = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        accountId: smithy_client_1.expectString,
        arn: smithy_client_1.expectString,
        availabilityZone: smithy_client_1.expectString,
        awsRegion: smithy_client_1.expectString,
        configuration: smithy_client_1.expectString,
        configurationItemCaptureTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        configurationItemMD5Hash: smithy_client_1.expectString,
        configurationItemStatus: smithy_client_1.expectString,
        configurationStateId: smithy_client_1.expectString,
        relatedEvents: smithy_client_1._json,
        relationships: smithy_client_1._json,
        resourceCreationTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        resourceId: smithy_client_1.expectString,
        resourceName: smithy_client_1.expectString,
        resourceType: smithy_client_1.expectString,
        supplementaryConfiguration: smithy_client_1._json,
        tags: smithy_client_1._json,
        version: smithy_client_1.expectString,
    });
};
const de_ConfigurationItemList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ConfigurationItem(entry, context);
    });
    return retVal;
};
const de_ConfigurationRecorderStatus = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        lastErrorCode: smithy_client_1.expectString,
        lastErrorMessage: smithy_client_1.expectString,
        lastStartTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        lastStatus: smithy_client_1.expectString,
        lastStatusChangeTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        lastStopTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        name: smithy_client_1.expectString,
        recording: smithy_client_1.expectBoolean,
    });
};
const de_ConfigurationRecorderStatusList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ConfigurationRecorderStatus(entry, context);
    });
    return retVal;
};
const de_ConformancePackComplianceScore = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        ConformancePackName: smithy_client_1.expectString,
        LastUpdatedTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Score: smithy_client_1.expectString,
    });
};
const de_ConformancePackComplianceScores = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ConformancePackComplianceScore(entry, context);
    });
    return retVal;
};
const de_ConformancePackDetail = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        ConformancePackArn: smithy_client_1.expectString,
        ConformancePackId: smithy_client_1.expectString,
        ConformancePackInputParameters: smithy_client_1._json,
        ConformancePackName: smithy_client_1.expectString,
        CreatedBy: smithy_client_1.expectString,
        DeliveryS3Bucket: smithy_client_1.expectString,
        DeliveryS3KeyPrefix: smithy_client_1.expectString,
        LastUpdateRequestedTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        TemplateSSMDocumentDetails: smithy_client_1._json,
    });
};
const de_ConformancePackDetailList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ConformancePackDetail(entry, context);
    });
    return retVal;
};
const de_ConformancePackEvaluationResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Annotation: smithy_client_1.expectString,
        ComplianceType: smithy_client_1.expectString,
        ConfigRuleInvokedTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        EvaluationResultIdentifier: (_) => de_EvaluationResultIdentifier(_, context),
        ResultRecordedTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
    });
};
const de_ConformancePackRuleEvaluationResultsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ConformancePackEvaluationResult(entry, context);
    });
    return retVal;
};
const de_ConformancePackStatusDetail = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        ConformancePackArn: smithy_client_1.expectString,
        ConformancePackId: smithy_client_1.expectString,
        ConformancePackName: smithy_client_1.expectString,
        ConformancePackState: smithy_client_1.expectString,
        ConformancePackStatusReason: smithy_client_1.expectString,
        LastUpdateCompletedTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        LastUpdateRequestedTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        StackArn: smithy_client_1.expectString,
    });
};
const de_ConformancePackStatusDetailsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ConformancePackStatusDetail(entry, context);
    });
    return retVal;
};
const de_DeliveryChannelStatus = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        configHistoryDeliveryInfo: (_) => de_ConfigExportDeliveryInfo(_, context),
        configSnapshotDeliveryInfo: (_) => de_ConfigExportDeliveryInfo(_, context),
        configStreamDeliveryInfo: (_) => de_ConfigStreamDeliveryInfo(_, context),
        name: smithy_client_1.expectString,
    });
};
const de_DeliveryChannelStatusList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DeliveryChannelStatus(entry, context);
    });
    return retVal;
};
const de_DescribeAggregationAuthorizationsResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        AggregationAuthorizations: (_) => de_AggregationAuthorizationList(_, context),
        NextToken: smithy_client_1.expectString,
    });
};
const de_DescribeConfigRuleEvaluationStatusResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        ConfigRulesEvaluationStatus: (_) => de_ConfigRuleEvaluationStatusList(_, context),
        NextToken: smithy_client_1.expectString,
    });
};
const de_DescribeConfigurationAggregatorSourcesStatusResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        AggregatedSourceStatusList: (_) => de_AggregatedSourceStatusList(_, context),
        NextToken: smithy_client_1.expectString,
    });
};
const de_DescribeConfigurationAggregatorsResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        ConfigurationAggregators: (_) => de_ConfigurationAggregatorList(_, context),
        NextToken: smithy_client_1.expectString,
    });
};
const de_DescribeConfigurationRecorderStatusResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        ConfigurationRecordersStatus: (_) => de_ConfigurationRecorderStatusList(_, context),
    });
};
const de_DescribeConformancePacksResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        ConformancePackDetails: (_) => de_ConformancePackDetailList(_, context),
        NextToken: smithy_client_1.expectString,
    });
};
const de_DescribeConformancePackStatusResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        ConformancePackStatusDetails: (_) => de_ConformancePackStatusDetailsList(_, context),
        NextToken: smithy_client_1.expectString,
    });
};
const de_DescribeDeliveryChannelStatusResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        DeliveryChannelsStatus: (_) => de_DeliveryChannelStatusList(_, context),
    });
};
const de_DescribeOrganizationConfigRulesResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        NextToken: smithy_client_1.expectString,
        OrganizationConfigRules: (_) => de_OrganizationConfigRules(_, context),
    });
};
const de_DescribeOrganizationConfigRuleStatusesResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        NextToken: smithy_client_1.expectString,
        OrganizationConfigRuleStatuses: (_) => de_OrganizationConfigRuleStatuses(_, context),
    });
};
const de_DescribeOrganizationConformancePacksResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        NextToken: smithy_client_1.expectString,
        OrganizationConformancePacks: (_) => de_OrganizationConformancePacks(_, context),
    });
};
const de_DescribeOrganizationConformancePackStatusesResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        NextToken: smithy_client_1.expectString,
        OrganizationConformancePackStatuses: (_) => de_OrganizationConformancePackStatuses(_, context),
    });
};
const de_DescribeRemediationExceptionsResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        NextToken: smithy_client_1.expectString,
        RemediationExceptions: (_) => de_RemediationExceptions(_, context),
    });
};
const de_DescribeRemediationExecutionStatusResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        NextToken: smithy_client_1.expectString,
        RemediationExecutionStatuses: (_) => de_RemediationExecutionStatuses(_, context),
    });
};
const de_Evaluation = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Annotation: smithy_client_1.expectString,
        ComplianceResourceId: smithy_client_1.expectString,
        ComplianceResourceType: smithy_client_1.expectString,
        ComplianceType: smithy_client_1.expectString,
        OrderingTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
    });
};
const de_EvaluationResult = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Annotation: smithy_client_1.expectString,
        ComplianceType: smithy_client_1.expectString,
        ConfigRuleInvokedTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        EvaluationResultIdentifier: (_) => de_EvaluationResultIdentifier(_, context),
        ResultRecordedTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ResultToken: smithy_client_1.expectString,
    });
};
const de_EvaluationResultIdentifier = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        EvaluationResultQualifier: smithy_client_1._json,
        OrderingTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ResourceEvaluationId: smithy_client_1.expectString,
    });
};
const de_EvaluationResults = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EvaluationResult(entry, context);
    });
    return retVal;
};
const de_Evaluations = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Evaluation(entry, context);
    });
    return retVal;
};
const de_FailedRemediationExceptionBatch = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        FailedItems: (_) => de_RemediationExceptions(_, context),
        FailureMessage: smithy_client_1.expectString,
    });
};
const de_FailedRemediationExceptionBatches = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FailedRemediationExceptionBatch(entry, context);
    });
    return retVal;
};
const de_GetAggregateComplianceDetailsByConfigRuleResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        AggregateEvaluationResults: (_) => de_AggregateEvaluationResultList(_, context),
        NextToken: smithy_client_1.expectString,
    });
};
const de_GetAggregateConfigRuleComplianceSummaryResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        AggregateComplianceCounts: (_) => de_AggregateComplianceCountList(_, context),
        GroupByKey: smithy_client_1.expectString,
        NextToken: smithy_client_1.expectString,
    });
};
const de_GetAggregateResourceConfigResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        ConfigurationItem: (_) => de_ConfigurationItem(_, context),
    });
};
const de_GetComplianceDetailsByConfigRuleResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        EvaluationResults: (_) => de_EvaluationResults(_, context),
        NextToken: smithy_client_1.expectString,
    });
};
const de_GetComplianceDetailsByResourceResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        EvaluationResults: (_) => de_EvaluationResults(_, context),
        NextToken: smithy_client_1.expectString,
    });
};
const de_GetComplianceSummaryByConfigRuleResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        ComplianceSummary: (_) => de_ComplianceSummary(_, context),
    });
};
const de_GetComplianceSummaryByResourceTypeResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        ComplianceSummariesByResourceType: (_) => de_ComplianceSummariesByResourceType(_, context),
    });
};
const de_GetConformancePackComplianceDetailsResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        ConformancePackName: smithy_client_1.expectString,
        ConformancePackRuleEvaluationResults: (_) => de_ConformancePackRuleEvaluationResultsList(_, context),
        NextToken: smithy_client_1.expectString,
    });
};
const de_GetOrganizationConfigRuleDetailedStatusResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        NextToken: smithy_client_1.expectString,
        OrganizationConfigRuleDetailedStatus: (_) => de_OrganizationConfigRuleDetailedStatus(_, context),
    });
};
const de_GetOrganizationConformancePackDetailedStatusResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        NextToken: smithy_client_1.expectString,
        OrganizationConformancePackDetailedStatuses: (_) => de_OrganizationConformancePackDetailedStatuses(_, context),
    });
};
const de_GetResourceConfigHistoryResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        configurationItems: (_) => de_ConfigurationItemList(_, context),
        nextToken: smithy_client_1.expectString,
    });
};
const de_GetResourceEvaluationSummaryResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Compliance: smithy_client_1.expectString,
        EvaluationContext: smithy_client_1._json,
        EvaluationMode: smithy_client_1.expectString,
        EvaluationStartTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        EvaluationStatus: smithy_client_1._json,
        ResourceDetails: smithy_client_1._json,
        ResourceEvaluationId: smithy_client_1.expectString,
    });
};
const de_ListConformancePackComplianceScoresResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        ConformancePackComplianceScores: (_) => de_ConformancePackComplianceScores(_, context),
        NextToken: smithy_client_1.expectString,
    });
};
const de_ListDiscoveredResourcesResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        nextToken: smithy_client_1.expectString,
        resourceIdentifiers: (_) => de_ResourceIdentifierList(_, context),
    });
};
const de_ListResourceEvaluationsResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        NextToken: smithy_client_1.expectString,
        ResourceEvaluations: (_) => de_ResourceEvaluations(_, context),
    });
};
const de_MemberAccountStatus = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        AccountId: smithy_client_1.expectString,
        ConfigRuleName: smithy_client_1.expectString,
        ErrorCode: smithy_client_1.expectString,
        ErrorMessage: smithy_client_1.expectString,
        LastUpdateTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        MemberAccountRuleStatus: smithy_client_1.expectString,
    });
};
const de_OrganizationConfigRule = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        ExcludedAccounts: smithy_client_1._json,
        LastUpdateTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        OrganizationConfigRuleArn: smithy_client_1.expectString,
        OrganizationConfigRuleName: smithy_client_1.expectString,
        OrganizationCustomPolicyRuleMetadata: smithy_client_1._json,
        OrganizationCustomRuleMetadata: smithy_client_1._json,
        OrganizationManagedRuleMetadata: smithy_client_1._json,
    });
};
const de_OrganizationConfigRuleDetailedStatus = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MemberAccountStatus(entry, context);
    });
    return retVal;
};
const de_OrganizationConfigRules = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_OrganizationConfigRule(entry, context);
    });
    return retVal;
};
const de_OrganizationConfigRuleStatus = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        ErrorCode: smithy_client_1.expectString,
        ErrorMessage: smithy_client_1.expectString,
        LastUpdateTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        OrganizationConfigRuleName: smithy_client_1.expectString,
        OrganizationRuleStatus: smithy_client_1.expectString,
    });
};
const de_OrganizationConfigRuleStatuses = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_OrganizationConfigRuleStatus(entry, context);
    });
    return retVal;
};
const de_OrganizationConformancePack = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        ConformancePackInputParameters: smithy_client_1._json,
        DeliveryS3Bucket: smithy_client_1.expectString,
        DeliveryS3KeyPrefix: smithy_client_1.expectString,
        ExcludedAccounts: smithy_client_1._json,
        LastUpdateTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        OrganizationConformancePackArn: smithy_client_1.expectString,
        OrganizationConformancePackName: smithy_client_1.expectString,
    });
};
const de_OrganizationConformancePackDetailedStatus = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        AccountId: smithy_client_1.expectString,
        ConformancePackName: smithy_client_1.expectString,
        ErrorCode: smithy_client_1.expectString,
        ErrorMessage: smithy_client_1.expectString,
        LastUpdateTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Status: smithy_client_1.expectString,
    });
};
const de_OrganizationConformancePackDetailedStatuses = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_OrganizationConformancePackDetailedStatus(entry, context);
    });
    return retVal;
};
const de_OrganizationConformancePacks = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_OrganizationConformancePack(entry, context);
    });
    return retVal;
};
const de_OrganizationConformancePackStatus = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        ErrorCode: smithy_client_1.expectString,
        ErrorMessage: smithy_client_1.expectString,
        LastUpdateTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        OrganizationConformancePackName: smithy_client_1.expectString,
        Status: smithy_client_1.expectString,
    });
};
const de_OrganizationConformancePackStatuses = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_OrganizationConformancePackStatus(entry, context);
    });
    return retVal;
};
const de_PutAggregationAuthorizationResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        AggregationAuthorization: (_) => de_AggregationAuthorization(_, context),
    });
};
const de_PutConfigurationAggregatorResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        ConfigurationAggregator: (_) => de_ConfigurationAggregator(_, context),
    });
};
const de_PutEvaluationsResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        FailedEvaluations: (_) => de_Evaluations(_, context),
    });
};
const de_PutRemediationExceptionsResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        FailedBatches: (_) => de_FailedRemediationExceptionBatches(_, context),
    });
};
const de_RemediationException = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        ConfigRuleName: smithy_client_1.expectString,
        ExpirationTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Message: smithy_client_1.expectString,
        ResourceId: smithy_client_1.expectString,
        ResourceType: smithy_client_1.expectString,
    });
};
const de_RemediationExceptions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RemediationException(entry, context);
    });
    return retVal;
};
const de_RemediationExecutionStatus = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        InvocationTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        LastUpdatedTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ResourceKey: smithy_client_1._json,
        State: smithy_client_1.expectString,
        StepDetails: (_) => de_RemediationExecutionSteps(_, context),
    });
};
const de_RemediationExecutionStatuses = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RemediationExecutionStatus(entry, context);
    });
    return retVal;
};
const de_RemediationExecutionStep = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        ErrorMessage: smithy_client_1.expectString,
        Name: smithy_client_1.expectString,
        StartTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        State: smithy_client_1.expectString,
        StopTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
    });
};
const de_RemediationExecutionSteps = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RemediationExecutionStep(entry, context);
    });
    return retVal;
};
const de_ResourceEvaluation = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        EvaluationMode: smithy_client_1.expectString,
        EvaluationStartTimestamp: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        ResourceEvaluationId: smithy_client_1.expectString,
    });
};
const de_ResourceEvaluations = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ResourceEvaluation(entry, context);
    });
    return retVal;
};
const de_ResourceIdentifier = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        resourceDeletionTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        resourceId: smithy_client_1.expectString,
        resourceName: smithy_client_1.expectString,
        resourceType: smithy_client_1.expectString,
    });
};
const de_ResourceIdentifierList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ResourceIdentifier(entry, context);
    });
    return retVal;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => (0, smithy_client_1.collectBody)(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = (0, smithy_client_1.withBaseException)(ConfigServiceServiceException_1.ConfigServiceServiceException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new protocol_http_1.HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `StarlingDoveService.${operation}`,
    };
}
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
