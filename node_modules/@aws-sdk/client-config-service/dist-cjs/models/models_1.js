"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TooManyTagsException = exports.ResourceConcurrentModificationException = exports.OrganizationConformancePackTemplateValidationException = exports.OrganizationAllFeaturesNotEnabledException = exports.NoSuchBucketException = exports.NoAvailableOrganizationException = exports.NoAvailableDeliveryChannelException = exports.MaxNumberOfRetentionConfigurationsExceededException = exports.MaxNumberOfOrganizationConformancePacksExceededException = exports.MaxNumberOfOrganizationConfigRulesExceededException = exports.MaxNumberOfDeliveryChannelsExceededException = exports.MaxNumberOfConformancePacksExceededException = exports.MaxNumberOfConfigurationRecordersExceededException = exports.MaxNumberOfConfigRulesExceededException = void 0;
const ConfigServiceServiceException_1 = require("./ConfigServiceServiceException");
class MaxNumberOfConfigRulesExceededException extends ConfigServiceServiceException_1.ConfigServiceServiceException {
    constructor(opts) {
        super({
            name: "MaxNumberOfConfigRulesExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "MaxNumberOfConfigRulesExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, MaxNumberOfConfigRulesExceededException.prototype);
    }
}
exports.MaxNumberOfConfigRulesExceededException = MaxNumberOfConfigRulesExceededException;
class MaxNumberOfConfigurationRecordersExceededException extends ConfigServiceServiceException_1.ConfigServiceServiceException {
    constructor(opts) {
        super({
            name: "MaxNumberOfConfigurationRecordersExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "MaxNumberOfConfigurationRecordersExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, MaxNumberOfConfigurationRecordersExceededException.prototype);
    }
}
exports.MaxNumberOfConfigurationRecordersExceededException = MaxNumberOfConfigurationRecordersExceededException;
class MaxNumberOfConformancePacksExceededException extends ConfigServiceServiceException_1.ConfigServiceServiceException {
    constructor(opts) {
        super({
            name: "MaxNumberOfConformancePacksExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "MaxNumberOfConformancePacksExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, MaxNumberOfConformancePacksExceededException.prototype);
    }
}
exports.MaxNumberOfConformancePacksExceededException = MaxNumberOfConformancePacksExceededException;
class MaxNumberOfDeliveryChannelsExceededException extends ConfigServiceServiceException_1.ConfigServiceServiceException {
    constructor(opts) {
        super({
            name: "MaxNumberOfDeliveryChannelsExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "MaxNumberOfDeliveryChannelsExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, MaxNumberOfDeliveryChannelsExceededException.prototype);
    }
}
exports.MaxNumberOfDeliveryChannelsExceededException = MaxNumberOfDeliveryChannelsExceededException;
class MaxNumberOfOrganizationConfigRulesExceededException extends ConfigServiceServiceException_1.ConfigServiceServiceException {
    constructor(opts) {
        super({
            name: "MaxNumberOfOrganizationConfigRulesExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "MaxNumberOfOrganizationConfigRulesExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, MaxNumberOfOrganizationConfigRulesExceededException.prototype);
    }
}
exports.MaxNumberOfOrganizationConfigRulesExceededException = MaxNumberOfOrganizationConfigRulesExceededException;
class MaxNumberOfOrganizationConformancePacksExceededException extends ConfigServiceServiceException_1.ConfigServiceServiceException {
    constructor(opts) {
        super({
            name: "MaxNumberOfOrganizationConformancePacksExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "MaxNumberOfOrganizationConformancePacksExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, MaxNumberOfOrganizationConformancePacksExceededException.prototype);
    }
}
exports.MaxNumberOfOrganizationConformancePacksExceededException = MaxNumberOfOrganizationConformancePacksExceededException;
class MaxNumberOfRetentionConfigurationsExceededException extends ConfigServiceServiceException_1.ConfigServiceServiceException {
    constructor(opts) {
        super({
            name: "MaxNumberOfRetentionConfigurationsExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "MaxNumberOfRetentionConfigurationsExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, MaxNumberOfRetentionConfigurationsExceededException.prototype);
    }
}
exports.MaxNumberOfRetentionConfigurationsExceededException = MaxNumberOfRetentionConfigurationsExceededException;
class NoAvailableDeliveryChannelException extends ConfigServiceServiceException_1.ConfigServiceServiceException {
    constructor(opts) {
        super({
            name: "NoAvailableDeliveryChannelException",
            $fault: "client",
            ...opts,
        });
        this.name = "NoAvailableDeliveryChannelException";
        this.$fault = "client";
        Object.setPrototypeOf(this, NoAvailableDeliveryChannelException.prototype);
    }
}
exports.NoAvailableDeliveryChannelException = NoAvailableDeliveryChannelException;
class NoAvailableOrganizationException extends ConfigServiceServiceException_1.ConfigServiceServiceException {
    constructor(opts) {
        super({
            name: "NoAvailableOrganizationException",
            $fault: "client",
            ...opts,
        });
        this.name = "NoAvailableOrganizationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, NoAvailableOrganizationException.prototype);
    }
}
exports.NoAvailableOrganizationException = NoAvailableOrganizationException;
class NoSuchBucketException extends ConfigServiceServiceException_1.ConfigServiceServiceException {
    constructor(opts) {
        super({
            name: "NoSuchBucketException",
            $fault: "client",
            ...opts,
        });
        this.name = "NoSuchBucketException";
        this.$fault = "client";
        Object.setPrototypeOf(this, NoSuchBucketException.prototype);
    }
}
exports.NoSuchBucketException = NoSuchBucketException;
class OrganizationAllFeaturesNotEnabledException extends ConfigServiceServiceException_1.ConfigServiceServiceException {
    constructor(opts) {
        super({
            name: "OrganizationAllFeaturesNotEnabledException",
            $fault: "client",
            ...opts,
        });
        this.name = "OrganizationAllFeaturesNotEnabledException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OrganizationAllFeaturesNotEnabledException.prototype);
    }
}
exports.OrganizationAllFeaturesNotEnabledException = OrganizationAllFeaturesNotEnabledException;
class OrganizationConformancePackTemplateValidationException extends ConfigServiceServiceException_1.ConfigServiceServiceException {
    constructor(opts) {
        super({
            name: "OrganizationConformancePackTemplateValidationException",
            $fault: "client",
            ...opts,
        });
        this.name = "OrganizationConformancePackTemplateValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OrganizationConformancePackTemplateValidationException.prototype);
    }
}
exports.OrganizationConformancePackTemplateValidationException = OrganizationConformancePackTemplateValidationException;
class ResourceConcurrentModificationException extends ConfigServiceServiceException_1.ConfigServiceServiceException {
    constructor(opts) {
        super({
            name: "ResourceConcurrentModificationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceConcurrentModificationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceConcurrentModificationException.prototype);
    }
}
exports.ResourceConcurrentModificationException = ResourceConcurrentModificationException;
class TooManyTagsException extends ConfigServiceServiceException_1.ConfigServiceServiceException {
    constructor(opts) {
        super({
            name: "TooManyTagsException",
            $fault: "client",
            ...opts,
        });
        this.name = "TooManyTagsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyTagsException.prototype);
    }
}
exports.TooManyTagsException = TooManyTagsException;
