import { AwsSdkSigV4AuthInputConfig, AwsSdkSigV4AuthResolvedConfig, AwsSdkSigV4PreviouslyResolved } from "@aws-sdk/core";
import { HandlerExecutionContext, HttpAuthScheme, HttpAuthSchemeParameters, HttpAuthSchemeParametersProvider, HttpAuthSchemeProvider } from "@smithy/types";
import { ConfigServiceClientResolvedConfig } from "../ConfigServiceClient";
/**
 * @internal
 */
export interface ConfigServiceHttpAuthSchemeParameters extends HttpAuthSchemeParameters {
    region?: string;
}
/**
 * @internal
 */
export interface ConfigServiceHttpAuthSchemeParametersProvider extends HttpAuthSchemeParametersProvider<ConfigServiceClientResolvedConfig, HandlerExecutionContext, ConfigServiceHttpAuthSchemeParameters, object> {
}
/**
 * @internal
 */
export declare const defaultConfigServiceHttpAuthSchemeParametersProvider: (config: ConfigServiceClientResolvedConfig, context: HandlerExecutionContext, input: object) => Promise<ConfigServiceHttpAuthSchemeParameters>;
/**
 * @internal
 */
export interface ConfigServiceHttpAuthSchemeProvider extends HttpAuthSchemeProvider<ConfigServiceHttpAuthSchemeParameters> {
}
/**
 * @internal
 */
export declare const defaultConfigServiceHttpAuthSchemeProvider: ConfigServiceHttpAuthSchemeProvider;
/**
 * @internal
 */
export interface HttpAuthSchemeInputConfig extends AwsSdkSigV4AuthInputConfig {
    /**
     * experimentalIdentityAndAuth: Configuration of HttpAuthSchemes for a client which provides default identity providers and signers per auth scheme.
     * @internal
     */
    httpAuthSchemes?: HttpAuthScheme[];
    /**
     * experimentalIdentityAndAuth: Configuration of an HttpAuthSchemeProvider for a client which resolves which HttpAuthScheme to use.
     * @internal
     */
    httpAuthSchemeProvider?: ConfigServiceHttpAuthSchemeProvider;
}
/**
 * @internal
 */
export interface HttpAuthSchemeResolvedConfig extends AwsSdkSigV4AuthResolvedConfig {
    /**
     * experimentalIdentityAndAuth: Configuration of HttpAuthSchemes for a client which provides default identity providers and signers per auth scheme.
     * @internal
     */
    readonly httpAuthSchemes: HttpAuthScheme[];
    /**
     * experimentalIdentityAndAuth: Configuration of an HttpAuthSchemeProvider for a client which resolves which HttpAuthScheme to use.
     * @internal
     */
    readonly httpAuthSchemeProvider: ConfigServiceHttpAuthSchemeProvider;
}
/**
 * @internal
 */
export declare const resolveHttpAuthSchemeConfig: <T>(config: T & HttpAuthSchemeInputConfig & AwsSdkSigV4PreviouslyResolved) => T & HttpAuthSchemeResolvedConfig;
