import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { ConfigServiceServiceException as __BaseException } from "./ConfigServiceServiceException";
export interface AccountAggregationSource {
  AccountIds: string[] | undefined;
  AllAwsRegions?: boolean | undefined;
  AwsRegions?: string[] | undefined;
}
export interface ComplianceContributorCount {
  CappedCount?: number | undefined;
  CapExceeded?: boolean | undefined;
}
export declare const ComplianceType: {
  readonly Compliant: "COMPLIANT";
  readonly Insufficient_Data: "INSUFFICIENT_DATA";
  readonly Non_Compliant: "NON_COMPLIANT";
  readonly Not_Applicable: "NOT_APPLICABLE";
};
export type ComplianceType =
  (typeof ComplianceType)[keyof typeof ComplianceType];
export interface Compliance {
  ComplianceType?: ComplianceType | undefined;
  ComplianceContributorCount?: ComplianceContributorCount | undefined;
}
export interface AggregateComplianceByConfigRule {
  ConfigRuleName?: string | undefined;
  Compliance?: Compliance | undefined;
  AccountId?: string | undefined;
  AwsRegion?: string | undefined;
}
export declare const ConformancePackComplianceType: {
  readonly COMPLIANT: "COMPLIANT";
  readonly INSUFFICIENT_DATA: "INSUFFICIENT_DATA";
  readonly NON_COMPLIANT: "NON_COMPLIANT";
};
export type ConformancePackComplianceType =
  (typeof ConformancePackComplianceType)[keyof typeof ConformancePackComplianceType];
export interface AggregateConformancePackCompliance {
  ComplianceType?: ConformancePackComplianceType | undefined;
  CompliantRuleCount?: number | undefined;
  NonCompliantRuleCount?: number | undefined;
  TotalRuleCount?: number | undefined;
}
export interface AggregateComplianceByConformancePack {
  ConformancePackName?: string | undefined;
  Compliance?: AggregateConformancePackCompliance | undefined;
  AccountId?: string | undefined;
  AwsRegion?: string | undefined;
}
export interface ComplianceSummary {
  CompliantResourceCount?: ComplianceContributorCount | undefined;
  NonCompliantResourceCount?: ComplianceContributorCount | undefined;
  ComplianceSummaryTimestamp?: Date | undefined;
}
export interface AggregateComplianceCount {
  GroupName?: string | undefined;
  ComplianceSummary?: ComplianceSummary | undefined;
}
export interface AggregateConformancePackComplianceCount {
  CompliantConformancePackCount?: number | undefined;
  NonCompliantConformancePackCount?: number | undefined;
}
export interface AggregateConformancePackComplianceFilters {
  ConformancePackName?: string | undefined;
  ComplianceType?: ConformancePackComplianceType | undefined;
  AccountId?: string | undefined;
  AwsRegion?: string | undefined;
}
export interface AggregateConformancePackComplianceSummary {
  ComplianceSummary?: AggregateConformancePackComplianceCount | undefined;
  GroupName?: string | undefined;
}
export interface AggregateConformancePackComplianceSummaryFilters {
  AccountId?: string | undefined;
  AwsRegion?: string | undefined;
}
export declare const AggregateConformancePackComplianceSummaryGroupKey: {
  readonly ACCOUNT_ID: "ACCOUNT_ID";
  readonly AWS_REGION: "AWS_REGION";
};
export type AggregateConformancePackComplianceSummaryGroupKey =
  (typeof AggregateConformancePackComplianceSummaryGroupKey)[keyof typeof AggregateConformancePackComplianceSummaryGroupKey];
export declare const AggregatedSourceStatusType: {
  readonly FAILED: "FAILED";
  readonly OUTDATED: "OUTDATED";
  readonly SUCCEEDED: "SUCCEEDED";
};
export type AggregatedSourceStatusType =
  (typeof AggregatedSourceStatusType)[keyof typeof AggregatedSourceStatusType];
export declare const AggregatedSourceType: {
  readonly ACCOUNT: "ACCOUNT";
  readonly ORGANIZATION: "ORGANIZATION";
};
export type AggregatedSourceType =
  (typeof AggregatedSourceType)[keyof typeof AggregatedSourceType];
export interface AggregatedSourceStatus {
  SourceId?: string | undefined;
  SourceType?: AggregatedSourceType | undefined;
  AwsRegion?: string | undefined;
  LastUpdateStatus?: AggregatedSourceStatusType | undefined;
  LastUpdateTime?: Date | undefined;
  LastErrorCode?: string | undefined;
  LastErrorMessage?: string | undefined;
}
export declare const EvaluationMode: {
  readonly DETECTIVE: "DETECTIVE";
  readonly PROACTIVE: "PROACTIVE";
};
export type EvaluationMode =
  (typeof EvaluationMode)[keyof typeof EvaluationMode];
export interface EvaluationResultQualifier {
  ConfigRuleName?: string | undefined;
  ResourceType?: string | undefined;
  ResourceId?: string | undefined;
  EvaluationMode?: EvaluationMode | undefined;
}
export interface EvaluationResultIdentifier {
  EvaluationResultQualifier?: EvaluationResultQualifier | undefined;
  OrderingTimestamp?: Date | undefined;
  ResourceEvaluationId?: string | undefined;
}
export interface AggregateEvaluationResult {
  EvaluationResultIdentifier?: EvaluationResultIdentifier | undefined;
  ComplianceType?: ComplianceType | undefined;
  ResultRecordedTime?: Date | undefined;
  ConfigRuleInvokedTime?: Date | undefined;
  Annotation?: string | undefined;
  AccountId?: string | undefined;
  AwsRegion?: string | undefined;
}
export declare const ResourceType: {
  readonly ACMPCACertificateAuthority: "AWS::ACMPCA::CertificateAuthority";
  readonly ACMPCACertificateAuthorityActivation: "AWS::ACMPCA::CertificateAuthorityActivation";
  readonly APSRuleGroupsNamespace: "AWS::APS::RuleGroupsNamespace";
  readonly AccessAnalyzerAnalyzer: "AWS::AccessAnalyzer::Analyzer";
  readonly AccountPublicAccessBlock: "AWS::S3::AccountPublicAccessBlock";
  readonly Alarm: "AWS::CloudWatch::Alarm";
  readonly AmazonMQBroker: "AWS::AmazonMQ::Broker";
  readonly AmplifyApp: "AWS::Amplify::App";
  readonly AmplifyBranch: "AWS::Amplify::Branch";
  readonly Api: "AWS::ApiGatewayV2::Api";
  readonly AppConfigApplication: "AWS::AppConfig::Application";
  readonly AppConfigConfigurationProfile: "AWS::AppConfig::ConfigurationProfile";
  readonly AppConfigDeploymentStrategy: "AWS::AppConfig::DeploymentStrategy";
  readonly AppConfigEnvironment: "AWS::AppConfig::Environment";
  readonly AppConfigExtensionAssociation: "AWS::AppConfig::ExtensionAssociation";
  readonly AppConfigHostedConfigurationVersion: "AWS::AppConfig::HostedConfigurationVersion";
  readonly AppFlowFlow: "AWS::AppFlow::Flow";
  readonly AppIntegrationsApplication: "AWS::AppIntegrations::Application";
  readonly AppIntegrationsEventIntegration: "AWS::AppIntegrations::EventIntegration";
  readonly AppMeshGatewayRoute: "AWS::AppMesh::GatewayRoute";
  readonly AppMeshMesh: "AWS::AppMesh::Mesh";
  readonly AppMeshRoute: "AWS::AppMesh::Route";
  readonly AppMeshVirtualGateway: "AWS::AppMesh::VirtualGateway";
  readonly AppMeshVirtualNode: "AWS::AppMesh::VirtualNode";
  readonly AppMeshVirtualRouter: "AWS::AppMesh::VirtualRouter";
  readonly AppMeshVirtualService: "AWS::AppMesh::VirtualService";
  readonly AppRunnerService: "AWS::AppRunner::Service";
  readonly AppRunnerVpcConnector: "AWS::AppRunner::VpcConnector";
  readonly AppStreamApplication: "AWS::AppStream::Application";
  readonly AppStreamDirectoryConfig: "AWS::AppStream::DirectoryConfig";
  readonly AppStreamFleet: "AWS::AppStream::Fleet";
  readonly AppStreamStack: "AWS::AppStream::Stack";
  readonly AppSyncApiCache: "AWS::AppSync::ApiCache";
  readonly AppSyncGraphQLApi: "AWS::AppSync::GraphQLApi";
  readonly Application: "AWS::ElasticBeanstalk::Application";
  readonly ApplicationVersion: "AWS::ElasticBeanstalk::ApplicationVersion";
  readonly AssociationCompliance: "AWS::SSM::AssociationCompliance";
  readonly AthenaDataCatalog: "AWS::Athena::DataCatalog";
  readonly AthenaPreparedStatement: "AWS::Athena::PreparedStatement";
  readonly AthenaWorkGroup: "AWS::Athena::WorkGroup";
  readonly AuditManagerAssessment: "AWS::AuditManager::Assessment";
  readonly AutoScalingGroup: "AWS::AutoScaling::AutoScalingGroup";
  readonly AutoScalingWarmPool: "AWS::AutoScaling::WarmPool";
  readonly BackupPlan: "AWS::Backup::BackupPlan";
  readonly BackupRecoveryPoint: "AWS::Backup::RecoveryPoint";
  readonly BackupReportPlan: "AWS::Backup::ReportPlan";
  readonly BackupSelection: "AWS::Backup::BackupSelection";
  readonly BackupVault: "AWS::Backup::BackupVault";
  readonly BatchComputeEnvironment: "AWS::Batch::ComputeEnvironment";
  readonly BatchJobQueue: "AWS::Batch::JobQueue";
  readonly BatchSchedulingPolicy: "AWS::Batch::SchedulingPolicy";
  readonly BedrockGuardrail: "AWS::Bedrock::Guardrail";
  readonly BedrockKnowledgeBase: "AWS::Bedrock::KnowledgeBase";
  readonly Bucket: "AWS::S3::Bucket";
  readonly BudgetsBudgetsAction: "AWS::Budgets::BudgetsAction";
  readonly CassandraKeyspace: "AWS::Cassandra::Keyspace";
  readonly Certificate: "AWS::ACM::Certificate";
  readonly Cloud9EnvironmentEC2: "AWS::Cloud9::EnvironmentEC2";
  readonly CloudFormationProduct: "AWS::ServiceCatalog::CloudFormationProduct";
  readonly CloudFormationProvisionedProduct: "AWS::ServiceCatalog::CloudFormationProvisionedProduct";
  readonly CloudWatchMetricStream: "AWS::CloudWatch::MetricStream";
  readonly Cluster: "AWS::Redshift::Cluster";
  readonly ClusterParameterGroup: "AWS::Redshift::ClusterParameterGroup";
  readonly ClusterSecurityGroup: "AWS::Redshift::ClusterSecurityGroup";
  readonly ClusterSnapshot: "AWS::Redshift::ClusterSnapshot";
  readonly ClusterSubnetGroup: "AWS::Redshift::ClusterSubnetGroup";
  readonly CodeArtifactRepository: "AWS::CodeArtifact::Repository";
  readonly CodeBuildReportGroup: "AWS::CodeBuild::ReportGroup";
  readonly CodeDeployApplication: "AWS::CodeDeploy::Application";
  readonly CodeDeployDeploymentConfig: "AWS::CodeDeploy::DeploymentConfig";
  readonly CodeDeployDeploymentGroup: "AWS::CodeDeploy::DeploymentGroup";
  readonly CodeGuruProfilerProfilingGroup: "AWS::CodeGuruProfiler::ProfilingGroup";
  readonly CodeGuruReviewerRepositoryAssociation: "AWS::CodeGuruReviewer::RepositoryAssociation";
  readonly CognitoIdentityPool: "AWS::Cognito::IdentityPool";
  readonly CognitoUserPool: "AWS::Cognito::UserPool";
  readonly CognitoUserPoolClient: "AWS::Cognito::UserPoolClient";
  readonly CognitoUserPoolGroup: "AWS::Cognito::UserPoolGroup";
  readonly ConformancePackCompliance: "AWS::Config::ConformancePackCompliance";
  readonly ConnectInstance: "AWS::Connect::Instance";
  readonly ConnectPhoneNumber: "AWS::Connect::PhoneNumber";
  readonly ConnectQuickConnect: "AWS::Connect::QuickConnect";
  readonly ConnectRule: "AWS::Connect::Rule";
  readonly ConnectUser: "AWS::Connect::User";
  readonly CustomerGateway: "AWS::EC2::CustomerGateway";
  readonly CustomerProfilesDomain: "AWS::CustomerProfiles::Domain";
  readonly CustomerProfilesObjectType: "AWS::CustomerProfiles::ObjectType";
  readonly DBCluster: "AWS::RDS::DBCluster";
  readonly DBClusterSnapshot: "AWS::RDS::DBClusterSnapshot";
  readonly DBInstance: "AWS::RDS::DBInstance";
  readonly DBSecurityGroup: "AWS::RDS::DBSecurityGroup";
  readonly DBSnapshot: "AWS::RDS::DBSnapshot";
  readonly DBSubnetGroup: "AWS::RDS::DBSubnetGroup";
  readonly DMSCertificate: "AWS::DMS::Certificate";
  readonly DMSEndpoint: "AWS::DMS::Endpoint";
  readonly DMSEventSubscription: "AWS::DMS::EventSubscription";
  readonly DMSReplicationSubnetGroup: "AWS::DMS::ReplicationSubnetGroup";
  readonly DataSyncLocationEFS: "AWS::DataSync::LocationEFS";
  readonly DataSyncLocationFSxLustre: "AWS::DataSync::LocationFSxLustre";
  readonly DataSyncLocationFSxWindows: "AWS::DataSync::LocationFSxWindows";
  readonly DataSyncLocationHDFS: "AWS::DataSync::LocationHDFS";
  readonly DataSyncLocationNFS: "AWS::DataSync::LocationNFS";
  readonly DataSyncLocationObjectStorage: "AWS::DataSync::LocationObjectStorage";
  readonly DataSyncLocationS3: "AWS::DataSync::LocationS3";
  readonly DataSyncLocationSMB: "AWS::DataSync::LocationSMB";
  readonly DataSyncTask: "AWS::DataSync::Task";
  readonly DetectiveGraph: "AWS::Detective::Graph";
  readonly DeviceFarmInstanceProfile: "AWS::DeviceFarm::InstanceProfile";
  readonly DeviceFarmProject: "AWS::DeviceFarm::Project";
  readonly DeviceFarmTestGridProject: "AWS::DeviceFarm::TestGridProject";
  readonly Distribution: "AWS::CloudFront::Distribution";
  readonly Domain: "AWS::Elasticsearch::Domain";
  readonly EC2CapacityReservation: "AWS::EC2::CapacityReservation";
  readonly EC2CarrierGateway: "AWS::EC2::CarrierGateway";
  readonly EC2ClientVpnEndpoint: "AWS::EC2::ClientVpnEndpoint";
  readonly EC2ClientVpnTargetNetworkAssociation: "AWS::EC2::ClientVpnTargetNetworkAssociation";
  readonly EC2DHCPOptions: "AWS::EC2::DHCPOptions";
  readonly EC2EC2Fleet: "AWS::EC2::EC2Fleet";
  readonly EC2EIPAssociation: "AWS::EC2::EIPAssociation";
  readonly EC2IPAM: "AWS::EC2::IPAM";
  readonly EC2IPAMPool: "AWS::EC2::IPAMPool";
  readonly EC2IPAMResourceDiscovery: "AWS::EC2::IPAMResourceDiscovery";
  readonly EC2IPAMResourceDiscoveryAssociation: "AWS::EC2::IPAMResourceDiscoveryAssociation";
  readonly EC2IPAMScope: "AWS::EC2::IPAMScope";
  readonly EC2InstanceConnectEndpoint: "AWS::EC2::InstanceConnectEndpoint";
  readonly EC2NetworkInsightsAccessScope: "AWS::EC2::NetworkInsightsAccessScope";
  readonly EC2NetworkInsightsAnalysis: "AWS::EC2::NetworkInsightsAnalysis";
  readonly EC2NetworkInsightsPath: "AWS::EC2::NetworkInsightsPath";
  readonly EC2PrefixList: "AWS::EC2::PrefixList";
  readonly EC2SnapshotBlockPublicAccess: "AWS::EC2::SnapshotBlockPublicAccess";
  readonly EC2SpotFleet: "AWS::EC2::SpotFleet";
  readonly EC2SubnetRouteTableAssociation: "AWS::EC2::SubnetRouteTableAssociation";
  readonly EC2TrafficMirrorFilter: "AWS::EC2::TrafficMirrorFilter";
  readonly EC2TrafficMirrorSession: "AWS::EC2::TrafficMirrorSession";
  readonly EC2TrafficMirrorTarget: "AWS::EC2::TrafficMirrorTarget";
  readonly EC2TransitGatewayConnect: "AWS::EC2::TransitGatewayConnect";
  readonly EC2TransitGatewayMulticastDomain: "AWS::EC2::TransitGatewayMulticastDomain";
  readonly EC2VPCBlockPublicAccessExclusion: "AWS::EC2::VPCBlockPublicAccessExclusion";
  readonly EC2VPCBlockPublicAccessOptions: "AWS::EC2::VPCBlockPublicAccessOptions";
  readonly EC2VPCEndpointConnectionNotification: "AWS::EC2::VPCEndpointConnectionNotification";
  readonly EC2VPNConnectionRoute: "AWS::EC2::VPNConnectionRoute";
  readonly ECRPublicRepository: "AWS::ECR::PublicRepository";
  readonly ECRPullThroughCacheRule: "AWS::ECR::PullThroughCacheRule";
  readonly ECRRegistryPolicy: "AWS::ECR::RegistryPolicy";
  readonly ECRRepository: "AWS::ECR::Repository";
  readonly ECSCapacityProvider: "AWS::ECS::CapacityProvider";
  readonly ECSCluster: "AWS::ECS::Cluster";
  readonly ECSService: "AWS::ECS::Service";
  readonly ECSTaskDefinition: "AWS::ECS::TaskDefinition";
  readonly ECSTaskSet: "AWS::ECS::TaskSet";
  readonly EFSAccessPoint: "AWS::EFS::AccessPoint";
  readonly EFSFileSystem: "AWS::EFS::FileSystem";
  readonly EIP: "AWS::EC2::EIP";
  readonly EKSAddon: "AWS::EKS::Addon";
  readonly EKSCluster: "AWS::EKS::Cluster";
  readonly EKSFargateProfile: "AWS::EKS::FargateProfile";
  readonly EKSIdentityProviderConfig: "AWS::EKS::IdentityProviderConfig";
  readonly EMRSecurityConfiguration: "AWS::EMR::SecurityConfiguration";
  readonly EgressOnlyInternetGateway: "AWS::EC2::EgressOnlyInternetGateway";
  readonly EncryptionConfig: "AWS::XRay::EncryptionConfig";
  readonly Environment: "AWS::ElasticBeanstalk::Environment";
  readonly EventSchemasDiscoverer: "AWS::EventSchemas::Discoverer";
  readonly EventSchemasRegistry: "AWS::EventSchemas::Registry";
  readonly EventSchemasRegistryPolicy: "AWS::EventSchemas::RegistryPolicy";
  readonly EventSchemasSchema: "AWS::EventSchemas::Schema";
  readonly EventSubscription: "AWS::RDS::EventSubscription";
  readonly EventsApiDestination: "AWS::Events::ApiDestination";
  readonly EventsArchive: "AWS::Events::Archive";
  readonly EventsConnection: "AWS::Events::Connection";
  readonly EventsEndpoint: "AWS::Events::Endpoint";
  readonly EventsEventBus: "AWS::Events::EventBus";
  readonly EventsRule: "AWS::Events::Rule";
  readonly EvidentlyLaunch: "AWS::Evidently::Launch";
  readonly EvidentlyProject: "AWS::Evidently::Project";
  readonly EvidentlySegment: "AWS::Evidently::Segment";
  readonly FISExperimentTemplate: "AWS::FIS::ExperimentTemplate";
  readonly FileData: "AWS::SSM::FileData";
  readonly FlowLog: "AWS::EC2::FlowLog";
  readonly ForecastDataset: "AWS::Forecast::Dataset";
  readonly ForecastDatasetGroup: "AWS::Forecast::DatasetGroup";
  readonly FraudDetectorEntityType: "AWS::FraudDetector::EntityType";
  readonly FraudDetectorLabel: "AWS::FraudDetector::Label";
  readonly FraudDetectorOutcome: "AWS::FraudDetector::Outcome";
  readonly FraudDetectorVariable: "AWS::FraudDetector::Variable";
  readonly Function: "AWS::Lambda::Function";
  readonly GlobalAcceleratorAccelerator: "AWS::GlobalAccelerator::Accelerator";
  readonly GlobalAcceleratorEndpointGroup: "AWS::GlobalAccelerator::EndpointGroup";
  readonly GlobalAcceleratorListener: "AWS::GlobalAccelerator::Listener";
  readonly GlueClassifier: "AWS::Glue::Classifier";
  readonly GlueJob: "AWS::Glue::Job";
  readonly GlueMLTransform: "AWS::Glue::MLTransform";
  readonly GrafanaWorkspace: "AWS::Grafana::Workspace";
  readonly GreengrassV2ComponentVersion: "AWS::GreengrassV2::ComponentVersion";
  readonly GroundStationConfig: "AWS::GroundStation::Config";
  readonly GroundStationDataflowEndpointGroup: "AWS::GroundStation::DataflowEndpointGroup";
  readonly GroundStationMissionProfile: "AWS::GroundStation::MissionProfile";
  readonly Group: "AWS::IAM::Group";
  readonly GuardDutyDetector: "AWS::GuardDuty::Detector";
  readonly GuardDutyFilter: "AWS::GuardDuty::Filter";
  readonly GuardDutyIPSet: "AWS::GuardDuty::IPSet";
  readonly GuardDutyThreatIntelSet: "AWS::GuardDuty::ThreatIntelSet";
  readonly HealthLakeFHIRDatastore: "AWS::HealthLake::FHIRDatastore";
  readonly Host: "AWS::EC2::Host";
  readonly IAMInstanceProfile: "AWS::IAM::InstanceProfile";
  readonly IAMOIDCProvider: "AWS::IAM::OIDCProvider";
  readonly IAMSAMLProvider: "AWS::IAM::SAMLProvider";
  readonly IAMServerCertificate: "AWS::IAM::ServerCertificate";
  readonly IPSetV2: "AWS::WAFv2::IPSet";
  readonly IVSChannel: "AWS::IVS::Channel";
  readonly IVSPlaybackKeyPair: "AWS::IVS::PlaybackKeyPair";
  readonly IVSRecordingConfiguration: "AWS::IVS::RecordingConfiguration";
  readonly ImageBuilderContainerRecipe: "AWS::ImageBuilder::ContainerRecipe";
  readonly ImageBuilderDistributionConfiguration: "AWS::ImageBuilder::DistributionConfiguration";
  readonly ImageBuilderImagePipeline: "AWS::ImageBuilder::ImagePipeline";
  readonly ImageBuilderImageRecipe: "AWS::ImageBuilder::ImageRecipe";
  readonly ImageBuilderInfrastructureConfiguration: "AWS::ImageBuilder::InfrastructureConfiguration";
  readonly InspectorV2Activation: "AWS::InspectorV2::Activation";
  readonly InspectorV2Filter: "AWS::InspectorV2::Filter";
  readonly Instance: "AWS::EC2::Instance";
  readonly InternetGateway: "AWS::EC2::InternetGateway";
  readonly IoTAccountAuditConfiguration: "AWS::IoT::AccountAuditConfiguration";
  readonly IoTAnalyticsChannel: "AWS::IoTAnalytics::Channel";
  readonly IoTAnalyticsDataset: "AWS::IoTAnalytics::Dataset";
  readonly IoTAnalyticsDatastore: "AWS::IoTAnalytics::Datastore";
  readonly IoTAnalyticsPipeline: "AWS::IoTAnalytics::Pipeline";
  readonly IoTAuthorizer: "AWS::IoT::Authorizer";
  readonly IoTCACertificate: "AWS::IoT::CACertificate";
  readonly IoTCustomMetric: "AWS::IoT::CustomMetric";
  readonly IoTDimension: "AWS::IoT::Dimension";
  readonly IoTEventsAlarmModel: "AWS::IoTEvents::AlarmModel";
  readonly IoTEventsDetectorModel: "AWS::IoTEvents::DetectorModel";
  readonly IoTEventsInput: "AWS::IoTEvents::Input";
  readonly IoTFleetMetric: "AWS::IoT::FleetMetric";
  readonly IoTJobTemplate: "AWS::IoT::JobTemplate";
  readonly IoTMitigationAction: "AWS::IoT::MitigationAction";
  readonly IoTPolicy: "AWS::IoT::Policy";
  readonly IoTProvisioningTemplate: "AWS::IoT::ProvisioningTemplate";
  readonly IoTRoleAlias: "AWS::IoT::RoleAlias";
  readonly IoTScheduledAudit: "AWS::IoT::ScheduledAudit";
  readonly IoTSecurityProfile: "AWS::IoT::SecurityProfile";
  readonly IoTSiteWiseAssetModel: "AWS::IoTSiteWise::AssetModel";
  readonly IoTSiteWiseDashboard: "AWS::IoTSiteWise::Dashboard";
  readonly IoTSiteWiseGateway: "AWS::IoTSiteWise::Gateway";
  readonly IoTSiteWisePortal: "AWS::IoTSiteWise::Portal";
  readonly IoTSiteWiseProject: "AWS::IoTSiteWise::Project";
  readonly IoTTwinMakerComponentType: "AWS::IoTTwinMaker::ComponentType";
  readonly IoTTwinMakerEntity: "AWS::IoTTwinMaker::Entity";
  readonly IoTTwinMakerScene: "AWS::IoTTwinMaker::Scene";
  readonly IoTTwinMakerSyncJob: "AWS::IoTTwinMaker::SyncJob";
  readonly IoTTwinMakerWorkspace: "AWS::IoTTwinMaker::Workspace";
  readonly IoTWirelessFuotaTask: "AWS::IoTWireless::FuotaTask";
  readonly IoTWirelessMulticastGroup: "AWS::IoTWireless::MulticastGroup";
  readonly IoTWirelessServiceProfile: "AWS::IoTWireless::ServiceProfile";
  readonly KMSAlias: "AWS::KMS::Alias";
  readonly KafkaConnectConnector: "AWS::KafkaConnect::Connector";
  readonly KendraIndex: "AWS::Kendra::Index";
  readonly Key: "AWS::KMS::Key";
  readonly KinesisAnalyticsV2Application: "AWS::KinesisAnalyticsV2::Application";
  readonly KinesisFirehoseDeliveryStream: "AWS::KinesisFirehose::DeliveryStream";
  readonly KinesisStream: "AWS::Kinesis::Stream";
  readonly KinesisStreamConsumer: "AWS::Kinesis::StreamConsumer";
  readonly KinesisVideoSignalingChannel: "AWS::KinesisVideo::SignalingChannel";
  readonly KinesisVideoStream: "AWS::KinesisVideo::Stream";
  readonly LambdaCodeSigningConfig: "AWS::Lambda::CodeSigningConfig";
  readonly LaunchConfiguration: "AWS::AutoScaling::LaunchConfiguration";
  readonly LaunchTemplate: "AWS::EC2::LaunchTemplate";
  readonly LexBot: "AWS::Lex::Bot";
  readonly LexBotAlias: "AWS::Lex::BotAlias";
  readonly LightsailBucket: "AWS::Lightsail::Bucket";
  readonly LightsailCertificate: "AWS::Lightsail::Certificate";
  readonly LightsailDisk: "AWS::Lightsail::Disk";
  readonly LightsailStaticIp: "AWS::Lightsail::StaticIp";
  readonly ListenerV2: "AWS::ElasticLoadBalancingV2::Listener";
  readonly LoadBalancer: "AWS::ElasticLoadBalancing::LoadBalancer";
  readonly LoadBalancerV2: "AWS::ElasticLoadBalancingV2::LoadBalancer";
  readonly LogsDestination: "AWS::Logs::Destination";
  readonly LookoutMetricsAlert: "AWS::LookoutMetrics::Alert";
  readonly LookoutVisionProject: "AWS::LookoutVision::Project";
  readonly M2Environment: "AWS::M2::Environment";
  readonly MSKBatchScramSecret: "AWS::MSK::BatchScramSecret";
  readonly MSKCluster: "AWS::MSK::Cluster";
  readonly MSKClusterPolicy: "AWS::MSK::ClusterPolicy";
  readonly MSKConfiguration: "AWS::MSK::Configuration";
  readonly MSKVpcConnection: "AWS::MSK::VpcConnection";
  readonly ManagedInstanceInventory: "AWS::SSM::ManagedInstanceInventory";
  readonly ManagedRuleSetV2: "AWS::WAFv2::ManagedRuleSet";
  readonly MediaConnectFlowEntitlement: "AWS::MediaConnect::FlowEntitlement";
  readonly MediaConnectFlowSource: "AWS::MediaConnect::FlowSource";
  readonly MediaConnectFlowVpcInterface: "AWS::MediaConnect::FlowVpcInterface";
  readonly MediaConnectGateway: "AWS::MediaConnect::Gateway";
  readonly MediaPackagePackagingConfiguration: "AWS::MediaPackage::PackagingConfiguration";
  readonly MediaPackagePackagingGroup: "AWS::MediaPackage::PackagingGroup";
  readonly MediaTailorPlaybackConfiguration: "AWS::MediaTailor::PlaybackConfiguration";
  readonly MemoryDBSubnetGroup: "AWS::MemoryDB::SubnetGroup";
  readonly NatGateway: "AWS::EC2::NatGateway";
  readonly NetworkAcl: "AWS::EC2::NetworkAcl";
  readonly NetworkFirewallFirewall: "AWS::NetworkFirewall::Firewall";
  readonly NetworkFirewallFirewallPolicy: "AWS::NetworkFirewall::FirewallPolicy";
  readonly NetworkFirewallRuleGroup: "AWS::NetworkFirewall::RuleGroup";
  readonly NetworkInsightsAccessScopeAnalysis: "AWS::EC2::NetworkInsightsAccessScopeAnalysis";
  readonly NetworkInterface: "AWS::EC2::NetworkInterface";
  readonly NetworkManagerConnectPeer: "AWS::NetworkManager::ConnectPeer";
  readonly NetworkManagerCustomerGatewayAssociation: "AWS::NetworkManager::CustomerGatewayAssociation";
  readonly NetworkManagerDevice: "AWS::NetworkManager::Device";
  readonly NetworkManagerGlobalNetwork: "AWS::NetworkManager::GlobalNetwork";
  readonly NetworkManagerLink: "AWS::NetworkManager::Link";
  readonly NetworkManagerLinkAssociation: "AWS::NetworkManager::LinkAssociation";
  readonly NetworkManagerSite: "AWS::NetworkManager::Site";
  readonly NetworkManagerTransitGatewayRegistration: "AWS::NetworkManager::TransitGatewayRegistration";
  readonly OpenSearchDomain: "AWS::OpenSearch::Domain";
  readonly OpenSearchServerlessCollection: "AWS::OpenSearchServerless::Collection";
  readonly OpenSearchServerlessVpcEndpoint: "AWS::OpenSearchServerless::VpcEndpoint";
  readonly PanoramaPackage: "AWS::Panorama::Package";
  readonly PatchCompliance: "AWS::SSM::PatchCompliance";
  readonly PersonalizeDataset: "AWS::Personalize::Dataset";
  readonly PersonalizeDatasetGroup: "AWS::Personalize::DatasetGroup";
  readonly PersonalizeSchema: "AWS::Personalize::Schema";
  readonly PersonalizeSolution: "AWS::Personalize::Solution";
  readonly PinpointApp: "AWS::Pinpoint::App";
  readonly PinpointApplicationSettings: "AWS::Pinpoint::ApplicationSettings";
  readonly PinpointCampaign: "AWS::Pinpoint::Campaign";
  readonly PinpointEmailChannel: "AWS::Pinpoint::EmailChannel";
  readonly PinpointEmailTemplate: "AWS::Pinpoint::EmailTemplate";
  readonly PinpointEventStream: "AWS::Pinpoint::EventStream";
  readonly PinpointInAppTemplate: "AWS::Pinpoint::InAppTemplate";
  readonly PinpointSegment: "AWS::Pinpoint::Segment";
  readonly Pipeline: "AWS::CodePipeline::Pipeline";
  readonly Policy: "AWS::IAM::Policy";
  readonly Portfolio: "AWS::ServiceCatalog::Portfolio";
  readonly Project: "AWS::CodeBuild::Project";
  readonly Protection: "AWS::Shield::Protection";
  readonly QLDBLedger: "AWS::QLDB::Ledger";
  readonly Queue: "AWS::SQS::Queue";
  readonly QuickSightDataSource: "AWS::QuickSight::DataSource";
  readonly QuickSightTemplate: "AWS::QuickSight::Template";
  readonly QuickSightTheme: "AWS::QuickSight::Theme";
  readonly RDSGlobalCluster: "AWS::RDS::GlobalCluster";
  readonly RDSOptionGroup: "AWS::RDS::OptionGroup";
  readonly RUMAppMonitor: "AWS::RUM::AppMonitor";
  readonly RateBasedRule: "AWS::WAF::RateBasedRule";
  readonly RedshiftEndpointAccess: "AWS::Redshift::EndpointAccess";
  readonly RedshiftEndpointAuthorization: "AWS::Redshift::EndpointAuthorization";
  readonly RedshiftEventSubscription: "AWS::Redshift::EventSubscription";
  readonly RedshiftScheduledAction: "AWS::Redshift::ScheduledAction";
  readonly RegexPatternSetV2: "AWS::WAFv2::RegexPatternSet";
  readonly RegionalProtection: "AWS::ShieldRegional::Protection";
  readonly RegionalRateBasedRule: "AWS::WAFRegional::RateBasedRule";
  readonly RegionalRule: "AWS::WAFRegional::Rule";
  readonly RegionalRuleGroup: "AWS::WAFRegional::RuleGroup";
  readonly RegionalWebACL: "AWS::WAFRegional::WebACL";
  readonly RegisteredHAInstance: "AWS::EC2::RegisteredHAInstance";
  readonly ResilienceHubApp: "AWS::ResilienceHub::App";
  readonly ResilienceHubResiliencyPolicy: "AWS::ResilienceHub::ResiliencyPolicy";
  readonly ResourceCompliance: "AWS::Config::ResourceCompliance";
  readonly ResourceExplorer2Index: "AWS::ResourceExplorer2::Index";
  readonly RestApi: "AWS::ApiGateway::RestApi";
  readonly RoboMakerRobotApplication: "AWS::RoboMaker::RobotApplication";
  readonly RoboMakerRobotApplicationVersion: "AWS::RoboMaker::RobotApplicationVersion";
  readonly RoboMakerSimulationApplication: "AWS::RoboMaker::SimulationApplication";
  readonly Role: "AWS::IAM::Role";
  readonly Route53HostedZone: "AWS::Route53::HostedZone";
  readonly Route53ProfilesProfile: "AWS::Route53Profiles::Profile";
  readonly Route53RecoveryControlCluster: "AWS::Route53RecoveryControl::Cluster";
  readonly Route53RecoveryControlControlPanel: "AWS::Route53RecoveryControl::ControlPanel";
  readonly Route53RecoveryControlRoutingControl: "AWS::Route53RecoveryControl::RoutingControl";
  readonly Route53RecoveryControlSafetyRule: "AWS::Route53RecoveryControl::SafetyRule";
  readonly Route53RecoveryReadinessCell: "AWS::Route53RecoveryReadiness::Cell";
  readonly Route53RecoveryReadinessReadinessCheck: "AWS::Route53RecoveryReadiness::ReadinessCheck";
  readonly Route53RecoveryReadinessRecoveryGroup: "AWS::Route53RecoveryReadiness::RecoveryGroup";
  readonly Route53RecoveryReadinessResourceSet: "AWS::Route53RecoveryReadiness::ResourceSet";
  readonly Route53ResolverFirewallDomainList: "AWS::Route53Resolver::FirewallDomainList";
  readonly Route53ResolverFirewallRuleGroup: "AWS::Route53Resolver::FirewallRuleGroup";
  readonly Route53ResolverFirewallRuleGroupAssociation: "AWS::Route53Resolver::FirewallRuleGroupAssociation";
  readonly Route53ResolverResolverEndpoint: "AWS::Route53Resolver::ResolverEndpoint";
  readonly Route53ResolverResolverQueryLoggingConfig: "AWS::Route53Resolver::ResolverQueryLoggingConfig";
  readonly Route53ResolverResolverQueryLoggingConfigAssociation: "AWS::Route53Resolver::ResolverQueryLoggingConfigAssociation";
  readonly Route53ResolverResolverRule: "AWS::Route53Resolver::ResolverRule";
  readonly Route53ResolverResolverRuleAssociation: "AWS::Route53Resolver::ResolverRuleAssociation";
  readonly RouteTable: "AWS::EC2::RouteTable";
  readonly Rule: "AWS::WAF::Rule";
  readonly RuleGroup: "AWS::WAF::RuleGroup";
  readonly RuleGroupV2: "AWS::WAFv2::RuleGroup";
  readonly S3AccessPoint: "AWS::S3::AccessPoint";
  readonly S3ExpressBucketPolicy: "AWS::S3Express::BucketPolicy";
  readonly S3ExpressDirectoryBucket: "AWS::S3Express::DirectoryBucket";
  readonly S3MultiRegionAccessPoint: "AWS::S3::MultiRegionAccessPoint";
  readonly S3StorageLens: "AWS::S3::StorageLens";
  readonly S3StorageLensGroup: "AWS::S3::StorageLensGroup";
  readonly SESConfigurationSet: "AWS::SES::ConfigurationSet";
  readonly SESContactList: "AWS::SES::ContactList";
  readonly SESReceiptFilter: "AWS::SES::ReceiptFilter";
  readonly SESReceiptRuleSet: "AWS::SES::ReceiptRuleSet";
  readonly SESTemplate: "AWS::SES::Template";
  readonly SSMDocument: "AWS::SSM::Document";
  readonly SageMakerAppImageConfig: "AWS::SageMaker::AppImageConfig";
  readonly SageMakerCodeRepository: "AWS::SageMaker::CodeRepository";
  readonly SageMakerDomain: "AWS::SageMaker::Domain";
  readonly SageMakerFeatureGroup: "AWS::SageMaker::FeatureGroup";
  readonly SageMakerImage: "AWS::SageMaker::Image";
  readonly SageMakerInferenceExperiment: "AWS::SageMaker::InferenceExperiment";
  readonly SageMakerModel: "AWS::SageMaker::Model";
  readonly SageMakerNotebookInstanceLifecycleConfig: "AWS::SageMaker::NotebookInstanceLifecycleConfig";
  readonly SageMakerWorkteam: "AWS::SageMaker::Workteam";
  readonly ScalingPolicy: "AWS::AutoScaling::ScalingPolicy";
  readonly ScheduledAction: "AWS::AutoScaling::ScheduledAction";
  readonly Secret: "AWS::SecretsManager::Secret";
  readonly SecurityGroup: "AWS::EC2::SecurityGroup";
  readonly SecurityHubStandard: "AWS::SecurityHub::Standard";
  readonly ServiceDiscoveryHttpNamespace: "AWS::ServiceDiscovery::HttpNamespace";
  readonly ServiceDiscoveryInstance: "AWS::ServiceDiscovery::Instance";
  readonly ServiceDiscoveryPublicDnsNamespace: "AWS::ServiceDiscovery::PublicDnsNamespace";
  readonly ServiceDiscoveryService: "AWS::ServiceDiscovery::Service";
  readonly SignerSigningProfile: "AWS::Signer::SigningProfile";
  readonly Stack: "AWS::CloudFormation::Stack";
  readonly Stage: "AWS::ApiGateway::Stage";
  readonly StageV2: "AWS::ApiGatewayV2::Stage";
  readonly StepFunctionsActivity: "AWS::StepFunctions::Activity";
  readonly StepFunctionsStateMachine: "AWS::StepFunctions::StateMachine";
  readonly StreamingDistribution: "AWS::CloudFront::StreamingDistribution";
  readonly Subnet: "AWS::EC2::Subnet";
  readonly Table: "AWS::DynamoDB::Table";
  readonly Topic: "AWS::SNS::Topic";
  readonly Trail: "AWS::CloudTrail::Trail";
  readonly TransferAgreement: "AWS::Transfer::Agreement";
  readonly TransferCertificate: "AWS::Transfer::Certificate";
  readonly TransferConnector: "AWS::Transfer::Connector";
  readonly TransferProfile: "AWS::Transfer::Profile";
  readonly TransferWorkflow: "AWS::Transfer::Workflow";
  readonly TransitGateway: "AWS::EC2::TransitGateway";
  readonly TransitGatewayAttachment: "AWS::EC2::TransitGatewayAttachment";
  readonly TransitGatewayRouteTable: "AWS::EC2::TransitGatewayRouteTable";
  readonly User: "AWS::IAM::User";
  readonly VPC: "AWS::EC2::VPC";
  readonly VPCEndpoint: "AWS::EC2::VPCEndpoint";
  readonly VPCEndpointService: "AWS::EC2::VPCEndpointService";
  readonly VPCPeeringConnection: "AWS::EC2::VPCPeeringConnection";
  readonly VPNConnection: "AWS::EC2::VPNConnection";
  readonly VPNGateway: "AWS::EC2::VPNGateway";
  readonly Volume: "AWS::EC2::Volume";
  readonly WebACL: "AWS::WAF::WebACL";
  readonly WebACLV2: "AWS::WAFv2::WebACL";
  readonly WorkSpacesConnectionAlias: "AWS::WorkSpaces::ConnectionAlias";
  readonly WorkSpacesWorkspace: "AWS::WorkSpaces::Workspace";
};
export type ResourceType = (typeof ResourceType)[keyof typeof ResourceType];
export interface AggregateResourceIdentifier {
  SourceAccountId: string | undefined;
  SourceRegion: string | undefined;
  ResourceId: string | undefined;
  ResourceType: ResourceType | undefined;
  ResourceName?: string | undefined;
}
export interface AggregationAuthorization {
  AggregationAuthorizationArn?: string | undefined;
  AuthorizedAccountId?: string | undefined;
  AuthorizedAwsRegion?: string | undefined;
  CreationTime?: Date | undefined;
}
export declare const AggregatorFilterType: {
  readonly INCLUDE: "INCLUDE";
};
export type AggregatorFilterType =
  (typeof AggregatorFilterType)[keyof typeof AggregatorFilterType];
export interface AggregatorFilterResourceType {
  Type?: AggregatorFilterType | undefined;
  Value?: string[] | undefined;
}
export interface AggregatorFilterServicePrincipal {
  Type?: AggregatorFilterType | undefined;
  Value?: string[] | undefined;
}
export interface AggregatorFilters {
  ResourceType?: AggregatorFilterResourceType | undefined;
  ServicePrincipal?: AggregatorFilterServicePrincipal | undefined;
}
export interface AssociateResourceTypesRequest {
  ConfigurationRecorderArn: string | undefined;
  ResourceTypes: ResourceType[] | undefined;
}
export interface ExclusionByResourceTypes {
  resourceTypes?: ResourceType[] | undefined;
}
export declare const RecordingStrategyType: {
  readonly ALL_SUPPORTED_RESOURCE_TYPES: "ALL_SUPPORTED_RESOURCE_TYPES";
  readonly EXCLUSION_BY_RESOURCE_TYPES: "EXCLUSION_BY_RESOURCE_TYPES";
  readonly INCLUSION_BY_RESOURCE_TYPES: "INCLUSION_BY_RESOURCE_TYPES";
};
export type RecordingStrategyType =
  (typeof RecordingStrategyType)[keyof typeof RecordingStrategyType];
export interface RecordingStrategy {
  useOnly?: RecordingStrategyType | undefined;
}
export interface RecordingGroup {
  allSupported?: boolean | undefined;
  includeGlobalResourceTypes?: boolean | undefined;
  resourceTypes?: ResourceType[] | undefined;
  exclusionByResourceTypes?: ExclusionByResourceTypes | undefined;
  recordingStrategy?: RecordingStrategy | undefined;
}
export declare const RecordingFrequency: {
  readonly CONTINUOUS: "CONTINUOUS";
  readonly DAILY: "DAILY";
};
export type RecordingFrequency =
  (typeof RecordingFrequency)[keyof typeof RecordingFrequency];
export interface RecordingModeOverride {
  description?: string | undefined;
  resourceTypes: ResourceType[] | undefined;
  recordingFrequency: RecordingFrequency | undefined;
}
export interface RecordingMode {
  recordingFrequency: RecordingFrequency | undefined;
  recordingModeOverrides?: RecordingModeOverride[] | undefined;
}
export declare const RecordingScope: {
  readonly INTERNAL: "INTERNAL";
  readonly PAID: "PAID";
};
export type RecordingScope =
  (typeof RecordingScope)[keyof typeof RecordingScope];
export interface ConfigurationRecorder {
  arn?: string | undefined;
  name?: string | undefined;
  roleARN?: string | undefined;
  recordingGroup?: RecordingGroup | undefined;
  recordingMode?: RecordingMode | undefined;
  recordingScope?: RecordingScope | undefined;
  servicePrincipal?: string | undefined;
}
export interface AssociateResourceTypesResponse {
  ConfigurationRecorder: ConfigurationRecorder | undefined;
}
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export declare class NoSuchConfigurationRecorderException extends __BaseException {
  readonly name: "NoSuchConfigurationRecorderException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      NoSuchConfigurationRecorderException,
      __BaseException
    >
  );
}
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export declare const ConfigurationItemStatus: {
  readonly OK: "OK";
  readonly ResourceDeleted: "ResourceDeleted";
  readonly ResourceDeletedNotRecorded: "ResourceDeletedNotRecorded";
  readonly ResourceDiscovered: "ResourceDiscovered";
  readonly ResourceNotRecorded: "ResourceNotRecorded";
};
export type ConfigurationItemStatus =
  (typeof ConfigurationItemStatus)[keyof typeof ConfigurationItemStatus];
export interface BaseConfigurationItem {
  version?: string | undefined;
  accountId?: string | undefined;
  configurationItemCaptureTime?: Date | undefined;
  configurationItemStatus?: ConfigurationItemStatus | undefined;
  configurationStateId?: string | undefined;
  arn?: string | undefined;
  resourceType?: ResourceType | undefined;
  resourceId?: string | undefined;
  resourceName?: string | undefined;
  awsRegion?: string | undefined;
  availabilityZone?: string | undefined;
  resourceCreationTime?: Date | undefined;
  configuration?: string | undefined;
  supplementaryConfiguration?: Record<string, string> | undefined;
  recordingFrequency?: RecordingFrequency | undefined;
  configurationItemDeliveryTime?: Date | undefined;
}
export interface BatchGetAggregateResourceConfigRequest {
  ConfigurationAggregatorName: string | undefined;
  ResourceIdentifiers: AggregateResourceIdentifier[] | undefined;
}
export interface BatchGetAggregateResourceConfigResponse {
  BaseConfigurationItems?: BaseConfigurationItem[] | undefined;
  UnprocessedResourceIdentifiers?: AggregateResourceIdentifier[] | undefined;
}
export declare class NoSuchConfigurationAggregatorException extends __BaseException {
  readonly name: "NoSuchConfigurationAggregatorException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      NoSuchConfigurationAggregatorException,
      __BaseException
    >
  );
}
export interface ResourceKey {
  resourceType: ResourceType | undefined;
  resourceId: string | undefined;
}
export interface BatchGetResourceConfigRequest {
  resourceKeys: ResourceKey[] | undefined;
}
export interface BatchGetResourceConfigResponse {
  baseConfigurationItems?: BaseConfigurationItem[] | undefined;
  unprocessedResourceKeys?: ResourceKey[] | undefined;
}
export declare class NoAvailableConfigurationRecorderException extends __BaseException {
  readonly name: "NoAvailableConfigurationRecorderException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      NoAvailableConfigurationRecorderException,
      __BaseException
    >
  );
}
export declare const ChronologicalOrder: {
  readonly Forward: "Forward";
  readonly Reverse: "Reverse";
};
export type ChronologicalOrder =
  (typeof ChronologicalOrder)[keyof typeof ChronologicalOrder];
export interface ComplianceByConfigRule {
  ConfigRuleName?: string | undefined;
  Compliance?: Compliance | undefined;
}
export interface ComplianceByResource {
  ResourceType?: string | undefined;
  ResourceId?: string | undefined;
  Compliance?: Compliance | undefined;
}
export interface ComplianceSummaryByResourceType {
  ResourceType?: string | undefined;
  ComplianceSummary?: ComplianceSummary | undefined;
}
export declare const DeliveryStatus: {
  readonly Failure: "Failure";
  readonly Not_Applicable: "Not_Applicable";
  readonly Success: "Success";
};
export type DeliveryStatus =
  (typeof DeliveryStatus)[keyof typeof DeliveryStatus];
export interface ConfigExportDeliveryInfo {
  lastStatus?: DeliveryStatus | undefined;
  lastErrorCode?: string | undefined;
  lastErrorMessage?: string | undefined;
  lastAttemptTime?: Date | undefined;
  lastSuccessfulTime?: Date | undefined;
  nextDeliveryTime?: Date | undefined;
}
export declare const ConfigRuleState: {
  readonly ACTIVE: "ACTIVE";
  readonly DELETING: "DELETING";
  readonly DELETING_RESULTS: "DELETING_RESULTS";
  readonly EVALUATING: "EVALUATING";
};
export type ConfigRuleState =
  (typeof ConfigRuleState)[keyof typeof ConfigRuleState];
export interface EvaluationModeConfiguration {
  Mode?: EvaluationMode | undefined;
}
export declare const MaximumExecutionFrequency: {
  readonly One_Hour: "One_Hour";
  readonly Six_Hours: "Six_Hours";
  readonly Three_Hours: "Three_Hours";
  readonly Twelve_Hours: "Twelve_Hours";
  readonly TwentyFour_Hours: "TwentyFour_Hours";
};
export type MaximumExecutionFrequency =
  (typeof MaximumExecutionFrequency)[keyof typeof MaximumExecutionFrequency];
export interface Scope {
  ComplianceResourceTypes?: string[] | undefined;
  TagKey?: string | undefined;
  TagValue?: string | undefined;
  ComplianceResourceId?: string | undefined;
}
export interface CustomPolicyDetails {
  PolicyRuntime: string | undefined;
  PolicyText: string | undefined;
  EnableDebugLogDelivery?: boolean | undefined;
}
export declare const Owner: {
  readonly Aws: "AWS";
  readonly Custom_Lambda: "CUSTOM_LAMBDA";
  readonly Custom_Policy: "CUSTOM_POLICY";
};
export type Owner = (typeof Owner)[keyof typeof Owner];
export declare const EventSource: {
  readonly Aws_Config: "aws.config";
};
export type EventSource = (typeof EventSource)[keyof typeof EventSource];
export declare const MessageType: {
  readonly ConfigurationItemChangeNotification: "ConfigurationItemChangeNotification";
  readonly ConfigurationSnapshotDeliveryCompleted: "ConfigurationSnapshotDeliveryCompleted";
  readonly OversizedConfigurationItemChangeNotification: "OversizedConfigurationItemChangeNotification";
  readonly ScheduledNotification: "ScheduledNotification";
};
export type MessageType = (typeof MessageType)[keyof typeof MessageType];
export interface SourceDetail {
  EventSource?: EventSource | undefined;
  MessageType?: MessageType | undefined;
  MaximumExecutionFrequency?: MaximumExecutionFrequency | undefined;
}
export interface Source {
  Owner: Owner | undefined;
  SourceIdentifier?: string | undefined;
  SourceDetails?: SourceDetail[] | undefined;
  CustomPolicyDetails?: CustomPolicyDetails | undefined;
}
export interface ConfigRule {
  ConfigRuleName?: string | undefined;
  ConfigRuleArn?: string | undefined;
  ConfigRuleId?: string | undefined;
  Description?: string | undefined;
  Scope?: Scope | undefined;
  Source: Source | undefined;
  InputParameters?: string | undefined;
  MaximumExecutionFrequency?: MaximumExecutionFrequency | undefined;
  ConfigRuleState?: ConfigRuleState | undefined;
  CreatedBy?: string | undefined;
  EvaluationModes?: EvaluationModeConfiguration[] | undefined;
}
export interface ConfigRuleComplianceFilters {
  ConfigRuleName?: string | undefined;
  ComplianceType?: ComplianceType | undefined;
  AccountId?: string | undefined;
  AwsRegion?: string | undefined;
}
export interface ConfigRuleComplianceSummaryFilters {
  AccountId?: string | undefined;
  AwsRegion?: string | undefined;
}
export declare const ConfigRuleComplianceSummaryGroupKey: {
  readonly ACCOUNT_ID: "ACCOUNT_ID";
  readonly AWS_REGION: "AWS_REGION";
};
export type ConfigRuleComplianceSummaryGroupKey =
  (typeof ConfigRuleComplianceSummaryGroupKey)[keyof typeof ConfigRuleComplianceSummaryGroupKey];
export interface ConfigRuleEvaluationStatus {
  ConfigRuleName?: string | undefined;
  ConfigRuleArn?: string | undefined;
  ConfigRuleId?: string | undefined;
  LastSuccessfulInvocationTime?: Date | undefined;
  LastFailedInvocationTime?: Date | undefined;
  LastSuccessfulEvaluationTime?: Date | undefined;
  LastFailedEvaluationTime?: Date | undefined;
  FirstActivatedTime?: Date | undefined;
  LastDeactivatedTime?: Date | undefined;
  LastErrorCode?: string | undefined;
  LastErrorMessage?: string | undefined;
  FirstEvaluationStarted?: boolean | undefined;
  LastDebugLogDeliveryStatus?: string | undefined;
  LastDebugLogDeliveryStatusReason?: string | undefined;
  LastDebugLogDeliveryTime?: Date | undefined;
}
export interface ConfigSnapshotDeliveryProperties {
  deliveryFrequency?: MaximumExecutionFrequency | undefined;
}
export interface ConfigStreamDeliveryInfo {
  lastStatus?: DeliveryStatus | undefined;
  lastErrorCode?: string | undefined;
  lastErrorMessage?: string | undefined;
  lastStatusChangeTime?: Date | undefined;
}
export interface OrganizationAggregationSource {
  RoleArn: string | undefined;
  AwsRegions?: string[] | undefined;
  AllAwsRegions?: boolean | undefined;
}
export interface ConfigurationAggregator {
  ConfigurationAggregatorName?: string | undefined;
  ConfigurationAggregatorArn?: string | undefined;
  AccountAggregationSources?: AccountAggregationSource[] | undefined;
  OrganizationAggregationSource?: OrganizationAggregationSource | undefined;
  CreationTime?: Date | undefined;
  LastUpdatedTime?: Date | undefined;
  CreatedBy?: string | undefined;
  AggregatorFilters?: AggregatorFilters | undefined;
}
export interface Relationship {
  resourceType?: ResourceType | undefined;
  resourceId?: string | undefined;
  resourceName?: string | undefined;
  relationshipName?: string | undefined;
}
export interface ConfigurationItem {
  version?: string | undefined;
  accountId?: string | undefined;
  configurationItemCaptureTime?: Date | undefined;
  configurationItemStatus?: ConfigurationItemStatus | undefined;
  configurationStateId?: string | undefined;
  configurationItemMD5Hash?: string | undefined;
  arn?: string | undefined;
  resourceType?: ResourceType | undefined;
  resourceId?: string | undefined;
  resourceName?: string | undefined;
  awsRegion?: string | undefined;
  availabilityZone?: string | undefined;
  resourceCreationTime?: Date | undefined;
  tags?: Record<string, string> | undefined;
  relatedEvents?: string[] | undefined;
  relationships?: Relationship[] | undefined;
  configuration?: string | undefined;
  supplementaryConfiguration?: Record<string, string> | undefined;
  recordingFrequency?: RecordingFrequency | undefined;
  configurationItemDeliveryTime?: Date | undefined;
}
export declare const ConfigurationRecorderFilterName: {
  readonly RecordingScope: "recordingScope";
};
export type ConfigurationRecorderFilterName =
  (typeof ConfigurationRecorderFilterName)[keyof typeof ConfigurationRecorderFilterName];
export interface ConfigurationRecorderFilter {
  filterName?: ConfigurationRecorderFilterName | undefined;
  filterValue?: string[] | undefined;
}
export declare const RecorderStatus: {
  readonly Failure: "Failure";
  readonly NotApplicable: "NotApplicable";
  readonly Pending: "Pending";
  readonly Success: "Success";
};
export type RecorderStatus =
  (typeof RecorderStatus)[keyof typeof RecorderStatus];
export interface ConfigurationRecorderStatus {
  arn?: string | undefined;
  name?: string | undefined;
  lastStartTime?: Date | undefined;
  lastStopTime?: Date | undefined;
  recording?: boolean | undefined;
  lastStatus?: RecorderStatus | undefined;
  lastErrorCode?: string | undefined;
  lastErrorMessage?: string | undefined;
  lastStatusChangeTime?: Date | undefined;
  servicePrincipal?: string | undefined;
}
export interface ConfigurationRecorderSummary {
  arn: string | undefined;
  name: string | undefined;
  servicePrincipal?: string | undefined;
  recordingScope: RecordingScope | undefined;
}
export interface ConformancePackComplianceFilters {
  ConfigRuleNames?: string[] | undefined;
  ComplianceType?: ConformancePackComplianceType | undefined;
}
export interface ConformancePackComplianceScore {
  Score?: string | undefined;
  ConformancePackName?: string | undefined;
  LastUpdatedTime?: Date | undefined;
}
export interface ConformancePackComplianceScoresFilters {
  ConformancePackNames: string[] | undefined;
}
export interface ConformancePackComplianceSummary {
  ConformancePackName: string | undefined;
  ConformancePackComplianceStatus: ConformancePackComplianceType | undefined;
}
export interface ConformancePackInputParameter {
  ParameterName: string | undefined;
  ParameterValue: string | undefined;
}
export interface TemplateSSMDocumentDetails {
  DocumentName: string | undefined;
  DocumentVersion?: string | undefined;
}
export interface ConformancePackDetail {
  ConformancePackName: string | undefined;
  ConformancePackArn: string | undefined;
  ConformancePackId: string | undefined;
  DeliveryS3Bucket?: string | undefined;
  DeliveryS3KeyPrefix?: string | undefined;
  ConformancePackInputParameters?: ConformancePackInputParameter[] | undefined;
  LastUpdateRequestedTime?: Date | undefined;
  CreatedBy?: string | undefined;
  TemplateSSMDocumentDetails?: TemplateSSMDocumentDetails | undefined;
}
export interface ConformancePackEvaluationFilters {
  ConfigRuleNames?: string[] | undefined;
  ComplianceType?: ConformancePackComplianceType | undefined;
  ResourceType?: string | undefined;
  ResourceIds?: string[] | undefined;
}
export interface ConformancePackEvaluationResult {
  ComplianceType: ConformancePackComplianceType | undefined;
  EvaluationResultIdentifier: EvaluationResultIdentifier | undefined;
  ConfigRuleInvokedTime: Date | undefined;
  ResultRecordedTime: Date | undefined;
  Annotation?: string | undefined;
}
export interface ConformancePackRuleCompliance {
  ConfigRuleName?: string | undefined;
  ComplianceType?: ConformancePackComplianceType | undefined;
  Controls?: string[] | undefined;
}
export declare const ConformancePackState: {
  readonly CREATE_COMPLETE: "CREATE_COMPLETE";
  readonly CREATE_FAILED: "CREATE_FAILED";
  readonly CREATE_IN_PROGRESS: "CREATE_IN_PROGRESS";
  readonly DELETE_FAILED: "DELETE_FAILED";
  readonly DELETE_IN_PROGRESS: "DELETE_IN_PROGRESS";
};
export type ConformancePackState =
  (typeof ConformancePackState)[keyof typeof ConformancePackState];
export interface ConformancePackStatusDetail {
  ConformancePackName: string | undefined;
  ConformancePackId: string | undefined;
  ConformancePackArn: string | undefined;
  ConformancePackState: ConformancePackState | undefined;
  StackArn: string | undefined;
  ConformancePackStatusReason?: string | undefined;
  LastUpdateRequestedTime: Date | undefined;
  LastUpdateCompletedTime?: Date | undefined;
}
export declare class ConformancePackTemplateValidationException extends __BaseException {
  readonly name: "ConformancePackTemplateValidationException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      ConformancePackTemplateValidationException,
      __BaseException
    >
  );
}
export interface DeleteAggregationAuthorizationRequest {
  AuthorizedAccountId: string | undefined;
  AuthorizedAwsRegion: string | undefined;
}
export declare class InvalidParameterValueException extends __BaseException {
  readonly name: "InvalidParameterValueException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidParameterValueException, __BaseException>
  );
}
export interface DeleteConfigRuleRequest {
  ConfigRuleName: string | undefined;
}
export declare class NoSuchConfigRuleException extends __BaseException {
  readonly name: "NoSuchConfigRuleException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<NoSuchConfigRuleException, __BaseException>
  );
}
export declare class ResourceInUseException extends __BaseException {
  readonly name: "ResourceInUseException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceInUseException, __BaseException>
  );
}
export interface DeleteConfigurationAggregatorRequest {
  ConfigurationAggregatorName: string | undefined;
}
export interface DeleteConfigurationRecorderRequest {
  ConfigurationRecorderName: string | undefined;
}
export declare class UnmodifiableEntityException extends __BaseException {
  readonly name: "UnmodifiableEntityException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<UnmodifiableEntityException, __BaseException>
  );
}
export interface DeleteConformancePackRequest {
  ConformancePackName: string | undefined;
}
export declare class NoSuchConformancePackException extends __BaseException {
  readonly name: "NoSuchConformancePackException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<NoSuchConformancePackException, __BaseException>
  );
}
export interface DeleteDeliveryChannelRequest {
  DeliveryChannelName: string | undefined;
}
export declare class LastDeliveryChannelDeleteFailedException extends __BaseException {
  readonly name: "LastDeliveryChannelDeleteFailedException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      LastDeliveryChannelDeleteFailedException,
      __BaseException
    >
  );
}
export declare class NoSuchDeliveryChannelException extends __BaseException {
  readonly name: "NoSuchDeliveryChannelException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<NoSuchDeliveryChannelException, __BaseException>
  );
}
export interface DeleteEvaluationResultsRequest {
  ConfigRuleName: string | undefined;
}
export interface DeleteEvaluationResultsResponse {}
export interface DeleteOrganizationConfigRuleRequest {
  OrganizationConfigRuleName: string | undefined;
}
export declare class NoSuchOrganizationConfigRuleException extends __BaseException {
  readonly name: "NoSuchOrganizationConfigRuleException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      NoSuchOrganizationConfigRuleException,
      __BaseException
    >
  );
}
export declare class OrganizationAccessDeniedException extends __BaseException {
  readonly name: "OrganizationAccessDeniedException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      OrganizationAccessDeniedException,
      __BaseException
    >
  );
}
export interface DeleteOrganizationConformancePackRequest {
  OrganizationConformancePackName: string | undefined;
}
export declare class NoSuchOrganizationConformancePackException extends __BaseException {
  readonly name: "NoSuchOrganizationConformancePackException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      NoSuchOrganizationConformancePackException,
      __BaseException
    >
  );
}
export interface DeletePendingAggregationRequestRequest {
  RequesterAccountId: string | undefined;
  RequesterAwsRegion: string | undefined;
}
export interface DeleteRemediationConfigurationRequest {
  ConfigRuleName: string | undefined;
  ResourceType?: string | undefined;
}
export interface DeleteRemediationConfigurationResponse {}
export declare class InsufficientPermissionsException extends __BaseException {
  readonly name: "InsufficientPermissionsException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      InsufficientPermissionsException,
      __BaseException
    >
  );
}
export declare class NoSuchRemediationConfigurationException extends __BaseException {
  readonly name: "NoSuchRemediationConfigurationException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      NoSuchRemediationConfigurationException,
      __BaseException
    >
  );
}
export declare class RemediationInProgressException extends __BaseException {
  readonly name: "RemediationInProgressException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<RemediationInProgressException, __BaseException>
  );
}
export interface RemediationExceptionResourceKey {
  ResourceType?: string | undefined;
  ResourceId?: string | undefined;
}
export interface DeleteRemediationExceptionsRequest {
  ConfigRuleName: string | undefined;
  ResourceKeys: RemediationExceptionResourceKey[] | undefined;
}
export interface FailedDeleteRemediationExceptionsBatch {
  FailureMessage?: string | undefined;
  FailedItems?: RemediationExceptionResourceKey[] | undefined;
}
export interface DeleteRemediationExceptionsResponse {
  FailedBatches?: FailedDeleteRemediationExceptionsBatch[] | undefined;
}
export declare class NoSuchRemediationExceptionException extends __BaseException {
  readonly name: "NoSuchRemediationExceptionException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      NoSuchRemediationExceptionException,
      __BaseException
    >
  );
}
export interface DeleteResourceConfigRequest {
  ResourceType: string | undefined;
  ResourceId: string | undefined;
}
export declare class NoRunningConfigurationRecorderException extends __BaseException {
  readonly name: "NoRunningConfigurationRecorderException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      NoRunningConfigurationRecorderException,
      __BaseException
    >
  );
}
export interface DeleteRetentionConfigurationRequest {
  RetentionConfigurationName: string | undefined;
}
export declare class NoSuchRetentionConfigurationException extends __BaseException {
  readonly name: "NoSuchRetentionConfigurationException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      NoSuchRetentionConfigurationException,
      __BaseException
    >
  );
}
export interface DeleteServiceLinkedConfigurationRecorderRequest {
  ServicePrincipal: string | undefined;
}
export interface DeleteServiceLinkedConfigurationRecorderResponse {
  Arn: string | undefined;
  Name: string | undefined;
}
export interface DeleteStoredQueryRequest {
  QueryName: string | undefined;
}
export interface DeleteStoredQueryResponse {}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export interface DeliverConfigSnapshotRequest {
  deliveryChannelName: string | undefined;
}
export interface DeliverConfigSnapshotResponse {
  configSnapshotId?: string | undefined;
}
export interface DeliveryChannel {
  name?: string | undefined;
  s3BucketName?: string | undefined;
  s3KeyPrefix?: string | undefined;
  s3KmsKeyArn?: string | undefined;
  snsTopicARN?: string | undefined;
  configSnapshotDeliveryProperties?:
    | ConfigSnapshotDeliveryProperties
    | undefined;
}
export interface DeliveryChannelStatus {
  name?: string | undefined;
  configSnapshotDeliveryInfo?: ConfigExportDeliveryInfo | undefined;
  configHistoryDeliveryInfo?: ConfigExportDeliveryInfo | undefined;
  configStreamDeliveryInfo?: ConfigStreamDeliveryInfo | undefined;
}
export interface DescribeAggregateComplianceByConfigRulesRequest {
  ConfigurationAggregatorName: string | undefined;
  Filters?: ConfigRuleComplianceFilters | undefined;
  Limit?: number | undefined;
  NextToken?: string | undefined;
}
export interface DescribeAggregateComplianceByConfigRulesResponse {
  AggregateComplianceByConfigRules?:
    | AggregateComplianceByConfigRule[]
    | undefined;
  NextToken?: string | undefined;
}
export declare class InvalidLimitException extends __BaseException {
  readonly name: "InvalidLimitException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidLimitException, __BaseException>
  );
}
export declare class InvalidNextTokenException extends __BaseException {
  readonly name: "InvalidNextTokenException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidNextTokenException, __BaseException>
  );
}
export interface DescribeAggregateComplianceByConformancePacksRequest {
  ConfigurationAggregatorName: string | undefined;
  Filters?: AggregateConformancePackComplianceFilters | undefined;
  Limit?: number | undefined;
  NextToken?: string | undefined;
}
export interface DescribeAggregateComplianceByConformancePacksResponse {
  AggregateComplianceByConformancePacks?:
    | AggregateComplianceByConformancePack[]
    | undefined;
  NextToken?: string | undefined;
}
export interface DescribeAggregationAuthorizationsRequest {
  Limit?: number | undefined;
  NextToken?: string | undefined;
}
export interface DescribeAggregationAuthorizationsResponse {
  AggregationAuthorizations?: AggregationAuthorization[] | undefined;
  NextToken?: string | undefined;
}
export interface DescribeComplianceByConfigRuleRequest {
  ConfigRuleNames?: string[] | undefined;
  ComplianceTypes?: ComplianceType[] | undefined;
  NextToken?: string | undefined;
}
export interface DescribeComplianceByConfigRuleResponse {
  ComplianceByConfigRules?: ComplianceByConfigRule[] | undefined;
  NextToken?: string | undefined;
}
export interface DescribeComplianceByResourceRequest {
  ResourceType?: string | undefined;
  ResourceId?: string | undefined;
  ComplianceTypes?: ComplianceType[] | undefined;
  Limit?: number | undefined;
  NextToken?: string | undefined;
}
export interface DescribeComplianceByResourceResponse {
  ComplianceByResources?: ComplianceByResource[] | undefined;
  NextToken?: string | undefined;
}
export interface DescribeConfigRuleEvaluationStatusRequest {
  ConfigRuleNames?: string[] | undefined;
  NextToken?: string | undefined;
  Limit?: number | undefined;
}
export interface DescribeConfigRuleEvaluationStatusResponse {
  ConfigRulesEvaluationStatus?: ConfigRuleEvaluationStatus[] | undefined;
  NextToken?: string | undefined;
}
export interface DescribeConfigRulesFilters {
  EvaluationMode?: EvaluationMode | undefined;
}
export interface DescribeConfigRulesRequest {
  ConfigRuleNames?: string[] | undefined;
  NextToken?: string | undefined;
  Filters?: DescribeConfigRulesFilters | undefined;
}
export interface DescribeConfigRulesResponse {
  ConfigRules?: ConfigRule[] | undefined;
  NextToken?: string | undefined;
}
export interface DescribeConfigurationAggregatorsRequest {
  ConfigurationAggregatorNames?: string[] | undefined;
  NextToken?: string | undefined;
  Limit?: number | undefined;
}
export interface DescribeConfigurationAggregatorsResponse {
  ConfigurationAggregators?: ConfigurationAggregator[] | undefined;
  NextToken?: string | undefined;
}
export interface DescribeConfigurationAggregatorSourcesStatusRequest {
  ConfigurationAggregatorName: string | undefined;
  UpdateStatus?: AggregatedSourceStatusType[] | undefined;
  NextToken?: string | undefined;
  Limit?: number | undefined;
}
export interface DescribeConfigurationAggregatorSourcesStatusResponse {
  AggregatedSourceStatusList?: AggregatedSourceStatus[] | undefined;
  NextToken?: string | undefined;
}
export interface DescribeConfigurationRecordersRequest {
  ConfigurationRecorderNames?: string[] | undefined;
  ServicePrincipal?: string | undefined;
  Arn?: string | undefined;
}
export interface DescribeConfigurationRecordersResponse {
  ConfigurationRecorders?: ConfigurationRecorder[] | undefined;
}
export interface DescribeConfigurationRecorderStatusRequest {
  ConfigurationRecorderNames?: string[] | undefined;
  ServicePrincipal?: string | undefined;
  Arn?: string | undefined;
}
export interface DescribeConfigurationRecorderStatusResponse {
  ConfigurationRecordersStatus?: ConfigurationRecorderStatus[] | undefined;
}
export interface DescribeConformancePackComplianceRequest {
  ConformancePackName: string | undefined;
  Filters?: ConformancePackComplianceFilters | undefined;
  Limit?: number | undefined;
  NextToken?: string | undefined;
}
export interface DescribeConformancePackComplianceResponse {
  ConformancePackName: string | undefined;
  ConformancePackRuleComplianceList:
    | ConformancePackRuleCompliance[]
    | undefined;
  NextToken?: string | undefined;
}
export declare class NoSuchConfigRuleInConformancePackException extends __BaseException {
  readonly name: "NoSuchConfigRuleInConformancePackException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      NoSuchConfigRuleInConformancePackException,
      __BaseException
    >
  );
}
export interface DescribeConformancePacksRequest {
  ConformancePackNames?: string[] | undefined;
  Limit?: number | undefined;
  NextToken?: string | undefined;
}
export interface DescribeConformancePacksResponse {
  ConformancePackDetails?: ConformancePackDetail[] | undefined;
  NextToken?: string | undefined;
}
export interface DescribeConformancePackStatusRequest {
  ConformancePackNames?: string[] | undefined;
  Limit?: number | undefined;
  NextToken?: string | undefined;
}
export interface DescribeConformancePackStatusResponse {
  ConformancePackStatusDetails?: ConformancePackStatusDetail[] | undefined;
  NextToken?: string | undefined;
}
export interface DescribeDeliveryChannelsRequest {
  DeliveryChannelNames?: string[] | undefined;
}
export interface DescribeDeliveryChannelsResponse {
  DeliveryChannels?: DeliveryChannel[] | undefined;
}
export interface DescribeDeliveryChannelStatusRequest {
  DeliveryChannelNames?: string[] | undefined;
}
export interface DescribeDeliveryChannelStatusResponse {
  DeliveryChannelsStatus?: DeliveryChannelStatus[] | undefined;
}
export interface DescribeOrganizationConfigRulesRequest {
  OrganizationConfigRuleNames?: string[] | undefined;
  Limit?: number | undefined;
  NextToken?: string | undefined;
}
export declare const OrganizationConfigRuleTriggerTypeNoSN: {
  readonly CONFIGURATION_ITEM_CHANGE_NOTIFICATION: "ConfigurationItemChangeNotification";
  readonly OVERSIZED_CONFIGURATION_ITEM_CHANGE_NOTIFCATION: "OversizedConfigurationItemChangeNotification";
};
export type OrganizationConfigRuleTriggerTypeNoSN =
  (typeof OrganizationConfigRuleTriggerTypeNoSN)[keyof typeof OrganizationConfigRuleTriggerTypeNoSN];
export interface OrganizationCustomPolicyRuleMetadataNoPolicy {
  Description?: string | undefined;
  OrganizationConfigRuleTriggerTypes?:
    | OrganizationConfigRuleTriggerTypeNoSN[]
    | undefined;
  InputParameters?: string | undefined;
  MaximumExecutionFrequency?: MaximumExecutionFrequency | undefined;
  ResourceTypesScope?: string[] | undefined;
  ResourceIdScope?: string | undefined;
  TagKeyScope?: string | undefined;
  TagValueScope?: string | undefined;
  PolicyRuntime?: string | undefined;
  DebugLogDeliveryAccounts?: string[] | undefined;
}
export declare const OrganizationConfigRuleTriggerType: {
  readonly CONFIGURATION_ITEM_CHANGE_NOTIFICATION: "ConfigurationItemChangeNotification";
  readonly OVERSIZED_CONFIGURATION_ITEM_CHANGE_NOTIFCATION: "OversizedConfigurationItemChangeNotification";
  readonly SCHEDULED_NOTIFICATION: "ScheduledNotification";
};
export type OrganizationConfigRuleTriggerType =
  (typeof OrganizationConfigRuleTriggerType)[keyof typeof OrganizationConfigRuleTriggerType];
export interface OrganizationCustomRuleMetadata {
  Description?: string | undefined;
  LambdaFunctionArn: string | undefined;
  OrganizationConfigRuleTriggerTypes:
    | OrganizationConfigRuleTriggerType[]
    | undefined;
  InputParameters?: string | undefined;
  MaximumExecutionFrequency?: MaximumExecutionFrequency | undefined;
  ResourceTypesScope?: string[] | undefined;
  ResourceIdScope?: string | undefined;
  TagKeyScope?: string | undefined;
  TagValueScope?: string | undefined;
}
export interface OrganizationManagedRuleMetadata {
  Description?: string | undefined;
  RuleIdentifier: string | undefined;
  InputParameters?: string | undefined;
  MaximumExecutionFrequency?: MaximumExecutionFrequency | undefined;
  ResourceTypesScope?: string[] | undefined;
  ResourceIdScope?: string | undefined;
  TagKeyScope?: string | undefined;
  TagValueScope?: string | undefined;
}
export interface OrganizationConfigRule {
  OrganizationConfigRuleName: string | undefined;
  OrganizationConfigRuleArn: string | undefined;
  OrganizationManagedRuleMetadata?: OrganizationManagedRuleMetadata | undefined;
  OrganizationCustomRuleMetadata?: OrganizationCustomRuleMetadata | undefined;
  ExcludedAccounts?: string[] | undefined;
  LastUpdateTime?: Date | undefined;
  OrganizationCustomPolicyRuleMetadata?:
    | OrganizationCustomPolicyRuleMetadataNoPolicy
    | undefined;
}
export interface DescribeOrganizationConfigRulesResponse {
  OrganizationConfigRules?: OrganizationConfigRule[] | undefined;
  NextToken?: string | undefined;
}
export interface DescribeOrganizationConfigRuleStatusesRequest {
  OrganizationConfigRuleNames?: string[] | undefined;
  Limit?: number | undefined;
  NextToken?: string | undefined;
}
export declare const OrganizationRuleStatus: {
  readonly CREATE_FAILED: "CREATE_FAILED";
  readonly CREATE_IN_PROGRESS: "CREATE_IN_PROGRESS";
  readonly CREATE_SUCCESSFUL: "CREATE_SUCCESSFUL";
  readonly DELETE_FAILED: "DELETE_FAILED";
  readonly DELETE_IN_PROGRESS: "DELETE_IN_PROGRESS";
  readonly DELETE_SUCCESSFUL: "DELETE_SUCCESSFUL";
  readonly UPDATE_FAILED: "UPDATE_FAILED";
  readonly UPDATE_IN_PROGRESS: "UPDATE_IN_PROGRESS";
  readonly UPDATE_SUCCESSFUL: "UPDATE_SUCCESSFUL";
};
export type OrganizationRuleStatus =
  (typeof OrganizationRuleStatus)[keyof typeof OrganizationRuleStatus];
export interface OrganizationConfigRuleStatus {
  OrganizationConfigRuleName: string | undefined;
  OrganizationRuleStatus: OrganizationRuleStatus | undefined;
  ErrorCode?: string | undefined;
  ErrorMessage?: string | undefined;
  LastUpdateTime?: Date | undefined;
}
export interface DescribeOrganizationConfigRuleStatusesResponse {
  OrganizationConfigRuleStatuses?: OrganizationConfigRuleStatus[] | undefined;
  NextToken?: string | undefined;
}
export interface DescribeOrganizationConformancePacksRequest {
  OrganizationConformancePackNames?: string[] | undefined;
  Limit?: number | undefined;
  NextToken?: string | undefined;
}
export interface OrganizationConformancePack {
  OrganizationConformancePackName: string | undefined;
  OrganizationConformancePackArn: string | undefined;
  DeliveryS3Bucket?: string | undefined;
  DeliveryS3KeyPrefix?: string | undefined;
  ConformancePackInputParameters?: ConformancePackInputParameter[] | undefined;
  ExcludedAccounts?: string[] | undefined;
  LastUpdateTime: Date | undefined;
}
export interface DescribeOrganizationConformancePacksResponse {
  OrganizationConformancePacks?: OrganizationConformancePack[] | undefined;
  NextToken?: string | undefined;
}
export interface DescribeOrganizationConformancePackStatusesRequest {
  OrganizationConformancePackNames?: string[] | undefined;
  Limit?: number | undefined;
  NextToken?: string | undefined;
}
export declare const OrganizationResourceStatus: {
  readonly CREATE_FAILED: "CREATE_FAILED";
  readonly CREATE_IN_PROGRESS: "CREATE_IN_PROGRESS";
  readonly CREATE_SUCCESSFUL: "CREATE_SUCCESSFUL";
  readonly DELETE_FAILED: "DELETE_FAILED";
  readonly DELETE_IN_PROGRESS: "DELETE_IN_PROGRESS";
  readonly DELETE_SUCCESSFUL: "DELETE_SUCCESSFUL";
  readonly UPDATE_FAILED: "UPDATE_FAILED";
  readonly UPDATE_IN_PROGRESS: "UPDATE_IN_PROGRESS";
  readonly UPDATE_SUCCESSFUL: "UPDATE_SUCCESSFUL";
};
export type OrganizationResourceStatus =
  (typeof OrganizationResourceStatus)[keyof typeof OrganizationResourceStatus];
export interface OrganizationConformancePackStatus {
  OrganizationConformancePackName: string | undefined;
  Status: OrganizationResourceStatus | undefined;
  ErrorCode?: string | undefined;
  ErrorMessage?: string | undefined;
  LastUpdateTime?: Date | undefined;
}
export interface DescribeOrganizationConformancePackStatusesResponse {
  OrganizationConformancePackStatuses?:
    | OrganizationConformancePackStatus[]
    | undefined;
  NextToken?: string | undefined;
}
export interface DescribePendingAggregationRequestsRequest {
  Limit?: number | undefined;
  NextToken?: string | undefined;
}
export interface PendingAggregationRequest {
  RequesterAccountId?: string | undefined;
  RequesterAwsRegion?: string | undefined;
}
export interface DescribePendingAggregationRequestsResponse {
  PendingAggregationRequests?: PendingAggregationRequest[] | undefined;
  NextToken?: string | undefined;
}
export interface DescribeRemediationConfigurationsRequest {
  ConfigRuleNames: string[] | undefined;
}
export interface SsmControls {
  ConcurrentExecutionRatePercentage?: number | undefined;
  ErrorPercentage?: number | undefined;
}
export interface ExecutionControls {
  SsmControls?: SsmControls | undefined;
}
export declare const ResourceValueType: {
  readonly RESOURCE_ID: "RESOURCE_ID";
};
export type ResourceValueType =
  (typeof ResourceValueType)[keyof typeof ResourceValueType];
export interface ResourceValue {
  Value: ResourceValueType | undefined;
}
export interface StaticValue {
  Values: string[] | undefined;
}
export interface RemediationParameterValue {
  ResourceValue?: ResourceValue | undefined;
  StaticValue?: StaticValue | undefined;
}
export declare const RemediationTargetType: {
  readonly SSM_DOCUMENT: "SSM_DOCUMENT";
};
export type RemediationTargetType =
  (typeof RemediationTargetType)[keyof typeof RemediationTargetType];
export interface RemediationConfiguration {
  ConfigRuleName: string | undefined;
  TargetType: RemediationTargetType | undefined;
  TargetId: string | undefined;
  TargetVersion?: string | undefined;
  Parameters?: Record<string, RemediationParameterValue> | undefined;
  ResourceType?: string | undefined;
  Automatic?: boolean | undefined;
  ExecutionControls?: ExecutionControls | undefined;
  MaximumAutomaticAttempts?: number | undefined;
  RetryAttemptSeconds?: number | undefined;
  Arn?: string | undefined;
  CreatedByService?: string | undefined;
}
export interface DescribeRemediationConfigurationsResponse {
  RemediationConfigurations?: RemediationConfiguration[] | undefined;
}
export interface DescribeRemediationExceptionsRequest {
  ConfigRuleName: string | undefined;
  ResourceKeys?: RemediationExceptionResourceKey[] | undefined;
  Limit?: number | undefined;
  NextToken?: string | undefined;
}
export interface RemediationException {
  ConfigRuleName: string | undefined;
  ResourceType: string | undefined;
  ResourceId: string | undefined;
  Message?: string | undefined;
  ExpirationTime?: Date | undefined;
}
export interface DescribeRemediationExceptionsResponse {
  RemediationExceptions?: RemediationException[] | undefined;
  NextToken?: string | undefined;
}
export interface DescribeRemediationExecutionStatusRequest {
  ConfigRuleName: string | undefined;
  ResourceKeys?: ResourceKey[] | undefined;
  Limit?: number | undefined;
  NextToken?: string | undefined;
}
export declare const RemediationExecutionState: {
  readonly FAILED: "FAILED";
  readonly IN_PROGRESS: "IN_PROGRESS";
  readonly QUEUED: "QUEUED";
  readonly SUCCEEDED: "SUCCEEDED";
};
export type RemediationExecutionState =
  (typeof RemediationExecutionState)[keyof typeof RemediationExecutionState];
export declare const RemediationExecutionStepState: {
  readonly FAILED: "FAILED";
  readonly PENDING: "PENDING";
  readonly SUCCEEDED: "SUCCEEDED";
};
export type RemediationExecutionStepState =
  (typeof RemediationExecutionStepState)[keyof typeof RemediationExecutionStepState];
export interface RemediationExecutionStep {
  Name?: string | undefined;
  State?: RemediationExecutionStepState | undefined;
  ErrorMessage?: string | undefined;
  StartTime?: Date | undefined;
  StopTime?: Date | undefined;
}
export interface RemediationExecutionStatus {
  ResourceKey?: ResourceKey | undefined;
  State?: RemediationExecutionState | undefined;
  StepDetails?: RemediationExecutionStep[] | undefined;
  InvocationTime?: Date | undefined;
  LastUpdatedTime?: Date | undefined;
}
export interface DescribeRemediationExecutionStatusResponse {
  RemediationExecutionStatuses?: RemediationExecutionStatus[] | undefined;
  NextToken?: string | undefined;
}
export interface DescribeRetentionConfigurationsRequest {
  RetentionConfigurationNames?: string[] | undefined;
  NextToken?: string | undefined;
}
export interface RetentionConfiguration {
  Name: string | undefined;
  RetentionPeriodInDays: number | undefined;
}
export interface DescribeRetentionConfigurationsResponse {
  RetentionConfigurations?: RetentionConfiguration[] | undefined;
  NextToken?: string | undefined;
}
export interface DisassociateResourceTypesRequest {
  ConfigurationRecorderArn: string | undefined;
  ResourceTypes: ResourceType[] | undefined;
}
export interface DisassociateResourceTypesResponse {
  ConfigurationRecorder: ConfigurationRecorder | undefined;
}
export interface Evaluation {
  ComplianceResourceType: string | undefined;
  ComplianceResourceId: string | undefined;
  ComplianceType: ComplianceType | undefined;
  Annotation?: string | undefined;
  OrderingTimestamp: Date | undefined;
}
export interface EvaluationContext {
  EvaluationContextIdentifier?: string | undefined;
}
export interface EvaluationResult {
  EvaluationResultIdentifier?: EvaluationResultIdentifier | undefined;
  ComplianceType?: ComplianceType | undefined;
  ResultRecordedTime?: Date | undefined;
  ConfigRuleInvokedTime?: Date | undefined;
  Annotation?: string | undefined;
  ResultToken?: string | undefined;
}
export declare const ResourceEvaluationStatus: {
  readonly FAILED: "FAILED";
  readonly IN_PROGRESS: "IN_PROGRESS";
  readonly SUCCEEDED: "SUCCEEDED";
};
export type ResourceEvaluationStatus =
  (typeof ResourceEvaluationStatus)[keyof typeof ResourceEvaluationStatus];
export interface EvaluationStatus {
  Status: ResourceEvaluationStatus | undefined;
  FailureReason?: string | undefined;
}
export interface ExternalEvaluation {
  ComplianceResourceType: string | undefined;
  ComplianceResourceId: string | undefined;
  ComplianceType: ComplianceType | undefined;
  Annotation?: string | undefined;
  OrderingTimestamp: Date | undefined;
}
export interface FailedRemediationBatch {
  FailureMessage?: string | undefined;
  FailedItems?: RemediationConfiguration[] | undefined;
}
export interface FailedRemediationExceptionBatch {
  FailureMessage?: string | undefined;
  FailedItems?: RemediationException[] | undefined;
}
export interface FieldInfo {
  Name?: string | undefined;
}
export interface GetAggregateComplianceDetailsByConfigRuleRequest {
  ConfigurationAggregatorName: string | undefined;
  ConfigRuleName: string | undefined;
  AccountId: string | undefined;
  AwsRegion: string | undefined;
  ComplianceType?: ComplianceType | undefined;
  Limit?: number | undefined;
  NextToken?: string | undefined;
}
export interface GetAggregateComplianceDetailsByConfigRuleResponse {
  AggregateEvaluationResults?: AggregateEvaluationResult[] | undefined;
  NextToken?: string | undefined;
}
export interface GetAggregateConfigRuleComplianceSummaryRequest {
  ConfigurationAggregatorName: string | undefined;
  Filters?: ConfigRuleComplianceSummaryFilters | undefined;
  GroupByKey?: ConfigRuleComplianceSummaryGroupKey | undefined;
  Limit?: number | undefined;
  NextToken?: string | undefined;
}
export interface GetAggregateConfigRuleComplianceSummaryResponse {
  GroupByKey?: string | undefined;
  AggregateComplianceCounts?: AggregateComplianceCount[] | undefined;
  NextToken?: string | undefined;
}
export interface GetAggregateConformancePackComplianceSummaryRequest {
  ConfigurationAggregatorName: string | undefined;
  Filters?: AggregateConformancePackComplianceSummaryFilters | undefined;
  GroupByKey?: AggregateConformancePackComplianceSummaryGroupKey | undefined;
  Limit?: number | undefined;
  NextToken?: string | undefined;
}
export interface GetAggregateConformancePackComplianceSummaryResponse {
  AggregateConformancePackComplianceSummaries?:
    | AggregateConformancePackComplianceSummary[]
    | undefined;
  GroupByKey?: string | undefined;
  NextToken?: string | undefined;
}
export interface ResourceCountFilters {
  ResourceType?: ResourceType | undefined;
  AccountId?: string | undefined;
  Region?: string | undefined;
}
export declare const ResourceCountGroupKey: {
  readonly ACCOUNT_ID: "ACCOUNT_ID";
  readonly AWS_REGION: "AWS_REGION";
  readonly RESOURCE_TYPE: "RESOURCE_TYPE";
};
export type ResourceCountGroupKey =
  (typeof ResourceCountGroupKey)[keyof typeof ResourceCountGroupKey];
export interface GetAggregateDiscoveredResourceCountsRequest {
  ConfigurationAggregatorName: string | undefined;
  Filters?: ResourceCountFilters | undefined;
  GroupByKey?: ResourceCountGroupKey | undefined;
  Limit?: number | undefined;
  NextToken?: string | undefined;
}
export interface GroupedResourceCount {
  GroupName: string | undefined;
  ResourceCount: number | undefined;
}
export interface GetAggregateDiscoveredResourceCountsResponse {
  TotalDiscoveredResources: number | undefined;
  GroupByKey?: string | undefined;
  GroupedResourceCounts?: GroupedResourceCount[] | undefined;
  NextToken?: string | undefined;
}
export interface GetAggregateResourceConfigRequest {
  ConfigurationAggregatorName: string | undefined;
  ResourceIdentifier: AggregateResourceIdentifier | undefined;
}
export interface GetAggregateResourceConfigResponse {
  ConfigurationItem?: ConfigurationItem | undefined;
}
export declare class OversizedConfigurationItemException extends __BaseException {
  readonly name: "OversizedConfigurationItemException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      OversizedConfigurationItemException,
      __BaseException
    >
  );
}
export declare class ResourceNotDiscoveredException extends __BaseException {
  readonly name: "ResourceNotDiscoveredException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceNotDiscoveredException, __BaseException>
  );
}
export interface GetComplianceDetailsByConfigRuleRequest {
  ConfigRuleName: string | undefined;
  ComplianceTypes?: ComplianceType[] | undefined;
  Limit?: number | undefined;
  NextToken?: string | undefined;
}
export interface GetComplianceDetailsByConfigRuleResponse {
  EvaluationResults?: EvaluationResult[] | undefined;
  NextToken?: string | undefined;
}
export interface GetComplianceDetailsByResourceRequest {
  ResourceType?: string | undefined;
  ResourceId?: string | undefined;
  ComplianceTypes?: ComplianceType[] | undefined;
  NextToken?: string | undefined;
  ResourceEvaluationId?: string | undefined;
}
export interface GetComplianceDetailsByResourceResponse {
  EvaluationResults?: EvaluationResult[] | undefined;
  NextToken?: string | undefined;
}
export interface GetComplianceSummaryByConfigRuleResponse {
  ComplianceSummary?: ComplianceSummary | undefined;
}
export interface GetComplianceSummaryByResourceTypeRequest {
  ResourceTypes?: string[] | undefined;
}
export interface GetComplianceSummaryByResourceTypeResponse {
  ComplianceSummariesByResourceType?:
    | ComplianceSummaryByResourceType[]
    | undefined;
}
export interface GetConformancePackComplianceDetailsRequest {
  ConformancePackName: string | undefined;
  Filters?: ConformancePackEvaluationFilters | undefined;
  Limit?: number | undefined;
  NextToken?: string | undefined;
}
export interface GetConformancePackComplianceDetailsResponse {
  ConformancePackName: string | undefined;
  ConformancePackRuleEvaluationResults?:
    | ConformancePackEvaluationResult[]
    | undefined;
  NextToken?: string | undefined;
}
export interface GetConformancePackComplianceSummaryRequest {
  ConformancePackNames: string[] | undefined;
  Limit?: number | undefined;
  NextToken?: string | undefined;
}
export interface GetConformancePackComplianceSummaryResponse {
  ConformancePackComplianceSummaryList?:
    | ConformancePackComplianceSummary[]
    | undefined;
  NextToken?: string | undefined;
}
export interface GetCustomRulePolicyRequest {
  ConfigRuleName?: string | undefined;
}
export interface GetCustomRulePolicyResponse {
  PolicyText?: string | undefined;
}
export interface GetDiscoveredResourceCountsRequest {
  resourceTypes?: string[] | undefined;
  limit?: number | undefined;
  nextToken?: string | undefined;
}
export interface ResourceCount {
  resourceType?: ResourceType | undefined;
  count?: number | undefined;
}
export interface GetDiscoveredResourceCountsResponse {
  totalDiscoveredResources?: number | undefined;
  resourceCounts?: ResourceCount[] | undefined;
  nextToken?: string | undefined;
}
export declare const MemberAccountRuleStatus: {
  readonly CREATE_FAILED: "CREATE_FAILED";
  readonly CREATE_IN_PROGRESS: "CREATE_IN_PROGRESS";
  readonly CREATE_SUCCESSFUL: "CREATE_SUCCESSFUL";
  readonly DELETE_FAILED: "DELETE_FAILED";
  readonly DELETE_IN_PROGRESS: "DELETE_IN_PROGRESS";
  readonly DELETE_SUCCESSFUL: "DELETE_SUCCESSFUL";
  readonly UPDATE_FAILED: "UPDATE_FAILED";
  readonly UPDATE_IN_PROGRESS: "UPDATE_IN_PROGRESS";
  readonly UPDATE_SUCCESSFUL: "UPDATE_SUCCESSFUL";
};
export type MemberAccountRuleStatus =
  (typeof MemberAccountRuleStatus)[keyof typeof MemberAccountRuleStatus];
export interface StatusDetailFilters {
  AccountId?: string | undefined;
  MemberAccountRuleStatus?: MemberAccountRuleStatus | undefined;
}
export interface GetOrganizationConfigRuleDetailedStatusRequest {
  OrganizationConfigRuleName: string | undefined;
  Filters?: StatusDetailFilters | undefined;
  Limit?: number | undefined;
  NextToken?: string | undefined;
}
export interface MemberAccountStatus {
  AccountId: string | undefined;
  ConfigRuleName: string | undefined;
  MemberAccountRuleStatus: MemberAccountRuleStatus | undefined;
  ErrorCode?: string | undefined;
  ErrorMessage?: string | undefined;
  LastUpdateTime?: Date | undefined;
}
export interface GetOrganizationConfigRuleDetailedStatusResponse {
  OrganizationConfigRuleDetailedStatus?: MemberAccountStatus[] | undefined;
  NextToken?: string | undefined;
}
export declare const OrganizationResourceDetailedStatus: {
  readonly CREATE_FAILED: "CREATE_FAILED";
  readonly CREATE_IN_PROGRESS: "CREATE_IN_PROGRESS";
  readonly CREATE_SUCCESSFUL: "CREATE_SUCCESSFUL";
  readonly DELETE_FAILED: "DELETE_FAILED";
  readonly DELETE_IN_PROGRESS: "DELETE_IN_PROGRESS";
  readonly DELETE_SUCCESSFUL: "DELETE_SUCCESSFUL";
  readonly UPDATE_FAILED: "UPDATE_FAILED";
  readonly UPDATE_IN_PROGRESS: "UPDATE_IN_PROGRESS";
  readonly UPDATE_SUCCESSFUL: "UPDATE_SUCCESSFUL";
};
export type OrganizationResourceDetailedStatus =
  (typeof OrganizationResourceDetailedStatus)[keyof typeof OrganizationResourceDetailedStatus];
export interface OrganizationResourceDetailedStatusFilters {
  AccountId?: string | undefined;
  Status?: OrganizationResourceDetailedStatus | undefined;
}
export interface GetOrganizationConformancePackDetailedStatusRequest {
  OrganizationConformancePackName: string | undefined;
  Filters?: OrganizationResourceDetailedStatusFilters | undefined;
  Limit?: number | undefined;
  NextToken?: string | undefined;
}
export interface OrganizationConformancePackDetailedStatus {
  AccountId: string | undefined;
  ConformancePackName: string | undefined;
  Status: OrganizationResourceDetailedStatus | undefined;
  ErrorCode?: string | undefined;
  ErrorMessage?: string | undefined;
  LastUpdateTime?: Date | undefined;
}
export interface GetOrganizationConformancePackDetailedStatusResponse {
  OrganizationConformancePackDetailedStatuses?:
    | OrganizationConformancePackDetailedStatus[]
    | undefined;
  NextToken?: string | undefined;
}
export interface GetOrganizationCustomRulePolicyRequest {
  OrganizationConfigRuleName: string | undefined;
}
export interface GetOrganizationCustomRulePolicyResponse {
  PolicyText?: string | undefined;
}
export interface GetResourceConfigHistoryRequest {
  resourceType: ResourceType | undefined;
  resourceId: string | undefined;
  laterTime?: Date | undefined;
  earlierTime?: Date | undefined;
  chronologicalOrder?: ChronologicalOrder | undefined;
  limit?: number | undefined;
  nextToken?: string | undefined;
}
export interface GetResourceConfigHistoryResponse {
  configurationItems?: ConfigurationItem[] | undefined;
  nextToken?: string | undefined;
}
export declare class InvalidTimeRangeException extends __BaseException {
  readonly name: "InvalidTimeRangeException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidTimeRangeException, __BaseException>
  );
}
export interface GetResourceEvaluationSummaryRequest {
  ResourceEvaluationId: string | undefined;
}
export declare const ResourceConfigurationSchemaType: {
  readonly CFN_RESOURCE_SCHEMA: "CFN_RESOURCE_SCHEMA";
};
export type ResourceConfigurationSchemaType =
  (typeof ResourceConfigurationSchemaType)[keyof typeof ResourceConfigurationSchemaType];
export interface ResourceDetails {
  ResourceId: string | undefined;
  ResourceType: string | undefined;
  ResourceConfiguration: string | undefined;
  ResourceConfigurationSchemaType?: ResourceConfigurationSchemaType | undefined;
}
export interface GetResourceEvaluationSummaryResponse {
  ResourceEvaluationId?: string | undefined;
  EvaluationMode?: EvaluationMode | undefined;
  EvaluationStatus?: EvaluationStatus | undefined;
  EvaluationStartTimestamp?: Date | undefined;
  Compliance?: ComplianceType | undefined;
  EvaluationContext?: EvaluationContext | undefined;
  ResourceDetails?: ResourceDetails | undefined;
}
export interface GetStoredQueryRequest {
  QueryName: string | undefined;
}
export interface StoredQuery {
  QueryId?: string | undefined;
  QueryArn?: string | undefined;
  QueryName: string | undefined;
  Description?: string | undefined;
  Expression?: string | undefined;
}
export interface GetStoredQueryResponse {
  StoredQuery?: StoredQuery | undefined;
}
export declare class IdempotentParameterMismatch extends __BaseException {
  readonly name: "IdempotentParameterMismatch";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<IdempotentParameterMismatch, __BaseException>
  );
}
export declare class InsufficientDeliveryPolicyException extends __BaseException {
  readonly name: "InsufficientDeliveryPolicyException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      InsufficientDeliveryPolicyException,
      __BaseException
    >
  );
}
export declare class InvalidConfigurationRecorderNameException extends __BaseException {
  readonly name: "InvalidConfigurationRecorderNameException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      InvalidConfigurationRecorderNameException,
      __BaseException
    >
  );
}
export declare class InvalidDeliveryChannelNameException extends __BaseException {
  readonly name: "InvalidDeliveryChannelNameException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      InvalidDeliveryChannelNameException,
      __BaseException
    >
  );
}
export declare class InvalidExpressionException extends __BaseException {
  readonly name: "InvalidExpressionException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidExpressionException, __BaseException>
  );
}
export declare class InvalidRecordingGroupException extends __BaseException {
  readonly name: "InvalidRecordingGroupException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidRecordingGroupException, __BaseException>
  );
}
export declare class InvalidResultTokenException extends __BaseException {
  readonly name: "InvalidResultTokenException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidResultTokenException, __BaseException>
  );
}
export declare class InvalidRoleException extends __BaseException {
  readonly name: "InvalidRoleException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidRoleException, __BaseException>
  );
}
export declare class InvalidS3KeyPrefixException extends __BaseException {
  readonly name: "InvalidS3KeyPrefixException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidS3KeyPrefixException, __BaseException>
  );
}
export declare class InvalidS3KmsKeyArnException extends __BaseException {
  readonly name: "InvalidS3KmsKeyArnException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidS3KmsKeyArnException, __BaseException>
  );
}
export declare class InvalidSNSTopicARNException extends __BaseException {
  readonly name: "InvalidSNSTopicARNException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidSNSTopicARNException, __BaseException>
  );
}
export declare class LimitExceededException extends __BaseException {
  readonly name: "LimitExceededException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<LimitExceededException, __BaseException>
  );
}
export interface ResourceFilters {
  AccountId?: string | undefined;
  ResourceId?: string | undefined;
  ResourceName?: string | undefined;
  Region?: string | undefined;
}
export interface ListAggregateDiscoveredResourcesRequest {
  ConfigurationAggregatorName: string | undefined;
  ResourceType: ResourceType | undefined;
  Filters?: ResourceFilters | undefined;
  Limit?: number | undefined;
  NextToken?: string | undefined;
}
export interface ListAggregateDiscoveredResourcesResponse {
  ResourceIdentifiers?: AggregateResourceIdentifier[] | undefined;
  NextToken?: string | undefined;
}
