import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
import { ConfigServiceServiceException as __BaseException } from "./ConfigServiceServiceException";
export interface AccountAggregationSource {
  AccountIds: string[] | undefined;
  AllAwsRegions?: boolean;
  AwsRegions?: string[];
}
export interface ComplianceContributorCount {
  CappedCount?: number;
  CapExceeded?: boolean;
}
export declare const ComplianceType: {
  readonly Compliant: "COMPLIANT";
  readonly Insufficient_Data: "INSUFFICIENT_DATA";
  readonly Non_Compliant: "NON_COMPLIANT";
  readonly Not_Applicable: "NOT_APPLICABLE";
};
export type ComplianceType =
  (typeof ComplianceType)[keyof typeof ComplianceType];
export interface Compliance {
  ComplianceType?: ComplianceType | string;
  ComplianceContributorCount?: ComplianceContributorCount;
}
export interface AggregateComplianceByConfigRule {
  ConfigRuleName?: string;
  Compliance?: Compliance;
  AccountId?: string;
  AwsRegion?: string;
}
export declare const ConformancePackComplianceType: {
  readonly COMPLIANT: "COMPLIANT";
  readonly INSUFFICIENT_DATA: "INSUFFICIENT_DATA";
  readonly NON_COMPLIANT: "NON_COMPLIANT";
};
export type ConformancePackComplianceType =
  (typeof ConformancePackComplianceType)[keyof typeof ConformancePackComplianceType];
export interface AggregateConformancePackCompliance {
  ComplianceType?: ConformancePackComplianceType | string;
  CompliantRuleCount?: number;
  NonCompliantRuleCount?: number;
  TotalRuleCount?: number;
}
export interface AggregateComplianceByConformancePack {
  ConformancePackName?: string;
  Compliance?: AggregateConformancePackCompliance;
  AccountId?: string;
  AwsRegion?: string;
}
export interface ComplianceSummary {
  CompliantResourceCount?: ComplianceContributorCount;
  NonCompliantResourceCount?: ComplianceContributorCount;
  ComplianceSummaryTimestamp?: Date;
}
export interface AggregateComplianceCount {
  GroupName?: string;
  ComplianceSummary?: ComplianceSummary;
}
export interface AggregateConformancePackComplianceCount {
  CompliantConformancePackCount?: number;
  NonCompliantConformancePackCount?: number;
}
export interface AggregateConformancePackComplianceFilters {
  ConformancePackName?: string;
  ComplianceType?: ConformancePackComplianceType | string;
  AccountId?: string;
  AwsRegion?: string;
}
export interface AggregateConformancePackComplianceSummary {
  ComplianceSummary?: AggregateConformancePackComplianceCount;
  GroupName?: string;
}
export interface AggregateConformancePackComplianceSummaryFilters {
  AccountId?: string;
  AwsRegion?: string;
}
export declare const AggregateConformancePackComplianceSummaryGroupKey: {
  readonly ACCOUNT_ID: "ACCOUNT_ID";
  readonly AWS_REGION: "AWS_REGION";
};
export type AggregateConformancePackComplianceSummaryGroupKey =
  (typeof AggregateConformancePackComplianceSummaryGroupKey)[keyof typeof AggregateConformancePackComplianceSummaryGroupKey];
export declare const AggregatedSourceStatusType: {
  readonly FAILED: "FAILED";
  readonly OUTDATED: "OUTDATED";
  readonly SUCCEEDED: "SUCCEEDED";
};
export type AggregatedSourceStatusType =
  (typeof AggregatedSourceStatusType)[keyof typeof AggregatedSourceStatusType];
export declare const AggregatedSourceType: {
  readonly ACCOUNT: "ACCOUNT";
  readonly ORGANIZATION: "ORGANIZATION";
};
export type AggregatedSourceType =
  (typeof AggregatedSourceType)[keyof typeof AggregatedSourceType];
export interface AggregatedSourceStatus {
  SourceId?: string;
  SourceType?: AggregatedSourceType | string;
  AwsRegion?: string;
  LastUpdateStatus?: AggregatedSourceStatusType | string;
  LastUpdateTime?: Date;
  LastErrorCode?: string;
  LastErrorMessage?: string;
}
export declare const EvaluationMode: {
  readonly DETECTIVE: "DETECTIVE";
  readonly PROACTIVE: "PROACTIVE";
};
export type EvaluationMode =
  (typeof EvaluationMode)[keyof typeof EvaluationMode];
export interface EvaluationResultQualifier {
  ConfigRuleName?: string;
  ResourceType?: string;
  ResourceId?: string;
  EvaluationMode?: EvaluationMode | string;
}
export interface EvaluationResultIdentifier {
  EvaluationResultQualifier?: EvaluationResultQualifier;
  OrderingTimestamp?: Date;
  ResourceEvaluationId?: string;
}
export interface AggregateEvaluationResult {
  EvaluationResultIdentifier?: EvaluationResultIdentifier;
  ComplianceType?: ComplianceType | string;
  ResultRecordedTime?: Date;
  ConfigRuleInvokedTime?: Date;
  Annotation?: string;
  AccountId?: string;
  AwsRegion?: string;
}
export declare const ResourceType: {
  readonly AccessAnalyzerAnalyzer: "AWS::AccessAnalyzer::Analyzer";
  readonly AccountPublicAccessBlock: "AWS::S3::AccountPublicAccessBlock";
  readonly Alarm: "AWS::CloudWatch::Alarm";
  readonly AmazonMQBroker: "AWS::AmazonMQ::Broker";
  readonly Api: "AWS::ApiGatewayV2::Api";
  readonly AppConfigApplication: "AWS::AppConfig::Application";
  readonly AppConfigConfigurationProfile: "AWS::AppConfig::ConfigurationProfile";
  readonly AppConfigDeploymentStrategy: "AWS::AppConfig::DeploymentStrategy";
  readonly AppConfigEnvironment: "AWS::AppConfig::Environment";
  readonly AppFlowFlow: "AWS::AppFlow::Flow";
  readonly AppStreamDirectoryConfig: "AWS::AppStream::DirectoryConfig";
  readonly AppSyncGraphQLApi: "AWS::AppSync::GraphQLApi";
  readonly Application: "AWS::ElasticBeanstalk::Application";
  readonly ApplicationVersion: "AWS::ElasticBeanstalk::ApplicationVersion";
  readonly AssociationCompliance: "AWS::SSM::AssociationCompliance";
  readonly AthenaDataCatalog: "AWS::Athena::DataCatalog";
  readonly AthenaWorkGroup: "AWS::Athena::WorkGroup";
  readonly AuditManagerAssessment: "AWS::AuditManager::Assessment";
  readonly AutoScalingGroup: "AWS::AutoScaling::AutoScalingGroup";
  readonly AutoScalingWarmPool: "AWS::AutoScaling::WarmPool";
  readonly BackupPlan: "AWS::Backup::BackupPlan";
  readonly BackupRecoveryPoint: "AWS::Backup::RecoveryPoint";
  readonly BackupReportPlan: "AWS::Backup::ReportPlan";
  readonly BackupSelection: "AWS::Backup::BackupSelection";
  readonly BackupVault: "AWS::Backup::BackupVault";
  readonly BatchComputeEnvironment: "AWS::Batch::ComputeEnvironment";
  readonly BatchJobQueue: "AWS::Batch::JobQueue";
  readonly Bucket: "AWS::S3::Bucket";
  readonly BudgetsBudgetsAction: "AWS::Budgets::BudgetsAction";
  readonly Certificate: "AWS::ACM::Certificate";
  readonly Cloud9EnvironmentEC2: "AWS::Cloud9::EnvironmentEC2";
  readonly CloudFormationProduct: "AWS::ServiceCatalog::CloudFormationProduct";
  readonly CloudFormationProvisionedProduct: "AWS::ServiceCatalog::CloudFormationProvisionedProduct";
  readonly CloudWatchMetricStream: "AWS::CloudWatch::MetricStream";
  readonly Cluster: "AWS::Redshift::Cluster";
  readonly ClusterParameterGroup: "AWS::Redshift::ClusterParameterGroup";
  readonly ClusterSecurityGroup: "AWS::Redshift::ClusterSecurityGroup";
  readonly ClusterSnapshot: "AWS::Redshift::ClusterSnapshot";
  readonly ClusterSubnetGroup: "AWS::Redshift::ClusterSubnetGroup";
  readonly CodeDeployApplication: "AWS::CodeDeploy::Application";
  readonly CodeDeployDeploymentConfig: "AWS::CodeDeploy::DeploymentConfig";
  readonly CodeDeployDeploymentGroup: "AWS::CodeDeploy::DeploymentGroup";
  readonly CodeGuruReviewerRepositoryAssociation: "AWS::CodeGuruReviewer::RepositoryAssociation";
  readonly ConformancePackCompliance: "AWS::Config::ConformancePackCompliance";
  readonly ConnectPhoneNumber: "AWS::Connect::PhoneNumber";
  readonly CustomerGateway: "AWS::EC2::CustomerGateway";
  readonly CustomerProfilesDomain: "AWS::CustomerProfiles::Domain";
  readonly DBCluster: "AWS::RDS::DBCluster";
  readonly DBClusterSnapshot: "AWS::RDS::DBClusterSnapshot";
  readonly DBInstance: "AWS::RDS::DBInstance";
  readonly DBSecurityGroup: "AWS::RDS::DBSecurityGroup";
  readonly DBSnapshot: "AWS::RDS::DBSnapshot";
  readonly DBSubnetGroup: "AWS::RDS::DBSubnetGroup";
  readonly DMSCertificate: "AWS::DMS::Certificate";
  readonly DMSEventSubscription: "AWS::DMS::EventSubscription";
  readonly DMSReplicationSubnetGroup: "AWS::DMS::ReplicationSubnetGroup";
  readonly DataSyncLocationEFS: "AWS::DataSync::LocationEFS";
  readonly DataSyncLocationFSxLustre: "AWS::DataSync::LocationFSxLustre";
  readonly DataSyncLocationFSxWindows: "AWS::DataSync::LocationFSxWindows";
  readonly DataSyncLocationHDFS: "AWS::DataSync::LocationHDFS";
  readonly DataSyncLocationNFS: "AWS::DataSync::LocationNFS";
  readonly DataSyncLocationObjectStorage: "AWS::DataSync::LocationObjectStorage";
  readonly DataSyncLocationS3: "AWS::DataSync::LocationS3";
  readonly DataSyncLocationSMB: "AWS::DataSync::LocationSMB";
  readonly DataSyncTask: "AWS::DataSync::Task";
  readonly DetectiveGraph: "AWS::Detective::Graph";
  readonly DeviceFarmInstanceProfile: "AWS::DeviceFarm::InstanceProfile";
  readonly DeviceFarmProject: "AWS::DeviceFarm::Project";
  readonly DeviceFarmTestGridProject: "AWS::DeviceFarm::TestGridProject";
  readonly Distribution: "AWS::CloudFront::Distribution";
  readonly Domain: "AWS::Elasticsearch::Domain";
  readonly EC2DHCPOptions: "AWS::EC2::DHCPOptions";
  readonly EC2EC2Fleet: "AWS::EC2::EC2Fleet";
  readonly EC2IPAM: "AWS::EC2::IPAM";
  readonly EC2NetworkInsightsPath: "AWS::EC2::NetworkInsightsPath";
  readonly EC2SubnetRouteTableAssociation: "AWS::EC2::SubnetRouteTableAssociation";
  readonly EC2TrafficMirrorFilter: "AWS::EC2::TrafficMirrorFilter";
  readonly EC2TrafficMirrorSession: "AWS::EC2::TrafficMirrorSession";
  readonly EC2TrafficMirrorTarget: "AWS::EC2::TrafficMirrorTarget";
  readonly ECRPublicRepository: "AWS::ECR::PublicRepository";
  readonly ECRPullThroughCacheRule: "AWS::ECR::PullThroughCacheRule";
  readonly ECRRegistryPolicy: "AWS::ECR::RegistryPolicy";
  readonly ECRRepository: "AWS::ECR::Repository";
  readonly ECSCluster: "AWS::ECS::Cluster";
  readonly ECSService: "AWS::ECS::Service";
  readonly ECSTaskDefinition: "AWS::ECS::TaskDefinition";
  readonly EFSAccessPoint: "AWS::EFS::AccessPoint";
  readonly EFSFileSystem: "AWS::EFS::FileSystem";
  readonly EIP: "AWS::EC2::EIP";
  readonly EKSAddon: "AWS::EKS::Addon";
  readonly EKSCluster: "AWS::EKS::Cluster";
  readonly EKSFargateProfile: "AWS::EKS::FargateProfile";
  readonly EKSIdentityProviderConfig: "AWS::EKS::IdentityProviderConfig";
  readonly EMRSecurityConfiguration: "AWS::EMR::SecurityConfiguration";
  readonly EgressOnlyInternetGateway: "AWS::EC2::EgressOnlyInternetGateway";
  readonly EncryptionConfig: "AWS::XRay::EncryptionConfig";
  readonly Environment: "AWS::ElasticBeanstalk::Environment";
  readonly EventSchemasDiscoverer: "AWS::EventSchemas::Discoverer";
  readonly EventSchemasRegistry: "AWS::EventSchemas::Registry";
  readonly EventSchemasRegistryPolicy: "AWS::EventSchemas::RegistryPolicy";
  readonly EventSchemasSchema: "AWS::EventSchemas::Schema";
  readonly EventSubscription: "AWS::RDS::EventSubscription";
  readonly EventsApiDestination: "AWS::Events::ApiDestination";
  readonly EventsArchive: "AWS::Events::Archive";
  readonly EventsConnection: "AWS::Events::Connection";
  readonly EventsEndpoint: "AWS::Events::Endpoint";
  readonly EventsEventBus: "AWS::Events::EventBus";
  readonly EventsRule: "AWS::Events::Rule";
  readonly FISExperimentTemplate: "AWS::FIS::ExperimentTemplate";
  readonly FileData: "AWS::SSM::FileData";
  readonly FlowLog: "AWS::EC2::FlowLog";
  readonly FraudDetectorEntityType: "AWS::FraudDetector::EntityType";
  readonly FraudDetectorLabel: "AWS::FraudDetector::Label";
  readonly FraudDetectorOutcome: "AWS::FraudDetector::Outcome";
  readonly FraudDetectorVariable: "AWS::FraudDetector::Variable";
  readonly Function: "AWS::Lambda::Function";
  readonly GlobalAcceleratorAccelerator: "AWS::GlobalAccelerator::Accelerator";
  readonly GlobalAcceleratorEndpointGroup: "AWS::GlobalAccelerator::EndpointGroup";
  readonly GlobalAcceleratorListener: "AWS::GlobalAccelerator::Listener";
  readonly GlueClassifier: "AWS::Glue::Classifier";
  readonly GlueJob: "AWS::Glue::Job";
  readonly GlueMLTransform: "AWS::Glue::MLTransform";
  readonly GroundStationConfig: "AWS::GroundStation::Config";
  readonly Group: "AWS::IAM::Group";
  readonly GuardDutyDetector: "AWS::GuardDuty::Detector";
  readonly GuardDutyFilter: "AWS::GuardDuty::Filter";
  readonly GuardDutyIPSet: "AWS::GuardDuty::IPSet";
  readonly GuardDutyThreatIntelSet: "AWS::GuardDuty::ThreatIntelSet";
  readonly HealthLakeFHIRDatastore: "AWS::HealthLake::FHIRDatastore";
  readonly Host: "AWS::EC2::Host";
  readonly IPSetV2: "AWS::WAFv2::IPSet";
  readonly IVSChannel: "AWS::IVS::Channel";
  readonly IVSPlaybackKeyPair: "AWS::IVS::PlaybackKeyPair";
  readonly IVSRecordingConfiguration: "AWS::IVS::RecordingConfiguration";
  readonly ImageBuilderContainerRecipe: "AWS::ImageBuilder::ContainerRecipe";
  readonly ImageBuilderDistributionConfiguration: "AWS::ImageBuilder::DistributionConfiguration";
  readonly ImageBuilderImagePipeline: "AWS::ImageBuilder::ImagePipeline";
  readonly ImageBuilderInfrastructureConfiguration: "AWS::ImageBuilder::InfrastructureConfiguration";
  readonly Instance: "AWS::EC2::Instance";
  readonly InternetGateway: "AWS::EC2::InternetGateway";
  readonly IoTAccountAuditConfiguration: "AWS::IoT::AccountAuditConfiguration";
  readonly IoTAnalyticsChannel: "AWS::IoTAnalytics::Channel";
  readonly IoTAnalyticsDataset: "AWS::IoTAnalytics::Dataset";
  readonly IoTAnalyticsDatastore: "AWS::IoTAnalytics::Datastore";
  readonly IoTAnalyticsPipeline: "AWS::IoTAnalytics::Pipeline";
  readonly IoTAuthorizer: "AWS::IoT::Authorizer";
  readonly IoTCustomMetric: "AWS::IoT::CustomMetric";
  readonly IoTDimension: "AWS::IoT::Dimension";
  readonly IoTEventsAlarmModel: "AWS::IoTEvents::AlarmModel";
  readonly IoTEventsDetectorModel: "AWS::IoTEvents::DetectorModel";
  readonly IoTEventsInput: "AWS::IoTEvents::Input";
  readonly IoTFleetMetric: "AWS::IoT::FleetMetric";
  readonly IoTMitigationAction: "AWS::IoT::MitigationAction";
  readonly IoTPolicy: "AWS::IoT::Policy";
  readonly IoTRoleAlias: "AWS::IoT::RoleAlias";
  readonly IoTScheduledAudit: "AWS::IoT::ScheduledAudit";
  readonly IoTSecurityProfile: "AWS::IoT::SecurityProfile";
  readonly IoTSiteWiseAssetModel: "AWS::IoTSiteWise::AssetModel";
  readonly IoTSiteWiseDashboard: "AWS::IoTSiteWise::Dashboard";
  readonly IoTSiteWiseGateway: "AWS::IoTSiteWise::Gateway";
  readonly IoTSiteWisePortal: "AWS::IoTSiteWise::Portal";
  readonly IoTSiteWiseProject: "AWS::IoTSiteWise::Project";
  readonly IoTTwinMakerEntity: "AWS::IoTTwinMaker::Entity";
  readonly IoTTwinMakerScene: "AWS::IoTTwinMaker::Scene";
  readonly IoTTwinMakerWorkspace: "AWS::IoTTwinMaker::Workspace";
  readonly IoTWirelessServiceProfile: "AWS::IoTWireless::ServiceProfile";
  readonly Key: "AWS::KMS::Key";
  readonly KinesisAnalyticsV2Application: "AWS::KinesisAnalyticsV2::Application";
  readonly KinesisStream: "AWS::Kinesis::Stream";
  readonly KinesisStreamConsumer: "AWS::Kinesis::StreamConsumer";
  readonly KinesisVideoSignalingChannel: "AWS::KinesisVideo::SignalingChannel";
  readonly LaunchConfiguration: "AWS::AutoScaling::LaunchConfiguration";
  readonly LaunchTemplate: "AWS::EC2::LaunchTemplate";
  readonly LexBot: "AWS::Lex::Bot";
  readonly LexBotAlias: "AWS::Lex::BotAlias";
  readonly LightsailBucket: "AWS::Lightsail::Bucket";
  readonly LightsailCertificate: "AWS::Lightsail::Certificate";
  readonly LightsailDisk: "AWS::Lightsail::Disk";
  readonly LightsailStaticIp: "AWS::Lightsail::StaticIp";
  readonly ListenerV2: "AWS::ElasticLoadBalancingV2::Listener";
  readonly LoadBalancer: "AWS::ElasticLoadBalancing::LoadBalancer";
  readonly LoadBalancerV2: "AWS::ElasticLoadBalancingV2::LoadBalancer";
  readonly LookoutMetricsAlert: "AWS::LookoutMetrics::Alert";
  readonly LookoutVisionProject: "AWS::LookoutVision::Project";
  readonly MSKCluster: "AWS::MSK::Cluster";
  readonly ManagedInstanceInventory: "AWS::SSM::ManagedInstanceInventory";
  readonly ManagedRuleSetV2: "AWS::WAFv2::ManagedRuleSet";
  readonly MediaPackagePackagingConfiguration: "AWS::MediaPackage::PackagingConfiguration";
  readonly MediaPackagePackagingGroup: "AWS::MediaPackage::PackagingGroup";
  readonly NatGateway: "AWS::EC2::NatGateway";
  readonly NetworkAcl: "AWS::EC2::NetworkAcl";
  readonly NetworkFirewallFirewall: "AWS::NetworkFirewall::Firewall";
  readonly NetworkFirewallFirewallPolicy: "AWS::NetworkFirewall::FirewallPolicy";
  readonly NetworkFirewallRuleGroup: "AWS::NetworkFirewall::RuleGroup";
  readonly NetworkInsightsAccessScopeAnalysis: "AWS::EC2::NetworkInsightsAccessScopeAnalysis";
  readonly NetworkInterface: "AWS::EC2::NetworkInterface";
  readonly NetworkManagerDevice: "AWS::NetworkManager::Device";
  readonly NetworkManagerGlobalNetwork: "AWS::NetworkManager::GlobalNetwork";
  readonly NetworkManagerLink: "AWS::NetworkManager::Link";
  readonly NetworkManagerSite: "AWS::NetworkManager::Site";
  readonly NetworkManagerTransitGatewayRegistration: "AWS::NetworkManager::TransitGatewayRegistration";
  readonly OpenSearchDomain: "AWS::OpenSearch::Domain";
  readonly PanoramaPackage: "AWS::Panorama::Package";
  readonly PatchCompliance: "AWS::SSM::PatchCompliance";
  readonly PinpointApp: "AWS::Pinpoint::App";
  readonly PinpointApplicationSettings: "AWS::Pinpoint::ApplicationSettings";
  readonly PinpointSegment: "AWS::Pinpoint::Segment";
  readonly Pipeline: "AWS::CodePipeline::Pipeline";
  readonly Policy: "AWS::IAM::Policy";
  readonly Portfolio: "AWS::ServiceCatalog::Portfolio";
  readonly Project: "AWS::CodeBuild::Project";
  readonly Protection: "AWS::Shield::Protection";
  readonly QLDBLedger: "AWS::QLDB::Ledger";
  readonly Queue: "AWS::SQS::Queue";
  readonly RDSGlobalCluster: "AWS::RDS::GlobalCluster";
  readonly RUMAppMonitor: "AWS::RUM::AppMonitor";
  readonly RateBasedRule: "AWS::WAF::RateBasedRule";
  readonly RedshiftEventSubscription: "AWS::Redshift::EventSubscription";
  readonly RedshiftScheduledAction: "AWS::Redshift::ScheduledAction";
  readonly RegexPatternSetV2: "AWS::WAFv2::RegexPatternSet";
  readonly RegionalProtection: "AWS::ShieldRegional::Protection";
  readonly RegionalRateBasedRule: "AWS::WAFRegional::RateBasedRule";
  readonly RegionalRule: "AWS::WAFRegional::Rule";
  readonly RegionalRuleGroup: "AWS::WAFRegional::RuleGroup";
  readonly RegionalWebACL: "AWS::WAFRegional::WebACL";
  readonly RegisteredHAInstance: "AWS::EC2::RegisteredHAInstance";
  readonly ResilienceHubResiliencyPolicy: "AWS::ResilienceHub::ResiliencyPolicy";
  readonly ResourceCompliance: "AWS::Config::ResourceCompliance";
  readonly RestApi: "AWS::ApiGateway::RestApi";
  readonly RoboMakerRobotApplication: "AWS::RoboMaker::RobotApplication";
  readonly RoboMakerRobotApplicationVersion: "AWS::RoboMaker::RobotApplicationVersion";
  readonly RoboMakerSimulationApplication: "AWS::RoboMaker::SimulationApplication";
  readonly Role: "AWS::IAM::Role";
  readonly Route53HostedZone: "AWS::Route53::HostedZone";
  readonly Route53RecoveryControlCluster: "AWS::Route53RecoveryControl::Cluster";
  readonly Route53RecoveryControlControlPanel: "AWS::Route53RecoveryControl::ControlPanel";
  readonly Route53RecoveryControlRoutingControl: "AWS::Route53RecoveryControl::RoutingControl";
  readonly Route53RecoveryControlSafetyRule: "AWS::Route53RecoveryControl::SafetyRule";
  readonly Route53RecoveryReadinessCell: "AWS::Route53RecoveryReadiness::Cell";
  readonly Route53RecoveryReadinessReadinessCheck: "AWS::Route53RecoveryReadiness::ReadinessCheck";
  readonly Route53RecoveryReadinessRecoveryGroup: "AWS::Route53RecoveryReadiness::RecoveryGroup";
  readonly Route53RecoveryReadinessResourceSet: "AWS::Route53RecoveryReadiness::ResourceSet";
  readonly Route53ResolverFirewallDomainList: "AWS::Route53Resolver::FirewallDomainList";
  readonly Route53ResolverFirewallRuleGroupAssociation: "AWS::Route53Resolver::FirewallRuleGroupAssociation";
  readonly Route53ResolverResolverEndpoint: "AWS::Route53Resolver::ResolverEndpoint";
  readonly Route53ResolverResolverRule: "AWS::Route53Resolver::ResolverRule";
  readonly Route53ResolverResolverRuleAssociation: "AWS::Route53Resolver::ResolverRuleAssociation";
  readonly RouteTable: "AWS::EC2::RouteTable";
  readonly Rule: "AWS::WAF::Rule";
  readonly RuleGroup: "AWS::WAF::RuleGroup";
  readonly RuleGroupV2: "AWS::WAFv2::RuleGroup";
  readonly S3MultiRegionAccessPoint: "AWS::S3::MultiRegionAccessPoint";
  readonly S3StorageLens: "AWS::S3::StorageLens";
  readonly SESConfigurationSet: "AWS::SES::ConfigurationSet";
  readonly SESContactList: "AWS::SES::ContactList";
  readonly SESReceiptFilter: "AWS::SES::ReceiptFilter";
  readonly SESReceiptRuleSet: "AWS::SES::ReceiptRuleSet";
  readonly SESTemplate: "AWS::SES::Template";
  readonly SageMakerAppImageConfig: "AWS::SageMaker::AppImageConfig";
  readonly SageMakerCodeRepository: "AWS::SageMaker::CodeRepository";
  readonly SageMakerImage: "AWS::SageMaker::Image";
  readonly SageMakerModel: "AWS::SageMaker::Model";
  readonly SageMakerNotebookInstanceLifecycleConfig: "AWS::SageMaker::NotebookInstanceLifecycleConfig";
  readonly SageMakerWorkteam: "AWS::SageMaker::Workteam";
  readonly ScalingPolicy: "AWS::AutoScaling::ScalingPolicy";
  readonly ScheduledAction: "AWS::AutoScaling::ScheduledAction";
  readonly Secret: "AWS::SecretsManager::Secret";
  readonly SecurityGroup: "AWS::EC2::SecurityGroup";
  readonly ServiceDiscoveryHttpNamespace: "AWS::ServiceDiscovery::HttpNamespace";
  readonly ServiceDiscoveryPublicDnsNamespace: "AWS::ServiceDiscovery::PublicDnsNamespace";
  readonly ServiceDiscoveryService: "AWS::ServiceDiscovery::Service";
  readonly Stack: "AWS::CloudFormation::Stack";
  readonly Stage: "AWS::ApiGateway::Stage";
  readonly StageV2: "AWS::ApiGatewayV2::Stage";
  readonly StepFunctionsActivity: "AWS::StepFunctions::Activity";
  readonly StepFunctionsStateMachine: "AWS::StepFunctions::StateMachine";
  readonly StreamingDistribution: "AWS::CloudFront::StreamingDistribution";
  readonly Subnet: "AWS::EC2::Subnet";
  readonly Table: "AWS::DynamoDB::Table";
  readonly Topic: "AWS::SNS::Topic";
  readonly Trail: "AWS::CloudTrail::Trail";
  readonly TransferWorkflow: "AWS::Transfer::Workflow";
  readonly TransitGateway: "AWS::EC2::TransitGateway";
  readonly TransitGatewayAttachment: "AWS::EC2::TransitGatewayAttachment";
  readonly TransitGatewayRouteTable: "AWS::EC2::TransitGatewayRouteTable";
  readonly User: "AWS::IAM::User";
  readonly VPC: "AWS::EC2::VPC";
  readonly VPCEndpoint: "AWS::EC2::VPCEndpoint";
  readonly VPCEndpointService: "AWS::EC2::VPCEndpointService";
  readonly VPCPeeringConnection: "AWS::EC2::VPCPeeringConnection";
  readonly VPNConnection: "AWS::EC2::VPNConnection";
  readonly VPNGateway: "AWS::EC2::VPNGateway";
  readonly Volume: "AWS::EC2::Volume";
  readonly WebACL: "AWS::WAF::WebACL";
  readonly WebACLV2: "AWS::WAFv2::WebACL";
  readonly WorkSpacesConnectionAlias: "AWS::WorkSpaces::ConnectionAlias";
  readonly WorkSpacesWorkspace: "AWS::WorkSpaces::Workspace";
};
export type ResourceType = (typeof ResourceType)[keyof typeof ResourceType];
export interface AggregateResourceIdentifier {
  SourceAccountId: string | undefined;
  SourceRegion: string | undefined;
  ResourceId: string | undefined;
  ResourceType: ResourceType | string | undefined;
  ResourceName?: string;
}
export interface AggregationAuthorization {
  AggregationAuthorizationArn?: string;
  AuthorizedAccountId?: string;
  AuthorizedAwsRegion?: string;
  CreationTime?: Date;
}
export declare const ConfigurationItemStatus: {
  readonly OK: "OK";
  readonly ResourceDeleted: "ResourceDeleted";
  readonly ResourceDeletedNotRecorded: "ResourceDeletedNotRecorded";
  readonly ResourceDiscovered: "ResourceDiscovered";
  readonly ResourceNotRecorded: "ResourceNotRecorded";
};
export type ConfigurationItemStatus =
  (typeof ConfigurationItemStatus)[keyof typeof ConfigurationItemStatus];
export interface BaseConfigurationItem {
  version?: string;
  accountId?: string;
  configurationItemCaptureTime?: Date;
  configurationItemStatus?: ConfigurationItemStatus | string;
  configurationStateId?: string;
  arn?: string;
  resourceType?: ResourceType | string;
  resourceId?: string;
  resourceName?: string;
  awsRegion?: string;
  availabilityZone?: string;
  resourceCreationTime?: Date;
  configuration?: string;
  supplementaryConfiguration?: Record<string, string>;
}
export interface BatchGetAggregateResourceConfigRequest {
  ConfigurationAggregatorName: string | undefined;
  ResourceIdentifiers: AggregateResourceIdentifier[] | undefined;
}
export interface BatchGetAggregateResourceConfigResponse {
  BaseConfigurationItems?: BaseConfigurationItem[];
  UnprocessedResourceIdentifiers?: AggregateResourceIdentifier[];
}
export declare class NoSuchConfigurationAggregatorException extends __BaseException {
  readonly name: "NoSuchConfigurationAggregatorException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      NoSuchConfigurationAggregatorException,
      __BaseException
    >
  );
}
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export interface ResourceKey {
  resourceType: ResourceType | string | undefined;
  resourceId: string | undefined;
}
export interface BatchGetResourceConfigRequest {
  resourceKeys: ResourceKey[] | undefined;
}
export interface BatchGetResourceConfigResponse {
  baseConfigurationItems?: BaseConfigurationItem[];
  unprocessedResourceKeys?: ResourceKey[];
}
export declare class NoAvailableConfigurationRecorderException extends __BaseException {
  readonly name: "NoAvailableConfigurationRecorderException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      NoAvailableConfigurationRecorderException,
      __BaseException
    >
  );
}
export declare const ChronologicalOrder: {
  readonly Forward: "Forward";
  readonly Reverse: "Reverse";
};
export type ChronologicalOrder =
  (typeof ChronologicalOrder)[keyof typeof ChronologicalOrder];
export interface ComplianceByConfigRule {
  ConfigRuleName?: string;
  Compliance?: Compliance;
}
export interface ComplianceByResource {
  ResourceType?: string;
  ResourceId?: string;
  Compliance?: Compliance;
}
export interface ComplianceSummaryByResourceType {
  ResourceType?: string;
  ComplianceSummary?: ComplianceSummary;
}
export declare const DeliveryStatus: {
  readonly Failure: "Failure";
  readonly Not_Applicable: "Not_Applicable";
  readonly Success: "Success";
};
export type DeliveryStatus =
  (typeof DeliveryStatus)[keyof typeof DeliveryStatus];
export interface ConfigExportDeliveryInfo {
  lastStatus?: DeliveryStatus | string;
  lastErrorCode?: string;
  lastErrorMessage?: string;
  lastAttemptTime?: Date;
  lastSuccessfulTime?: Date;
  nextDeliveryTime?: Date;
}
export declare const ConfigRuleState: {
  readonly ACTIVE: "ACTIVE";
  readonly DELETING: "DELETING";
  readonly DELETING_RESULTS: "DELETING_RESULTS";
  readonly EVALUATING: "EVALUATING";
};
export type ConfigRuleState =
  (typeof ConfigRuleState)[keyof typeof ConfigRuleState];
export interface EvaluationModeConfiguration {
  Mode?: EvaluationMode | string;
}
export declare const MaximumExecutionFrequency: {
  readonly One_Hour: "One_Hour";
  readonly Six_Hours: "Six_Hours";
  readonly Three_Hours: "Three_Hours";
  readonly Twelve_Hours: "Twelve_Hours";
  readonly TwentyFour_Hours: "TwentyFour_Hours";
};
export type MaximumExecutionFrequency =
  (typeof MaximumExecutionFrequency)[keyof typeof MaximumExecutionFrequency];
export interface Scope {
  ComplianceResourceTypes?: string[];
  TagKey?: string;
  TagValue?: string;
  ComplianceResourceId?: string;
}
export interface CustomPolicyDetails {
  PolicyRuntime: string | undefined;
  PolicyText: string | undefined;
  EnableDebugLogDelivery?: boolean;
}
export declare const Owner: {
  readonly Aws: "AWS";
  readonly Custom_Lambda: "CUSTOM_LAMBDA";
  readonly Custom_Policy: "CUSTOM_POLICY";
};
export type Owner = (typeof Owner)[keyof typeof Owner];
export declare const EventSource: {
  readonly Aws_Config: "aws.config";
};
export type EventSource = (typeof EventSource)[keyof typeof EventSource];
export declare const MessageType: {
  readonly ConfigurationItemChangeNotification: "ConfigurationItemChangeNotification";
  readonly ConfigurationSnapshotDeliveryCompleted: "ConfigurationSnapshotDeliveryCompleted";
  readonly OversizedConfigurationItemChangeNotification: "OversizedConfigurationItemChangeNotification";
  readonly ScheduledNotification: "ScheduledNotification";
};
export type MessageType = (typeof MessageType)[keyof typeof MessageType];
export interface SourceDetail {
  EventSource?: EventSource | string;
  MessageType?: MessageType | string;
  MaximumExecutionFrequency?: MaximumExecutionFrequency | string;
}
export interface Source {
  Owner: Owner | string | undefined;
  SourceIdentifier?: string;
  SourceDetails?: SourceDetail[];
  CustomPolicyDetails?: CustomPolicyDetails;
}
export interface ConfigRule {
  ConfigRuleName?: string;
  ConfigRuleArn?: string;
  ConfigRuleId?: string;
  Description?: string;
  Scope?: Scope;
  Source: Source | undefined;
  InputParameters?: string;
  MaximumExecutionFrequency?: MaximumExecutionFrequency | string;
  ConfigRuleState?: ConfigRuleState | string;
  CreatedBy?: string;
  EvaluationModes?: EvaluationModeConfiguration[];
}
export interface ConfigRuleComplianceFilters {
  ConfigRuleName?: string;
  ComplianceType?: ComplianceType | string;
  AccountId?: string;
  AwsRegion?: string;
}
export interface ConfigRuleComplianceSummaryFilters {
  AccountId?: string;
  AwsRegion?: string;
}
export declare const ConfigRuleComplianceSummaryGroupKey: {
  readonly ACCOUNT_ID: "ACCOUNT_ID";
  readonly AWS_REGION: "AWS_REGION";
};
export type ConfigRuleComplianceSummaryGroupKey =
  (typeof ConfigRuleComplianceSummaryGroupKey)[keyof typeof ConfigRuleComplianceSummaryGroupKey];
export interface ConfigRuleEvaluationStatus {
  ConfigRuleName?: string;
  ConfigRuleArn?: string;
  ConfigRuleId?: string;
  LastSuccessfulInvocationTime?: Date;
  LastFailedInvocationTime?: Date;
  LastSuccessfulEvaluationTime?: Date;
  LastFailedEvaluationTime?: Date;
  FirstActivatedTime?: Date;
  LastDeactivatedTime?: Date;
  LastErrorCode?: string;
  LastErrorMessage?: string;
  FirstEvaluationStarted?: boolean;
  LastDebugLogDeliveryStatus?: string;
  LastDebugLogDeliveryStatusReason?: string;
  LastDebugLogDeliveryTime?: Date;
}
export interface ConfigSnapshotDeliveryProperties {
  deliveryFrequency?: MaximumExecutionFrequency | string;
}
export interface ConfigStreamDeliveryInfo {
  lastStatus?: DeliveryStatus | string;
  lastErrorCode?: string;
  lastErrorMessage?: string;
  lastStatusChangeTime?: Date;
}
export interface OrganizationAggregationSource {
  RoleArn: string | undefined;
  AwsRegions?: string[];
  AllAwsRegions?: boolean;
}
export interface ConfigurationAggregator {
  ConfigurationAggregatorName?: string;
  ConfigurationAggregatorArn?: string;
  AccountAggregationSources?: AccountAggregationSource[];
  OrganizationAggregationSource?: OrganizationAggregationSource;
  CreationTime?: Date;
  LastUpdatedTime?: Date;
  CreatedBy?: string;
}
export interface Relationship {
  resourceType?: ResourceType | string;
  resourceId?: string;
  resourceName?: string;
  relationshipName?: string;
}
export interface ConfigurationItem {
  version?: string;
  accountId?: string;
  configurationItemCaptureTime?: Date;
  configurationItemStatus?: ConfigurationItemStatus | string;
  configurationStateId?: string;
  configurationItemMD5Hash?: string;
  arn?: string;
  resourceType?: ResourceType | string;
  resourceId?: string;
  resourceName?: string;
  awsRegion?: string;
  availabilityZone?: string;
  resourceCreationTime?: Date;
  tags?: Record<string, string>;
  relatedEvents?: string[];
  relationships?: Relationship[];
  configuration?: string;
  supplementaryConfiguration?: Record<string, string>;
}
export interface ExclusionByResourceTypes {
  resourceTypes?: (ResourceType | string)[];
}
export declare const RecordingStrategyType: {
  readonly ALL_SUPPORTED_RESOURCE_TYPES: "ALL_SUPPORTED_RESOURCE_TYPES";
  readonly EXCLUSION_BY_RESOURCE_TYPES: "EXCLUSION_BY_RESOURCE_TYPES";
  readonly INCLUSION_BY_RESOURCE_TYPES: "INCLUSION_BY_RESOURCE_TYPES";
};
export type RecordingStrategyType =
  (typeof RecordingStrategyType)[keyof typeof RecordingStrategyType];
export interface RecordingStrategy {
  useOnly?: RecordingStrategyType | string;
}
export interface RecordingGroup {
  allSupported?: boolean;
  includeGlobalResourceTypes?: boolean;
  resourceTypes?: (ResourceType | string)[];
  exclusionByResourceTypes?: ExclusionByResourceTypes;
  recordingStrategy?: RecordingStrategy;
}
export interface ConfigurationRecorder {
  name?: string;
  roleARN?: string;
  recordingGroup?: RecordingGroup;
}
export declare const RecorderStatus: {
  readonly Failure: "Failure";
  readonly Pending: "Pending";
  readonly Success: "Success";
};
export type RecorderStatus =
  (typeof RecorderStatus)[keyof typeof RecorderStatus];
export interface ConfigurationRecorderStatus {
  name?: string;
  lastStartTime?: Date;
  lastStopTime?: Date;
  recording?: boolean;
  lastStatus?: RecorderStatus | string;
  lastErrorCode?: string;
  lastErrorMessage?: string;
  lastStatusChangeTime?: Date;
}
export interface ConformancePackComplianceFilters {
  ConfigRuleNames?: string[];
  ComplianceType?: ConformancePackComplianceType | string;
}
export interface ConformancePackComplianceScore {
  Score?: string;
  ConformancePackName?: string;
  LastUpdatedTime?: Date;
}
export interface ConformancePackComplianceScoresFilters {
  ConformancePackNames: string[] | undefined;
}
export interface ConformancePackComplianceSummary {
  ConformancePackName: string | undefined;
  ConformancePackComplianceStatus:
    | ConformancePackComplianceType
    | string
    | undefined;
}
export interface ConformancePackInputParameter {
  ParameterName: string | undefined;
  ParameterValue: string | undefined;
}
export interface TemplateSSMDocumentDetails {
  DocumentName: string | undefined;
  DocumentVersion?: string;
}
export interface ConformancePackDetail {
  ConformancePackName: string | undefined;
  ConformancePackArn: string | undefined;
  ConformancePackId: string | undefined;
  DeliveryS3Bucket?: string;
  DeliveryS3KeyPrefix?: string;
  ConformancePackInputParameters?: ConformancePackInputParameter[];
  LastUpdateRequestedTime?: Date;
  CreatedBy?: string;
  TemplateSSMDocumentDetails?: TemplateSSMDocumentDetails;
}
export interface ConformancePackEvaluationFilters {
  ConfigRuleNames?: string[];
  ComplianceType?: ConformancePackComplianceType | string;
  ResourceType?: string;
  ResourceIds?: string[];
}
export interface ConformancePackEvaluationResult {
  ComplianceType: ConformancePackComplianceType | string | undefined;
  EvaluationResultIdentifier: EvaluationResultIdentifier | undefined;
  ConfigRuleInvokedTime: Date | undefined;
  ResultRecordedTime: Date | undefined;
  Annotation?: string;
}
export interface ConformancePackRuleCompliance {
  ConfigRuleName?: string;
  ComplianceType?: ConformancePackComplianceType | string;
  Controls?: string[];
}
export declare const ConformancePackState: {
  readonly CREATE_COMPLETE: "CREATE_COMPLETE";
  readonly CREATE_FAILED: "CREATE_FAILED";
  readonly CREATE_IN_PROGRESS: "CREATE_IN_PROGRESS";
  readonly DELETE_FAILED: "DELETE_FAILED";
  readonly DELETE_IN_PROGRESS: "DELETE_IN_PROGRESS";
};
export type ConformancePackState =
  (typeof ConformancePackState)[keyof typeof ConformancePackState];
export interface ConformancePackStatusDetail {
  ConformancePackName: string | undefined;
  ConformancePackId: string | undefined;
  ConformancePackArn: string | undefined;
  ConformancePackState: ConformancePackState | string | undefined;
  StackArn: string | undefined;
  ConformancePackStatusReason?: string;
  LastUpdateRequestedTime: Date | undefined;
  LastUpdateCompletedTime?: Date;
}
export declare class ConformancePackTemplateValidationException extends __BaseException {
  readonly name: "ConformancePackTemplateValidationException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      ConformancePackTemplateValidationException,
      __BaseException
    >
  );
}
export interface DeleteAggregationAuthorizationRequest {
  AuthorizedAccountId: string | undefined;
  AuthorizedAwsRegion: string | undefined;
}
export declare class InvalidParameterValueException extends __BaseException {
  readonly name: "InvalidParameterValueException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidParameterValueException, __BaseException>
  );
}
export interface DeleteConfigRuleRequest {
  ConfigRuleName: string | undefined;
}
export declare class NoSuchConfigRuleException extends __BaseException {
  readonly name: "NoSuchConfigRuleException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<NoSuchConfigRuleException, __BaseException>
  );
}
export declare class ResourceInUseException extends __BaseException {
  readonly name: "ResourceInUseException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceInUseException, __BaseException>
  );
}
export interface DeleteConfigurationAggregatorRequest {
  ConfigurationAggregatorName: string | undefined;
}
export interface DeleteConfigurationRecorderRequest {
  ConfigurationRecorderName: string | undefined;
}
export declare class NoSuchConfigurationRecorderException extends __BaseException {
  readonly name: "NoSuchConfigurationRecorderException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      NoSuchConfigurationRecorderException,
      __BaseException
    >
  );
}
export interface DeleteConformancePackRequest {
  ConformancePackName: string | undefined;
}
export declare class NoSuchConformancePackException extends __BaseException {
  readonly name: "NoSuchConformancePackException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<NoSuchConformancePackException, __BaseException>
  );
}
export interface DeleteDeliveryChannelRequest {
  DeliveryChannelName: string | undefined;
}
export declare class LastDeliveryChannelDeleteFailedException extends __BaseException {
  readonly name: "LastDeliveryChannelDeleteFailedException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      LastDeliveryChannelDeleteFailedException,
      __BaseException
    >
  );
}
export declare class NoSuchDeliveryChannelException extends __BaseException {
  readonly name: "NoSuchDeliveryChannelException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<NoSuchDeliveryChannelException, __BaseException>
  );
}
export interface DeleteEvaluationResultsRequest {
  ConfigRuleName: string | undefined;
}
export interface DeleteEvaluationResultsResponse {}
export interface DeleteOrganizationConfigRuleRequest {
  OrganizationConfigRuleName: string | undefined;
}
export declare class NoSuchOrganizationConfigRuleException extends __BaseException {
  readonly name: "NoSuchOrganizationConfigRuleException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      NoSuchOrganizationConfigRuleException,
      __BaseException
    >
  );
}
export declare class OrganizationAccessDeniedException extends __BaseException {
  readonly name: "OrganizationAccessDeniedException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      OrganizationAccessDeniedException,
      __BaseException
    >
  );
}
export interface DeleteOrganizationConformancePackRequest {
  OrganizationConformancePackName: string | undefined;
}
export declare class NoSuchOrganizationConformancePackException extends __BaseException {
  readonly name: "NoSuchOrganizationConformancePackException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      NoSuchOrganizationConformancePackException,
      __BaseException
    >
  );
}
export interface DeletePendingAggregationRequestRequest {
  RequesterAccountId: string | undefined;
  RequesterAwsRegion: string | undefined;
}
export interface DeleteRemediationConfigurationRequest {
  ConfigRuleName: string | undefined;
  ResourceType?: string;
}
export interface DeleteRemediationConfigurationResponse {}
export declare class InsufficientPermissionsException extends __BaseException {
  readonly name: "InsufficientPermissionsException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      InsufficientPermissionsException,
      __BaseException
    >
  );
}
export declare class NoSuchRemediationConfigurationException extends __BaseException {
  readonly name: "NoSuchRemediationConfigurationException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      NoSuchRemediationConfigurationException,
      __BaseException
    >
  );
}
export declare class RemediationInProgressException extends __BaseException {
  readonly name: "RemediationInProgressException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<RemediationInProgressException, __BaseException>
  );
}
export interface RemediationExceptionResourceKey {
  ResourceType?: string;
  ResourceId?: string;
}
export interface DeleteRemediationExceptionsRequest {
  ConfigRuleName: string | undefined;
  ResourceKeys: RemediationExceptionResourceKey[] | undefined;
}
export interface FailedDeleteRemediationExceptionsBatch {
  FailureMessage?: string;
  FailedItems?: RemediationExceptionResourceKey[];
}
export interface DeleteRemediationExceptionsResponse {
  FailedBatches?: FailedDeleteRemediationExceptionsBatch[];
}
export declare class NoSuchRemediationExceptionException extends __BaseException {
  readonly name: "NoSuchRemediationExceptionException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      NoSuchRemediationExceptionException,
      __BaseException
    >
  );
}
export interface DeleteResourceConfigRequest {
  ResourceType: string | undefined;
  ResourceId: string | undefined;
}
export declare class NoRunningConfigurationRecorderException extends __BaseException {
  readonly name: "NoRunningConfigurationRecorderException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      NoRunningConfigurationRecorderException,
      __BaseException
    >
  );
}
export interface DeleteRetentionConfigurationRequest {
  RetentionConfigurationName: string | undefined;
}
export declare class NoSuchRetentionConfigurationException extends __BaseException {
  readonly name: "NoSuchRetentionConfigurationException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      NoSuchRetentionConfigurationException,
      __BaseException
    >
  );
}
export interface DeleteStoredQueryRequest {
  QueryName: string | undefined;
}
export interface DeleteStoredQueryResponse {}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export interface DeliverConfigSnapshotRequest {
  deliveryChannelName: string | undefined;
}
export interface DeliverConfigSnapshotResponse {
  configSnapshotId?: string;
}
export interface DeliveryChannel {
  name?: string;
  s3BucketName?: string;
  s3KeyPrefix?: string;
  s3KmsKeyArn?: string;
  snsTopicARN?: string;
  configSnapshotDeliveryProperties?: ConfigSnapshotDeliveryProperties;
}
export interface DeliveryChannelStatus {
  name?: string;
  configSnapshotDeliveryInfo?: ConfigExportDeliveryInfo;
  configHistoryDeliveryInfo?: ConfigExportDeliveryInfo;
  configStreamDeliveryInfo?: ConfigStreamDeliveryInfo;
}
export interface DescribeAggregateComplianceByConfigRulesRequest {
  ConfigurationAggregatorName: string | undefined;
  Filters?: ConfigRuleComplianceFilters;
  Limit?: number;
  NextToken?: string;
}
export interface DescribeAggregateComplianceByConfigRulesResponse {
  AggregateComplianceByConfigRules?: AggregateComplianceByConfigRule[];
  NextToken?: string;
}
export declare class InvalidLimitException extends __BaseException {
  readonly name: "InvalidLimitException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidLimitException, __BaseException>
  );
}
export declare class InvalidNextTokenException extends __BaseException {
  readonly name: "InvalidNextTokenException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidNextTokenException, __BaseException>
  );
}
export interface DescribeAggregateComplianceByConformancePacksRequest {
  ConfigurationAggregatorName: string | undefined;
  Filters?: AggregateConformancePackComplianceFilters;
  Limit?: number;
  NextToken?: string;
}
export interface DescribeAggregateComplianceByConformancePacksResponse {
  AggregateComplianceByConformancePacks?: AggregateComplianceByConformancePack[];
  NextToken?: string;
}
export interface DescribeAggregationAuthorizationsRequest {
  Limit?: number;
  NextToken?: string;
}
export interface DescribeAggregationAuthorizationsResponse {
  AggregationAuthorizations?: AggregationAuthorization[];
  NextToken?: string;
}
export interface DescribeComplianceByConfigRuleRequest {
  ConfigRuleNames?: string[];
  ComplianceTypes?: (ComplianceType | string)[];
  NextToken?: string;
}
export interface DescribeComplianceByConfigRuleResponse {
  ComplianceByConfigRules?: ComplianceByConfigRule[];
  NextToken?: string;
}
export interface DescribeComplianceByResourceRequest {
  ResourceType?: string;
  ResourceId?: string;
  ComplianceTypes?: (ComplianceType | string)[];
  Limit?: number;
  NextToken?: string;
}
export interface DescribeComplianceByResourceResponse {
  ComplianceByResources?: ComplianceByResource[];
  NextToken?: string;
}
export interface DescribeConfigRuleEvaluationStatusRequest {
  ConfigRuleNames?: string[];
  NextToken?: string;
  Limit?: number;
}
export interface DescribeConfigRuleEvaluationStatusResponse {
  ConfigRulesEvaluationStatus?: ConfigRuleEvaluationStatus[];
  NextToken?: string;
}
export interface DescribeConfigRulesFilters {
  EvaluationMode?: EvaluationMode | string;
}
export interface DescribeConfigRulesRequest {
  ConfigRuleNames?: string[];
  NextToken?: string;
  Filters?: DescribeConfigRulesFilters;
}
export interface DescribeConfigRulesResponse {
  ConfigRules?: ConfigRule[];
  NextToken?: string;
}
export interface DescribeConfigurationAggregatorsRequest {
  ConfigurationAggregatorNames?: string[];
  NextToken?: string;
  Limit?: number;
}
export interface DescribeConfigurationAggregatorsResponse {
  ConfigurationAggregators?: ConfigurationAggregator[];
  NextToken?: string;
}
export interface DescribeConfigurationAggregatorSourcesStatusRequest {
  ConfigurationAggregatorName: string | undefined;
  UpdateStatus?: (AggregatedSourceStatusType | string)[];
  NextToken?: string;
  Limit?: number;
}
export interface DescribeConfigurationAggregatorSourcesStatusResponse {
  AggregatedSourceStatusList?: AggregatedSourceStatus[];
  NextToken?: string;
}
export interface DescribeConfigurationRecordersRequest {
  ConfigurationRecorderNames?: string[];
}
export interface DescribeConfigurationRecordersResponse {
  ConfigurationRecorders?: ConfigurationRecorder[];
}
export interface DescribeConfigurationRecorderStatusRequest {
  ConfigurationRecorderNames?: string[];
}
export interface DescribeConfigurationRecorderStatusResponse {
  ConfigurationRecordersStatus?: ConfigurationRecorderStatus[];
}
export interface DescribeConformancePackComplianceRequest {
  ConformancePackName: string | undefined;
  Filters?: ConformancePackComplianceFilters;
  Limit?: number;
  NextToken?: string;
}
export interface DescribeConformancePackComplianceResponse {
  ConformancePackName: string | undefined;
  ConformancePackRuleComplianceList:
    | ConformancePackRuleCompliance[]
    | undefined;
  NextToken?: string;
}
export declare class NoSuchConfigRuleInConformancePackException extends __BaseException {
  readonly name: "NoSuchConfigRuleInConformancePackException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      NoSuchConfigRuleInConformancePackException,
      __BaseException
    >
  );
}
export interface DescribeConformancePacksRequest {
  ConformancePackNames?: string[];
  Limit?: number;
  NextToken?: string;
}
export interface DescribeConformancePacksResponse {
  ConformancePackDetails?: ConformancePackDetail[];
  NextToken?: string;
}
export interface DescribeConformancePackStatusRequest {
  ConformancePackNames?: string[];
  Limit?: number;
  NextToken?: string;
}
export interface DescribeConformancePackStatusResponse {
  ConformancePackStatusDetails?: ConformancePackStatusDetail[];
  NextToken?: string;
}
export interface DescribeDeliveryChannelsRequest {
  DeliveryChannelNames?: string[];
}
export interface DescribeDeliveryChannelsResponse {
  DeliveryChannels?: DeliveryChannel[];
}
export interface DescribeDeliveryChannelStatusRequest {
  DeliveryChannelNames?: string[];
}
export interface DescribeDeliveryChannelStatusResponse {
  DeliveryChannelsStatus?: DeliveryChannelStatus[];
}
export interface DescribeOrganizationConfigRulesRequest {
  OrganizationConfigRuleNames?: string[];
  Limit?: number;
  NextToken?: string;
}
export declare const OrganizationConfigRuleTriggerTypeNoSN: {
  readonly CONFIGURATION_ITEM_CHANGE_NOTIFICATION: "ConfigurationItemChangeNotification";
  readonly OVERSIZED_CONFIGURATION_ITEM_CHANGE_NOTIFCATION: "OversizedConfigurationItemChangeNotification";
};
export type OrganizationConfigRuleTriggerTypeNoSN =
  (typeof OrganizationConfigRuleTriggerTypeNoSN)[keyof typeof OrganizationConfigRuleTriggerTypeNoSN];
export interface OrganizationCustomPolicyRuleMetadataNoPolicy {
  Description?: string;
  OrganizationConfigRuleTriggerTypes?: (
    | OrganizationConfigRuleTriggerTypeNoSN
    | string
  )[];
  InputParameters?: string;
  MaximumExecutionFrequency?: MaximumExecutionFrequency | string;
  ResourceTypesScope?: string[];
  ResourceIdScope?: string;
  TagKeyScope?: string;
  TagValueScope?: string;
  PolicyRuntime?: string;
  DebugLogDeliveryAccounts?: string[];
}
export declare const OrganizationConfigRuleTriggerType: {
  readonly CONFIGURATION_ITEM_CHANGE_NOTIFICATION: "ConfigurationItemChangeNotification";
  readonly OVERSIZED_CONFIGURATION_ITEM_CHANGE_NOTIFCATION: "OversizedConfigurationItemChangeNotification";
  readonly SCHEDULED_NOTIFICATION: "ScheduledNotification";
};
export type OrganizationConfigRuleTriggerType =
  (typeof OrganizationConfigRuleTriggerType)[keyof typeof OrganizationConfigRuleTriggerType];
export interface OrganizationCustomRuleMetadata {
  Description?: string;
  LambdaFunctionArn: string | undefined;
  OrganizationConfigRuleTriggerTypes:
    | (OrganizationConfigRuleTriggerType | string)[]
    | undefined;
  InputParameters?: string;
  MaximumExecutionFrequency?: MaximumExecutionFrequency | string;
  ResourceTypesScope?: string[];
  ResourceIdScope?: string;
  TagKeyScope?: string;
  TagValueScope?: string;
}
export interface OrganizationManagedRuleMetadata {
  Description?: string;
  RuleIdentifier: string | undefined;
  InputParameters?: string;
  MaximumExecutionFrequency?: MaximumExecutionFrequency | string;
  ResourceTypesScope?: string[];
  ResourceIdScope?: string;
  TagKeyScope?: string;
  TagValueScope?: string;
}
export interface OrganizationConfigRule {
  OrganizationConfigRuleName: string | undefined;
  OrganizationConfigRuleArn: string | undefined;
  OrganizationManagedRuleMetadata?: OrganizationManagedRuleMetadata;
  OrganizationCustomRuleMetadata?: OrganizationCustomRuleMetadata;
  ExcludedAccounts?: string[];
  LastUpdateTime?: Date;
  OrganizationCustomPolicyRuleMetadata?: OrganizationCustomPolicyRuleMetadataNoPolicy;
}
export interface DescribeOrganizationConfigRulesResponse {
  OrganizationConfigRules?: OrganizationConfigRule[];
  NextToken?: string;
}
export interface DescribeOrganizationConfigRuleStatusesRequest {
  OrganizationConfigRuleNames?: string[];
  Limit?: number;
  NextToken?: string;
}
export declare const OrganizationRuleStatus: {
  readonly CREATE_FAILED: "CREATE_FAILED";
  readonly CREATE_IN_PROGRESS: "CREATE_IN_PROGRESS";
  readonly CREATE_SUCCESSFUL: "CREATE_SUCCESSFUL";
  readonly DELETE_FAILED: "DELETE_FAILED";
  readonly DELETE_IN_PROGRESS: "DELETE_IN_PROGRESS";
  readonly DELETE_SUCCESSFUL: "DELETE_SUCCESSFUL";
  readonly UPDATE_FAILED: "UPDATE_FAILED";
  readonly UPDATE_IN_PROGRESS: "UPDATE_IN_PROGRESS";
  readonly UPDATE_SUCCESSFUL: "UPDATE_SUCCESSFUL";
};
export type OrganizationRuleStatus =
  (typeof OrganizationRuleStatus)[keyof typeof OrganizationRuleStatus];
export interface OrganizationConfigRuleStatus {
  OrganizationConfigRuleName: string | undefined;
  OrganizationRuleStatus: OrganizationRuleStatus | string | undefined;
  ErrorCode?: string;
  ErrorMessage?: string;
  LastUpdateTime?: Date;
}
export interface DescribeOrganizationConfigRuleStatusesResponse {
  OrganizationConfigRuleStatuses?: OrganizationConfigRuleStatus[];
  NextToken?: string;
}
export interface DescribeOrganizationConformancePacksRequest {
  OrganizationConformancePackNames?: string[];
  Limit?: number;
  NextToken?: string;
}
export interface OrganizationConformancePack {
  OrganizationConformancePackName: string | undefined;
  OrganizationConformancePackArn: string | undefined;
  DeliveryS3Bucket?: string;
  DeliveryS3KeyPrefix?: string;
  ConformancePackInputParameters?: ConformancePackInputParameter[];
  ExcludedAccounts?: string[];
  LastUpdateTime: Date | undefined;
}
export interface DescribeOrganizationConformancePacksResponse {
  OrganizationConformancePacks?: OrganizationConformancePack[];
  NextToken?: string;
}
export interface DescribeOrganizationConformancePackStatusesRequest {
  OrganizationConformancePackNames?: string[];
  Limit?: number;
  NextToken?: string;
}
export declare const OrganizationResourceStatus: {
  readonly CREATE_FAILED: "CREATE_FAILED";
  readonly CREATE_IN_PROGRESS: "CREATE_IN_PROGRESS";
  readonly CREATE_SUCCESSFUL: "CREATE_SUCCESSFUL";
  readonly DELETE_FAILED: "DELETE_FAILED";
  readonly DELETE_IN_PROGRESS: "DELETE_IN_PROGRESS";
  readonly DELETE_SUCCESSFUL: "DELETE_SUCCESSFUL";
  readonly UPDATE_FAILED: "UPDATE_FAILED";
  readonly UPDATE_IN_PROGRESS: "UPDATE_IN_PROGRESS";
  readonly UPDATE_SUCCESSFUL: "UPDATE_SUCCESSFUL";
};
export type OrganizationResourceStatus =
  (typeof OrganizationResourceStatus)[keyof typeof OrganizationResourceStatus];
export interface OrganizationConformancePackStatus {
  OrganizationConformancePackName: string | undefined;
  Status: OrganizationResourceStatus | string | undefined;
  ErrorCode?: string;
  ErrorMessage?: string;
  LastUpdateTime?: Date;
}
export interface DescribeOrganizationConformancePackStatusesResponse {
  OrganizationConformancePackStatuses?: OrganizationConformancePackStatus[];
  NextToken?: string;
}
export interface DescribePendingAggregationRequestsRequest {
  Limit?: number;
  NextToken?: string;
}
export interface PendingAggregationRequest {
  RequesterAccountId?: string;
  RequesterAwsRegion?: string;
}
export interface DescribePendingAggregationRequestsResponse {
  PendingAggregationRequests?: PendingAggregationRequest[];
  NextToken?: string;
}
export interface DescribeRemediationConfigurationsRequest {
  ConfigRuleNames: string[] | undefined;
}
export interface SsmControls {
  ConcurrentExecutionRatePercentage?: number;
  ErrorPercentage?: number;
}
export interface ExecutionControls {
  SsmControls?: SsmControls;
}
export declare const ResourceValueType: {
  readonly RESOURCE_ID: "RESOURCE_ID";
};
export type ResourceValueType =
  (typeof ResourceValueType)[keyof typeof ResourceValueType];
export interface ResourceValue {
  Value: ResourceValueType | string | undefined;
}
export interface StaticValue {
  Values: string[] | undefined;
}
export interface RemediationParameterValue {
  ResourceValue?: ResourceValue;
  StaticValue?: StaticValue;
}
export declare const RemediationTargetType: {
  readonly SSM_DOCUMENT: "SSM_DOCUMENT";
};
export type RemediationTargetType =
  (typeof RemediationTargetType)[keyof typeof RemediationTargetType];
export interface RemediationConfiguration {
  ConfigRuleName: string | undefined;
  TargetType: RemediationTargetType | string | undefined;
  TargetId: string | undefined;
  TargetVersion?: string;
  Parameters?: Record<string, RemediationParameterValue>;
  ResourceType?: string;
  Automatic?: boolean;
  ExecutionControls?: ExecutionControls;
  MaximumAutomaticAttempts?: number;
  RetryAttemptSeconds?: number;
  Arn?: string;
  CreatedByService?: string;
}
export interface DescribeRemediationConfigurationsResponse {
  RemediationConfigurations?: RemediationConfiguration[];
}
export interface DescribeRemediationExceptionsRequest {
  ConfigRuleName: string | undefined;
  ResourceKeys?: RemediationExceptionResourceKey[];
  Limit?: number;
  NextToken?: string;
}
export interface RemediationException {
  ConfigRuleName: string | undefined;
  ResourceType: string | undefined;
  ResourceId: string | undefined;
  Message?: string;
  ExpirationTime?: Date;
}
export interface DescribeRemediationExceptionsResponse {
  RemediationExceptions?: RemediationException[];
  NextToken?: string;
}
export interface DescribeRemediationExecutionStatusRequest {
  ConfigRuleName: string | undefined;
  ResourceKeys?: ResourceKey[];
  Limit?: number;
  NextToken?: string;
}
export declare const RemediationExecutionState: {
  readonly FAILED: "FAILED";
  readonly IN_PROGRESS: "IN_PROGRESS";
  readonly QUEUED: "QUEUED";
  readonly SUCCEEDED: "SUCCEEDED";
};
export type RemediationExecutionState =
  (typeof RemediationExecutionState)[keyof typeof RemediationExecutionState];
export declare const RemediationExecutionStepState: {
  readonly FAILED: "FAILED";
  readonly PENDING: "PENDING";
  readonly SUCCEEDED: "SUCCEEDED";
};
export type RemediationExecutionStepState =
  (typeof RemediationExecutionStepState)[keyof typeof RemediationExecutionStepState];
export interface RemediationExecutionStep {
  Name?: string;
  State?: RemediationExecutionStepState | string;
  ErrorMessage?: string;
  StartTime?: Date;
  StopTime?: Date;
}
export interface RemediationExecutionStatus {
  ResourceKey?: ResourceKey;
  State?: RemediationExecutionState | string;
  StepDetails?: RemediationExecutionStep[];
  InvocationTime?: Date;
  LastUpdatedTime?: Date;
}
export interface DescribeRemediationExecutionStatusResponse {
  RemediationExecutionStatuses?: RemediationExecutionStatus[];
  NextToken?: string;
}
export interface DescribeRetentionConfigurationsRequest {
  RetentionConfigurationNames?: string[];
  NextToken?: string;
}
export interface RetentionConfiguration {
  Name: string | undefined;
  RetentionPeriodInDays: number | undefined;
}
export interface DescribeRetentionConfigurationsResponse {
  RetentionConfigurations?: RetentionConfiguration[];
  NextToken?: string;
}
export interface Evaluation {
  ComplianceResourceType: string | undefined;
  ComplianceResourceId: string | undefined;
  ComplianceType: ComplianceType | string | undefined;
  Annotation?: string;
  OrderingTimestamp: Date | undefined;
}
export interface EvaluationContext {
  EvaluationContextIdentifier?: string;
}
export interface EvaluationResult {
  EvaluationResultIdentifier?: EvaluationResultIdentifier;
  ComplianceType?: ComplianceType | string;
  ResultRecordedTime?: Date;
  ConfigRuleInvokedTime?: Date;
  Annotation?: string;
  ResultToken?: string;
}
export declare const ResourceEvaluationStatus: {
  readonly FAILED: "FAILED";
  readonly IN_PROGRESS: "IN_PROGRESS";
  readonly SUCCEEDED: "SUCCEEDED";
};
export type ResourceEvaluationStatus =
  (typeof ResourceEvaluationStatus)[keyof typeof ResourceEvaluationStatus];
export interface EvaluationStatus {
  Status: ResourceEvaluationStatus | string | undefined;
  FailureReason?: string;
}
export interface ExternalEvaluation {
  ComplianceResourceType: string | undefined;
  ComplianceResourceId: string | undefined;
  ComplianceType: ComplianceType | string | undefined;
  Annotation?: string;
  OrderingTimestamp: Date | undefined;
}
export interface FailedRemediationBatch {
  FailureMessage?: string;
  FailedItems?: RemediationConfiguration[];
}
export interface FailedRemediationExceptionBatch {
  FailureMessage?: string;
  FailedItems?: RemediationException[];
}
export interface FieldInfo {
  Name?: string;
}
export interface GetAggregateComplianceDetailsByConfigRuleRequest {
  ConfigurationAggregatorName: string | undefined;
  ConfigRuleName: string | undefined;
  AccountId: string | undefined;
  AwsRegion: string | undefined;
  ComplianceType?: ComplianceType | string;
  Limit?: number;
  NextToken?: string;
}
export interface GetAggregateComplianceDetailsByConfigRuleResponse {
  AggregateEvaluationResults?: AggregateEvaluationResult[];
  NextToken?: string;
}
export interface GetAggregateConfigRuleComplianceSummaryRequest {
  ConfigurationAggregatorName: string | undefined;
  Filters?: ConfigRuleComplianceSummaryFilters;
  GroupByKey?: ConfigRuleComplianceSummaryGroupKey | string;
  Limit?: number;
  NextToken?: string;
}
export interface GetAggregateConfigRuleComplianceSummaryResponse {
  GroupByKey?: string;
  AggregateComplianceCounts?: AggregateComplianceCount[];
  NextToken?: string;
}
export interface GetAggregateConformancePackComplianceSummaryRequest {
  ConfigurationAggregatorName: string | undefined;
  Filters?: AggregateConformancePackComplianceSummaryFilters;
  GroupByKey?: AggregateConformancePackComplianceSummaryGroupKey | string;
  Limit?: number;
  NextToken?: string;
}
export interface GetAggregateConformancePackComplianceSummaryResponse {
  AggregateConformancePackComplianceSummaries?: AggregateConformancePackComplianceSummary[];
  GroupByKey?: string;
  NextToken?: string;
}
export interface ResourceCountFilters {
  ResourceType?: ResourceType | string;
  AccountId?: string;
  Region?: string;
}
export declare const ResourceCountGroupKey: {
  readonly ACCOUNT_ID: "ACCOUNT_ID";
  readonly AWS_REGION: "AWS_REGION";
  readonly RESOURCE_TYPE: "RESOURCE_TYPE";
};
export type ResourceCountGroupKey =
  (typeof ResourceCountGroupKey)[keyof typeof ResourceCountGroupKey];
export interface GetAggregateDiscoveredResourceCountsRequest {
  ConfigurationAggregatorName: string | undefined;
  Filters?: ResourceCountFilters;
  GroupByKey?: ResourceCountGroupKey | string;
  Limit?: number;
  NextToken?: string;
}
export interface GroupedResourceCount {
  GroupName: string | undefined;
  ResourceCount: number | undefined;
}
export interface GetAggregateDiscoveredResourceCountsResponse {
  TotalDiscoveredResources: number | undefined;
  GroupByKey?: string;
  GroupedResourceCounts?: GroupedResourceCount[];
  NextToken?: string;
}
export interface GetAggregateResourceConfigRequest {
  ConfigurationAggregatorName: string | undefined;
  ResourceIdentifier: AggregateResourceIdentifier | undefined;
}
export interface GetAggregateResourceConfigResponse {
  ConfigurationItem?: ConfigurationItem;
}
export declare class OversizedConfigurationItemException extends __BaseException {
  readonly name: "OversizedConfigurationItemException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      OversizedConfigurationItemException,
      __BaseException
    >
  );
}
export declare class ResourceNotDiscoveredException extends __BaseException {
  readonly name: "ResourceNotDiscoveredException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceNotDiscoveredException, __BaseException>
  );
}
export interface GetComplianceDetailsByConfigRuleRequest {
  ConfigRuleName: string | undefined;
  ComplianceTypes?: (ComplianceType | string)[];
  Limit?: number;
  NextToken?: string;
}
export interface GetComplianceDetailsByConfigRuleResponse {
  EvaluationResults?: EvaluationResult[];
  NextToken?: string;
}
export interface GetComplianceDetailsByResourceRequest {
  ResourceType?: string;
  ResourceId?: string;
  ComplianceTypes?: (ComplianceType | string)[];
  NextToken?: string;
  ResourceEvaluationId?: string;
}
export interface GetComplianceDetailsByResourceResponse {
  EvaluationResults?: EvaluationResult[];
  NextToken?: string;
}
export interface GetComplianceSummaryByConfigRuleResponse {
  ComplianceSummary?: ComplianceSummary;
}
export interface GetComplianceSummaryByResourceTypeRequest {
  ResourceTypes?: string[];
}
export interface GetComplianceSummaryByResourceTypeResponse {
  ComplianceSummariesByResourceType?: ComplianceSummaryByResourceType[];
}
export interface GetConformancePackComplianceDetailsRequest {
  ConformancePackName: string | undefined;
  Filters?: ConformancePackEvaluationFilters;
  Limit?: number;
  NextToken?: string;
}
export interface GetConformancePackComplianceDetailsResponse {
  ConformancePackName: string | undefined;
  ConformancePackRuleEvaluationResults?: ConformancePackEvaluationResult[];
  NextToken?: string;
}
export interface GetConformancePackComplianceSummaryRequest {
  ConformancePackNames: string[] | undefined;
  Limit?: number;
  NextToken?: string;
}
export interface GetConformancePackComplianceSummaryResponse {
  ConformancePackComplianceSummaryList?: ConformancePackComplianceSummary[];
  NextToken?: string;
}
export interface GetCustomRulePolicyRequest {
  ConfigRuleName?: string;
}
export interface GetCustomRulePolicyResponse {
  PolicyText?: string;
}
export interface GetDiscoveredResourceCountsRequest {
  resourceTypes?: string[];
  limit?: number;
  nextToken?: string;
}
export interface ResourceCount {
  resourceType?: ResourceType | string;
  count?: number;
}
export interface GetDiscoveredResourceCountsResponse {
  totalDiscoveredResources?: number;
  resourceCounts?: ResourceCount[];
  nextToken?: string;
}
export declare const MemberAccountRuleStatus: {
  readonly CREATE_FAILED: "CREATE_FAILED";
  readonly CREATE_IN_PROGRESS: "CREATE_IN_PROGRESS";
  readonly CREATE_SUCCESSFUL: "CREATE_SUCCESSFUL";
  readonly DELETE_FAILED: "DELETE_FAILED";
  readonly DELETE_IN_PROGRESS: "DELETE_IN_PROGRESS";
  readonly DELETE_SUCCESSFUL: "DELETE_SUCCESSFUL";
  readonly UPDATE_FAILED: "UPDATE_FAILED";
  readonly UPDATE_IN_PROGRESS: "UPDATE_IN_PROGRESS";
  readonly UPDATE_SUCCESSFUL: "UPDATE_SUCCESSFUL";
};
export type MemberAccountRuleStatus =
  (typeof MemberAccountRuleStatus)[keyof typeof MemberAccountRuleStatus];
export interface StatusDetailFilters {
  AccountId?: string;
  MemberAccountRuleStatus?: MemberAccountRuleStatus | string;
}
export interface GetOrganizationConfigRuleDetailedStatusRequest {
  OrganizationConfigRuleName: string | undefined;
  Filters?: StatusDetailFilters;
  Limit?: number;
  NextToken?: string;
}
export interface MemberAccountStatus {
  AccountId: string | undefined;
  ConfigRuleName: string | undefined;
  MemberAccountRuleStatus: MemberAccountRuleStatus | string | undefined;
  ErrorCode?: string;
  ErrorMessage?: string;
  LastUpdateTime?: Date;
}
export interface GetOrganizationConfigRuleDetailedStatusResponse {
  OrganizationConfigRuleDetailedStatus?: MemberAccountStatus[];
  NextToken?: string;
}
export declare const OrganizationResourceDetailedStatus: {
  readonly CREATE_FAILED: "CREATE_FAILED";
  readonly CREATE_IN_PROGRESS: "CREATE_IN_PROGRESS";
  readonly CREATE_SUCCESSFUL: "CREATE_SUCCESSFUL";
  readonly DELETE_FAILED: "DELETE_FAILED";
  readonly DELETE_IN_PROGRESS: "DELETE_IN_PROGRESS";
  readonly DELETE_SUCCESSFUL: "DELETE_SUCCESSFUL";
  readonly UPDATE_FAILED: "UPDATE_FAILED";
  readonly UPDATE_IN_PROGRESS: "UPDATE_IN_PROGRESS";
  readonly UPDATE_SUCCESSFUL: "UPDATE_SUCCESSFUL";
};
export type OrganizationResourceDetailedStatus =
  (typeof OrganizationResourceDetailedStatus)[keyof typeof OrganizationResourceDetailedStatus];
export interface OrganizationResourceDetailedStatusFilters {
  AccountId?: string;
  Status?: OrganizationResourceDetailedStatus | string;
}
export interface GetOrganizationConformancePackDetailedStatusRequest {
  OrganizationConformancePackName: string | undefined;
  Filters?: OrganizationResourceDetailedStatusFilters;
  Limit?: number;
  NextToken?: string;
}
export interface OrganizationConformancePackDetailedStatus {
  AccountId: string | undefined;
  ConformancePackName: string | undefined;
  Status: OrganizationResourceDetailedStatus | string | undefined;
  ErrorCode?: string;
  ErrorMessage?: string;
  LastUpdateTime?: Date;
}
export interface GetOrganizationConformancePackDetailedStatusResponse {
  OrganizationConformancePackDetailedStatuses?: OrganizationConformancePackDetailedStatus[];
  NextToken?: string;
}
export interface GetOrganizationCustomRulePolicyRequest {
  OrganizationConfigRuleName: string | undefined;
}
export interface GetOrganizationCustomRulePolicyResponse {
  PolicyText?: string;
}
export interface GetResourceConfigHistoryRequest {
  resourceType: ResourceType | string | undefined;
  resourceId: string | undefined;
  laterTime?: Date;
  earlierTime?: Date;
  chronologicalOrder?: ChronologicalOrder | string;
  limit?: number;
  nextToken?: string;
}
export interface GetResourceConfigHistoryResponse {
  configurationItems?: ConfigurationItem[];
  nextToken?: string;
}
export declare class InvalidTimeRangeException extends __BaseException {
  readonly name: "InvalidTimeRangeException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidTimeRangeException, __BaseException>
  );
}
export interface GetResourceEvaluationSummaryRequest {
  ResourceEvaluationId: string | undefined;
}
export declare const ResourceConfigurationSchemaType: {
  readonly CFN_RESOURCE_SCHEMA: "CFN_RESOURCE_SCHEMA";
};
export type ResourceConfigurationSchemaType =
  (typeof ResourceConfigurationSchemaType)[keyof typeof ResourceConfigurationSchemaType];
export interface ResourceDetails {
  ResourceId: string | undefined;
  ResourceType: string | undefined;
  ResourceConfiguration: string | undefined;
  ResourceConfigurationSchemaType?: ResourceConfigurationSchemaType | string;
}
export interface GetResourceEvaluationSummaryResponse {
  ResourceEvaluationId?: string;
  EvaluationMode?: EvaluationMode | string;
  EvaluationStatus?: EvaluationStatus;
  EvaluationStartTimestamp?: Date;
  Compliance?: ComplianceType | string;
  EvaluationContext?: EvaluationContext;
  ResourceDetails?: ResourceDetails;
}
export interface GetStoredQueryRequest {
  QueryName: string | undefined;
}
export interface StoredQuery {
  QueryId?: string;
  QueryArn?: string;
  QueryName: string | undefined;
  Description?: string;
  Expression?: string;
}
export interface GetStoredQueryResponse {
  StoredQuery?: StoredQuery;
}
export declare class IdempotentParameterMismatch extends __BaseException {
  readonly name: "IdempotentParameterMismatch";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<IdempotentParameterMismatch, __BaseException>
  );
}
export declare class InsufficientDeliveryPolicyException extends __BaseException {
  readonly name: "InsufficientDeliveryPolicyException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      InsufficientDeliveryPolicyException,
      __BaseException
    >
  );
}
export declare class InvalidConfigurationRecorderNameException extends __BaseException {
  readonly name: "InvalidConfigurationRecorderNameException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      InvalidConfigurationRecorderNameException,
      __BaseException
    >
  );
}
export declare class InvalidDeliveryChannelNameException extends __BaseException {
  readonly name: "InvalidDeliveryChannelNameException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      InvalidDeliveryChannelNameException,
      __BaseException
    >
  );
}
export declare class InvalidExpressionException extends __BaseException {
  readonly name: "InvalidExpressionException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidExpressionException, __BaseException>
  );
}
export declare class InvalidRecordingGroupException extends __BaseException {
  readonly name: "InvalidRecordingGroupException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidRecordingGroupException, __BaseException>
  );
}
export declare class InvalidResultTokenException extends __BaseException {
  readonly name: "InvalidResultTokenException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidResultTokenException, __BaseException>
  );
}
export declare class InvalidRoleException extends __BaseException {
  readonly name: "InvalidRoleException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidRoleException, __BaseException>
  );
}
export declare class InvalidS3KeyPrefixException extends __BaseException {
  readonly name: "InvalidS3KeyPrefixException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidS3KeyPrefixException, __BaseException>
  );
}
export declare class InvalidS3KmsKeyArnException extends __BaseException {
  readonly name: "InvalidS3KmsKeyArnException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidS3KmsKeyArnException, __BaseException>
  );
}
export declare class InvalidSNSTopicARNException extends __BaseException {
  readonly name: "InvalidSNSTopicARNException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidSNSTopicARNException, __BaseException>
  );
}
export declare class LimitExceededException extends __BaseException {
  readonly name: "LimitExceededException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<LimitExceededException, __BaseException>
  );
}
export interface ResourceFilters {
  AccountId?: string;
  ResourceId?: string;
  ResourceName?: string;
  Region?: string;
}
export interface ListAggregateDiscoveredResourcesRequest {
  ConfigurationAggregatorName: string | undefined;
  ResourceType: ResourceType | string | undefined;
  Filters?: ResourceFilters;
  Limit?: number;
  NextToken?: string;
}
export interface ListAggregateDiscoveredResourcesResponse {
  ResourceIdentifiers?: AggregateResourceIdentifier[];
  NextToken?: string;
}
export declare const SortBy: {
  readonly SCORE: "SCORE";
};
export type SortBy = (typeof SortBy)[keyof typeof SortBy];
export declare const SortOrder: {
  readonly ASCENDING: "ASCENDING";
  readonly DESCENDING: "DESCENDING";
};
export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder];
export interface ListConformancePackComplianceScoresRequest {
  Filters?: ConformancePackComplianceScoresFilters;
  SortOrder?: SortOrder | string;
  SortBy?: SortBy | string;
  Limit?: number;
  NextToken?: string;
}
export interface ListConformancePackComplianceScoresResponse {
  NextToken?: string;
  ConformancePackComplianceScores: ConformancePackComplianceScore[] | undefined;
}
export interface ListDiscoveredResourcesRequest {
  resourceType: ResourceType | string | undefined;
  resourceIds?: string[];
  resourceName?: string;
  limit?: number;
  includeDeletedResources?: boolean;
  nextToken?: string;
}
export interface ResourceIdentifier {
  resourceType?: ResourceType | string;
  resourceId?: string;
  resourceName?: string;
  resourceDeletionTime?: Date;
}
export interface ListDiscoveredResourcesResponse {
  resourceIdentifiers?: ResourceIdentifier[];
  nextToken?: string;
}
export interface TimeWindow {
  StartTime?: Date;
  EndTime?: Date;
}
export interface ResourceEvaluationFilters {
  EvaluationMode?: EvaluationMode | string;
  TimeWindow?: TimeWindow;
  EvaluationContextIdentifier?: string;
}
export interface ListResourceEvaluationsRequest {
  Filters?: ResourceEvaluationFilters;
  Limit?: number;
  NextToken?: string;
}
export interface ResourceEvaluation {
  ResourceEvaluationId?: string;
  EvaluationMode?: EvaluationMode | string;
  EvaluationStartTimestamp?: Date;
}
export interface ListResourceEvaluationsResponse {
  ResourceEvaluations?: ResourceEvaluation[];
  NextToken?: string;
}
export interface ListStoredQueriesRequest {
  NextToken?: string;
  MaxResults?: number;
}
export interface StoredQueryMetadata {
  QueryId: string | undefined;
  QueryArn: string | undefined;
  QueryName: string | undefined;
  Description?: string;
}
export interface ListStoredQueriesResponse {
  StoredQueryMetadata?: StoredQueryMetadata[];
  NextToken?: string;
}
export interface ListTagsForResourceRequest {
  ResourceArn: string | undefined;
  Limit?: number;
  NextToken?: string;
}
export interface Tag {
  Key?: string;
  Value?: string;
}
export interface ListTagsForResourceResponse {
  Tags?: Tag[];
  NextToken?: string;
}
export declare class MaxActiveResourcesExceededException extends __BaseException {
  readonly name: "MaxActiveResourcesExceededException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      MaxActiveResourcesExceededException,
      __BaseException
    >
  );
}
