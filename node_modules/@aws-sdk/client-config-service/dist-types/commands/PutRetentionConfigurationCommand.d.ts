import { EndpointParameterInstructions } from "@aws-sdk/middleware-endpoint";
import { Command as $Command } from "@aws-sdk/smithy-client";
import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../ConfigServiceClient";
import { PutRetentionConfigurationRequest, PutRetentionConfigurationResponse } from "../models/models_1";
/**
 * @public
 */
export { __MetadataBearer, $Command };
/**
 * @public
 *
 * The input for {@link PutRetentionConfigurationCommand}.
 */
export interface PutRetentionConfigurationCommandInput extends PutRetentionConfigurationRequest {
}
/**
 * @public
 *
 * The output of {@link PutRetentionConfigurationCommand}.
 */
export interface PutRetentionConfigurationCommandOutput extends PutRetentionConfigurationResponse, __MetadataBearer {
}
/**
 * @public
 * <p>Creates and updates the retention configuration with details
 * 			about retention period (number of days) that Config stores your
 * 			historical information. The API creates the
 * 				<code>RetentionConfiguration</code> object and names the object
 * 			as <b>default</b>. When you have a
 * 				<code>RetentionConfiguration</code> object named <b>default</b>, calling the API modifies the
 * 			default object. </p>
 *          <note>
 *             <p>Currently, Config supports only one retention
 * 				configuration per region in your account.</p>
 *          </note>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { ConfigServiceClient, PutRetentionConfigurationCommand } from "@aws-sdk/client-config-service"; // ES Modules import
 * // const { ConfigServiceClient, PutRetentionConfigurationCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
 * const client = new ConfigServiceClient(config);
 * const input = { // PutRetentionConfigurationRequest
 *   RetentionPeriodInDays: Number("int"), // required
 * };
 * const command = new PutRetentionConfigurationCommand(input);
 * const response = await client.send(command);
 * // { // PutRetentionConfigurationResponse
 * //   RetentionConfiguration: { // RetentionConfiguration
 * //     Name: "STRING_VALUE", // required
 * //     RetentionPeriodInDays: Number("int"), // required
 * //   },
 * // };
 *
 * ```
 *
 * @param PutRetentionConfigurationCommandInput - {@link PutRetentionConfigurationCommandInput}
 * @returns {@link PutRetentionConfigurationCommandOutput}
 * @see {@link PutRetentionConfigurationCommandInput} for command's `input` shape.
 * @see {@link PutRetentionConfigurationCommandOutput} for command's `response` shape.
 * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
 *
 * @throws {@link InvalidParameterValueException} (client fault)
 *  <p>One or more of the specified parameters are not valid. Verify
 * 			that your parameters are valid and try again.</p>
 *
 * @throws {@link MaxNumberOfRetentionConfigurationsExceededException} (client fault)
 *  <p>Failed to add the retention configuration because a retention configuration with that name already exists.</p>
 *
 * @throws {@link ConfigServiceServiceException}
 * <p>Base exception class for all service exceptions from ConfigService service.</p>
 *
 */
export declare class PutRetentionConfigurationCommand extends $Command<PutRetentionConfigurationCommandInput, PutRetentionConfigurationCommandOutput, ConfigServiceClientResolvedConfig> {
    readonly input: PutRetentionConfigurationCommandInput;
    static getEndpointParameterInstructions(): EndpointParameterInstructions;
    /**
     * @public
     */
    constructor(input: PutRetentionConfigurationCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConfigServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutRetentionConfigurationCommandInput, PutRetentionConfigurationCommandOutput>;
    /**
     * @internal
     */
    private serialize;
    /**
     * @internal
     */
    private deserialize;
}
