"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const _ = __importStar(require("lodash"));
const xml2js_1 = __importDefault(require("xml2js"));
const parser = new xml2js_1.default.Parser();
const pathToInfile = process.argv[2];
const pathToOutfile = process.argv[3];
if (!pathToInfile || !pathToOutfile) {
    console.error(`You must provide the path to both an input and ouput file.`);
}
else {
    fs_1.default.readFile(pathToInfile, function (readFileError, data) {
        if (readFileError) {
            console.error(`Failed to read ${pathToInfile}: ${readFileError}`);
        }
        else {
            parser.parseString(data, (parseFileError, converted) => {
                if (parseFileError) {
                    console.error(`Failed to parse ${pathToInfile}: ${parseFileError}`);
                }
                else {
                    const result = {};
                    converted.cci_list.cci_items[0].cci_item.forEach((cciItem) => {
                        const newestReference = _.maxBy(cciItem.references[0].reference, (item) => _.get(item, '$.version'));
                        if (newestReference) {
                            result[cciItem.$.id] = newestReference.$.index;
                        }
                        else {
                            console.error(`No NIST Controls found for ${cciItem.$.id}`);
                        }
                    });
                    fs_1.default.writeFileSync(pathToOutfile, JSON.stringify(result));
                }
            });
        }
    });
}
//# sourceMappingURL=xml2json.js.map