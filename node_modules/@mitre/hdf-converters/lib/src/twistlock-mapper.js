"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TwistlockMapper = exports.TwistlockResults = void 0;
const inspecjs_1 = require("inspecjs");
const lodash_1 = __importDefault(require("lodash"));
const package_json_1 = require("../package.json");
const base_converter_1 = require("./base-converter");
const global_1 = require("./utils/global");
const IMPACT_MAPPING = new Map([
    ['critical', 0.9],
    ['important', 0.9],
    ['high', 0.7],
    ['medium', 0.5],
    ['moderate', 0.5],
    ['low', 0.3]
]);
class TwistlockResults {
    constructor(twistlockJson, withRaw = false) {
        this.data = JSON.parse(twistlockJson);
        this.withRaw = withRaw;
    }
    toHdf() {
        if (!lodash_1.default.has(this.data, 'results')) {
            this.data = { results: [this.data] };
        }
        return new TwistlockMapper(this.data, this.withRaw).toHdf();
    }
}
exports.TwistlockResults = TwistlockResults;
class TwistlockMapper extends base_converter_1.BaseConverter {
    constructor(twistlockJson, withRaw = false) {
        super(twistlockJson, true);
        this.mappings = {
            platform: {
                name: 'Heimdall Tools',
                release: package_json_1.version,
                target_id: { path: ['results[0].name', 'results[0].repository'] }
            },
            version: package_json_1.version,
            statistics: {},
            profiles: [
                {
                    path: 'results',
                    name: 'Twistlock Scan',
                    title: {
                        transformer: (data) => {
                            let projectArr = 'N/A';
                            if (lodash_1.default.has(data, 'collections')) {
                                projectArr = lodash_1.default.get(data, 'collections');
                            }
                            if (lodash_1.default.has(data, 'repository')) {
                                projectArr = lodash_1.default.get(data, 'repository');
                            }
                            const projectName = Array.isArray(projectArr)
                                ? projectArr.join(' / ')
                                : projectArr;
                            return `Twistlock Project: ${projectName}`;
                        }
                    },
                    summary: {
                        transformer: (data) => {
                            const vulnerabilityTotal = lodash_1.default.has(data, 'vulnerabilityDistribution')
                                ? `${JSON.stringify(lodash_1.default.get(data, 'vulnerabilityDistribution.total'))}`
                                : 'N/A';
                            const complianceTotal = lodash_1.default.has(data, 'complianceDistribution')
                                ? `${JSON.stringify(lodash_1.default.get(data, 'complianceDistribution.total'))}`
                                : 'N/A';
                            return `Package Vulnerability Summary: ${vulnerabilityTotal} Application Compliance Issue Total: ${complianceTotal}`;
                        }
                    },
                    supports: [],
                    attributes: [],
                    groups: [],
                    status: 'loaded',
                    controls: [
                        {
                            path: 'vulnerabilities',
                            key: 'id',
                            pathTransform: (value) => (Array.isArray(value) ? value : []),
                            tags: {
                                nist: global_1.DEFAULT_UPDATE_REMEDIATION_NIST_TAGS,
                                cci: (0, global_1.getCCIsForNISTTags)(global_1.DEFAULT_UPDATE_REMEDIATION_NIST_TAGS),
                                cveid: { path: 'id' }
                            },
                            refs: [],
                            source_location: {},
                            title: { path: 'id' },
                            id: { path: 'id' },
                            desc: { path: 'description' },
                            impact: {
                                path: 'severity',
                                transformer: (0, base_converter_1.impactMapping)(IMPACT_MAPPING)
                            },
                            code: {
                                transformer: (vulnerability) => {
                                    return JSON.stringify(vulnerability, null, 2);
                                }
                            },
                            results: [
                                {
                                    status: inspecjs_1.ExecJSON.ControlResultStatus.Failed,
                                    code_desc: {
                                        transformer: (data) => {
                                            const packageName = lodash_1.default.has(data, 'packageName')
                                                ? `${JSON.stringify(lodash_1.default.get(data, 'packageName'))}`
                                                : 'N/A';
                                            const impactedVersions = lodash_1.default.has(data, 'impactedVersions')
                                                ? `${JSON.stringify(lodash_1.default.get(data, 'impactedVersions'))}`
                                                : 'N/A';
                                            return `Package ${packageName} should be updated to latest version above impacted versions ${impactedVersions}`;
                                        }
                                    },
                                    message: {
                                        transformer: (data) => {
                                            const packageName = lodash_1.default.has(data, 'packageName')
                                                ? `${JSON.stringify(lodash_1.default.get(data, 'packageName'))}`
                                                : 'N/A';
                                            const packageVersion = lodash_1.default.has(data, 'packageVersion')
                                                ? `${JSON.stringify(lodash_1.default.get(data, 'packageVersion'))}`
                                                : 'N/A';
                                            return `Expected latest version of ${packageName}\nDetected vulnerable version ${packageVersion} of ${packageName}`;
                                        }
                                    },
                                    start_time: { path: 'discoveredDate' }
                                }
                            ]
                        }
                    ],
                    sha256: ''
                }
            ],
            passthrough: {
                transformer: (data) => {
                    let resultsData = lodash_1.default.get(data, 'results');
                    if (Array.isArray(resultsData)) {
                        resultsData = resultsData.map((result) => lodash_1.default.omit(result, [
                            'name',
                            'collections',
                            'complianceDistribution',
                            'vulnerabilities',
                            'vulnerabilityDistribution'
                        ]));
                    }
                    return {
                        auxiliary_data: [
                            {
                                name: 'Twistlock',
                                data: {
                                    results: resultsData,
                                    consoleURL: lodash_1.default.get(data, 'consoleURL')
                                }
                            }
                        ],
                        ...(this.withRaw && { raw: data })
                    };
                }
            }
        };
        this.withRaw = withRaw;
    }
}
exports.TwistlockMapper = TwistlockMapper;
//# sourceMappingURL=twistlock-mapper.js.map