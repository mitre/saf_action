"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BurpSuiteMapper = void 0;
const inspecjs_1 = require("inspecjs");
const lodash_1 = __importDefault(require("lodash"));
const package_json_1 = require("../package.json");
const base_converter_1 = require("./base-converter");
const CweNistMapping_1 = require("./mappings/CweNistMapping");
const global_1 = require("./utils/global");
const IMPACT_MAPPING = new Map([
    ['high', 0.7],
    ['medium', 0.5],
    ['low', 0.3],
    ['information', 0.3]
]);
const NAME = 'BurpSuite Pro Scan';
const CWE_NIST_MAPPING = new CweNistMapping_1.CweNistMapping();
function formatCodeDesc(issue) {
    const text = [];
    if (lodash_1.default.has(issue, 'host.ip') && lodash_1.default.has(issue, 'host.text')) {
        text.push(`Host: ip: ${lodash_1.default.get(issue, 'host.ip')}, url: ${lodash_1.default.get(issue, 'host.text')}`);
    }
    else {
        text.push('Host: ip: , url: ');
    }
    if (lodash_1.default.has(issue, 'location')) {
        text.push(`Location: ${(0, base_converter_1.parseHtml)(lodash_1.default.get(issue, 'location'))}`);
    }
    else {
        text.push('Location: ');
    }
    if (lodash_1.default.has(issue, 'issueDetail')) {
        text.push(`issueDetail: ${(0, base_converter_1.parseHtml)(lodash_1.default.get(issue, 'issueDetail'))}`);
    }
    if (lodash_1.default.has(issue, 'confidence')) {
        text.push(`confidence: ${(0, base_converter_1.parseHtml)(lodash_1.default.get(issue, 'confidence'))}`);
    }
    else {
        text.push('confidence: ');
    }
    return text.join('\n') + '\n';
}
function idToString(id) {
    if (typeof id === 'string' || typeof id === 'number') {
        return id.toString();
    }
    else {
        return '';
    }
}
function formatCweId(input) {
    return (0, base_converter_1.parseHtml)(input).slice(1, -1).trimStart();
}
function nistTag(input) {
    let cwe = formatCweId(input).split('CWE-');
    cwe.shift();
    cwe = cwe.map((x) => x.split(':')[0]);
    return CWE_NIST_MAPPING.nistFilter(cwe, global_1.DEFAULT_STATIC_CODE_ANALYSIS_NIST_TAGS);
}
class BurpSuiteMapper extends base_converter_1.BaseConverter {
    constructor(burpsXml, withRaw = false) {
        super((0, base_converter_1.parseXml)(burpsXml));
        this.mappings = {
            platform: {
                name: 'Heimdall Tools',
                release: package_json_1.version
            },
            version: package_json_1.version,
            statistics: {},
            profiles: [
                {
                    name: NAME,
                    version: { path: 'issues.burpVersion' },
                    title: NAME,
                    summary: NAME,
                    supports: [],
                    attributes: [],
                    groups: [],
                    status: 'loaded',
                    controls: [
                        {
                            path: 'issues.issue',
                            key: 'id',
                            tags: {
                                nist: {
                                    path: 'vulnerabilityClassifications',
                                    transformer: nistTag
                                },
                                cweid: {
                                    path: 'vulnerabilityClassifications',
                                    transformer: formatCweId
                                },
                                cci: {
                                    path: 'vulnerabilityClassifications',
                                    transformer: (data) => (0, global_1.getCCIsForNISTTags)(nistTag(data))
                                },
                                confidence: { path: 'confidence' }
                            },
                            refs: [],
                            source_location: {},
                            title: { path: 'name' },
                            id: { path: 'type', transformer: idToString },
                            desc: { path: 'issueBackground', transformer: base_converter_1.parseHtml },
                            descriptions: [
                                {
                                    data: { path: 'issueBackground', transformer: base_converter_1.parseHtml },
                                    label: 'check'
                                },
                                {
                                    data: { path: 'remediationBackground', transformer: base_converter_1.parseHtml },
                                    label: 'fix'
                                }
                            ],
                            impact: {
                                path: 'severity',
                                transformer: (0, base_converter_1.impactMapping)(IMPACT_MAPPING)
                            },
                            code: {
                                transformer: (vulnerability) => JSON.stringify(vulnerability, null, 2)
                            },
                            results: [
                                {
                                    status: inspecjs_1.ExecJSON.ControlResultStatus.Failed,
                                    code_desc: { transformer: formatCodeDesc },
                                    start_time: { path: '$.issues.exportTime' }
                                }
                            ]
                        }
                    ],
                    sha256: ''
                }
            ],
            passthrough: {
                transformer: (data) => {
                    return {
                        ...(this.withRaw && { raw: data })
                    };
                }
            }
        };
        this.withRaw = withRaw;
    }
}
exports.BurpSuiteMapper = BurpSuiteMapper;
//# sourceMappingURL=burpsuite-mapper.js.map