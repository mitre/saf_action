import { AxiosInstance } from 'axios';
import { ExecJSON } from 'inspecjs';
import { Logger } from 'winston';
import { SplunkConfig } from '../types/splunk-config-types';
import { SplunkReport } from '../types/splunk-report-types';
export declare type Hash<T> = {
    [key: string]: T;
};
export declare type SplunkConfigNoIndex = Omit<SplunkConfig, 'index'>;
export declare type GenericPayloadWithMetaData = {
    meta: FileMetaData;
    [key: string]: never[] | Record<string, unknown>;
};
export declare type FileMetaData = {
    guid: string;
    subtype: string;
    hdf_splunk_schema: string;
    filetype: string;
    filename: string;
    profile_sha256: string;
    [key: string]: never[] | unknown;
};
export declare function groupBy<T>(items: Array<T>, keyGetter: (v: T) => string): Hash<Array<T>>;
export declare function mapHash<T, G>(old: Hash<T>, mapFunction: (v: T) => G): Hash<G>;
export declare function consolidatePayloads(payloads: SplunkReport[]): ExecJSON.Execution[];
export declare function replaceKeyValueDescriptions(controls: (ExecJSON.Control & GenericPayloadWithMetaData & {
    descriptions?: {
        [key: string]: string;
    } | ExecJSON.ControlDescription[];
})[]): (ExecJSON.Control & GenericPayloadWithMetaData & {
    descriptions?: ExecJSON.ControlDescription[] | {
        [key: string]: string;
    } | undefined;
})[];
export declare class SplunkMapper {
    config: SplunkConfig;
    axiosInstance: AxiosInstance;
    hostname: string;
    constructor(config: SplunkConfig, logService?: Logger, loggingLevel?: string);
    createJob(query: string): Promise<string>;
    trackJob(job: string): Promise<void>;
    parseSplunkResponse(query: string, results: {
        fields: string[];
        rows: string[];
    }): SplunkReport[];
    queryData(query: string): Promise<SplunkReport[]>;
    toHdf(guid: string): Promise<ExecJSON.Execution>;
}
