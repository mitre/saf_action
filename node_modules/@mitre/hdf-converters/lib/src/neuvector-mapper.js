"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NeuVectorMapper = void 0;
const inspecjs_1 = require("inspecjs");
const lodash_1 = __importDefault(require("lodash"));
const package_json_1 = require("../package.json");
const base_converter_1 = require("./base-converter");
const CweNistMapping_1 = require("./mappings/CweNistMapping");
const global_1 = require("./utils/global");
const CWE_NIST_MAPPING = new CweNistMapping_1.CweNistMapping();
function cweTags(description) {
    var _a;
    const regex = /CWE-\d{3}/g;
    return (_a = description.match(regex)) !== null && _a !== void 0 ? _a : undefined;
}
function nistTags(cweTags) {
    var _a;
    const identifiers = (_a = cweTags === null || cweTags === void 0 ? void 0 : cweTags.map((tag) => tag.slice(-3))) !== null && _a !== void 0 ? _a : [];
    return CWE_NIST_MAPPING.nistFilter(identifiers, global_1.DEFAULT_UPDATE_REMEDIATION_NIST_TAGS);
}
function cveIdMatches(cveName) {
    return (cve) => cve.name === cveName;
}
class NeuVectorMapper extends base_converter_1.BaseConverter {
    memoizedGetModules() {
        const cache = {};
        return (moduleName) => {
            var _a, _b;
            if (Object.prototype.hasOwnProperty.call(cache, moduleName)) {
                return cache[moduleName];
            }
            cache[moduleName] = (_b = (_a = this.data.report.modules) === null || _a === void 0 ? void 0 : _a.find((value) => value.name === moduleName)) === null || _b === void 0 ? void 0 : _b.source;
            return cache[moduleName];
        };
    }
    constructor(exportJson, withRaw = false) {
        const rawParams = JSON.parse(exportJson);
        super(rawParams);
        this.mappings = {
            platform: {
                name: 'Heimdall Tools',
                release: package_json_1.version
            },
            version: package_json_1.version,
            statistics: {},
            profiles: [
                {
                    name: 'NeuVector Scan',
                    title: {
                        path: 'report',
                        transformer: (data) => `${data.registry}/${data.repository}:${data.tag} - Digest: ${data.digest} - Image ID: ${data.image_id}`
                    },
                    supports: [],
                    attributes: [],
                    groups: [],
                    status: 'loaded',
                    controls: [
                        {
                            path: 'report.vulnerabilities',
                            key: 'id',
                            tags: {
                                cves: { path: 'cves' },
                                cpes: { path: 'cpes' },
                                cwe: {
                                    path: 'description',
                                    transformer: cweTags
                                },
                                nist: {
                                    path: 'description',
                                    transformer: (description) => nistTags(cweTags(description))
                                },
                                score: { path: 'score' },
                                vectors: { path: 'vectors' },
                                vectors_v3: { path: 'vectors_v3' },
                                score_v3: { path: 'score_v3' },
                                severity: { path: 'severity' },
                                source: {
                                    path: 'package_name',
                                    transformer: (packageName) => this.getModules(packageName)
                                },
                                status: {
                                    path: 'name',
                                    transformer: (name) => {
                                        var _a, _b, _c, _d;
                                        return (_d = (_c = (_b = (_a = this.rawData.report.modules) === null || _a === void 0 ? void 0 : _a.find((module) => { var _a; return (_a = module.cves) === null || _a === void 0 ? void 0 : _a.find(cveIdMatches(name)); })) === null || _b === void 0 ? void 0 : _b.cves) === null || _c === void 0 ? void 0 : _c.find(cveIdMatches(name))) === null || _d === void 0 ? void 0 : _d.status;
                                    }
                                },
                                feed_rating: { path: 'feed_rating' },
                                link: { path: 'link' },
                                published_timestamp: { path: 'published_timestamp' },
                                last_modified_timestamp: { path: 'last_modified_timestamp' },
                                in_base_image: { path: 'in_base_image' },
                                tags: {
                                    path: 'tags',
                                    transformer: (tags) => JSON.stringify(tags, null, 2)
                                },
                                envs: {
                                    path: '$.report.envs',
                                    transformer: (envs) => envs ? envs.join('\n') : undefined
                                },
                                cmds: {
                                    path: '$.report.cmds',
                                    transformer: (cmds) => cmds ? cmds.join('\n') : undefined
                                }
                            },
                            refs: [],
                            source_location: { ref: { path: 'file_name' } },
                            title: {
                                transformer: (data) => `NeuVector found a vulnerability to ${data.name} in ${data.package_name}/${data.package_version}.`
                            },
                            id: {
                                transformer: (data) => `${data.name}/${data.package_name}/${data.package_version}`
                            },
                            desc: { path: 'description' },
                            impact: {
                                transformer: (data) => data.score_v3 / 10
                            },
                            results: [
                                {
                                    status: inspecjs_1.ExecJSON.ControlResultStatus.Failed,
                                    code_desc: '',
                                    message: {
                                        transformer: (data) => {
                                            const { package_name, package_version, fixed_version } = data;
                                            if (!fixed_version) {
                                                return `Vulnerable package ${package_name} is at version ${package_version}. No fixed version available.`;
                                            }
                                            return `Vulnerable package ${package_name} is at version ${package_version}. Update to fixed version ${fixed_version}.`;
                                        }
                                    },
                                    start_time: ''
                                }
                            ]
                        }
                    ],
                    sha256: ''
                }
            ],
            passthrough: {
                transformer: (data) => {
                    return {
                        auxiliary_data: [
                            {
                                name: 'NeuVector',
                                data: lodash_1.default.omit([
                                    'reports.vulnerabilities',
                                    'reports.cmds',
                                    'reports.envs',
                                    'reports.registry',
                                    'reports.repository',
                                    'reports.tag',
                                    'reports.digest',
                                    'reports.image_id'
                                ])
                            }
                        ],
                        ...(this.withRaw && { raw: data })
                    };
                }
            }
        };
        this.withRaw = withRaw;
        this.rawData = rawParams;
        this.getModules = this.memoizedGetModules();
    }
}
exports.NeuVectorMapper = NeuVectorMapper;
//# sourceMappingURL=neuvector-mapper.js.map