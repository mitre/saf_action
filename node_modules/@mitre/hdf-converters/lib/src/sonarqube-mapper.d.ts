import { ExecJSON } from 'inspecjs';
import { BaseConverter, ILookupPath, MappedTransform } from './base-converter';
export declare type Issue = {
    key: string;
    rule: string;
    severity: string;
    component: string;
    project: string;
    line: number;
    hash: string;
    textRange?: Record<string, unknown>;
    flows: Record<string, unknown>[];
    status: string;
    message: string;
    effort: string;
    debt: string;
    author: string;
    tags: string[];
    creationDate: Date;
    updateDate: Date;
    type: string;
    scope: string;
    snip?: string;
    summary: string;
    sysTags?: string[];
    name?: string;
};
export declare type IssueData = {
    total?: number;
    p?: number;
    ps?: number;
    paging?: Record<string, number>;
    effortTotal?: number;
    issues: Issue[];
    components?: Record<string, unknown>[];
    facets?: any[];
};
export declare class SonarQubeResults {
    data: IssueData;
    sonarQubeHost: string;
    projectId: string;
    userToken: string;
    branchName?: string | undefined;
    pullRequestID?: string | undefined;
    customMapping?: MappedTransform<ExecJSON.Execution, ILookupPath>;
    constructor(sonarQubeHost: string, projectId: string, userToken: string, branchName?: string, pullRequestID?: string);
    toHdf(): Promise<ExecJSON.Execution>;
    getProjectData(): Promise<ExecJSON.Execution>;
}
export declare class SonarQubeMapper extends BaseConverter {
    projectName: string;
    branchName: string;
    pullRequestID: string;
    constructor(issuesJSON: IssueData, projectName: string, branchName?: string, pullRequestID?: string);
}
