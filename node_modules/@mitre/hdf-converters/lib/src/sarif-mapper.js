"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SarifMapper = void 0;
const inspecjs_1 = require("inspecjs");
const lodash_1 = __importDefault(require("lodash"));
const package_json_1 = require("../package.json");
const base_converter_1 = require("./base-converter");
const CweNistMapping_1 = require("./mappings/CweNistMapping");
const global_1 = require("./utils/global");
const IMPACT_MAPPING = new Map([
    ['error', 0.7],
    ['warning', 0.5],
    ['note', 0.3]
]);
const MESSAGE_TEXT = 'message.text';
const CWE_NIST_MAPPING = new CweNistMapping_1.CweNistMapping();
function extractCwe(text) {
    let output = text.split('(').slice(-1)[0].slice(0, -2).split(', ');
    if (output.length === 1) {
        output = text.split('(').slice(-1)[0].slice(0, -2).split('!/');
    }
    return output;
}
function impactMapping(severity) {
    if (typeof severity === 'string' || typeof severity === 'number') {
        return IMPACT_MAPPING.get(severity.toString().toLowerCase()) || 0.1;
    }
    else {
        return 0.1;
    }
}
function formatCodeDesc(input) {
    const output = [];
    output.push(`URL : ${lodash_1.default.get(input, 'artifactLocation.uri')}`);
    output.push(`LINE : ${lodash_1.default.get(input, 'region.startLine')}`);
    output.push(`COLUMN : ${lodash_1.default.get(input, 'region.startColumn')}`);
    return output.join(' ');
}
function nistTag(text) {
    let identifiers = extractCwe(text);
    identifiers = identifiers.map((element) => element.split('-')[1]);
    return CWE_NIST_MAPPING.nistFilter(identifiers, global_1.DEFAULT_STATIC_CODE_ANALYSIS_NIST_TAGS);
}
class SarifMapper extends base_converter_1.BaseConverter {
    constructor(sarifJson, withRaw = false) {
        super(JSON.parse(sarifJson));
        this.mappings = {
            platform: {
                name: 'Heimdall Tools',
                release: package_json_1.version,
                target_id: 'Static Analysis Results Interchange Format'
            },
            version: package_json_1.version,
            statistics: {},
            profiles: [
                {
                    path: 'runs',
                    name: 'SARIF',
                    version: { path: '$.version' },
                    title: 'Static Analysis Results Interchange Format',
                    supports: [],
                    attributes: [],
                    groups: [],
                    status: 'loaded',
                    controls: [
                        {
                            path: 'results',
                            key: 'id',
                            tags: {
                                cci: {
                                    path: 'vulnerabilityClassifications',
                                    transformer: (data) => (0, global_1.getCCIsForNISTTags)(nistTag(data))
                                },
                                nist: { path: MESSAGE_TEXT, transformer: nistTag },
                                cwe: {
                                    path: MESSAGE_TEXT,
                                    transformer: extractCwe
                                }
                            },
                            refs: [],
                            source_location: {
                                transformer: (control) => {
                                    return lodash_1.default.omitBy({
                                        ref: lodash_1.default.get(control, 'locations[0].physicalLocation.artifactLocation.uri'),
                                        line: lodash_1.default.get(control, 'locations[0].physicalLocation.region.startLine')
                                    }, (value) => value === '');
                                }
                            },
                            title: {
                                path: MESSAGE_TEXT,
                                transformer: (text) => {
                                    if (typeof text === 'string') {
                                        return text.split(': ')[0];
                                    }
                                    else {
                                        return '';
                                    }
                                }
                            },
                            id: { path: 'ruleId' },
                            desc: {
                                path: MESSAGE_TEXT,
                                transformer: (text) => {
                                    if (typeof text === 'string') {
                                        return text.split(': ')[1];
                                    }
                                    else {
                                        return '';
                                    }
                                }
                            },
                            impact: { path: 'level', transformer: impactMapping },
                            code: {
                                transformer: (vulnerability) => JSON.stringify(vulnerability, null, 2)
                            },
                            results: [
                                {
                                    status: inspecjs_1.ExecJSON.ControlResultStatus.Failed,
                                    code_desc: {
                                        path: 'locations[0].physicalLocation',
                                        transformer: formatCodeDesc
                                    },
                                    start_time: ''
                                }
                            ]
                        }
                    ],
                    sha256: ''
                }
            ],
            passthrough: {
                transformer: (data) => {
                    let runsData = lodash_1.default.get(data, 'runs');
                    if (Array.isArray(runsData)) {
                        runsData = runsData.map((run) => lodash_1.default.omit(run, ['results']));
                    }
                    return {
                        auxiliary_data: [
                            {
                                name: 'SARIF',
                                data: {
                                    $schema: lodash_1.default.get(data, '$schema'),
                                    runs: runsData
                                }
                            }
                        ],
                        ...(this.withRaw && { raw: data })
                    };
                }
            }
        };
        this.withRaw = withRaw;
    }
}
exports.SarifMapper = SarifMapper;
//# sourceMappingURL=sarif-mapper.js.map