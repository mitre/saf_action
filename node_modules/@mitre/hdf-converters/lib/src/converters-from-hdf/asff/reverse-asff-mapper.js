"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FromHdfToAsffMapper = exports.escapeForwardSlashes = exports.TO_ASFF_TYPES_SLASH_REPLACEMENT = void 0;
const inspecjs_1 = require("inspecjs");
const lodash_1 = __importDefault(require("lodash"));
const reverse_base_converter_1 = require("../reverse-base-converter");
const transformers_1 = require("./transformers");
exports.TO_ASFF_TYPES_SLASH_REPLACEMENT = '{{{SLASH}}}';
function escapeForwardSlashes(s) {
    return lodash_1.default.isString(s)
        ? s.replace(/\//g, exports.TO_ASFF_TYPES_SLASH_REPLACEMENT)
        : JSON.stringify(s).replace(/\//g, exports.TO_ASFF_TYPES_SLASH_REPLACEMENT);
}
exports.escapeForwardSlashes = escapeForwardSlashes;
class FromHdfToAsffMapper extends reverse_base_converter_1.FromHdfBaseConverter {
    constructor(hdfObj, options) {
        super(hdfObj);
        this.mappings = () => ({
            Findings: [
                {
                    SchemaVersion: '2018-10-08',
                    Id: { path: '', transformer: transformers_1.setupId, passParent: true },
                    ProductArn: { path: '', transformer: transformers_1.setupProductARN, passParent: true },
                    AwsAccountId: { path: '', transformer: transformers_1.setupAwsAcct, passParent: true },
                    Types: {
                        transformer: () => ['Software and Configuration Checks']
                    },
                    CreatedAt: { path: '', transformer: transformers_1.setupCreated },
                    UpdatedAt: { path: '', transformer: transformers_1.setupUpdated, passParent: true },
                    ...(this.ioptions.regionAttribute && {
                        Region: { path: '', transformer: transformers_1.setupRegion, passParent: true }
                    }),
                    GeneratorId: {
                        path: '',
                        transformer: transformers_1.setupGeneratorId,
                        passParent: true
                    },
                    Title: { path: '', transformer: transformers_1.setupTitle },
                    Description: { path: '', transformer: transformers_1.setupDescr },
                    FindingProviderFields: {
                        Severity: {
                            Label: { path: '', transformer: transformers_1.setupSevLabel, passParent: true },
                            Original: { path: '', transformer: transformers_1.setupSevLabel, passParent: true }
                        },
                        Types: { path: '', transformer: transformers_1.setupFindingType, passParent: true }
                    },
                    Remediation: {
                        Recommendation: {
                            Text: { path: '', transformer: transformers_1.setupRemRec }
                        }
                    },
                    ProductFields: {
                        Check: { path: '', transformer: transformers_1.setupProdFieldCheck }
                    },
                    Severity: {
                        Label: { path: '', transformer: transformers_1.setupSevLabel, passParent: true },
                        Original: { path: '', transformer: transformers_1.setupSevOriginal }
                    },
                    Resources: [
                        {
                            Type: 'AwsAccount',
                            Id: { path: '', transformer: transformers_1.setupResourcesID, passParent: true },
                            Partition: 'aws',
                            Region: { path: '', transformer: transformers_1.setupRegion, passParent: true }
                        },
                        {
                            Id: { path: '', transformer: transformers_1.setupResourcesID2 },
                            Type: 'AwsIamRole',
                            Details: {
                                AwsIamRole: {
                                    AssumeRolePolicyDocument: {
                                        path: '',
                                        transformer: transformers_1.setupDetailsAssume
                                    }
                                }
                            }
                        }
                    ],
                    Compliance: {
                        RelatedRequirements: {
                            transformer: () => [
                                'SEE REMEDIATION FIELD FOR RESULTS AND RECOMMENDED ACTION(S)'
                            ]
                        },
                        Status: { path: '', transformer: transformers_1.setupControlStatus }
                    }
                }
            ]
        });
        this.impactMapping = new Map([
            [0.9, 'CRITICAL'],
            [0.7, 'HIGH'],
            [0.5, 'MEDIUM'],
            [0.3, 'LOW'],
            [0.0, 'INFORMATIONAL']
        ]);
        this.ioptions = options === undefined ? this.defaultOptions() : options;
        this.counts = (0, transformers_1.statusCount)((0, inspecjs_1.contextualizeEvaluation)(hdfObj));
    }
    defaultOptions() {
        return {
            input: '',
            awsAccountId: '',
            target: 'default',
            region: '',
            regionAttribute: false
        };
    }
    setMappings(customMappings) {
        super.setMappings(customMappings);
    }
    controlsToSegments() {
        const segments = [];
        this.data.profiles.forEach((profile) => {
            profile.controls.reverse().forEach((control) => {
                control.results.forEach((segment) => {
                    segments.push({
                        ...control,
                        result: segment,
                        layersOfControl: (0, transformers_1.getAllLayers)(this.data, control)
                    });
                });
            });
        });
        return segments;
    }
    restrictionAttributesLessThan32KiB(finding) {
        const ATTRIBUTE_CHARACTER_LIMIT = 30000;
        if (finding.Resources.length > 1) {
            lodash_1.default.set(finding, 'Resources[1].Details.AwsIamRole.AssumeRolePolicyDocument', lodash_1.default.get(finding, 'Resources[1].Details.AwsIamRole.AssumeRolePolicyDocument', '').slice(0, ATTRIBUTE_CHARACTER_LIMIT));
        }
        finding.FindingProviderFields.Types = finding.FindingProviderFields.Types
            .map((typeString) => {
            if (typeString.length <= ATTRIBUTE_CHARACTER_LIMIT) {
                return typeString;
            }
            const [type, attribute, value] = typeString.split('/');
            return lodash_1.default.chunk(value, ATTRIBUTE_CHARACTER_LIMIT -
                (type.length + attribute.length + 2)).map((chunk) => `${type}/${attribute}/${chunk.join('')}`);
        })
            .flat();
        return finding;
    }
    restrictionFindingLessThan240KB(profileInfoFindingId, finding, numRemoved, numTruncated) {
        const SIZE_CAP = 200000;
        const originalSize = new TextEncoder().encode(JSON.stringify(finding)).length;
        let size = originalSize;
        let popped;
        while (size > SIZE_CAP &&
            finding.FindingProviderFields.Types.length > 0) {
            popped = finding.FindingProviderFields.Types.pop();
            size = new TextEncoder().encode(JSON.stringify(finding)).length;
        }
        if (size > SIZE_CAP) {
            console.error(`Warning: Normalized entry could not be sufficiently reduced in size to meet AWS Security Hub requirements and so will not be provided in the results set.  Entry could not be minimized more than as follows:
            ${finding}`);
            if (finding.Id === profileInfoFindingId) {
                console.error('Warning: This was the informational entry that contains the scan/execution level information.');
            }
            if (finding.Id !== profileInfoFindingId) {
                numRemoved++;
            }
            return [undefined, numRemoved, numTruncated];
        }
        if (originalSize !== size) {
            finding.FindingProviderFields.Types.push(new TextDecoder().decode(new TextEncoder().encode(popped).subarray(0, SIZE_CAP - size)));
            finding.FindingProviderFields.Types.push('HDF2ASFF-converter/warning/Not all information was captured in this entry.  Please consult the original file for all of the information.');
            console.error(`Warning: Normalized entry was truncated in size to meet AWS Security Hub requirements.  Entry id: ${finding.Id}`);
            if (finding.Id !== profileInfoFindingId) {
                numTruncated++;
            }
        }
        return [finding, numRemoved, numTruncated];
    }
    restrictionTypesArrayLengthLessThan50(profileInfoFindingId, finding, numTruncated) {
        const cutoff = finding.FindingProviderFields.Types.splice(50, finding.FindingProviderFields.Types.length - 50);
        if (cutoff.length > 0) {
            finding.FindingProviderFields.Types.pop();
            finding.FindingProviderFields.Types.push(`HDF2ASFF-converter/warning/Not all information was captured in this entry.  Please consult the original file for all of the information.`);
            console.error(`Warning: Normalized entry was truncated in size to meet AWS Security Hub requirements.  Entry id: ${finding.Id}`);
            if (finding.Id !== profileInfoFindingId) {
                numTruncated++;
            }
        }
        return [finding, numTruncated];
    }
    restrictionTypesArrayMustBeUnique(profileInfoFindingId, finding, numRemoved) {
        if (finding.FindingProviderFields.Types.length !==
            new Set(finding.FindingProviderFields.Types).size) {
            console.error(`Warning: Normalized entry contained data that is duplicated (i.e. a subsection of a string by happenstance has the same values) which means this entry does not meet AWS Security Hub requirements and so will not be provided in the results set.  Entry that contains duplicate data is as follows:
            ${finding}`);
            if (finding.Id === profileInfoFindingId) {
                console.error('Warning: This was the informational entry that contains the scan/execution level information.');
            }
            if (finding.Id !== profileInfoFindingId) {
                numRemoved++;
            }
            return [undefined, numRemoved];
        }
        return [finding, numRemoved];
    }
    restrictToSchemaSizes(resList) {
        const profileInfoFindingId = resList.slice(-1)[0].Id;
        let numRemoved = 0;
        let numTruncated = 0;
        const restrictedResults = [];
        for (const f of resList) {
            let finding = f;
            finding = this.restrictionAttributesLessThan32KiB(finding);
            [finding, numRemoved, numTruncated] =
                this.restrictionFindingLessThan240KB(profileInfoFindingId, finding, numRemoved, numTruncated);
            if (!finding) {
                continue;
            }
            [finding, numTruncated] = this.restrictionTypesArrayLengthLessThan50(profileInfoFindingId, finding, numTruncated);
            [finding, numRemoved] = this.restrictionTypesArrayMustBeUnique(profileInfoFindingId, finding, numRemoved);
            if (!finding) {
                continue;
            }
            restrictedResults.push(finding);
        }
        if ((numRemoved > 0 || numTruncated > 0) &&
            restrictedResults.slice(-1)[0].Id === profileInfoFindingId) {
            restrictedResults.slice(-1)[0].Description = `${restrictedResults.slice(-1)[0].Description} ---- MITRE SAF HDF2ASFF converter warnings -- Entries truncated: ${numTruncated} (Truncated to fit AWS Security Hub restrictions) --- Entries removed: ${numRemoved} (Could not fit due to AWS Security Hub restrictions)`;
        }
        return restrictedResults;
    }
    toAsff() {
        if (this.mappings() === undefined) {
            throw new Error('Mappings must be provided');
        }
        else {
            let resList = this.controlsToSegments().map((segment, index) => {
                this.index = index;
                return this.convertInternal(segment, this.mappings())['Findings'][0];
            });
            resList.push((0, transformers_1.createProfileInfoFinding)(this.data, this.ioptions));
            resList = this.restrictToSchemaSizes(resList);
            return resList;
        }
    }
}
exports.FromHdfToAsffMapper = FromHdfToAsffMapper;
//# sourceMappingURL=reverse-asff-mapper.js.map