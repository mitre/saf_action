import { ContextualizedEvaluation, ExecJSON } from 'inspecjs';
import { IFindingASFF, IOptions } from './asff-types';
import { FromHdfToAsffMapper, SegmentedControl } from './reverse-asff-mapper';
declare type Counts = {
    Passed: number;
    PassedTests: number;
    Failed: number;
    FailedTests: number;
    PassingTestsFailedControl: number;
    NotApplicable: number;
    NotReviewed: number;
};
export declare function escapeForwardSlashes<T>(s: T): T;
export declare function getRunTime(hdf: ExecJSON.Execution): string;
export declare function createProfileInfoFinding(hdf: ExecJSON.Execution, options: IOptions): IFindingASFF;
export declare function statusCount(evaluation: ContextualizedEvaluation): Counts;
export declare function createDescription(counts: Counts): string;
export declare function createAssumeRolePolicyDocument(layersOfControl: ExecJSON.Control[], segment: ExecJSON.ControlResult): string;
export declare function sliceIntoChunks(arr: any[], chunkSize: number): any[][];
export declare function cleanText(text?: string | null): string | undefined;
export declare function getAllLayers(hdf: ExecJSON.Execution, knownControl: ExecJSON.Control): (ExecJSON.Control & Record<string, unknown>)[];
export declare function createNote(segment: ExecJSON.ControlResult): string;
export declare function createCode(control: ExecJSON.Control & {
    profileInfo?: Record<string, unknown>;
}): string;
export declare function setupId(control: SegmentedControl, context?: FromHdfToAsffMapper): string;
export declare function setupProductARN(_val: SegmentedControl, context?: FromHdfToAsffMapper): string;
export declare function setupAwsAcct(_val: SegmentedControl, context?: FromHdfToAsffMapper): string | undefined;
export declare function setupCreated(control: SegmentedControl): string;
export declare function setupRegion(_val: SegmentedControl, context?: FromHdfToAsffMapper): string | undefined;
export declare function setupUpdated(_control: SegmentedControl, context?: FromHdfToAsffMapper): string;
export declare function setupGeneratorId(control: SegmentedControl, context?: FromHdfToAsffMapper): string;
export declare function setupTitle(control: SegmentedControl): string;
export declare function setupDescr(control: SegmentedControl): string;
export declare function setupSevLabel(control: SegmentedControl, context?: FromHdfToAsffMapper): string;
export declare function setupSevOriginal(control: SegmentedControl): string;
export declare function setupFindingType(control: SegmentedControl, context?: FromHdfToAsffMapper): string[];
export declare function getFixForControl(control: SegmentedControl): any;
export declare function setupRemRec(control: SegmentedControl): string;
export declare function setupProdFieldCheck(control: SegmentedControl): string;
export declare function setupResourcesID(_val: SegmentedControl, context?: FromHdfToAsffMapper): string;
export declare function setupResourcesID2(control: SegmentedControl): string;
export declare function setupDetailsAssume(control: SegmentedControl): string;
export declare function setupControlStatus(control: SegmentedControl): string;
export {};
