import { AxiosInstance } from 'axios';
import { ContextualizedControl, ContextualizedEvaluation, ContextualizedProfile, ExecJSON } from 'inspecjs';
import { Logger } from 'winston';
import { SplunkConfig } from '../../../types/splunk-config-types';
import { SplunkControl } from '../../../types/splunk-control-types';
import { SplunkProfile } from '../../../types/splunk-profile-types';
import { SplunkReport } from '../../../types/splunk-report-types';
import { MappedTransform } from '../../base-converter';
import { FromAnyBaseConverter } from '../reverse-any-base-converter';
import { ILookupPathFH } from '../reverse-base-converter';
export declare type SplunkData = {
    profiles: SplunkProfile[];
    controls: SplunkControl[];
    reports: SplunkReport[];
};
export declare function createGUID(length: number): string;
export declare function contextualizeIfNeeded(data: ExecJSON.Execution | ContextualizedEvaluation): ContextualizedEvaluation;
export declare function createReportMapping(execution: ContextualizedEvaluation, filename: string, guid: string): MappedTransform<SplunkReport, ILookupPathFH>;
export declare function getDependencies(profile?: ContextualizedProfile, execution?: ContextualizedEvaluation): string[];
export declare function getProfileRunLevel(profile: ContextualizedProfile, execution: ContextualizedEvaluation): number;
export declare function createProfileMapping(filename: string, guid: string): MappedTransform<SplunkProfile, ILookupPathFH>;
export declare function createControlMapping(control: ContextualizedControl, profile: ContextualizedProfile, execution: ContextualizedEvaluation, filename: string, guid: string): MappedTransform<SplunkControl, ILookupPathFH>;
export declare class FromHDFExecutionToSplunkExecutionMapper extends FromAnyBaseConverter {
    constructor(evaluation: ContextualizedEvaluation, filename: string, guid: string);
    toSplunkExecution(): import("../../base-converter").MappedReform<any, ILookupPathFH>;
}
export declare class FromHDFProfileToSplunkProfileMapper extends FromAnyBaseConverter {
    constructor(profile: ContextualizedProfile, filename: string, guid: string);
    toSplunkProfile(): import("../../base-converter").MappedReform<any, ILookupPathFH>;
}
export declare class FromHDFControlToSplunkControlMapper extends FromAnyBaseConverter {
    constructor(control: ContextualizedControl, profile: ContextualizedProfile, execution: ContextualizedEvaluation, filename: string, guid: string);
    toSplunkControl(): import("../../base-converter").MappedReform<any, ILookupPathFH>;
}
export declare class FromHDFToSplunkMapper extends FromAnyBaseConverter {
    mappings?: MappedTransform<SplunkData, ILookupPathFH>;
    contextualizedEvaluation?: ContextualizedEvaluation;
    axiosInstance: AxiosInstance;
    constructor(data: ExecJSON.Execution | ContextualizedEvaluation, logService?: Logger, loggingLevel?: string);
    createSplunkData(guid: string, filename: string): SplunkData;
    uploadSplunkData(config: SplunkConfig, targetIndex: any, splunkData: SplunkData): Promise<void>;
    toSplunk(config: SplunkConfig, filename: string): Promise<string>;
}
