import splunkjs from '@mitre/splunk-sdk-no-env';
import { ContextualizedControl, ContextualizedEvaluation, ContextualizedProfile, ExecJSON } from 'inspecjs';
import { Logger } from 'winston';
import { MappedTransform } from '../../base-converter';
import { FromAnyBaseConverter } from '../reverse-any-base-converter';
import { ILookupPathFH } from '../reverse-base-converter';
import { SplunkControl } from './splunk-control-types';
import { SplunkProfile } from './splunk-profile-types';
import { SplunkReport } from './splunk-report-types';
export declare type SplunkConfig = {
    scheme: string;
    host: string;
    port?: number;
    username?: string;
    password?: string;
    index: string;
    owner?: string;
    app?: string;
    sessionKey?: string;
    autologin?: boolean;
    version?: string;
};
export declare type SplunkData = {
    profiles: SplunkProfile[];
    controls: SplunkControl[];
    reports: SplunkReport[];
};
export declare function createGUID(length: number): string;
export declare function contextualizeIfNeeded(data: ExecJSON.Execution | ContextualizedEvaluation): ContextualizedEvaluation;
export declare function createReportMapping(execution: ContextualizedEvaluation, filename: string, guid: string): MappedTransform<SplunkReport, ILookupPathFH>;
export declare function getDependencies(profile?: ContextualizedProfile, execution?: ContextualizedEvaluation): string[];
export declare function getProfileRunLevel(profile: ContextualizedProfile, execution: ContextualizedEvaluation): number;
export declare function createProfileMapping(filename: string, guid: string): MappedTransform<SplunkProfile, ILookupPathFH>;
export declare function createControlMapping(control: ContextualizedControl, profile: ContextualizedProfile, execution: ContextualizedEvaluation, filename: string, guid: string): MappedTransform<SplunkControl, ILookupPathFH>;
export declare class FromHDFExecutionToSplunkExecutionMapper extends FromAnyBaseConverter {
    constructor(evaluation: ContextualizedEvaluation, filename: string, guid: string);
    toSplunkExecution(): import("../../base-converter").MappedReform<any, ILookupPathFH>;
}
export declare class FromHDFProfileToSplunkProfileMapper extends FromAnyBaseConverter {
    constructor(profile: ContextualizedProfile, filename: string, guid: string);
    toSplunkProfile(): import("../../base-converter").MappedReform<any, ILookupPathFH>;
}
export declare class FromHDFControlToSplunkControlMapper extends FromAnyBaseConverter {
    constructor(control: ContextualizedControl, profile: ContextualizedProfile, execution: ContextualizedEvaluation, filename: string, guid: string);
    toSplunkControl(): import("../../base-converter").MappedReform<any, ILookupPathFH>;
}
export declare class FromHDFToSplunkMapper extends FromAnyBaseConverter {
    mappings?: MappedTransform<SplunkData, ILookupPathFH>;
    contextualizedEvaluation?: ContextualizedEvaluation;
    constructor(data: ExecJSON.Execution | ContextualizedEvaluation, logService?: Logger, loggingLevel?: string);
    createSplunkData(guid: string, filename: string): SplunkData;
    uploadSplunkData(targetIndex: splunkjs.Index, splunkData: SplunkData): Promise<void>;
    handleSplunkError(error?: Record<string, unknown>): void;
    toSplunk(config: SplunkConfig, filename: string, webCompatibility?: boolean): Promise<string>;
}
