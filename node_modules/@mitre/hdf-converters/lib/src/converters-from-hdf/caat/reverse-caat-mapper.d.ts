import * as XLSX from '@e965/xlsx';
import { CanonizationConfig, ContextualizedControl, ContextualizedEvaluation, ExecJSON, HDFControl } from 'inspecjs';
export declare type InputData = {
    data: string | ExecJSON.Execution | ContextualizedEvaluation;
    filename?: string;
    controls?: ContextualizedControl[];
};
declare type Data = InputData & {
    data: ContextualizedEvaluation;
    filename: string;
};
export declare const CAATHeaders: readonly ["Control Number", "Finding Title", "Date Identified", "Finding ID", "Information System or Program Name", "Repeat Findings", "Repeat Finding Weakness ID", "Finding Description", "Weakness Description", "Control Weakness Type", "Source", "Assessment/Audit Company", "Test Method", "Test Objective", "Test Result Description", "Test Result", "Recommended Corrective Action(s)", "Effect on Business", "Likelihood", "Impact"];
export declare type CAATRow = Partial<Record<(typeof CAATHeaders)[number], string | undefined>>;
export declare class FromHDFToCAATMapper {
    static readonly MaxCellSize = 32000;
    static readonly MaxSheetNameLength = 31;
    static readonly NistCanonizationConfig: CanonizationConfig;
    static readonly FileSettings: XLSX.Properties;
    static readonly SheetOptions: XLSX.JSON2SheetOpts;
    static formatDate(date: Date, delimiter: string): string;
    static fix(str?: string | null): string;
    data: Data[];
    constructor(data: InputData | InputData[]);
    newCaveat(hdf: HDFControl): string;
    newTestResultDescription(hdf: HDFControl): string;
    newTestResult(hdf: HDFControl): string;
    newImpact(hdf: HDFControl): string;
    getRow(control: ContextualizedControl, filename: string): CAATRow[];
    toCAAT(returnWorkBook?: boolean, options?: XLSX.WritingOptions): any;
}
export {};
