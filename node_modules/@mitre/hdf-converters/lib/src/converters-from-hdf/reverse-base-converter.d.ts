import { ExecJSON } from 'inspecjs';
import { MappedReform, MappedTransform, ObjectEntryValue } from '../base-converter';
export interface ILookupPathFH {
    path?: string;
    transformer?: (value: any, context?: any) => unknown;
    arrayTransformer?: (value: unknown[], file: ExecJSON.Execution) => unknown[];
    key?: string;
    passParent?: boolean;
    default?: any;
}
export declare class FromHdfBaseConverter {
    data: ExecJSON.Execution;
    mappings?: MappedTransform<any, ILookupPathFH>;
    collapseResults: boolean;
    constructor(data: ExecJSON.Execution, collapseResults?: boolean);
    setMappings(mappings: MappedTransform<any, ILookupPathFH>): void;
    convertInternal<T>(file: object, fields: T): MappedReform<T, ILookupPathFH>;
    objectMap<T, V>(obj: T, fn: (v: ObjectEntryValue<T>) => V): {
        [K in keyof T]: V;
    };
    evaluate<T extends object & ILookupPathFH>(file: object, v: T | Array<T>): T | Array<T> | MappedReform<T, ILookupPathFH>;
    handleArray<T extends ILookupPathFH>(file: object, v: Array<T & ILookupPathFH>): Array<T>;
    handlePath(file: object, path: string): unknown;
    hasPath(file: object, path: string): boolean;
}
