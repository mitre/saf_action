"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FromHdfBaseConverter = void 0;
const lodash_1 = __importDefault(require("lodash"));
class FromHdfBaseConverter {
    constructor(data, collapseResults = false) {
        this.data = data;
        this.collapseResults = collapseResults;
    }
    setMappings(mappings) {
        this.mappings = mappings;
    }
    convertInternal(file, fields) {
        const result = this.objectMap(fields, (v) => this.evaluate(file, v));
        return result;
    }
    objectMap(obj, fn) {
        return Object.fromEntries(Object.entries(obj).map(([k, v]) => [k, fn(v)]));
    }
    evaluate(file, v) {
        const transformer = lodash_1.default.get(v, 'transformer');
        if (Array.isArray(v)) {
            return this.handleArray(file, v);
        }
        if (typeof v === 'string' ||
            typeof v === 'number' ||
            typeof v === 'boolean' ||
            v === undefined ||
            v === null) {
            return v;
        }
        if (typeof transformer === 'function') {
            if (!v.path) {
                if (v.passParent) {
                    return transformer(file, this);
                }
                else {
                    return transformer(file);
                }
            }
            else {
                if (v.passParent) {
                    return transformer(this.handlePath(file, v.path), this);
                }
                else {
                    return transformer(this.handlePath(file, v.path));
                }
            }
        }
        else {
            if (v.path) {
                return this.handlePath(file, v.path);
            }
        }
        return this.convertInternal(file, v);
    }
    handleArray(file, v) {
        const resultingData = [];
        if (v[0] && !v[0].path) {
            const arrayTransformer = v[0].arrayTransformer;
            let output = v.map((element) => this.evaluate(file, element));
            if (arrayTransformer) {
                output = arrayTransformer(output, this.data);
            }
            resultingData.push(...output);
        }
        else if (v[0] && v[0].path) {
            const path = v[0].path;
            const arrayTransformer = v[0].arrayTransformer;
            const transformer = v[0].transformer;
            if (this.hasPath(file, path)) {
                const pathVal = this.handlePath(file, path);
                if (Array.isArray(pathVal)) {
                    v = pathVal.map((element) => this.convertInternal(element, v[0]));
                    if (arrayTransformer) {
                        v = arrayTransformer(v, this.data);
                    }
                    resultingData.push(...v);
                }
                else {
                    if (transformer) {
                        resultingData.push(transformer(this.handlePath(file, path)));
                    }
                    else {
                        resultingData.push(this.handlePath(file, path));
                    }
                }
            }
        }
        const uniqueResults = [];
        resultingData.forEach((result) => {
            if (!uniqueResults.some((uniqueResult) => lodash_1.default.isEqual(result, uniqueResult))) {
                uniqueResults.push(result);
            }
        });
        return uniqueResults;
    }
    handlePath(file, path) {
        if (path.startsWith('$.')) {
            return lodash_1.default.get(this.data, path.slice(2));
        }
        else {
            return lodash_1.default.get(file, path);
        }
    }
    hasPath(file, path) {
        if (path.startsWith('$.')) {
            return lodash_1.default.has(this.data, path.slice(2));
        }
        else {
            return lodash_1.default.has(file, path);
        }
    }
}
exports.FromHdfBaseConverter = FromHdfBaseConverter;
//# sourceMappingURL=reverse-base-converter.js.map