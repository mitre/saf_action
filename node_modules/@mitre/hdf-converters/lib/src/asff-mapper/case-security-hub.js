"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSecurityHub = void 0;
const html_entities_1 = require("html-entities");
const _ = __importStar(require("lodash"));
const AwsConfigMapping_1 = require("../mappings/AwsConfigMapping");
const FINDING_STANDARDS_CONTROL_ARN = 'ProductFields.StandardsControlArn';
function correspondingControl(controls, finding) {
    return controls.find((control) => _.get(control, 'StandardsControlArn') ===
        _.get(finding, FINDING_STANDARDS_CONTROL_ARN));
}
function securityhubSupportingDocs(standards) {
    let controls;
    try {
        if (Array.isArray(standards)) {
            controls = standards
                .map((standard) => _.get(JSON.parse(standard), 'Controls'))
                .flat();
        }
        else {
            controls = null;
        }
    }
    catch (error) {
        throw new Error(`Invalid supporting docs for Security Hub:\nException: ${error}`);
    }
    const AWS_CONFIG_MAPPING = new AwsConfigMapping_1.AwsConfigMapping();
    return {
        controls,
        awsConfigMapping: AWS_CONFIG_MAPPING
    };
}
function findingId(finding, { controls = null }) {
    let control;
    if (controls !== null &&
        (control = correspondingControl(controls, finding)) !== null) {
        return (0, html_entities_1.encode)(_.get(control, 'ControlId'));
    }
    else if (_.has(finding, 'ProductFields.ControlId')) {
        return _.get(finding, 'ProductFields.ControlId');
    }
    else if (_.has(finding, 'ProductFields.RuleId')) {
        return (0, html_entities_1.encode)(_.get(finding, 'ProductFields.RuleId'));
    }
    else {
        return (0, html_entities_1.encode)(_.get(finding, 'GeneratorId')
            .split('/')
            .slice(-1)[0]);
    }
}
function findingImpact(finding, { controls = null }) {
    let impact;
    let control;
    if (controls !== null &&
        (control = correspondingControl(controls, finding)) !== null) {
        impact = _.get(control, 'SeverityRating');
    }
    else {
        impact =
            _.get(finding, 'Severity.Label') ||
                _.get(finding, 'Severity.Normalized') / 100.0;
        if (typeof impact === 'string' && impact === 'INFORMATIONAL') {
            impact = 'MEDIUM';
        }
    }
    return impact;
}
function findingNistTag(finding, { awsConfigMapping }) {
    if (_.get(finding, 'ProductFields.RelatedAWSResources:0/type') !==
        'AWS::Config::ConfigRule') {
        return [];
    }
    return awsConfigMapping.searchNIST([
        _.get(finding, 'ProductFields.RelatedAWSResources:0/name')
    ]);
}
function findingTitle(finding, { controls = null }) {
    let control;
    if (controls !== null &&
        (control = correspondingControl(controls, finding)) !== null) {
        return (0, html_entities_1.encode)(_.get(control, 'Title'));
    }
    else {
        return (0, html_entities_1.encode)(_.get(finding, 'Title'));
    }
}
function productName(findings) {
    const finding = Array.isArray(findings) ? findings[0] : findings;
    let standardName;
    if (_.get(finding, 'Types[0]')
        .split('/')
        .slice(-1)[0]
        .replace(/-/gi, ' ')
        .toLowerCase() ===
        _.get(finding, FINDING_STANDARDS_CONTROL_ARN)
            .split('/')
            .slice(-4)[0]
            .replace(/-/gi, ' ')
            .toLowerCase()) {
        standardName = _.get(finding, 'Types[0]')
            .split('/')
            .slice(-1)[0]
            .replace(/-/gi, ' ');
    }
    else {
        standardName = _.get(finding, FINDING_STANDARDS_CONTROL_ARN)
            .split('/')
            .slice(-4)[0]
            .replace(/-/gi, ' ')
            .split(/\s+/)
            .map((element) => {
            return element.charAt(0).toUpperCase() + element.slice(1);
        })
            .join(' ');
    }
    return (0, html_entities_1.encode)(`${standardName} v${_.get(finding, FINDING_STANDARDS_CONTROL_ARN)
        .split('/')
        .slice(-2)[0]}`);
}
function filename(findingInfo) {
    return `${productName(findingInfo[0])}.json`;
}
function getSecurityHub() {
    return {
        securityhubSupportingDocs,
        findingId,
        findingImpact,
        findingNistTag,
        findingTitle,
        productName,
        filename
    };
}
exports.getSecurityHub = getSecurityHub;
//# sourceMappingURL=case-security-hub.js.map