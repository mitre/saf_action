"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSecurityHub = void 0;
const html_entities_1 = require("html-entities");
const lodash_1 = __importDefault(require("lodash"));
const AwsConfigMapping_1 = require("../mappings/AwsConfigMapping");
const FINDING_STANDARDS_CONTROL_ARN = 'ProductFields.StandardsControlArn';
function correspondingControl(controls, finding) {
    return controls.find((control) => lodash_1.default.get(control, 'StandardsControlArn') ===
        lodash_1.default.get(finding, FINDING_STANDARDS_CONTROL_ARN));
}
function securityhubSupportingDocs(standards) {
    let controls;
    try {
        if (Array.isArray(standards)) {
            controls = standards
                .map((standard) => lodash_1.default.get(JSON.parse(standard), 'Controls'))
                .flat();
        }
        else {
            controls = null;
        }
    }
    catch (error) {
        throw new Error(`Invalid supporting docs for Security Hub:\nException: ${error}`);
    }
    const AWS_CONFIG_MAPPING = new AwsConfigMapping_1.AwsConfigMapping();
    return {
        controls,
        awsConfigMapping: AWS_CONFIG_MAPPING
    };
}
function findingId(finding, { controls = null }) {
    let control;
    if (controls !== null &&
        (control = correspondingControl(controls, finding)) !== null) {
        return (0, html_entities_1.encode)(lodash_1.default.get(control, 'ControlId'));
    }
    else if (lodash_1.default.has(finding, 'ProductFields.ControlId')) {
        return lodash_1.default.get(finding, 'ProductFields.ControlId');
    }
    else if (lodash_1.default.has(finding, 'ProductFields.RuleId')) {
        return (0, html_entities_1.encode)(lodash_1.default.get(finding, 'ProductFields.RuleId'));
    }
    else {
        return (0, html_entities_1.encode)(lodash_1.default.get(finding, 'GeneratorId')
            .split('/')
            .slice(-1)[0]);
    }
}
function findingImpact(finding, { controls = null }) {
    let impact;
    let control;
    if (controls !== null &&
        (control = correspondingControl(controls, finding)) !== null) {
        impact = lodash_1.default.get(control, 'SeverityRating');
    }
    else {
        impact =
            lodash_1.default.get(finding, 'Severity.Label') ||
                lodash_1.default.get(finding, 'Severity.Normalized') / 100.0;
        if (typeof impact === 'string' && impact === 'INFORMATIONAL') {
            impact = 'MEDIUM';
        }
    }
    return impact;
}
function findingNistTag(finding, { awsConfigMapping }) {
    if (lodash_1.default.get(finding, 'ProductFields.RelatedAWSResources:0/type') !==
        'AWS::Config::ConfigRule') {
        return [];
    }
    return awsConfigMapping.searchNIST([
        lodash_1.default.get(finding, 'ProductFields.RelatedAWSResources:0/name')
    ]);
}
function findingTitle(finding, { controls = null }) {
    let control;
    if (controls !== null &&
        (control = correspondingControl(controls, finding)) !== null) {
        return (0, html_entities_1.encode)(lodash_1.default.get(control, 'Title'));
    }
    else {
        return (0, html_entities_1.encode)(lodash_1.default.get(finding, 'Title'));
    }
}
function productName(findings) {
    const finding = Array.isArray(findings) ? findings[0] : findings;
    let standardName;
    if (lodash_1.default.get(finding, 'Types[0]')
        .split('/')
        .slice(-1)[0]
        .replace(/-/gi, ' ')
        .toLowerCase() ===
        lodash_1.default.get(finding, FINDING_STANDARDS_CONTROL_ARN)
            .split('/')
            .slice(-4)[0]
            .replace(/-/gi, ' ')
            .toLowerCase()) {
        standardName = lodash_1.default.get(finding, 'Types[0]')
            .split('/')
            .slice(-1)[0]
            .replace(/-/gi, ' ');
    }
    else {
        standardName = lodash_1.default.get(finding, FINDING_STANDARDS_CONTROL_ARN)
            .split('/')
            .slice(-4)[0]
            .replace(/-/gi, ' ')
            .split(/\s+/)
            .map((element) => {
            return element.charAt(0).toUpperCase() + element.slice(1);
        })
            .join(' ');
    }
    return (0, html_entities_1.encode)(`${standardName} v${lodash_1.default.get(finding, FINDING_STANDARDS_CONTROL_ARN)
        .split('/')
        .slice(-2)[0]}`);
}
function filename(findingInfo) {
    return `${productName(findingInfo[0])}.json`;
}
function getSecurityHub() {
    return {
        securityhubSupportingDocs,
        findingId,
        findingImpact,
        findingNistTag,
        findingTitle,
        productName,
        filename
    };
}
exports.getSecurityHub = getSecurityHub;
//# sourceMappingURL=case-security-hub.js.map