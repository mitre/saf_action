"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTrivy = void 0;
const html_entities_1 = require("html-entities");
const inspecjs_1 = require("inspecjs");
const _ = __importStar(require("lodash"));
const global_1 = require("../utils/global");
function findingId(finding) {
    const generatorId = _.get(finding, 'GeneratorId');
    const cveId = _.get(finding, 'Resources[0].Details.Other.CVE ID');
    if (typeof cveId === 'string') {
        return (0, html_entities_1.encode)(`${generatorId}/${cveId}`);
    }
    else {
        const id = _.get(finding, 'Id');
        return (0, html_entities_1.encode)(`${generatorId}/${id}`);
    }
}
function findingNistTag(finding) {
    const cveId = _.get(finding, 'Resources[0].Details.Other.CVE ID');
    if (typeof cveId === 'string') {
        return global_1.DEFAULT_UPDATE_REMEDIATION_NIST_TAGS;
    }
    else {
        return [];
    }
}
function subfindingsStatus() {
    return inspecjs_1.ExecJSON.ControlResultStatus.Failed;
}
function subfindingsMessage(finding) {
    const cveId = _.get(finding, 'Resources[0].Details.Other.CVE ID');
    if (typeof cveId === 'string') {
        const patchedPackage = _.get(finding, 'Resources[0].Details.Other.Patched Package');
        const patchedVersionMessage = patchedPackage.length === 0
            ? 'There is no patched version of the package.'
            : `The package has been patched since version(s): ${patchedPackage}.`;
        return `For package ${_.get(finding, 'Resources[0].Details.Other.PkgName')}, the current version that is installed is ${_.get(finding, 'Resources[0].Details.Other.Installed Package')}.  ${patchedVersionMessage}`;
    }
    else {
        return undefined;
    }
}
function productName() {
    return 'Aqua Security - Trivy';
}
function titlePrefix() {
    return '';
}
function filename() {
    return `${productName()}.json`;
}
function meta() {
    return { name: 'Trivy', title: 'Trivy Findings' };
}
function getTrivy() {
    return {
        findingId,
        findingNistTag,
        subfindingsStatus,
        subfindingsMessage,
        titlePrefix,
        productName,
        filename,
        meta
    };
}
exports.getTrivy = getTrivy;
//# sourceMappingURL=case-trivy.js.map