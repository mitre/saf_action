"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DependencyTrackMapper = void 0;
const inspecjs_1 = require("inspecjs");
const _ = __importStar(require("lodash"));
const package_json_1 = require("../package.json");
const base_converter_1 = require("./base-converter");
const CweNistMapping_1 = require("./mappings/CweNistMapping");
const global_1 = require("./utils/global");
const IMPACT_MAPPING = new Map([
    ['critical', 0.9],
    ['high', 0.7],
    ['medium', 0.5],
    ['low', 0.3],
    ['info', 0],
    ['unassigned', 0.5]
]);
const CWE_NIST_MAPPING = new CweNistMapping_1.CweNistMapping();
function nistTags(input) {
    const cwes = input.map((cweId) => cweId.toString());
    return CWE_NIST_MAPPING.nistFilter(cwes, global_1.DEFAULT_STATIC_CODE_ANALYSIS_NIST_TAGS);
}
function getVersion(file) {
    return `${_.get(file, 'version')} ${_.get(file, 'meta.version')}`;
}
function getTitle(finding) {
    const title = _.get(finding, 'vulnerability.title');
    return `${_.get(finding, 'component.purl')}${title ? ' - ' + title : ''}`;
}
function getCweIds(cwes) {
    if (!cwes) {
        return [];
    }
    return cwes.map(({ cweId }) => cweId);
}
function getCweNames(cwes) {
    if (!cwes) {
        return [];
    }
    return cwes.map(({ name }) => name);
}
class DependencyTrackMapper extends base_converter_1.BaseConverter {
    constructor(dtJson, withRaw = false) {
        super(JSON.parse(dtJson));
        this.mappings = {
            platform: {
                name: { path: 'meta.application' },
                release: { transformer: getVersion },
                target_id: { path: 'meta.baseUrl' }
            },
            version: package_json_1.version,
            statistics: {},
            profiles: [
                {
                    name: { path: 'project.uuid' },
                    version: { path: 'project.version' },
                    title: { path: 'project.name' },
                    summary: { path: 'project.description' },
                    supports: [],
                    attributes: [],
                    groups: [],
                    status: 'loaded',
                    controls: [
                        {
                            path: 'findings',
                            key: 'id',
                            tags: {
                                cweIds: { path: 'vulnerability.cwes', transformer: getCweIds },
                                cweNames: { path: 'vulnerability.cwes', transformer: getCweNames },
                                nist: {
                                    path: 'vulnerability.cwes',
                                    transformer: (cwes) => nistTags(getCweIds(cwes))
                                },
                                cci: {
                                    path: 'vulnerability.cwes',
                                    transformer: (cwes) => (0, global_1.getCCIsForNISTTags)(nistTags(getCweIds(cwes)))
                                },
                                componentUuid: { path: 'component.uuid' },
                                componentName: { path: 'component.name' },
                                componentGroup: { path: 'component.group' },
                                componentVersion: { path: 'component.version' },
                                componentLatestVersion: { path: 'component.latestVersion' },
                                componentPurl: { path: 'component.purl' },
                                componentCpe: { path: 'component.cpe' },
                                componentProject: { path: 'component.project' },
                                vulnerabilityUuid: { path: 'vulnerability.uuid' },
                                vulnerabilitySource: { path: 'vulnerability.source' },
                                vulnerabilityVulnId: { path: 'vulnerability.vulnId' },
                                vulnerabilityTitle: { path: 'vulnerability.title' },
                                vulnerabilitySubtitle: { path: 'vulnerability.subtitle' },
                                vulnerabilityAliases: {
                                    path: 'vulnerability.aliases',
                                    transformer: (aliases) => JSON.stringify(aliases, null, 2)
                                },
                                vulnerabilityCvssV2BaseScore: {
                                    path: 'vulnerability.cvssV2BaseScore'
                                },
                                vulnerabilityCvssV3BaseScore: {
                                    path: 'vulnerability.cvssV3BaseScore'
                                },
                                vulnerabilityOwaspLikelihoodScore: {
                                    path: 'vulnerability.owaspLikelihoodScore'
                                },
                                vulnerabilityOwaspTechnicalImpactScore: {
                                    path: 'vulnerability.owaspTechnicalImpactScore'
                                },
                                vulnerabilityOwaspBusinessImpactScore: {
                                    path: 'vulnerability.owaspBusinessImpactScore'
                                },
                                vulnerabilitySeverityRank: { path: 'vulnerability.severityRank' },
                                vulnerabilityEpssScore: { path: 'vulnerability.epssScore' },
                                vulnerabilityEpssPercentile: {
                                    path: 'vulnerability.epssPercentile'
                                },
                                vulnerabilityCweId: { path: 'vulnerability.cweId' },
                                vulnerabilityCweName: { path: 'vulnerability.cweName' },
                                attributionAnalyzerIdentity: {
                                    path: 'attribution.analyzerIdentity'
                                },
                                attributionAttributedOn: { path: 'attribution.attributedOn' },
                                attributionAlternateIdentifier: {
                                    path: 'attribution.alternateIdentifier'
                                },
                                attributionReferenceUrl: { path: 'attribution.referenceUrl' },
                                analysisState: { path: 'analysis.state' },
                                analysisIsSuppressed: { path: 'analysis.isSuppressed' }
                            },
                            refs: [],
                            source_location: {},
                            title: { transformer: getTitle },
                            id: { path: 'matrix' },
                            desc: { path: 'vulnerability.description' },
                            descriptions: [
                                {
                                    data: { path: 'vulnerability.description' },
                                    label: 'check'
                                },
                                {
                                    data: { path: 'vulnerability.recommendation' },
                                    label: 'fix'
                                }
                            ],
                            impact: {
                                path: 'vulnerability.severity',
                                transformer: (0, base_converter_1.impactMapping)(IMPACT_MAPPING)
                            },
                            code: {
                                transformer: (finding) => JSON.stringify(finding, null, 2)
                            },
                            results: [
                                {
                                    status: inspecjs_1.ExecJSON.ControlResultStatus.Failed,
                                    code_desc: { path: 'vulnerability.recommendation' },
                                    start_time: { path: '$.meta.timestamp' }
                                }
                            ]
                        }
                    ],
                    sha256: ''
                }
            ],
            passthrough: {
                transformer: (data) => {
                    return {
                        ...(this.withRaw && { raw: data })
                    };
                }
            }
        };
        this.withRaw = withRaw;
    }
}
exports.DependencyTrackMapper = DependencyTrackMapper;
//# sourceMappingURL=dependency-track-mapper.js.map