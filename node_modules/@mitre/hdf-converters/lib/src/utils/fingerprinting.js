"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fingerprint = exports.INPUT_TYPES = void 0;
const _ = __importStar(require("lodash"));
var INPUT_TYPES;
(function (INPUT_TYPES) {
    INPUT_TYPES["ASFF"] = "asff";
    INPUT_TYPES["BURP"] = "burp";
    INPUT_TYPES["CHECKLIST"] = "checklist";
    INPUT_TYPES["CONVEYOR"] = "conveyor";
    INPUT_TYPES["DEPENDENCY_TRACK"] = "dependencyTrack";
    INPUT_TYPES["FORTIFY"] = "fortify";
    INPUT_TYPES["GOSEC"] = "gosec";
    INPUT_TYPES["GRYPE"] = "grype";
    INPUT_TYPES["IONCHANNEL"] = "ionchannel";
    INPUT_TYPES["JFROG"] = "jfrog";
    INPUT_TYPES["MSFT_SEC_SCORE"] = "msft_secure_score";
    INPUT_TYPES["NIKTO"] = "nikto";
    INPUT_TYPES["SARIF"] = "sarif";
    INPUT_TYPES["CYCLONEDX_SBOM"] = "cyclonedx_sbom";
    INPUT_TYPES["SNYK"] = "snyk";
    INPUT_TYPES["TRUFFLEHOG"] = "trufflehog";
    INPUT_TYPES["TWISTLOCK"] = "twistlock";
    INPUT_TYPES["ZAP"] = "zap";
    INPUT_TYPES["NESSUS"] = "nessus";
    INPUT_TYPES["NEUVECTOR"] = "neuvector";
    INPUT_TYPES["XCCDF"] = "xccdf";
    INPUT_TYPES["NETSPARKER"] = "netsparker";
    INPUT_TYPES["SCOUTSUITE"] = "scoutsuite";
    INPUT_TYPES["DB_PROTECT"] = "dbProtect";
    INPUT_TYPES["PRISMA"] = "prisma";
    INPUT_TYPES["VERACODE"] = "veracode";
    INPUT_TYPES["NOT_FOUND"] = "";
})(INPUT_TYPES = exports.INPUT_TYPES || (exports.INPUT_TYPES = {}));
const fileTypeFingerprints = {
    [INPUT_TYPES.ASFF]: ['Findings', 'AwsAccountId', 'ProductArn'],
    [INPUT_TYPES.CONVEYOR]: ['api_error_message', 'api_response'],
    [INPUT_TYPES.CYCLONEDX_SBOM]: ['bomFormat', 'metadata', 'specVersion'],
    [INPUT_TYPES.DEPENDENCY_TRACK]: ['version', 'meta', 'project', 'findings'],
    [INPUT_TYPES.FORTIFY]: ['FVDL', 'FVDL.EngineData.EngineVersion', 'FVDL.UUID'],
    [INPUT_TYPES.GOSEC]: ['Golang errors', 'Issues'],
    [INPUT_TYPES.GRYPE]: [
        'matches.vulnerability',
        'matches.relatedVulnerabilities',
        'matches.matchDetails',
        'matches.artifact',
        'distro',
        'descriptor'
    ],
    [INPUT_TYPES.IONCHANNEL]: [
        'analysis_id',
        'team_id',
        'source',
        'trigger_hash'
    ],
    [INPUT_TYPES.JFROG]: ['total_count', 'data'],
    [INPUT_TYPES.MSFT_SEC_SCORE]: ['secureScore', 'profiles'],
    [INPUT_TYPES.NEUVECTOR]: [
        'report.base_os',
        'report.cvedb_create_time',
        'report.cvedb_version',
        'report.modules',
        'report.repository',
        'report.signature_data',
        'report.vulnerabilities'
    ],
    [INPUT_TYPES.NIKTO]: ['banner', 'host', 'ip', 'port', 'vulnerabilities'],
    [INPUT_TYPES.SARIF]: ['$schema', 'version', 'runs'],
    [INPUT_TYPES.SNYK]: [
        'projectName',
        'policy',
        'summary',
        'vulnerabilities',
        'vulnerabilities[0].identifiers'
    ],
    [INPUT_TYPES.TRUFFLEHOG]: [
        'SourceName',
        'DetectorType',
        'DetectorName',
        'DecoderName'
    ],
    [INPUT_TYPES.TWISTLOCK]: [
        'results[0].complianceDistribution',
        'results[0].vulnerabilityDistribution',
        'results[0].collections',
        'results[0].digest',
        'packages',
        'complianceDistribution',
        'vulnerabilityDistribution'
    ],
    [INPUT_TYPES.ZAP]: ['@generated', '@version', 'site'],
    [INPUT_TYPES.BURP]: [],
    [INPUT_TYPES.CHECKLIST]: [],
    [INPUT_TYPES.DB_PROTECT]: [],
    [INPUT_TYPES.NESSUS]: [],
    [INPUT_TYPES.NETSPARKER]: [],
    [INPUT_TYPES.PRISMA]: [],
    [INPUT_TYPES.SCOUTSUITE]: [],
    [INPUT_TYPES.VERACODE]: [],
    [INPUT_TYPES.XCCDF]: [],
    [INPUT_TYPES.NOT_FOUND]: []
};
function fingerprint(guessOptions) {
    try {
        const parsed = JSON.parse(guessOptions.data);
        const object = Array.isArray(parsed) ? parsed[0] : parsed;
        const fingerprinted = Object.entries(fileTypeFingerprints).reduce((a, b) => {
            return a[1].filter((value) => _.get(object, value)).length >
                b[1].filter((value) => _.get(object, value)).length
                ? { ...a, count: a[1].filter((value) => _.get(object, value)).length }
                : {
                    ...b,
                    count: b[1].filter((value) => _.get(object, value)).length
                };
        });
        const result = fingerprinted[0];
        if (fingerprinted.count !== 0) {
            return result;
        }
    }
    catch {
        const splitLines = guessOptions.data.trim().split('\n');
        if (guessOptions.filename.toLowerCase().endsWith('.nessus')) {
            return INPUT_TYPES.NESSUS;
        }
        else if (guessOptions.data.match(/xmlns.*http.*\/xccdf/) ||
            guessOptions.filename.toLowerCase().indexOf('xccdf') !== -1) {
            return INPUT_TYPES.XCCDF;
        }
        else if (guessOptions.data.match(/<netsparker-.*generated.*>/) ||
            guessOptions.data.match(/<invicti-.*generated.*>/)) {
            return INPUT_TYPES.NETSPARKER;
        }
        else if (guessOptions.filename.toLowerCase().endsWith('.fvdl')) {
            return INPUT_TYPES.FORTIFY;
        }
        else if (guessOptions.data.indexOf('"AwsAccountId"') !== -1 &&
            guessOptions.data.indexOf('"SchemaVersion"') !== -1) {
            return INPUT_TYPES.ASFF;
        }
        else if (guessOptions.data.indexOf('issues burpVersion') !== -1) {
            return INPUT_TYPES.BURP;
        }
        else if (guessOptions.data.indexOf('scoutsuite_results') !== -1) {
            return INPUT_TYPES.SCOUTSUITE;
        }
        else if (guessOptions.data.indexOf('Policy') !== -1 &&
            guessOptions.data.indexOf('Job Name') !== -1 &&
            guessOptions.data.indexOf('Check ID') !== -1 &&
            guessOptions.data.indexOf('Result Status')) {
            return INPUT_TYPES.DB_PROTECT;
        }
        else if (splitLines[0].includes('Hostname') &&
            splitLines[0].includes('Distro') &&
            splitLines[0].includes('CVE ID') &&
            splitLines[0].includes('Compliance ID') &&
            splitLines[0].includes('Type') &&
            splitLines[0].includes('Severity')) {
            return INPUT_TYPES.PRISMA;
        }
        else if (splitLines[0].includes('SourceName') &&
            splitLines[0].includes('DetectorType') &&
            splitLines[0].includes('DetectorName') &&
            splitLines[0].includes('DecoderName')) {
            return INPUT_TYPES.TRUFFLEHOG;
        }
        else if (guessOptions.data.indexOf('veracode') !== -1 &&
            guessOptions.data.indexOf('detailedreport') !== -1) {
            return INPUT_TYPES.VERACODE;
        }
        else if (guessOptions.data.indexOf('<CHECKLIST>') !== -1 &&
            guessOptions.data.indexOf('<STIGS>') !== -1 &&
            guessOptions.data.indexOf('<STIG_INFO>') !== -1) {
            return INPUT_TYPES.CHECKLIST;
        }
    }
    return INPUT_TYPES.NOT_FOUND;
}
exports.fingerprint = fingerprint;
//# sourceMappingURL=fingerprinting.js.map