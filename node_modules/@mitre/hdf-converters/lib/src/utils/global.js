"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.conditionallyProvideAttribute = exports.getCCIsForNISTTags = exports.getDescription = exports.createWinstonLogger = exports.FROM_ASFF_TYPES_SLASH_REPLACEMENT = exports.DEFAULT_INFORMATION_SYSTEM_COMPONENT_MANAGEMENT_NIST_TAGS = exports.DEFAULT_UPDATE_REMEDIATION_NIST_TAGS = exports.DEFAULT_STATIC_CODE_ANALYSIS_CCI_TAGS = exports.DEFAULT_STATIC_CODE_ANALYSIS_NIST_TAGS = void 0;
const lodash_1 = __importDefault(require("lodash"));
const winston_1 = require("winston");
const NistCciMappingData_1 = require("../mappings/NistCciMappingData");
exports.DEFAULT_STATIC_CODE_ANALYSIS_NIST_TAGS = ['SA-11', 'RA-5'];
exports.DEFAULT_STATIC_CODE_ANALYSIS_CCI_TAGS = exports.DEFAULT_STATIC_CODE_ANALYSIS_NIST_TAGS.map((tag) => NistCciMappingData_1.data[tag]);
exports.DEFAULT_UPDATE_REMEDIATION_NIST_TAGS = ['SI-2', 'RA-5'];
exports.DEFAULT_INFORMATION_SYSTEM_COMPONENT_MANAGEMENT_NIST_TAGS = [
    'CM-8'
];
exports.FROM_ASFF_TYPES_SLASH_REPLACEMENT = /{{{SLASH}}}/gi;
function createWinstonLogger(mapperName, level = 'debug') {
    return (0, winston_1.createLogger)({
        transports: [new winston_1.transports.Console()],
        level: level,
        format: winston_1.format.combine(winston_1.format.timestamp({
            format: 'MMM-DD-YYYY HH:mm:ss Z'
        }), winston_1.format.printf((info) => `[${[info.timestamp]}] ${mapperName} ${info.message}`))
    });
}
exports.createWinstonLogger = createWinstonLogger;
function getDescription(descriptions, key) {
    var _a;
    let found;
    if (Array.isArray(descriptions)) {
        found = (_a = descriptions.find((description) => description.label.toLowerCase() === key)) === null || _a === void 0 ? void 0 : _a.data;
    }
    else {
        found = lodash_1.default.get(descriptions, key);
    }
    return found;
}
exports.getDescription = getDescription;
function getCCIsForNISTTags(nistTags) {
    const cciTags = [];
    for (const nistTag of nistTags) {
        const baseTag = /\w\w-\d\d?\d?/g.exec(nistTag);
        if (Array.isArray(baseTag) &&
            baseTag.length > 0 &&
            baseTag[0] in NistCciMappingData_1.data) {
            cciTags.push(...NistCciMappingData_1.data[baseTag[0]]);
        }
    }
    return cciTags;
}
exports.getCCIsForNISTTags = getCCIsForNISTTags;
function conditionallyProvideAttribute(attributeName, attribute, condition) {
    if (!condition) {
        return undefined;
    }
    return { [attributeName]: attribute };
}
exports.conditionallyProvideAttribute = conditionallyProvideAttribute;
//# sourceMappingURL=global.js.map