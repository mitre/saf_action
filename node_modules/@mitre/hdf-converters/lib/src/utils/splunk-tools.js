"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkSplunkCredentials = exports.handleSplunkErrorResponse = exports.generateHostname = void 0;
const axios_1 = __importDefault(require("axios"));
const lodash_1 = __importDefault(require("lodash"));
function generateHostname(config) {
    return config.port
        ? `${config.scheme}://${config.host}:${config.port}`
        : `${config.scheme}://${config.host}:8089`;
}
exports.generateHostname = generateHostname;
function handleSplunkErrorResponse(error) {
    switch (lodash_1.default.get(error, ['response', 'status'])) {
        case 400:
            return 'Malformed request received';
        case 401:
            return 'Incorrect username or password';
        case 402:
            return 'Bad license detected';
        case 403:
            return 'Insufficient permission for this request';
        case 404:
            return 'Targeted endpoint does not exist';
        case 409:
            return 'Invalid request operation made on endpoint';
        case 500:
            return 'Internal server error';
        case 503:
            return 'This feature is disabled by server configurations';
        default:
            return `Unexpected error`;
    }
}
exports.handleSplunkErrorResponse = handleSplunkErrorResponse;
async function checkSplunkCredentials(config) {
    var _a, _b;
    const hostname = generateHostname(config);
    const username = ((_a = config.username) !== null && _a !== void 0 ? _a : (config.username = ''));
    const password = ((_b = config.password) !== null && _b !== void 0 ? _b : (config.password = ''));
    let authRequest;
    const loginTimeout = 5000;
    const loginTimer = setTimeout(() => {
        throw new Error('Login timed out - Please check your CORS configuration or validate that you have inputted the correct domain');
    }, loginTimeout);
    try {
        authRequest = await axios_1.default.post(`${hostname}/services/auth/login`, new URLSearchParams({
            username: username,
            password: password
        }), { params: { output_mode: 'json' } });
    }
    catch (error) {
        clearTimeout(loginTimer);
        const errorCode = handleSplunkErrorResponse(error);
        if (errorCode === 'Unexpected error') {
            throw new Error('Failed to login - Please check your CORS configuration and validate that your input has the correct domain');
        }
        else {
            throw new Error(`Failed to login - ${errorCode}`);
        }
    }
    clearTimeout(loginTimer);
    if (lodash_1.default.has(authRequest, ['data', 'sessionKey'])) {
        return authRequest.data.sessionKey;
    }
    else {
        throw new Error('Failed to login - Malformed authentication response received');
    }
}
exports.checkSplunkCredentials = checkSplunkCredentials;
//# sourceMappingURL=splunk-tools.js.map