"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TrufflehogMapper = exports.TrufflehogResults = void 0;
const inspecjs_1 = require("inspecjs");
const lodash_1 = __importDefault(require("lodash"));
const package_json_1 = require("../package.json");
const base_converter_1 = require("./base-converter");
class TrufflehogResults {
    constructor(trufflehogJson, withRaw = false) {
        this.data = JSON.parse(trufflehogJson);
        this.withRaw = withRaw;
        if (lodash_1.default.isArray(this.data)) {
            this.data = { wrapper: this.data };
        }
        else {
            this.data = { wrapper: [this.data] };
        }
    }
    toHdf() {
        return new TrufflehogMapper(this.data, this.withRaw).toHdf();
    }
}
exports.TrufflehogResults = TrufflehogResults;
class TrufflehogMapper extends base_converter_1.BaseConverter {
    constructor(trufflehogJson, withRaw = false) {
        super(trufflehogJson, true);
        this.mappings = {
            platform: {
                name: 'Heimdall Tools',
                release: package_json_1.version
            },
            version: package_json_1.version,
            statistics: {},
            profiles: [
                {
                    name: {
                        path: 'wrapper[0]',
                        transformer: (data) => `Source ID: ${lodash_1.default.get(data, 'SourceID')}, Source Name: ${lodash_1.default.get(data, 'SourceName')}`
                    },
                    title: { path: 'wrapper[0].SourceName' },
                    supports: [],
                    attributes: [],
                    groups: [],
                    status: 'loaded',
                    controls: [
                        {
                            key: 'id',
                            path: 'wrapper',
                            tags: {
                                nist: ['IA-5(7)'],
                                cci: ['CCI-004069', 'CCI-000202', 'CCI-000203', 'CCI-002367'],
                                severity: 'medium'
                            },
                            refs: [],
                            source_location: {},
                            title: {
                                transformer: (data) => `Found ${lodash_1.default.get(data, 'DetectorName')} secret using ${lodash_1.default.get(data, 'DecoderName')} decoder`
                            },
                            id: {
                                transformer: (data) => `${lodash_1.default.get(data, 'DetectorName')} ${lodash_1.default.get(data, 'DecoderName')}`
                            },
                            impact: 0.5,
                            results: [
                                {
                                    status: inspecjs_1.ExecJSON.ControlResultStatus.Failed,
                                    code_desc: {
                                        transformer: (data) => `${JSON.stringify(lodash_1.default.get(data, 'SourceMetadata'), null, 2)}`
                                    },
                                    message: {
                                        transformer: (data) => `${JSON.stringify(lodash_1.default.omitBy(lodash_1.default.pick(data, [
                                            'Verified',
                                            'VerificationError',
                                            'Raw',
                                            'RawV2',
                                            'Redacted',
                                            'ExtraData',
                                            'StructuredData'
                                        ]), (value) => value === null || value === ''), null, 2)}`
                                    },
                                    start_time: ''
                                }
                            ]
                        }
                    ],
                    sha256: ''
                }
            ],
            passthrough: {
                transformer: (data) => {
                    return {
                        ...(this.withRaw && { raw: data })
                    };
                }
            }
        };
        this.withRaw = withRaw;
    }
}
exports.TrufflehogMapper = TrufflehogMapper;
//# sourceMappingURL=trufflehog-mapper.js.map