"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GosecMapper = void 0;
const inspecjs_1 = require("inspecjs");
const _ = __importStar(require("lodash"));
const package_json_1 = require("../package.json");
const base_converter_1 = require("./base-converter");
const CweNistMapping_1 = require("./mappings/CweNistMapping");
const CWE_NIST_MAPPING = new CweNistMapping_1.CweNistMapping();
const DEFAULT_NIST_TAG = ['SI-2', 'RA-5'];
const IMPACT_MAPPING = new Map([
    ['high', 0.7],
    ['medium', 0.5],
    ['low', 0.3]
]);
function nistTag(input) {
    const cwe = [`${_.get(input, 'id')}`];
    return CWE_NIST_MAPPING.nistFilter(cwe, DEFAULT_NIST_TAG);
}
function formatStatus(input) {
    return `${_.get(input, 'nosec')}` === 'false' &&
        `${_.get(input, 'suppressions')}` === 'null'
        ? inspecjs_1.ExecJSON.ControlResultStatus.Failed
        : inspecjs_1.ExecJSON.ControlResultStatus.Skipped;
}
function formatSkipMessage(input) {
    const suppressions = _.get(input, 'suppressions');
    if (`${suppressions}` === 'null') {
        return undefined;
    }
    if (!Array.isArray(suppressions)) {
        return 'No justification provided';
    }
    return suppressions
        .map((suppression) => `${suppression.justification ? suppression.justification : 'No justification provided'} (${suppression.kind})`)
        .join('\n');
}
function formatCodeDesc(input) {
    return `Rule ${_.get(input, 'rule_id')} violation detected at:\nFile: ${_.get(input, 'file')}\nLine: ${_.get(input, 'line')}\nColumn: ${_.get(input, 'column')}`;
}
function formatMessage(input) {
    return `${_.get(input, 'confidence')} confidence of rule violation at:\n${_.get(input, 'code')}`;
}
class GosecMapper extends base_converter_1.BaseConverter {
    constructor(gosecJson, withRaw = false) {
        super(JSON.parse(gosecJson));
        this.mappings = {
            platform: {
                name: 'Heimdall Tools',
                release: package_json_1.version
            },
            version: package_json_1.version,
            statistics: {},
            profiles: [
                {
                    name: 'gosec Scan',
                    title: 'gosec Scan',
                    version: { path: 'GosecVersion' },
                    supports: [],
                    attributes: [],
                    groups: [],
                    status: 'loaded',
                    controls: [
                        {
                            path: 'Issues',
                            key: 'id',
                            tags: {
                                nist: {
                                    path: 'cwe',
                                    transformer: nistTag
                                },
                                cwe: { path: 'cwe' }
                            },
                            refs: [],
                            source_location: {},
                            title: { path: 'details' },
                            id: { path: 'rule_id' },
                            desc: '',
                            impact: {
                                path: 'severity',
                                transformer: (0, base_converter_1.impactMapping)(IMPACT_MAPPING)
                            },
                            results: [
                                {
                                    status: { transformer: formatStatus },
                                    skip_message: { transformer: formatSkipMessage },
                                    code_desc: { transformer: formatCodeDesc },
                                    message: { transformer: formatMessage },
                                    start_time: ''
                                }
                            ]
                        }
                    ],
                    sha256: ''
                }
            ],
            passthrough: {
                transformer: (data) => {
                    return {
                        auxiliary_data: [
                            {
                                name: 'gosec',
                                data: {
                                    'Golang errors': _.get(data, 'Golang errors'),
                                    Stats: _.get(data, 'Stats')
                                }
                            }
                        ],
                        ...(this.withRaw && { raw: data })
                    };
                }
            }
        };
        this.withRaw = withRaw;
    }
}
exports.GosecMapper = GosecMapper;
//# sourceMappingURL=gosec-mapper.js.map