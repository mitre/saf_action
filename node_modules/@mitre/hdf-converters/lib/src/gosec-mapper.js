"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GoSecMapper = void 0;
const inspecjs_1 = require("inspecjs");
const lodash_1 = __importDefault(require("lodash"));
const package_json_1 = require("../package.json");
const base_converter_1 = require("./base-converter");
const CweNistMapping_1 = require("./mappings/CweNistMapping");
const CWE_NIST_MAPPING = new CweNistMapping_1.CweNistMapping();
const DEFAULT_NIST_TAG = ['SI-2', 'RA-5'];
function nistTag(input) {
    const cwe = [`${lodash_1.default.get(input, 'id')}`];
    return CWE_NIST_MAPPING.nistFilter(cwe, DEFAULT_NIST_TAG);
}
function formatMessage(input) {
    return `${lodash_1.default.get(input, 'file')}, line:${lodash_1.default.get(input, 'line')}, column:${lodash_1.default.get(input, 'column')}`;
}
class GoSecMapper extends base_converter_1.BaseConverter {
    constructor(gosecJson, withRaw = false) {
        super(JSON.parse(gosecJson));
        this.mappings = {
            passthrough: {
                transformer: (data) => {
                    return {
                        auxiliary_data: [
                            {
                                name: 'Gosec',
                                data: {
                                    'Golang errors': lodash_1.default.get(data, 'Golang errors')
                                }
                            }
                        ],
                        ...(this.withRaw && { raw: data })
                    };
                }
            },
            platform: {
                name: 'Heimdall Tools',
                release: package_json_1.version
            },
            version: package_json_1.version,
            statistics: {},
            profiles: [
                {
                    name: 'Gosec scanner',
                    title: 'gosec',
                    version: { path: 'GosecVersion' },
                    supports: [],
                    attributes: [],
                    groups: [],
                    status: 'loaded',
                    controls: [
                        {
                            path: 'Issues',
                            key: 'id',
                            tags: {
                                nist: {
                                    path: 'cwe',
                                    transformer: nistTag
                                },
                                cwe: { path: 'cwe' },
                                nosec: { path: 'nosec' },
                                suppressions: { path: 'suppressions' },
                                severity: { path: 'severity' },
                                confidence: { path: 'confidence' }
                            },
                            refs: [],
                            source_location: {},
                            title: { path: 'details' },
                            id: { path: 'rule_id' },
                            desc: '',
                            impact: 0.5,
                            results: [
                                {
                                    status: inspecjs_1.ExecJSON.ControlResultStatus.Failed,
                                    code_desc: { path: 'code' },
                                    message: { transformer: formatMessage },
                                    start_time: ''
                                }
                            ]
                        }
                    ],
                    sha256: ''
                }
            ]
        };
        this.withRaw = withRaw;
    }
}
exports.GoSecMapper = GoSecMapper;
//# sourceMappingURL=gosec-mapper.js.map