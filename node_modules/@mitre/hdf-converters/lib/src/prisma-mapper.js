"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PrismaMapper = exports.PrismaControlMapper = exports.nistTag = void 0;
const inspecjs_1 = require("inspecjs");
const lodash_1 = __importDefault(require("lodash"));
const package_json_1 = require("../package.json");
const base_converter_1 = require("./base-converter");
const global_1 = require("./utils/global");
const SEVERITY_LOOKUP = {
    low: 0.3,
    moderate: 0.5,
    high: 0.7,
    important: 0.9,
    critical: 1
};
function nistTag(cveTag) {
    if (!cveTag) {
        return global_1.DEFAULT_STATIC_CODE_ANALYSIS_NIST_TAGS;
    }
    else {
        return global_1.DEFAULT_UPDATE_REMEDIATION_NIST_TAGS;
    }
}
exports.nistTag = nistTag;
class PrismaControlMapper extends base_converter_1.BaseConverter {
    constructor(prismaControls) {
        super({ records: prismaControls });
        this.mappings = {
            platform: {
                name: 'Heimdall Tools',
                release: package_json_1.version,
                target_id: 'Prisma Cloud Scan Report'
            },
            version: package_json_1.version,
            statistics: {
                duration: null
            },
            profiles: [
                {
                    name: 'Palo Alto Prisma Cloud Tool',
                    version: '',
                    title: 'Prisma Cloud Scan Report',
                    maintainer: null,
                    summary: '',
                    license: null,
                    copyright: null,
                    copyright_email: null,
                    supports: [],
                    attributes: [],
                    depends: [],
                    groups: [],
                    status: 'loaded',
                    controls: [
                        {
                            path: 'records',
                            key: 'id',
                            desc: { path: 'Description' },
                            tags: {
                                cci: {
                                    path: 'CVE ID',
                                    transformer: (cve) => (0, global_1.getCCIsForNISTTags)(nistTag(cve))
                                },
                                nist: {
                                    path: 'CVE ID',
                                    transformer: nistTag
                                },
                                cve: { path: 'CVE ID' },
                                cvss: { path: 'cssv' }
                            },
                            descriptions: [],
                            refs: [{ url: { path: 'Vulnerability Link' } }],
                            source_location: { path: 'Hostname' },
                            id: {
                                transformer: (item) => {
                                    if (item['CVE ID']) {
                                        return `${item['Compliance ID']}-${item['CVE ID']}`;
                                    }
                                    else {
                                        return `${item['Compliance ID']}-${item.Distro}-${item.Severity}`;
                                    }
                                }
                            },
                            title: {
                                transformer: (item) => `${item.Hostname}-${item.Distro}-${item.Type}`
                            },
                            impact: {
                                path: 'Severity',
                                transformer: (severity) => {
                                    if (severity) {
                                        return SEVERITY_LOOKUP[severity];
                                    }
                                    else {
                                        return 0.5;
                                    }
                                }
                            },
                            code: {
                                transformer: (obj) => JSON.stringify(obj, null, 2)
                            },
                            results: [
                                {
                                    status: inspecjs_1.ExecJSON.ControlResultStatus.Failed,
                                    code_desc: {
                                        transformer: (obj) => {
                                            let result = '';
                                            if (obj.Type === 'image') {
                                                if (obj['Packages'] !== '') {
                                                    result += `Version check of package: ${obj['Packages']}`;
                                                }
                                            }
                                            else if (obj.Type === 'linux') {
                                                if (obj.Distro !== '') {
                                                    result += `Configuration check for ${obj.Distro}`;
                                                }
                                                else {
                                                    result += ``;
                                                }
                                            }
                                            else {
                                                result += `${obj.Type} check for ${obj.Hostname}`;
                                            }
                                            result += `\n\n${obj.Description}`;
                                            return result;
                                        }
                                    },
                                    message: {
                                        transformer: (obj) => {
                                            let result = '';
                                            if (obj['Fix Status'] !== '' && obj.Cause !== '') {
                                                result += `Fix Status: ${obj['Fix Status']}\n\n${obj.Cause}`;
                                            }
                                            else if (obj['Fix Status'] !== '') {
                                                result += `Fix Status: ${obj['Fix Status']}`;
                                            }
                                            else if (obj.Cause !== '') {
                                                result += `Cause: ${obj.Cause}`;
                                            }
                                            else {
                                                result += 'Unknown';
                                            }
                                            return result;
                                        }
                                    },
                                    start_time: { path: 'Published' }
                                }
                            ]
                        }
                    ],
                    sha256: ''
                }
            ]
        };
    }
}
exports.PrismaControlMapper = PrismaControlMapper;
class PrismaMapper {
    constructor(prismaCsv) {
        this.data = [];
        this.data = (0, base_converter_1.parseCsv)(prismaCsv);
    }
    toHdf() {
        const executions = [];
        const hostnameToControls = {};
        this.data.forEach((record) => {
            hostnameToControls[record['Hostname']] =
                hostnameToControls[record['Hostname']] || [];
            hostnameToControls[record['Hostname']].push(record);
        });
        Object.entries(hostnameToControls).forEach(([hostname, controls]) => {
            const converted = new PrismaControlMapper(controls).toHdf();
            lodash_1.default.set(converted, 'platform.target_id', hostname);
            executions.push(converted);
        });
        return executions;
    }
}
exports.PrismaMapper = PrismaMapper;
//# sourceMappingURL=prisma-mapper.js.map