import { SecureScore, SecureScoreControlProfile } from '@microsoft/microsoft-graph-types';
import { ExecJSON } from 'inspecjs';
import { BaseConverter, ILookupPath, MappedTransform } from './base-converter';
export type ProfileResponse = {
    '@odata.context': string;
    '@odata.nextLink': string;
    value: SecureScoreControlProfile[];
};
export type SecureScoreResponse = {
    '@odata.context': string;
    '@odata.nextLink': string;
    value: SecureScore[];
};
export type CombinedResponse = {
    secureScore: SecureScoreResponse;
    profiles: ProfileResponse;
};
export declare class MsftSecureScoreResults {
    data: CombinedResponse;
    withRaw: boolean;
    constructor(combinedJson: string, withRaw?: boolean);
    toHdf(): ExecJSON.Execution[];
}
export declare class MsftSecureScoreMapper extends BaseConverter {
    withRaw: boolean;
    rawData: CombinedResponse;
    getProfiles: (controlName: string) => SecureScoreControlProfile[];
    memoizedGetProfiles(): (controlName: string) => SecureScoreControlProfile[];
    mappings: MappedTransform<ExecJSON.Execution & {
        passthrough: unknown;
    }, ILookupPath>;
    constructor(secureScore_and_profiles_combined: string, withRaw?: boolean);
}
