"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NiktoMapper = void 0;
const inspecjs_1 = require("inspecjs");
const _ = __importStar(require("lodash"));
const package_json_1 = require("../package.json");
const base_converter_1 = require("./base-converter");
const NiktoNistMapping_1 = require("./mappings/NiktoNistMapping");
const global_1 = require("./utils/global");
const NIKTO_NIST_MAPPING = new NiktoNistMapping_1.NiktoNistMapping();
function formatTitle(file) {
    return `Nikto Target: ${projectName(file)}`;
}
function projectName(file) {
    return `Host: ${_.get(file, 'host')} Port: ${_.get(file, 'port')}`;
}
function formatCodeDesc(vulnerability) {
    return `URL : ${_.get(vulnerability, 'url')} Method: ${_.get(vulnerability, 'method')}`;
}
function nistTag(id) {
    return NIKTO_NIST_MAPPING.nistTag(id);
}
class NiktoMapper extends base_converter_1.BaseConverter {
    constructor(niktoJson, withRaw = false) {
        super(JSON.parse(niktoJson));
        this.mappings = {
            platform: {
                name: 'Heimdall Tools',
                release: package_json_1.version,
                target_id: { transformer: projectName }
            },
            version: package_json_1.version,
            statistics: {},
            profiles: [
                {
                    name: 'Nikto Website Scanner',
                    title: { transformer: formatTitle },
                    summary: {
                        path: 'banner',
                        transformer: (input) => {
                            return `Banner: ${input}`;
                        }
                    },
                    supports: [],
                    attributes: [],
                    groups: [],
                    status: 'loaded',
                    controls: [
                        {
                            path: 'vulnerabilities',
                            key: 'id',
                            tags: {
                                nist: { path: 'id', transformer: nistTag },
                                cci: {
                                    path: 'id',
                                    transformer: (id) => (0, global_1.getCCIsForNISTTags)(nistTag(id))
                                },
                                Ã¶svdb: { path: 'OSVDB' }
                            },
                            refs: [],
                            source_location: {},
                            title: { path: 'msg' },
                            id: { path: 'id' },
                            desc: { path: 'msg' },
                            impact: 0.5,
                            code: {
                                transformer: (vulnerability) => JSON.stringify(vulnerability, null, 2)
                            },
                            results: [
                                {
                                    status: inspecjs_1.ExecJSON.ControlResultStatus.Failed,
                                    code_desc: { transformer: formatCodeDesc },
                                    start_time: ''
                                }
                            ]
                        }
                    ],
                    sha256: ''
                }
            ],
            passthrough: {
                transformer: (data) => {
                    return {
                        auxiliary_data: [
                            {
                                name: 'Nikto',
                                data: _.omit(data, ['banner', 'host', 'port', 'vulnerabilities'])
                            }
                        ],
                        ...(this.withRaw && { raw: data })
                    };
                }
            }
        };
        this.withRaw = withRaw;
    }
}
exports.NiktoMapper = NiktoMapper;
//# sourceMappingURL=nikto-mapper.js.map