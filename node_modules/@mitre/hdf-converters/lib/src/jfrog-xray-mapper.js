"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.JfrogXrayMapper = void 0;
const inspecjs_1 = require("inspecjs");
const _ = __importStar(require("lodash"));
const package_json_1 = require("../package.json");
const base_converter_1 = require("./base-converter");
const CweNistMapping_1 = require("./mappings/CweNistMapping");
const global_1 = require("./utils/global");
const IMPACT_MAPPING = new Map([
    ['high', 0.7],
    ['medium', 0.5],
    ['low', 0.3]
]);
const CWE_PATH = 'component_versions.more_details.cves[0].cwe';
const CWE_NIST_MAPPING = new CweNistMapping_1.CweNistMapping();
function hashId(vulnerability) {
    if (_.get(vulnerability, 'id') === '') {
        return (0, base_converter_1.generateHash)(_.get(vulnerability, 'summary').toString(), 'md5');
    }
    else {
        return _.get(vulnerability, 'id');
    }
}
function formatDesc(vulnerability) {
    const text = [];
    if (_.has(vulnerability, 'description')) {
        text.push(_.get(vulnerability, 'description').toString());
    }
    if (_.has(vulnerability, 'cves')) {
        const re1 = /":/gi;
        const re2 = /,/gi;
        text.push(`cves: ${JSON.stringify(_.get(vulnerability, 'cves'))
            .replace(re1, '"=>')
            .replace(re2, ', ')}`);
    }
    return text.join('<br>');
}
function formatCodeDesc(vulnerability) {
    const codeDescArray = [];
    const re = /,/gi;
    if (_.has(vulnerability, 'source_comp_id')) {
        codeDescArray.push(`source_comp_id : ${_.get(vulnerability, 'source_comp_id')}`);
    }
    else {
        codeDescArray.push('source_comp_id : ');
    }
    if (_.has(vulnerability, 'component_versions.vulnerable_versions')) {
        codeDescArray.push(`vulnerable_versions : ${JSON.stringify(_.get(vulnerability, 'component_versions.vulnerable_versions'))}`);
    }
    else {
        codeDescArray.push('vulnerable_versions : ');
    }
    if (_.has(vulnerability, 'component_versions.fixed_versions')) {
        codeDescArray.push(`fixed_versions : ${JSON.stringify(_.get(vulnerability, 'component_versions.fixed_versions'))}`);
    }
    else {
        codeDescArray.push('fixed_versions : ');
    }
    if (_.has(vulnerability, 'issue_type')) {
        codeDescArray.push(`issue_type : ${_.get(vulnerability, 'issue_type')}`);
    }
    else {
        codeDescArray.push('issue_type : ');
    }
    if (_.has(vulnerability, 'provider')) {
        codeDescArray.push(`provider : ${_.get(vulnerability, 'provider')}`);
    }
    else {
        codeDescArray.push('provider : ');
    }
    return codeDescArray.join('\n').replace(re, ', ');
}
function nistTag(identifier) {
    const identifiers = [];
    if (Array.isArray(identifier)) {
        identifier.forEach((element) => {
            if (element.split('CWE-')[1]) {
                identifiers.push(element.split('CWE-')[1]);
            }
        });
    }
    return CWE_NIST_MAPPING.nistFilter(identifiers, global_1.DEFAULT_STATIC_CODE_ANALYSIS_NIST_TAGS);
}
class JfrogXrayMapper extends base_converter_1.BaseConverter {
    constructor(xrayJson, withRaw = false) {
        super(JSON.parse(xrayJson), true);
        this.mappings = {
            platform: {
                name: 'Heimdall Tools',
                release: package_json_1.version
            },
            version: package_json_1.version,
            statistics: {},
            profiles: [
                {
                    name: 'JFrog Xray Scan',
                    title: 'JFrog Xray Scan',
                    summary: 'Continuous Security and Universal Artifact Analysis',
                    supports: [],
                    attributes: [],
                    groups: [],
                    status: 'loaded',
                    controls: [
                        {
                            path: 'data',
                            key: 'id',
                            tags: {
                                cci: {
                                    path: CWE_PATH,
                                    transformer: (identifier) => (0, global_1.getCCIsForNISTTags)(nistTag(identifier))
                                },
                                nist: {
                                    path: CWE_PATH,
                                    transformer: nistTag
                                },
                                cweid: { path: CWE_PATH }
                            },
                            refs: [],
                            source_location: {},
                            id: { transformer: hashId },
                            title: { path: 'summary' },
                            desc: {
                                path: 'component_versions.more_details',
                                transformer: formatDesc
                            },
                            impact: {
                                path: 'severity',
                                transformer: (0, base_converter_1.impactMapping)(IMPACT_MAPPING)
                            },
                            code: {
                                transformer: (vulnerability) => {
                                    return JSON.stringify(vulnerability, null, 2);
                                }
                            },
                            results: [
                                {
                                    status: inspecjs_1.ExecJSON.ControlResultStatus.Failed,
                                    code_desc: { transformer: formatCodeDesc },
                                    start_time: ''
                                }
                            ]
                        }
                    ],
                    sha256: ''
                }
            ],
            passthrough: {
                transformer: (data) => {
                    return {
                        auxiliary_data: [
                            {
                                name: 'JFrog Xray',
                                data: _.pick(data, ['total_count'])
                            }
                        ],
                        ...(this.withRaw && { raw: data })
                    };
                }
            }
        };
        this.withRaw = withRaw;
    }
}
exports.JfrogXrayMapper = JfrogXrayMapper;
//# sourceMappingURL=jfrog-xray-mapper.js.map