"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FortifyMapper = void 0;
const inspecjs_1 = require("inspecjs");
const lodash_1 = __importDefault(require("lodash"));
const package_json_1 = require("../package.json");
const base_converter_1 = require("./base-converter");
const global_1 = require("./utils/global");
const NIST_REFERENCE_NAME = 'Standards Mapping - NIST Special Publication 800-53 Revision 4';
const DEFAULT_NIST_TAG = [];
function impactMapping(input, id) {
    if (Array.isArray(input)) {
        const matches = input.find((element) => {
            return lodash_1.default.get(element, 'ClassInfo.ClassID') === id;
        });
        return parseFloat(lodash_1.default.get(matches, 'ClassInfo.DefaultSeverity')) / 5;
    }
    else {
        return parseFloat(lodash_1.default.get(input, 'ClassInfo.DefaultSeverity')) / 5;
    }
}
function nistTag(rule) {
    let references = lodash_1.default.get(rule, 'References.Reference');
    if (!Array.isArray(references)) {
        references = [references];
    }
    if (Array.isArray(references)) {
        const tag = references.find((element) => {
            return lodash_1.default.get(element, 'Author') === NIST_REFERENCE_NAME;
        });
        if (tag === null || tag === undefined) {
            return DEFAULT_NIST_TAG;
        }
        else {
            return lodash_1.default.get(tag, 'Title').match(/[a-zA-Z][a-zA-Z]-\d{1,2}/);
        }
    }
    return [];
}
function processEntry(input) {
    const output = [];
    output.push(`${lodash_1.default.get(input, 'id')}<=SNIPPET`);
    output.push(`\nPath: ${lodash_1.default.get(input, 'File')}\n`);
    output.push(`StartLine: ${lodash_1.default.get(input, 'StartLine')}, `);
    output.push(`EndLine: ${lodash_1.default.get(input, 'EndLine')}\n`);
    output.push(`Code:\n${lodash_1.default.get(input, 'Text').trim()}`);
    return output.join('');
}
function makeArray(input) {
    if (Array.isArray(input)) {
        return input;
    }
    else {
        return [input];
    }
}
function filterVuln(input, file) {
    input.forEach((element) => {
        if (element instanceof Object) {
            lodash_1.default.set(element, 'results', lodash_1.default.get(element, 'results').filter((result) => {
                const codedesc = lodash_1.default.get(result, 'code_desc').split('<=SNIPPET');
                const snippetid = codedesc[0];
                const classid = lodash_1.default.get(element, 'id');
                lodash_1.default.set(result, 'code_desc', codedesc[1]);
                let isMatch = false;
                const matches = lodash_1.default.get(file, 'FVDL.Vulnerabilities.Vulnerability').filter((subElement) => {
                    return lodash_1.default.get(subElement, 'ClassInfo.ClassID') === classid;
                });
                matches.forEach((match) => {
                    const traces = makeArray(lodash_1.default.get(match, 'AnalysisInfo.Unified.Trace'));
                    traces.forEach((trace) => {
                        const entries = makeArray(lodash_1.default.get(trace, 'Primary.Entry'));
                        const filteredEntries = entries.filter((entry) => {
                            return lodash_1.default.has(entry, 'Node.SourceLocation.snippet');
                        });
                        filteredEntries.forEach((entry) => {
                            if (lodash_1.default.get(entry, 'Node.SourceLocation.snippet') === snippetid) {
                                isMatch = true;
                            }
                        });
                    });
                });
                return isMatch;
            }));
            lodash_1.default.set(element, 'impact', impactMapping(lodash_1.default.get(element, 'impact'), lodash_1.default.get(element, 'id')));
        }
        return element;
    });
    return input;
}
class FortifyMapper extends base_converter_1.BaseConverter {
    constructor(fvdl, withRaw = false) {
        super((0, base_converter_1.parseXml)(fvdl, {
            stopNodes: ['FVDL.Description.Abstract', 'FVDL.Description.Explanation']
        }));
        this.mappings = {
            platform: {
                name: 'Heimdall Tools',
                release: package_json_1.version
            },
            version: package_json_1.version,
            statistics: {},
            profiles: [
                {
                    name: 'Fortify Static Analyzer Scan',
                    version: { path: 'FVDL.EngineData.EngineVersion' },
                    title: 'Fortify Static Analyzer Scan',
                    summary: {
                        path: 'FVDL.UUID',
                        transformer: (uuid) => {
                            return `Fortify Static Analyzer Scan of UUID: ${uuid}`;
                        }
                    },
                    supports: [],
                    attributes: [],
                    groups: [],
                    status: 'loaded',
                    controls: [
                        {
                            arrayTransformer: filterVuln,
                            path: 'FVDL.Description',
                            key: 'id',
                            tags: {
                                nist: { transformer: nistTag },
                                cci: {
                                    transformer: (data) => (0, global_1.getCCIsForNISTTags)(nistTag(data))
                                }
                            },
                            refs: [],
                            source_location: {},
                            title: { path: 'Abstract', transformer: base_converter_1.parseHtml },
                            id: { path: 'classID' },
                            desc: { path: 'Explanation', transformer: base_converter_1.parseHtml },
                            impact: { path: '$.FVDL.Vulnerabilities.Vulnerability' },
                            code: {
                                transformer: (vulnerability) => {
                                    return JSON.stringify(vulnerability, null, 2);
                                }
                            },
                            results: [
                                {
                                    path: '$.FVDL.Snippets.Snippet',
                                    status: inspecjs_1.ExecJSON.ControlResultStatus.Failed,
                                    code_desc: { transformer: processEntry },
                                    start_time: {
                                        path: '$.FVDL.CreatedTS',
                                        transformer: (input) => {
                                            return `${lodash_1.default.get(input, 'date')} ${lodash_1.default.get(input, 'time')}`;
                                        }
                                    }
                                }
                            ]
                        }
                    ],
                    sha256: ''
                }
            ],
            passthrough: {
                transformer: (data) => {
                    let auxData = lodash_1.default.get(data, 'FVDL');
                    if (lodash_1.default.isObject(auxData)) {
                        auxData = lodash_1.default.omit(auxData, [
                            'CreatedTS',
                            'UUID',
                            'Description',
                            'Snippets'
                        ]);
                    }
                    return {
                        auxiliary_data: [
                            {
                                name: 'Fortify',
                                data: { FVDL: auxData }
                            }
                        ],
                        ...(this.withRaw && { raw: data })
                    };
                }
            }
        };
        this.startTime = `${lodash_1.default.get(this.data, 'FVDL.CreatedTS.date')} ${lodash_1.default.get(this.data, 'FVDL.CreatedTS.time')}`;
        this.withRaw = withRaw;
    }
}
exports.FortifyMapper = FortifyMapper;
//# sourceMappingURL=fortify-mapper.js.map