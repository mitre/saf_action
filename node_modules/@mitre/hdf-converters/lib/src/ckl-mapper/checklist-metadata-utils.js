"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.throwIfInvalidAssetMetadata = exports.throwIfInvalidProfileMetadata = exports.validateChecklistMetadata = exports.validateChecklistProfileMetadata = exports.validateChecklistAssetMetadata = exports.InvalidChecklistMetadataException = void 0;
const validator_1 = require("validator");
const checklistJsonix_1 = require("./checklistJsonix");
const Revalidator = __importStar(require("revalidator"));
const lodash_1 = __importDefault(require("lodash"));
class InvalidChecklistMetadataException extends Error {
}
exports.InvalidChecklistMetadataException = InvalidChecklistMetadataException;
const assetMetadataSchema = {
    properties: {
        hostfqdn: {
            type: 'string',
            conform: (fqdn) => !fqdn || (0, validator_1.isFQDN)(fqdn) || (0, validator_1.isIP)(fqdn),
            message: 'Host FQDN'
        },
        hostip: {
            type: 'string',
            conform: (ip) => !ip || (0, validator_1.isIP)(ip),
            message: 'Host IP'
        },
        hostmac: {
            type: 'string',
            conform: (mac) => !mac || (0, validator_1.isMACAddress)(mac),
            message: 'Host MAC'
        },
        role: {
            type: 'string',
            enum: Object.values(checklistJsonix_1.Role),
            message: 'Role'
        },
        assettype: {
            type: 'string',
            enum: Object.values(checklistJsonix_1.Assettype),
            message: 'Asset Type'
        },
        techarea: {
            type: 'string',
            enum: Object.values(checklistJsonix_1.Techarea),
            message: 'Tech Area'
        },
        webordatabase: {
            type: 'boolean',
            message: 'Web or Database STIG'
        }
    }
};
const profileMetadataSchema = {
    properties: {
        version: {
            type: 'integer',
            minimum: 0,
            message: 'Version must be a non-negative integer'
        },
        releasenumber: {
            type: 'integer',
            minimum: 0,
            message: 'Release number must be a non-negative integer'
        },
        releasedate: {
            type: 'string',
            conform: (date) => !date || !Number.isNaN(Date.parse(date)),
            message: 'Release date must be a valid date'
        }
    }
};
function validateChecklistAssetMetadata(asset) {
    const errors = Revalidator.validate(asset, assetMetadataSchema).errors;
    if (errors.length === 0)
        return { ok: true, value: true };
    const invalidFields = errors.map((e) => `${e.message} (${lodash_1.default.get(asset, e.property)})`);
    const message = `Invalid checklist metadata fields:\n\t${invalidFields.join('\n\t')}`;
    return { ok: false, error: { invalid: errors.map((e) => e.property), message } };
}
exports.validateChecklistAssetMetadata = validateChecklistAssetMetadata;
function validateChecklistProfileMetadata(metadata) {
    const errors = Revalidator.validate(metadata, {
        ...profileMetadataSchema
    }).errors;
    if (errors.length === 0)
        return { ok: true, value: true };
    const invalidFields = errors.map((e) => `${e.message} (${lodash_1.default.get(metadata, e.property)})`);
    const message = `Invalid checklist profile metadata fields:\n\t${invalidFields.join('\n\t')}`;
    return { ok: false, error: { invalid: errors.map((e) => e.property), message } };
}
exports.validateChecklistProfileMetadata = validateChecklistProfileMetadata;
function validateChecklistMetadata(metadata) {
    let invalid = [];
    const messages = [];
    const assetResult = validateChecklistAssetMetadata({
        ...metadata,
        webordatabase: metadata.webordatabase === 'true',
        targetkey: null
    });
    if (!assetResult.ok) {
        invalid = invalid.concat(assetResult.error.invalid);
        messages.push(assetResult.error.message);
    }
    for (const profile of metadata.profiles) {
        const profileResult = validateChecklistProfileMetadata(profile);
        if (!profileResult.ok) {
            invalid = invalid.concat(profileResult.error.invalid);
            messages.push(`In profile ${profile.name}:\n${profileResult.error.message.split(':\n').at(-1)}`);
        }
    }
    if (invalid.length === 0)
        return { ok: true, value: true };
    const message = messages.join('\n');
    return { ok: false, error: { invalid, message } };
}
exports.validateChecklistMetadata = validateChecklistMetadata;
function throwIfInvalidProfileMetadata(profileMetadata) {
    if (profileMetadata) {
        const results = validateChecklistProfileMetadata(profileMetadata);
        if (!results.ok) {
            throw new InvalidChecklistMetadataException(results.error.message);
        }
    }
}
exports.throwIfInvalidProfileMetadata = throwIfInvalidProfileMetadata;
function throwIfInvalidAssetMetadata(metadata) {
    const result = validateChecklistAssetMetadata(metadata);
    if (!result.ok)
        throw new InvalidChecklistMetadataException(result.error.message);
}
exports.throwIfInvalidAssetMetadata = throwIfInvalidAssetMetadata;
//# sourceMappingURL=checklist-metadata-utils.js.map