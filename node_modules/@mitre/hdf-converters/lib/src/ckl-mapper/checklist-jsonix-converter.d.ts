import { ExecJSON } from 'inspecjs';
import { JsonixIntermediateConverter } from '../jsonix-intermediate-converter';
import { Asset, Assettype, Checklist, Role, Sidata, Stigdata, StigdatumElement, Techarea, Vuln } from './checklistJsonix';
export type ChecklistObject = {
    asset: ChecklistAsset;
    stigs: ChecklistStig[];
    jsonixData?: Checklist;
};
type ChecklistAsset = Asset;
type ChecklistStig = {
    header: StigHeader;
    vulns: ChecklistVuln[];
};
type StigHeader = {
    version: string;
    classification: 'UNCLASSIFIED' | 'UNCLASSIFIED//FOR OFFICIAL USE ONLY' | 'CUI';
    customname?: string;
    stigid: string;
    description: string;
    filename: string;
    releaseinfo?: string;
    title: string;
    uuid: string;
    notice?: string;
    source?: string;
};
export type ChecklistVuln = Omit<Vuln, 'stigdata' | 'status'> & {
    status: StatusMapping;
    vulnNum: string;
    severity: Severity;
    groupTitle: string;
    ruleId: string;
    ruleVer: string;
    ruleTitle: string;
    vulnDiscuss: string;
    iaControls: string;
    checkContent: string;
    fixText: string;
    falsePositives: string;
    falseNegatives: string;
    documentable: string;
    mitigations: string;
    potentialImpact: string;
    thirdPartyTools: string;
    mitigationControl: string;
    responsibility: string;
    securityOverrideGuidance: string;
    checkContentRef: string;
    weight: string;
    class: 'Unclass' | 'FOUO' | 'CUI';
    stigRef: string;
    targetKey: string;
    stigUuid: string;
    legacyId: string;
    cciRef: string;
};
declare enum StatusMapping {
    NotAFinding = "Passed",
    Open = "Failed",
    Not_Applicable = "Not Applicable",
    Not_Reviewed = "Not Reviewed"
}
export declare enum Severity {
    Empty = "",
    High = "high",
    Low = "low",
    Medium = "medium"
}
export type ChecklistMetadata = {
    marking: string;
    hostname: string;
    hostip: string;
    hostmac: string;
    hostfqdn: string;
    targetcomment: string;
    role: Role;
    assettype: Assettype;
    techarea: Techarea;
    webordatabase: string;
    webdbsite: string;
    webdbinstance: string;
    vulidmapping: 'id' | 'gid';
    profiles: StigMetadata[];
};
export type StigMetadata = {
    name: string;
    title: string;
    releasenumber: number;
    version: number;
    releasedate: string;
    showCalendar: boolean;
};
export declare const EmptyChecklistObject: ChecklistObject;
export declare function updateChecklistWithMetadata(file: ExecJSON.Execution): ChecklistObject;
export declare class ChecklistJsonixConverter extends JsonixIntermediateConverter<Checklist, ChecklistObject> {
    getValueFromAttributeName<T extends Stigdata | Sidata>(data: T[], tag: string): string;
    toIntermediateObject(jsonixData: Checklist): ChecklistObject;
    expandHeader(header: StigHeader): Sidata[];
    expandVulns(checklistVuln: ChecklistVuln): StigdatumElement[];
    createVulns(checklistVulns: ChecklistVuln[]): Vuln[];
    fromIntermediateObject(intermediateObj: ChecklistObject): Checklist;
    getStatus(results: ExecJSON.ControlResult[], impact: number): StatusMapping;
    severityMap(impact: number): Severity;
    getFindingDetails(results: ExecJSON.ControlResult[]): string;
    matchNistToCcis(nistRefs: string[]): string[];
    getComments(descriptions: ExecJSON.ControlDescription[]): string;
    addHdfControlSpecificData(control: ExecJSON.Control): string;
    addHdfProfileSpecificData(profile: ExecJSON.Profile): string;
    controlsToVulns(profile: ExecJSON.Profile, stigRef: string, metadata?: ChecklistMetadata): ChecklistVuln[];
    getReleaseInfo(releasenumber: number | undefined, releasedate: string | undefined): string | undefined;
    hdfToIntermediateObject(hdf: ExecJSON.Execution): ChecklistObject;
}
export {};
