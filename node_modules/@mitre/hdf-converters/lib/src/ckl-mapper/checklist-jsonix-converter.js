"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChecklistJsonixConverter = exports.Severity = void 0;
const lodash_1 = __importDefault(require("lodash"));
const jsonix_intermediate_converter_1 = require("../jsonix-intermediate-converter");
var StatusMapping;
(function (StatusMapping) {
    StatusMapping["NotAFinding"] = "Passed";
    StatusMapping["Open"] = "Failed";
    StatusMapping["Not_Applicable"] = "Not Applicable";
    StatusMapping["Not_Reviewed"] = "Not Reviewed";
})(StatusMapping || (StatusMapping = {}));
var Severity;
(function (Severity) {
    Severity["Empty"] = "";
    Severity["High"] = "high";
    Severity["Low"] = "low";
    Severity["Medium"] = "medium";
})(Severity = exports.Severity || (exports.Severity = {}));
class ChecklistJsonixConverter extends jsonix_intermediate_converter_1.JsonixIntermediateConverter {
    getValueFromAttributeName(data, tag) {
        let keyName = 'vulnattribute';
        let dataName = 'attributedata';
        if (data.every((o) => 'sidname' in o)) {
            keyName = 'sidname';
            dataName = 'siddata';
        }
        const results = data.filter((attribute) => {
            return lodash_1.default.get(attribute, keyName) == tag;
        });
        return results.map((result) => lodash_1.default.get(result, dataName)).join('; ');
    }
    toIntermediateObject(jsonixData) {
        const asset = {
            role: lodash_1.default.get(jsonixData, 'value.asset.role'),
            assettype: lodash_1.default.get(jsonixData, 'value.asset.assettype'),
            hostname: lodash_1.default.get(jsonixData, 'value.asset.hostname'),
            hostip: lodash_1.default.get(jsonixData, 'value.asset.hostip'),
            hostmac: lodash_1.default.get(jsonixData, 'value.asset.hostmac'),
            hostfqdn: lodash_1.default.get(jsonixData, 'value.asset.hostfqdn'),
            marking: lodash_1.default.get(jsonixData, 'value.asset.marking'),
            targetcomment: lodash_1.default.get(jsonixData, 'value.asset.targetcomment'),
            techarea: lodash_1.default.get(jsonixData, 'value.asset.techarea'),
            targetkey: lodash_1.default.get(jsonixData, 'value.asset.targetkey'),
            webordatabase: lodash_1.default.get(jsonixData, 'value.asset.webordatabase'),
            webdbsite: lodash_1.default.get(jsonixData, 'value.asset.webdbsite'),
            webdbinstance: lodash_1.default.get(jsonixData, 'value.asset.webdbinstance')
        };
        const rawStigs = lodash_1.default.get(jsonixData, 'value.stigs.istig');
        const stigs = [];
        for (const stig of rawStigs) {
            const stigInfo = lodash_1.default.get(stig, 'stiginfo.sidata');
            const header = {
                version: this.getValueFromAttributeName(stigInfo, 'version'),
                classification: this.getValueFromAttributeName(stigInfo, 'classification'),
                customname: this.getValueFromAttributeName(stigInfo, 'customname'),
                stigid: this.getValueFromAttributeName(stigInfo, 'stigid'),
                description: this.getValueFromAttributeName(stigInfo, 'description'),
                filename: this.getValueFromAttributeName(stigInfo, 'filename'),
                releaseinfo: this.getValueFromAttributeName(stigInfo, 'releaseinfo'),
                title: this.getValueFromAttributeName(stigInfo, 'title'),
                uuid: this.getValueFromAttributeName(stigInfo, 'uuid'),
                notice: this.getValueFromAttributeName(stigInfo, 'notice'),
                source: this.getValueFromAttributeName(stigInfo, 'source')
            };
            const checklistVulns = [];
            const vulns = lodash_1.default.get(stig, 'vuln');
            for (const vuln of vulns) {
                const stigdata = lodash_1.default.get(vuln, 'stigdata');
                const checklistVuln = {
                    status: StatusMapping[lodash_1.default.get(vuln, 'status')],
                    findingdetails: lodash_1.default.get(vuln, 'findingdetails'),
                    comments: lodash_1.default.get(vuln, 'comments'),
                    severityoverride: lodash_1.default.get(vuln, 'severityoverride'),
                    severityjustification: lodash_1.default.get(vuln, 'severityjustification'),
                    vulnNum: this.getValueFromAttributeName(stigdata, 'Vuln_Num'),
                    severity: this.getValueFromAttributeName(stigdata, 'Severity'),
                    groupTitle: this.getValueFromAttributeName(stigdata, 'Group_Title'),
                    ruleId: this.getValueFromAttributeName(stigdata, 'Rule_ID'),
                    ruleVersion: this.getValueFromAttributeName(stigdata, 'Rule_Ver'),
                    ruleTitle: this.getValueFromAttributeName(stigdata, 'Rule_Title'),
                    vulnDiscuss: this.getValueFromAttributeName(stigdata, 'Vuln_Discuss'),
                    iaControls: this.getValueFromAttributeName(stigdata, 'IA_Controls'),
                    checkContent: this.getValueFromAttributeName(stigdata, 'Check_Content'),
                    fixText: this.getValueFromAttributeName(stigdata, 'Fix_Text'),
                    falsePositives: this.getValueFromAttributeName(stigdata, 'False_Positives'),
                    falseNegatives: this.getValueFromAttributeName(stigdata, 'False_Negatives'),
                    documentable: this.getValueFromAttributeName(stigdata, 'Documentable'),
                    mitigations: this.getValueFromAttributeName(stigdata, 'Mitigations'),
                    potentialImpact: this.getValueFromAttributeName(stigdata, 'Potential_Impact'),
                    thirdPartyTools: this.getValueFromAttributeName(stigdata, 'Third_Party_Tools'),
                    mitigationControl: this.getValueFromAttributeName(stigdata, 'Mitigation_Control'),
                    responsibility: this.getValueFromAttributeName(stigdata, 'Responsibility'),
                    securityOverrideGuidance: this.getValueFromAttributeName(stigdata, 'Security_Override_Guidance'),
                    checkContentRef: this.getValueFromAttributeName(stigdata, 'Check_Content_Ref'),
                    weight: this.getValueFromAttributeName(stigdata, 'Weight'),
                    class: this.getValueFromAttributeName(stigdata, 'Class'),
                    stigRef: this.getValueFromAttributeName(stigdata, 'STIGRef'),
                    targetKey: this.getValueFromAttributeName(stigdata, 'TargetKey'),
                    stigUuid: this.getValueFromAttributeName(stigdata, 'STIG_UUID'),
                    legacyId: this.getValueFromAttributeName(stigdata, 'LEGACY_ID'),
                    cciRef: this.getValueFromAttributeName(stigdata, 'CCI_REF')
                };
                checklistVulns.push(checklistVuln);
            }
            stigs.push({
                header: header,
                vulns: checklistVulns
            });
        }
        const checklistObject = {
            asset: asset,
            stigs: stigs,
            jsonixData: jsonixData
        };
        return checklistObject;
    }
}
exports.ChecklistJsonixConverter = ChecklistJsonixConverter;
//# sourceMappingURL=checklist-jsonix-converter.js.map