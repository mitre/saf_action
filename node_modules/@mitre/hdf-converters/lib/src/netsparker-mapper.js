"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NetsparkerMapper = void 0;
const inspecjs_1 = require("inspecjs");
const lodash_1 = __importDefault(require("lodash"));
const package_json_1 = require("../package.json");
const base_converter_1 = require("./base-converter");
const CweNistMapping_1 = require("./mappings/CweNistMapping");
const OwaspNistMapping_1 = require("./mappings/OwaspNistMapping");
const global_1 = require("./utils/global");
const IMPACT_MAPPING = new Map([
    ['critical', 1.0],
    ['high', 0.7],
    ['medium', 0.5],
    ['low', 0.3],
    ['best_practice', 0.0],
    ['information', 0.0]
]);
const CWE_NIST_MAPPING = new CweNistMapping_1.CweNistMapping();
const OWASP_NIST_MAPPING = new OwaspNistMapping_1.OwaspNistMapping();
function nistTag(classification) {
    let cweTag = lodash_1.default.get(classification, 'cwe');
    if (!Array.isArray(cweTag)) {
        cweTag = [cweTag];
    }
    let owaspTag = lodash_1.default.get(classification, 'owasp');
    if (!Array.isArray(owaspTag)) {
        owaspTag = [owaspTag];
    }
    const cwe = CWE_NIST_MAPPING.nistFilter(cweTag);
    const owasp = OWASP_NIST_MAPPING.nistFilterNoDefault(owaspTag);
    const result = cwe.concat(owasp);
    if (result.length !== 0) {
        return result;
    }
    else {
        return global_1.DEFAULT_STATIC_CODE_ANALYSIS_NIST_TAGS;
    }
}
function formatControlDesc(vulnerability) {
    const text = [];
    const description = lodash_1.default.get(vulnerability, 'description');
    if (description) {
        text.push(description);
    }
    const exploitationSkills = lodash_1.default.get(vulnerability, 'exploitation-skills');
    if (exploitationSkills) {
        text.push(`Exploitation-skills: ${exploitationSkills}`);
    }
    const extraInformation = lodash_1.default.get(vulnerability, 'extra-information');
    if (extraInformation) {
        text.push(`Extra-information: ${JSON.stringify(extraInformation).replace(/:/gi, '=>')}`);
    }
    const classification = lodash_1.default.get(vulnerability, 'classification');
    if (classification) {
        text.push(`Classification: ${JSON.stringify(classification).replace(/:/gi, '=>')}`);
    }
    const impact = lodash_1.default.get(vulnerability, 'impact');
    if (impact) {
        text.push(`Impact: ${impact}`);
    }
    const firstSeenDate = lodash_1.default.get(vulnerability, 'FirstSeenDate');
    if (firstSeenDate) {
        text.push(`FirstSeenDate: ${firstSeenDate}`);
    }
    const lastSeenDate = lodash_1.default.get(vulnerability, 'LastSeenDate');
    if (lastSeenDate) {
        text.push(`LastSeenDate: ${lastSeenDate}`);
    }
    const certainty = lodash_1.default.get(vulnerability, 'certainty');
    if (certainty) {
        text.push(`Certainty: ${certainty}`);
    }
    const type = lodash_1.default.get(vulnerability, 'type');
    if (type) {
        text.push(`Type: ${type}`);
    }
    const confirmed = lodash_1.default.get(vulnerability, 'confirmed');
    if (confirmed) {
        text.push(`Confirmed: ${confirmed}`);
    }
    return text.join('<br>');
}
function formatCheck(vulnerability) {
    const text = [];
    const exploitationSkills = lodash_1.default.get(vulnerability, 'exploitation-skills');
    if (exploitationSkills) {
        text.push(`Exploitation-skills: ${exploitationSkills}`);
    }
    const proofOfConcept = lodash_1.default.get(vulnerability, 'proof-of-concept');
    if (proofOfConcept) {
        text.push(`Proof-of-concept: ${proofOfConcept}`);
    }
    return (0, base_converter_1.parseHtml)(text.join('<br>'));
}
function formatFix(vulnerability) {
    const text = [];
    const remedialActions = lodash_1.default.get(vulnerability, 'remedial-actions');
    if (remedialActions) {
        text.push(`Remedial-actions: ${remedialActions}`);
    }
    const remedialProcedure = lodash_1.default.get(vulnerability, 'remedial-procedure');
    if (remedialProcedure) {
        text.push(`Remedial-procedure: ${remedialProcedure}`);
    }
    const remedyReferences = lodash_1.default.get(vulnerability, 'remedy-references');
    if (remedyReferences) {
        text.push(`Remedy-references: ${remedyReferences}`);
    }
    return text.join('<br>');
}
function formatCodeDesc(request) {
    const text = [];
    text.push(`http-request : ${lodash_1.default.get(request, 'content')}`);
    text.push(`method : ${lodash_1.default.get(request, 'method')}`);
    return text.join('\n');
}
function formatMessage(response) {
    const text = [];
    text.push(`http-response : ${lodash_1.default.get(response, 'content')}`);
    text.push(`duration : ${lodash_1.default.get(response, 'duration')}`);
    text.push(`status-code  : ${lodash_1.default.get(response, 'status-code')}`);
    return text.join('\n');
}
class NetsparkerMapper extends base_converter_1.BaseConverter {
    defineMappings(toolname) {
        const capitalizedToolname = toolname.replace(/^./, (firstLetter) => firstLetter.toUpperCase());
        return {
            platform: {
                name: 'Heimdall Tools',
                release: package_json_1.version,
                target_id: { path: `${toolname}-enterprise.target.url` }
            },
            version: package_json_1.version,
            statistics: {},
            profiles: [
                {
                    name: `${capitalizedToolname} Enterprise Scan`,
                    version: '',
                    title: {
                        path: `${toolname}-enterprise.target`,
                        transformer: (input) => {
                            return `${toolname.replace(/^./, (firstLetter) => firstLetter.toUpperCase())} Enterprise Scan ID: ${lodash_1.default.get(input, 'scan-id')} URL: ${lodash_1.default.get(input, 'url')}`;
                        }
                    },
                    summary: `${capitalizedToolname} Enterprise Scan`,
                    supports: [],
                    attributes: [],
                    groups: [],
                    status: 'loaded',
                    controls: [
                        {
                            path: `${toolname}-enterprise.vulnerabilities.vulnerability`,
                            key: 'id',
                            id: { path: 'LookupId' },
                            title: { path: 'name' },
                            desc: { transformer: formatControlDesc },
                            impact: {
                                path: 'severity',
                                transformer: (0, base_converter_1.impactMapping)(IMPACT_MAPPING)
                            },
                            tags: {
                                cci: {
                                    path: 'classification',
                                    transformer: (data) => (0, global_1.getCCIsForNISTTags)(nistTag(data))
                                },
                                nist: { path: 'classification', transformer: nistTag }
                            },
                            descriptions: [
                                {
                                    data: { transformer: formatCheck },
                                    label: 'check'
                                },
                                {
                                    data: { transformer: formatFix },
                                    label: 'fix'
                                }
                            ],
                            refs: [],
                            source_location: {},
                            code: '',
                            results: [
                                {
                                    status: inspecjs_1.ExecJSON.ControlResultStatus.Failed,
                                    code_desc: {
                                        path: 'http-request',
                                        transformer: formatCodeDesc
                                    },
                                    message: { path: 'http-response', transformer: formatMessage },
                                    run_time: 0,
                                    start_time: {
                                        path: `$.${toolname}-enterprise.target.initiated`
                                    }
                                }
                            ]
                        }
                    ],
                    sha256: ''
                }
            ]
        };
    }
    constructor(netsparkerXml) {
        super((0, base_converter_1.parseXml)(netsparkerXml));
        this.setMappings(this.defineMappings(Object.keys(this.data).some((k) => k.includes('netsparker'))
            ? 'netsparker'
            : 'invicti'));
    }
}
exports.NetsparkerMapper = NetsparkerMapper;
//# sourceMappingURL=netsparker-mapper.js.map