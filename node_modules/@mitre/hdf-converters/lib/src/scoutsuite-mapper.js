"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScoutsuiteMapper = void 0;
const inspecjs_1 = require("inspecjs");
const _ = __importStar(require("lodash"));
const package_json_1 = require("../package.json");
const base_converter_1 = require("./base-converter");
const ScoutsuiteNistMapping_1 = require("./mappings/ScoutsuiteNistMapping");
const global_1 = require("./utils/global");
const INSPEC_INPUTS_MAPPING = {
    string: 'String',
    numeric: 'Numeric',
    regexp: 'Regexp',
    array: 'Array',
    hash: 'Hash',
    boolean: 'Boolean',
    any: 'Any'
};
const IMPACT_MAPPING = new Map([
    ['danger', 0.7],
    ['warning', 0.5]
]);
const SCOUTSUITE_NIST_MAPPING = new ScoutsuiteNistMapping_1.ScoutsuiteNistMapping();
function getRulesetName(file) {
    return _.get(file, 'last_run.ruleset_name');
}
function formatTargetId(file) {
    return `${getRulesetName(file)} ruleset:${_.get(file, 'provider_name')}:${_.get(file, 'account_id')}`;
}
function formatTitle(file) {
    return `Scout Suite Report using ${getRulesetName(file)} ruleset on ${_.get(file, 'provider_name')} with account ${_.get(file, 'account_id')}`;
}
function compliance(input) {
    if (Array.isArray(input)) {
        return input
            .map((element) => `Compliant with ${_.get(element, 'name')}, reference ${_.get(element, 'reference')}, version ${_.get(element, 'version')}`)
            .join('\n');
    }
    else {
        return '';
    }
}
function getStatus(input) {
    if (_.get(input, 'checked_items') === 0) {
        return inspecjs_1.ExecJSON.ControlResultStatus.Skipped;
    }
    else if (_.get(input, 'flagged_items') === 0) {
        return inspecjs_1.ExecJSON.ControlResultStatus.Passed;
    }
    else {
        return inspecjs_1.ExecJSON.ControlResultStatus.Failed;
    }
}
function checkSkip(input) {
    if (_.get(input, 'checked_items') === 0) {
        return 'Skipped because no items were checked';
    }
    else {
        return '';
    }
}
function getMessage(input) {
    if (_.get(input, 'checked_items') === 0) {
        return '';
    }
    else if (_.get(input, 'flagged_items') === 0) {
        return `0 flagged items out of ${_.get(input, 'checked_items')} checked items`;
    }
    else {
        return `${_.get(input, 'flagged_items')} flagged items out of ${_.get(input, 'checked_items')} checked items:\n${_.get(input, 'items').join('\n')}`;
    }
}
function nistTag(rule) {
    return SCOUTSUITE_NIST_MAPPING.nistTag(rule);
}
function checkArray(input) {
    if (typeof input === 'string') {
        return input;
    }
    return input.join(', ');
}
function collapseServices(file) {
    const services = Object.values(_.get(file, 'services'));
    const findings = [];
    services.forEach((element) => {
        findings.push(_.get(element, 'findings'));
    });
    const entries = [];
    Object.values(findings).forEach((element) => {
        Object.entries(element).forEach((subElement) => {
            entries.push(subElement);
        });
    });
    _.set(file, 'services', entries);
    return file;
}
class ScoutsuiteMapper extends base_converter_1.BaseConverter {
    constructor(scoutsuiteJson, withRaw = false) {
        super(collapseServices(JSON.parse(scoutsuiteJson.split('\n', 2)[1])));
        this.mappings = {
            platform: {
                name: 'Heimdall Tools',
                release: package_json_1.version,
                target_id: { transformer: formatTargetId }
            },
            version: package_json_1.version,
            statistics: {},
            profiles: [
                {
                    name: 'Scout Suite Multi-Cloud Security Auditing Tool',
                    version: { path: 'last_run.version' },
                    title: { transformer: formatTitle },
                    summary: { path: 'last_run.ruleset_about' },
                    supports: [],
                    attributes: [
                        {
                            name: 'account_id',
                            options: {
                                value: { path: 'account_id' },
                                required: true,
                                sensitive: false,
                                type: INSPEC_INPUTS_MAPPING.string
                            }
                        },
                        {
                            name: 'environment',
                            options: {
                                value: { path: 'environment' }
                            }
                        },
                        {
                            name: 'ruleset',
                            options: {
                                value: { path: 'last_run.ruleset_name' }
                            }
                        },
                        {
                            name: 'run_parameters_excluded_regions',
                            options: {
                                value: {
                                    path: 'last_run.run_parameters.excluded_region',
                                    transformer: checkArray
                                }
                            }
                        },
                        {
                            name: 'run_parameters_regions',
                            options: {
                                value: {
                                    path: 'last_run.run_parameters.regions',
                                    transformer: checkArray
                                }
                            }
                        },
                        {
                            name: 'run_parameters_services',
                            options: {
                                value: {
                                    path: 'last_run.run_parameters.services',
                                    transformer: checkArray
                                }
                            }
                        },
                        {
                            name: 'run_parameters_skipped_services',
                            options: {
                                value: {
                                    path: 'last_run.run_parameters.skipped_services',
                                    transformer: checkArray
                                }
                            }
                        },
                        {
                            name: 'time',
                            options: {
                                value: { path: 'last_run.time' }
                            }
                        },
                        {
                            name: 'partition',
                            options: {
                                value: { path: 'partition' }
                            }
                        },
                        {
                            name: 'provider_code',
                            options: {
                                value: { path: 'provider_code' }
                            }
                        },
                        {
                            name: 'provider_name',
                            options: {
                                value: { path: 'provider_name' }
                            }
                        }
                    ],
                    groups: [],
                    status: 'loaded',
                    controls: [
                        {
                            path: 'services',
                            key: 'id',
                            tags: {
                                nist: { path: '[0]', transformer: nistTag },
                                cci: {
                                    path: '[0]',
                                    transformer: (data) => (0, global_1.getCCIsForNISTTags)(nistTag(data))
                                }
                            },
                            refs: [
                                { url: { path: '[1].references[0]' } },
                                { ref: { path: '[1].compliance', transformer: compliance } }
                            ],
                            source_location: {},
                            title: { path: '[1].description' },
                            id: { path: '[0]' },
                            desc: { path: '[1].rationale' },
                            descriptions: [
                                { data: { path: '[1].remediation' }, label: 'fix' },
                                { data: { path: '[1].service' }, label: 'service' },
                                { data: { path: '[1].path' }, label: 'path' },
                                { data: { path: '[1].id_suffix' }, label: 'id_suffix' }
                            ],
                            impact: {
                                path: '[1].level',
                                transformer: (0, base_converter_1.impactMapping)(IMPACT_MAPPING)
                            },
                            code: {
                                transformer: (vulnerability) => JSON.stringify(vulnerability, null, 2)
                            },
                            results: [
                                {
                                    status: { path: '[1]', transformer: getStatus },
                                    skip_message: { path: '[1]', transformer: checkSkip },
                                    code_desc: { path: '[1].description' },
                                    message: { path: '[1]', transformer: getMessage },
                                    start_time: { path: '$.last_run.time' }
                                }
                            ]
                        }
                    ],
                    sha256: ''
                }
            ],
            passthrough: {
                transformer: (data) => {
                    const auxData = _.omit(data, [
                        'account_id',
                        'environment',
                        'partition',
                        'provider_code',
                        'provider_name',
                        'services'
                    ]);
                    auxData.last_run = _.pick(auxData.last_run, ['summary']);
                    return {
                        auxiliary_data: auxData,
                        ...(this.withRaw && { raw: data })
                    };
                }
            }
        };
        this.withRaw = withRaw;
    }
}
exports.ScoutsuiteMapper = ScoutsuiteMapper;
//# sourceMappingURL=scoutsuite-mapper.js.map