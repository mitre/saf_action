"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsftSecureScoreMapper = exports.MsftSecureScoreResults = void 0;
const inspecjs_1 = require("inspecjs");
const package_json_1 = require("../package.json");
const base_converter_1 = require("./base-converter");
const _ = __importStar(require("lodash"));
const global_1 = require("./utils/global");
class MsftSecureScoreResults {
    constructor(combinedJson, withRaw = false) {
        this.data = JSON.parse(combinedJson);
        this.withRaw = withRaw;
    }
    toHdf() {
        return this.data.secureScore.value.map((element) => new MsftSecureScoreMapper(JSON.stringify({
            secureScore: {
                value: [element],
                ..._.pick(this.data.secureScore, [
                    '@odata.context',
                    '@odata.context'
                ])
            },
            profiles: this.data.profiles
        }), this.withRaw).toHdf());
    }
}
exports.MsftSecureScoreResults = MsftSecureScoreResults;
class MsftSecureScoreMapper extends base_converter_1.BaseConverter {
    memoizedGetProfiles() {
        const cache = {};
        return (controlName) => {
            if (Object.prototype.hasOwnProperty.call(cache, controlName)) {
                return cache[controlName];
            }
            return (cache[controlName] = this.rawData.profiles.value.filter((profile) => profile.id === controlName));
        };
    }
    constructor(secureScore_and_profiles_combined, withRaw = false) {
        const rawParams = JSON.parse(secureScore_and_profiles_combined);
        super(rawParams.secureScore.value[0]);
        this.mappings = {
            platform: {
                name: 'Heimdall Tools',
                release: package_json_1.version
            },
            version: package_json_1.version,
            statistics: {},
            profiles: [
                {
                    name: 'Microsoft Secure Score Scan',
                    title: {
                        transformer: (data) => `Azure Secure Score report - Tenant ID: ${data.azureTenantId} - Run ID: ${data.id}`
                    },
                    supports: [],
                    attributes: [],
                    groups: [],
                    status: 'loaded',
                    controls: [
                        {
                            path: 'controlScores',
                            id: {
                                transformer: (data) => `${data.controlCategory}:${data.controlName}`
                            },
                            title: {
                                transformer: (data) => {
                                    const titles = this.getProfiles(data.controlName || '')
                                        .filter((profile) => profile.title !== undefined)
                                        .map((profile) => profile.title);
                                    if (titles.length > 0) {
                                        return titles.join('\n');
                                    }
                                    else {
                                        return [data.controlCategory || '', data.controlName || '']
                                            .filter((title) => title)
                                            .join(':');
                                    }
                                }
                            },
                            desc: { path: 'description' },
                            impact: {
                                transformer: (data) => {
                                    const knownMaxScores = this.getProfiles(data.controlName || '').map((profile) => profile.maxScore || 0);
                                    if (knownMaxScores.length === 0) {
                                        return 0.5;
                                    }
                                    const highMaxScore = Math.max(...knownMaxScores);
                                    return highMaxScore / 10.0;
                                }
                            },
                            refs: [],
                            tags: {
                                transformer: (data) => ({
                                    ...(0, global_1.conditionallyProvideAttribute)('category', this.getProfiles(data.controlName || '').map((profile) => profile.controlCategory), (() => {
                                        const result = this.getProfiles(data.controlName || '')
                                            .map((profile) => profile.controlCategory)
                                            .filter((v) => Boolean(v));
                                        return result.length > 0;
                                    })()),
                                    ...(0, global_1.conditionallyProvideAttribute)('maxScore', this.getProfiles(data.controlName || '').map((profile) => profile.maxScore), (() => {
                                        const result = this.getProfiles(data.controlName || '')
                                            .map((profile) => profile.maxScore)
                                            .filter((v) => Boolean(v));
                                        return result.length > 0;
                                    })()),
                                    ...(0, global_1.conditionallyProvideAttribute)('rank', this.getProfiles(data.controlName || '').map((profile) => profile.rank), (() => {
                                        const result = this.getProfiles(data.controlName || '')
                                            .map((profile) => profile.rank)
                                            .filter((v) => Boolean(v));
                                        return result.length > 0;
                                    })()),
                                    ...(0, global_1.conditionallyProvideAttribute)('tiers', this.getProfiles(data.controlName || '').map((profile) => profile.tier), (() => {
                                        const result = this.getProfiles(data.controlName || '')
                                            .map((profile) => profile.tier)
                                            .filter((v) => Boolean(v));
                                        return result.length > 0;
                                    })()),
                                    ...(0, global_1.conditionallyProvideAttribute)('threats', _.uniq(this.getProfiles(data.controlName || '').map((profile) => profile.threats)), (() => {
                                        const result = this.getProfiles(data.controlName || '')
                                            .map((profile) => profile.threats)
                                            .filter((v) => Boolean(v));
                                        return result.length > 0;
                                    })()),
                                    ...(0, global_1.conditionallyProvideAttribute)('services', _.uniq(this.getProfiles(data.controlName || '').map((profile) => profile.service)), (() => {
                                        const result = this.getProfiles(data.controlName || '')
                                            .map((profile) => profile.service)
                                            .filter((v) => Boolean(v));
                                        return result.length > 0;
                                    })()),
                                    ...(0, global_1.conditionallyProvideAttribute)('userImpacts', _.uniq(this.getProfiles(data.controlName || '').map((profile) => profile.userImpact)), (() => {
                                        const result = this.getProfiles(data.controlName || '')
                                            .map((profile) => profile.userImpact)
                                            .filter((v) => Boolean(v));
                                        return result.length > 0;
                                    })())
                                }),
                                nist: global_1.DEFAULT_STATIC_CODE_ANALYSIS_NIST_TAGS
                            },
                            source_location: {},
                            descriptions: [
                                {
                                    data: {
                                        transformer: (data) => {
                                            const profiles = this.getProfiles(data.controlName || '');
                                            const remediationSteps = profiles
                                                .map((profile) => { var _a; return (_a = profile.remediation) === null || _a === void 0 ? void 0 : _a.toString(); })
                                                .filter((remediation) => remediation !== undefined);
                                            return remediationSteps.join('\n');
                                        }
                                    },
                                    label: 'fix'
                                },
                                {
                                    data: {
                                        transformer: (data) => {
                                            const profiles = this.getProfiles(data.controlName || '');
                                            const impact = profiles
                                                .map((profile) => { var _a; return (_a = profile.remediationImpact) === null || _a === void 0 ? void 0 : _a.toString(); })
                                                .filter((remediationImpact) => remediationImpact !== undefined);
                                            return impact.join('\n');
                                        }
                                    },
                                    label: 'rationale'
                                }
                            ],
                            results: [
                                {
                                    status: {
                                        transformer: (data) => {
                                            if (data.scoreInPercentage === 100) {
                                                return inspecjs_1.ExecJSON.ControlResultStatus.Passed;
                                            }
                                            const knownMaxScores = this.getProfiles(data.controlName || '').map((profile) => profile.maxScore || 0);
                                            const highMaxScore = Math.max(...knownMaxScores);
                                            if (knownMaxScores.length === 0) {
                                                return inspecjs_1.ExecJSON.ControlResultStatus.Failed;
                                            }
                                            else if (data.score === undefined) {
                                                return inspecjs_1.ExecJSON.ControlResultStatus.Error;
                                            }
                                            else if (data.score === highMaxScore) {
                                                return inspecjs_1.ExecJSON.ControlResultStatus.Passed;
                                            }
                                            else {
                                                return inspecjs_1.ExecJSON.ControlResultStatus.Failed;
                                            }
                                        }
                                    },
                                    code_desc: {
                                        transformer: (data) => data.implementationStatus
                                    },
                                    start_time: { transformer: () => this.data.createdDateTime }
                                }
                            ]
                        }
                    ],
                    sha256: ''
                }
            ],
            passthrough: {
                transformer: () => {
                    return {
                        auxiliary_data: [
                            {
                                name: 'Microsoft Secure Score',
                                data: {
                                    reportId: this.rawData.secureScore.value[0].id,
                                    tenantId: this.rawData.secureScore.value[0].azureTenantId,
                                    profiles: this.rawData.profiles,
                                    enabledServices: this.rawData.secureScore.value[0].enabledServices,
                                    averageComparativeScores: this.rawData.secureScore.value[0].averageComparativeScores,
                                    currentScore: this.rawData.secureScore.value[0].currentScore,
                                    maxScore: this.rawData.secureScore.value[0].maxScore,
                                    secureScores: _.pick(this.rawData.secureScore, [
                                        '@odata.context',
                                        '@odata.nextLink'
                                    ])
                                }
                            }
                        ],
                        ...(this.withRaw && { raw: this.rawData })
                    };
                }
            }
        };
        this.withRaw = withRaw;
        this.rawData = rawParams;
        this.getProfiles = this.memoizedGetProfiles();
    }
}
exports.MsftSecureScoreMapper = MsftSecureScoreMapper;
//# sourceMappingURL=msft-secure-score-mapper.js.map