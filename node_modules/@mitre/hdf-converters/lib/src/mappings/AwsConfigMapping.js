"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AwsConfigMapping = void 0;
const _ = __importStar(require("lodash"));
const AwsConfigMappingData_1 = require("./AwsConfigMappingData");
class AwsConfigMapping {
    constructor() {
        this.awsConfigRuleNameMappings = {};
        this.awsConfigRuleSourceIdentifierMappings = {};
        AwsConfigMappingData_1.data.forEach((mapping) => {
            this.awsConfigRuleNameMappings[mapping.AwsConfigRuleName] =
                mapping['NIST-ID'].split('|');
            this.awsConfigRuleSourceIdentifierMappings[mapping.AwsConfigRuleSourceIdentifier] = mapping['NIST-ID'].split('|');
        });
    }
    searchNIST(identifiers) {
        if (identifiers.length === 0) {
            return [];
        }
        else {
            let matches = [];
            Object.entries(this.awsConfigRuleNameMappings).forEach(([awsConfigRuleName, NISTTags]) => {
                identifiers.forEach((identifier) => {
                    if (identifier.toLowerCase().toLowerCase().includes(awsConfigRuleName)) {
                        matches = matches.concat(NISTTags);
                    }
                });
            });
            Object.entries(this.awsConfigRuleSourceIdentifierMappings).forEach(([awsConfigRuleSourceIdentifier, NISTTags]) => {
                identifiers.forEach((identifier) => {
                    if (identifier
                        .toLowerCase()
                        .includes(awsConfigRuleSourceIdentifier.toLowerCase())) {
                        matches = matches.concat(NISTTags);
                    }
                });
            });
            return _.uniq(matches);
        }
    }
}
exports.AwsConfigMapping = AwsConfigMapping;
//# sourceMappingURL=AwsConfigMapping.js.map