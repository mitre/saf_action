import { CciNistMappingItem } from './CciNistMappingItem';
type Reference = {
    '@_creator': string;
    '@_title': string;
    '@_version': string;
    '@_location': string;
    '@_index': string;
};
type CciItem = {
    status: string;
    publishdate: string;
    contributor: string;
    definition: string;
    type: string;
    references: {
        reference: Reference[];
    };
    '@_id': string;
};
type CciItems = {
    cci_item: CciItem[];
};
type Metadata = {
    version: string;
    publishdate: string;
};
type CciList = {
    metadata: Metadata;
    cci_items: CciItems;
};
type CciNistData = {
    '?xml': {
        '@_version': string;
        '@_encoding': string;
    };
    '?xml-stylesheet': {
        '@_type': string;
        '@_href': string;
    };
    cci_list: CciList;
};
export declare class CciNistTwoWayMapper {
    data: CciNistData;
    constructor();
    nistFilter(identifiers: string[], defaultNist: string[], collapse?: boolean): string[];
    cciFilter(identifiers: string[], defaultCci: string[]): string[];
    private findHighestVersionNistControlByCci;
    private findMatchingCciIdsByNistControl;
}
export declare class CciNistMapping {
    data: CciNistMappingItem[];
    constructor();
    nistFilter(identifiers: string[], defaultNist: string[], collapse?: boolean): string[];
}
export {};
