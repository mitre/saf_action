import { ExecJSON } from 'inspecjs';
/**
 * Converts an array of ExecJSON.ControlDescription objects or a dictionary of descriptions
 * into a standardized dictionary format.
 *
 * @param descs - An array of ExecJSON.ControlDescription objects, a dictionary of descriptions,
 *                or null/undefined.
 * @returns A dictionary where the keys are description labels and the values are description data.
 *          If the input is null or undefined, an empty dictionary is returned.
 */
export declare function objectifyDescriptions(descs: ExecJSON.ControlDescription[] | {
    [key: string]: string | undefined;
} | null | undefined): {
    [key: string]: string | undefined;
};
/**
 * Represents a Control object with various properties and methods to manipulate and convert it.
 *
 * @class Control
 * @property {string} id - The unique identifier for the control.
 * @property {string | null} [title] - The title of the control.
 * @property {string | null} [code] - The code associated with the control.
 * @property {string | null} [describe] - Additional description content for the control.
 * @property {string | null} [desc] - The default description of the control.
 * @property {Object.<string, string | undefined>} descs - Additional descriptions for the control.
 * @property {number} [impact] - The impact value of the control.
 * @property {string} [ref] - A reference string for the control.
 * @property {(string | { ref?: string; url?: string; uri?: string; })[]} [refs] - An array of references for the control.
 * @property {Object.<string, string | string[] | Record<string, string[]>[] | boolean | undefined | null>} tags - Tags associated with the control.
 *
 * @constructor
 * @param {Partial<Control>} [data] - An optional partial object of type Control to initialize the instance with.
 *
 * @method toUnformattedObject
 * @method toString
 * @method toRuby
 */
export default class Control {
    id: string;
    title?: string | null;
    code?: string | null;
    describe?: string | null;
    desc?: string | null;
    descs: {
        [key: string]: string | undefined;
    };
    impact?: number;
    ref?: string;
    refs?: (string | {
        ref?: string;
        url?: string;
        uri?: string;
    })[];
    tags: {
        check?: string;
        check_id?: string;
        fix?: string;
        fix_id?: string | null;
        severity?: string;
        gtitle?: string;
        gid?: string;
        satisfies?: string[];
        rid?: string;
        stig_id?: string;
        cci?: string[];
        cis_controls?: Record<string, string[]>[];
        nist?: string[];
        legacy?: string[];
        false_negatives?: string;
        false_positives?: string;
        documentable?: boolean;
        mitigations?: string;
        severity_override_guidance?: string;
        potential_impacts?: string;
        third_party_tools?: string;
        mitigation_controls?: string;
        responsibility?: string;
        ia_controls?: string;
        [key: string]: string | string[] | Record<string, string[]>[] | boolean | undefined | null;
    };
    /**
     * Constructs a new instance of the Control class.
     *
     * @param data - An optional partial object of type Control to initialize the instance with.
     *               If provided, the properties of the data object will be assigned to the instance.
     */
    constructor(data?: Partial<Control>);
    /**
     * Converts the current Control object into an unformatted object.
     * The method flattens the object, processes its string properties,
     * and then unflattens it back into a Control object.
     *
     * @returns {Control} A new Control object created from the unformatted data.
     */
    toUnformattedObject(): Control;
    /**
     * Converts the control object to a string representation in a specific format.
     * Provides the ability to get the control in its raw form
     *
     * The resulting string includes:
     * - The control ID.
     * - The title, if present.
     * - The default description, if present.
     * - Additional descriptions, if present.
     * - The impact value, if present.
     * - References, if present.
     * - Tags, if present.
     * - Additional describe content, if present.
     *
     * @returns {string} The string representation of the control object.
     */
    toString(): string;
    /**
     * Converts the control object to a Ruby string representation.
     *
     * @param {boolean} [verbose=false] - If true, logs detailed error and warning messages.
     * @returns {string} The Ruby string representation of the control object.
     *
     * The generated Ruby string includes:
     * - `control` block with the control ID.
     * - `title` if available, otherwise logs an error if verbose is true.
     * - `desc` if available, otherwise logs an error if verbose is true.
     * - Additional descriptions (`descs`) if available, with special handling for the 'default' keyword.
     * - `impact` if defined, otherwise logs an error if verbose is true.
     * - `refs` if available, with support for both string and object references.
     * - `tags` if available, with special formatting for arrays and objects, and handling for nil values for specific tags.
     * - `describe` if available, appended at the end of the control block.
     *
     * The function ensures proper formatting and escaping of quotes for Ruby syntax.
     */
    toRuby(verbose?: boolean): string;
}
