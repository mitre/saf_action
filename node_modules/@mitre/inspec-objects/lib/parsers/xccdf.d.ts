import Profile from '../objects/profile';
import { BenchmarkGroup, BenchmarkRule, RuleComplexCheck } from '../types/xccdf';
import { OvalDefinitionValue } from '../types/oval';
export type GroupContextualizedRule = BenchmarkRule & {
    group: Omit<BenchmarkGroup, 'Rule' | 'Group'>;
};
/**
 * Extracts all rules from the given benchmark groups, including nested groups.
 *
 * @param groups - An array of benchmark groups to extract rules from.
 * @returns An array of contextualized rules, each rule includes its parent group context.
 */
export declare function extractAllRules(groups: BenchmarkGroup[]): GroupContextualizedRule[];
/**
 * Extracts all nested complex checks from a given `RuleComplexCheck` object.
 *
 * This function recursively traverses the `complex-check` property of the input
 * `RuleComplexCheck` object and collects all nested complex checks into a flat array.
 * Each complex check in the resulting array will have its own `complex-check` property omitted.
 *
 * @param complexCheck - The `RuleComplexCheck` object to extract complex checks from.
 * @returns An array of `RuleComplexCheck` objects with the `complex-check` property omitted.
 */
export declare function extractAllComplexChecks(complexCheck: RuleComplexCheck): Omit<RuleComplexCheck, 'complex-check'>[];
export type InputTextLang = {
    '#text': string;
    '@_lang': string;
};
/**
 * Processes an XCCDF (Extensible Configuration Checklist Description Format) XML
 * string and converts it into a Profile object.
 * NOTE: We are using the fast xml parser (FXP) V4 which requires to specify
 *       which Whether a single tag should be parsed as an array or an object,
 *       it can't be decided by FXP. We process every tag as an array, this is
 *       the reason there are numerous tag test, were array index zero [0] is
 *       tested.
 *
 * @param xml - The XCCDF XML string to process.
 * @param removeNewlines - A flag indicating whether to remove newlines from the processed data.
 * @param useRuleId - Specifies the rule ID format to use. Can be 'group', 'rule', 'version', or 'cis'.
 * @param ovalDefinitions - Optional OVAL definitions to use for resolving values.
 * @returns A Profile object representing the processed XCCDF data.
 * @throws Will throw an error if the XCCDF file is not properly formatted or if required data is missing.
 */
export declare function processXCCDF(xml: string, removeNewlines: false, useRuleId: 'group' | 'rule' | 'version' | 'cis', ovalDefinitions?: Record<string, OvalDefinitionValue & {
    criteriaRefs?: string[];
    resolvedValues?: any;
}>): Profile;
