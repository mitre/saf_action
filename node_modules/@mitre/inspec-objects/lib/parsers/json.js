"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.processInSpecProfile = exports.processExecJSON = exports.processProfileJSON = exports.processEvaluation = void 0;
const tslib_1 = require("tslib");
const inspecjs_1 = require("inspecjs");
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const control_1 = tslib_1.__importStar(require("../objects/control"));
const profile_1 = tslib_1.__importDefault(require("../objects/profile"));
const update_1 = require("../utilities/update");
function processEvaluation(evaluationInput) {
    const topLevelProfile = evaluationInput.contains[0];
    const profile = new profile_1.default({
        name: topLevelProfile.data.name,
        title: topLevelProfile.data.title,
        maintainer: topLevelProfile.data.maintainer,
        copyright: topLevelProfile.data.copyright,
        copyright_email: topLevelProfile.data.copyright_email,
        license: lodash_1.default.get(topLevelProfile.data, 'license'),
        summary: lodash_1.default.get(topLevelProfile.data, 'summary'),
        description: lodash_1.default.get(topLevelProfile.data, 'description'),
        version: topLevelProfile.data.version,
    });
    topLevelProfile.contains.forEach((control) => {
        profile.controls.push(new control_1.default({
            id: control.data.id,
            title: control.data.title,
            impact: control.data.impact,
            desc: control.data.desc,
            descs: (0, control_1.objectifyDescriptions)(control.hdf.wraps.descriptions),
            tags: control.hdf.wraps.tags,
        }));
    });
    return profile;
}
exports.processEvaluation = processEvaluation;
function processProfileJSON(profileInput) {
    const profile = new profile_1.default({
        name: profileInput.data.name,
        title: profileInput.data.title,
        maintainer: profileInput.data.maintainer,
        copyright: profileInput.data.copyright,
        copyright_email: profileInput.data.copyright_email,
        license: lodash_1.default.get(profileInput.data, 'license'),
        summary: lodash_1.default.get(profileInput.data, 'summary'),
        description: lodash_1.default.get(profileInput.data, 'description'),
        version: profileInput.data.version,
    });
    profileInput.data.controls.forEach((control) => {
        const newControl = new control_1.default({
            id: control.id,
            title: control.title,
            desc: control.desc,
            impact: control.impact,
            code: control.code,
            tags: control.tags,
            descs: (0, control_1.objectifyDescriptions)(control.descriptions),
        });
        newControl.describe = (0, update_1.getExistingDescribeFromControl)(newControl);
        // Migrate check and fix text from tags to descriptions
        if (newControl.tags.check && !newControl.descs.check) {
            // eslint-disable-next-line  @typescript-eslint/no-non-null-assertion
            lodash_1.default.set(newControl.descs, 'check', control.tags.check);
            lodash_1.default.set(newControl.tags, 'check', undefined);
        }
        if (newControl.tags.fix && !newControl.descs.fix) {
            // eslint-disable-next-line  @typescript-eslint/no-non-null-assertion
            lodash_1.default.set(newControl.descs, 'fix', control.tags.fix);
            lodash_1.default.set(newControl.tags, 'fix', undefined);
        }
        profile.controls.push(newControl);
    });
    return profile;
}
exports.processProfileJSON = processProfileJSON;
function processExecJSON(execJSON) {
    return processEvaluation((0, inspecjs_1.contextualizeEvaluation)(execJSON));
}
exports.processExecJSON = processExecJSON;
function processInSpecProfile(json) {
    const convertedFile = (0, inspecjs_1.convertFile)(json, true);
    let profile = new profile_1.default();
    if (convertedFile['1_0_ExecJson']) {
        profile = processEvaluation((0, inspecjs_1.contextualizeEvaluation)(convertedFile['1_0_ExecJson'])).toUnformattedObject();
    }
    else if (convertedFile['1_0_ProfileJson']) {
        profile = processProfileJSON((0, inspecjs_1.contextualizeProfile)(JSON.parse(json))).toUnformattedObject();
    }
    else {
        throw new Error('Unknown file type passed');
    }
    profile.controls = lodash_1.default.sortBy(profile.controls, 'id');
    return profile;
}
exports.processInSpecProfile = processInSpecProfile;
