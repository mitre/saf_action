/**
 * Wraps a given string to a specified line length by inserting newline characters.
 *
 * @param s - The string to be wrapped.
 * @param lineLength - The maximum length of each line before wrapping. Defaults to 80.
 * @returns The wrapped string with newline characters inserted at appropriate positions.
 */
export declare function wrap(s: string, lineLength?: number): string;
/**
 * Removes newline characters and excessive whitespace from a given string.
 *
 * This function replaces all newline characters (`\n` and `\\n`) with a single space,
 * and collapses multiple spaces or tabs into a single space.
 *
 * @param s - The input string to be unformatted.
 * @returns The unformatted string with newline characters and excessive whitespace removed.
 */
export declare function unformatText(s: string): string;
/**
 * Removes all whitespace characters from the given input string.
 *
 * @param input - The string from which to remove whitespace.
 * @returns A new string with all whitespace characters removed.
 */
export declare function removeWhitespace(input: string): string;
/**
 * Escapes quotes in a given string based on the presence of single and double quotes.
 *
 * - If the string contains both single and double quotes, it wraps the string in `%q()` and escapes special case backslashes.
 * - If the string contains only single quotes, it wraps the string in double quotes and escapes double quotes.
 * - If the string contains only double quotes or no quotes, it wraps the string in single quotes and escapes single quotes.
 *
 * @param s - The input string to escape quotes in.
 * @returns The string with appropriately escaped quotes.
 */
export declare function escapeQuotes(s: string): string;
/**
 * Replaces all instances of the placeholder `{{{{newlineHERE}}}}` in the given string with newline characters.
 *
 * @param s - The string containing the placeholders to be replaced.
 * @returns The modified string with placeholders replaced by newline characters.
 */
export declare function removeNewlinePlaceholders(s: string): string;
/**
 * Retrieves the value from the first path in the provided paths array that exists in the given object.
 *
 * @param object - The object to search for the paths.
 * @param paths - An array of string paths to check in the object.
 * @returns The value from the first existing path in the object as a string.
 * @throws Will throw an error if none of the paths exist in the object.
 */
export declare function getFirstPath(object: Record<string, unknown>, paths: string[]): string;
/**
 * Checks if the given file object has any of the specified paths.
 *
 * @param file - The object to check for the presence of the path(s).
 * @param path - A string or an array of strings representing the path(s) to check.
 * @returns `true` if any of the specified paths exist in the object, otherwise `false`.
 */
export declare function hasPath(file: Record<string, unknown>, path: string | string[]): boolean;
