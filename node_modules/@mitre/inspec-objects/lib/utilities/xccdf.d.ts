import { DecodedDescription } from '../types/xccdf';
/**
 * Converts an encoded XML string into a JSON object using specified
 * parsing options.
 *
 * @param encodedXml      - The encoded XML string to be converted.
 * @param xmlParserOption - The parsing option to be used. Defaults to
 *                          'withArrayOption'.
 *   Possible values are:
 *     - 'withArrayOption': Parses XML with array option enabled.
 *     - 'withArrayNoEntitiesOption': Parses XML with array option
 *       enabled and processes entities.
 *     - Any other value: Parses XML without array option.
 * @returns The JSON representation of the XML string.
 *
 * @remarks
 * This function uses the `fast-xml-parser` library to parse the XML string.
 * The parser options are configured to:
 * - Prevent the parser from converting XML entities (converting &lt into <)
 * - Ignore attributes, allow or disallows attributes to be parsed
 * - Remove namespace prefixes.
 * - Prefix attribute names with '@_'.
 * - Stop parsing 'div' and 'p' tags.
 * - Treat all nodes as arrays or not
 *
 * Options being used for the XML parser (V4) are:
 *  - processEntities: true or false (based on xmlParserOption)
 *  - ignoreAttributes: false (allow attributes to be parsed)
 *  - removeNSPrefix: true (remove namespace prefixes)
 *  - attributeNamePrefix: '@_' (prefix all attribute names with @_)
 *  - stopNodes: ["*.pre", "*.p"]
 *  - isArray(): true or false (based on xmlParserOption)
 *
 * NOTE: The isArray can specify what tags to always convert into an array, we
 *       do not specify specific fields as it could break parsing if future
 *       fields are added, we parse all fields as an array.
 *
 * For more details on the parser options, see the documentation for the v4 or v5 version of the library:
 * {@link https://github.com/NaturalIntelligence/fast-xml-parser/tree/master/docs/v4}
 */
/**
 * Converts an encoded XML string into a JSON object using specified parsing options.
 *
 * @param encodedXml - The encoded XML string to be converted.
 * @param xmlParserOption - The parsing option to be used. Defaults to 'withArrayOption'.
 *                          Possible values are:
 *                          - 'withArrayOption': Parses XML with array option enabled.
 *                          - 'withArrayNoEntitiesOption': Parses XML with array option enabled and processes entities.
 *                          - Any other value: Parses XML without array option.
 * @returns The JSON object resulting from the XML parsing.
 */
export declare function convertEncodedXmlIntoJson(encodedXml: string, xmlParserOption?: string): any;
/**
 * Converts a JSON object into an XML string.
 *
 * @param data - The JSON object to be converted.
 * @returns The XML string representation of the JSON object.
 */
export declare function convertJsonIntoXML(data: any): string;
/**
 * Removes XML special characters from a given string.
 *
 * This function decodes any XML special characters in the input string
 * and returns the decoded result.
 *
 * @param str - The input string containing XML special characters.
 * @returns The decoded string with XML special characters removed.
 */
export declare function removeXMLSpecialCharacters(str: string): string;
/**
 * Removes all of the HTML tags and leaves only the text content.
  *
 * @param input - The string from which HTML tags should be removed.
 * @returns A new string with all HTML tags removed.
 *
 * @example
 * ```typescript
 * const str = '<div>Hello <b>World</b>!</div>';
 * const stripped = removeHtmlTags(str);
 * console.log(stripped); // Output: "Hello World!"
 * ```
 */
export declare function removeHtmlTags(input: string): string;
/**
 * Converts a severity string to a numerical impact value.
 *
 * The function matches the input string against various regular expressions
 * to determine the corresponding impact value:
 * - "none", "na", "n/a", "not applicable" (case insensitive) -> 0.0
 * - "low", "category iii", "category 3" (case insensitive) -> 0.3
 * - "medium", "category ii", "category 2" -> 0.5
 * - "high", "category i", "category 1" -> 0.7
 * - "critical", "severe" -> 1.0
 *
 * If no match is found, the default impact value is 0.5.
 *
 * @param string - The severity string to be converted.
 * @returns The numerical impact value corresponding to the severity string.
 */
export declare function severityStringToImpact(string: string): number;
/**
 * Converts an impact number to a severity string.
 *
 * @param impact - A number representing the impact, which must be between 0.0 and 1.0 inclusive.
 * @returns A string representing the severity level:
 * - 'critical' for impact >= 0.9
 * - 'high' for impact >= 0.7
 * - 'medium' for impact >= 0.4
 * - 'low' for impact >= 0.1
 * - 'none' for impact < 0.1
 * @throws {Error} If the impact is less than 0.0 or greater than 1.0.
 */
export declare function impactNumberToSeverityString(impact: number): string;
/**
 * Converts an encoded HTML string into a JSON object, handling specific edge
 * cases related to XSS and XML tags.
 *
 * This function performs the following steps:
 * 1. Replaces occurrences of `"&lt;"` with a placeholder to avoid
 *    breaking parsing.
 * 2. Parses the patched HTML to extract text chunks.
 * 3. Converts the extracted text chunks into JSON.
 * 4. Cleans the converted JSON by replacing placeholders with the original
 *    characters and handling nested objects.
 *
 * Note: This function specifically addresses issues found in certain
 *       STIGs (Security Technical Implementation Guides) where XML tags are
 *       embedded within text fields.
 *
 * @param encodedHTML - The encoded HTML string to be converted.
 *                      If not provided, an empty object is returned.
 * @returns A `DecodedDescription` object containing the converted JSON data.
 */
export declare function convertEncodedHTMLIntoJson(encodedHTML?: string): DecodedDescription;
