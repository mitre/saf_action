"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertEncodedHTMLIntoJson = exports.impactNumberToSeverityString = exports.severityStringToImpact = exports.removeXMLSpecialCharacters = exports.convertJsonIntoXML = exports.convertEncodedXmlIntoJson = void 0;
const tslib_1 = require("tslib");
const fast_xml_parser_1 = tslib_1.__importDefault(require("fast-xml-parser"));
const jstoxml_1 = require("jstoxml");
const htmlparser = tslib_1.__importStar(require("htmlparser2"));
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const he_1 = tslib_1.__importDefault(require("he"));
function convertEncodedXmlIntoJson(encodedXml) {
    return fast_xml_parser_1.default.parse(encodedXml, {
        ignoreAttributes: false,
        ignoreNameSpace: true,
        attributeNamePrefix: '@_',
        stopNodes: ['div', 'p'],
        arrayMode: true
    });
}
exports.convertEncodedXmlIntoJson = convertEncodedXmlIntoJson;
function convertJsonIntoXML(data) {
    return (0, jstoxml_1.toXML)(data);
}
exports.convertJsonIntoXML = convertJsonIntoXML;
function removeXMLSpecialCharacters(str) {
    return he_1.default.decode(str);
}
exports.removeXMLSpecialCharacters = removeXMLSpecialCharacters;
function severityStringToImpact(string, id) {
    var _a, _b, _c, _d, _e;
    if ((_a = string.match(/none|na|n\/a|not[\s()*_|]?applicable/i)) === null || _a === void 0 ? void 0 : _a.length) {
        return 0.0;
    }
    if ((_b = string.match(/low|cat(egory)?\s*(iii|3)/i)) === null || _b === void 0 ? void 0 : _b.length) {
        return 0.3;
    }
    if ((_c = string.match(/med(ium)?|cat(egory)?\s*(ii|2)/)) === null || _c === void 0 ? void 0 : _c.length) {
        return 0.5;
    }
    if ((_d = string.match(/high|cat(egory)?\s*(i|1)/)) === null || _d === void 0 ? void 0 : _d.length) {
        return 0.7;
    }
    if ((_e = string.match(/crit(ical)?|severe/)) === null || _e === void 0 ? void 0 : _e.length) {
        return 1.0;
    }
    console.log(`${string} is not a valid severity value. It should be one of the approved keywords. ${id} will be treated as medium severity`);
    return 0.5;
}
exports.severityStringToImpact = severityStringToImpact;
function impactNumberToSeverityString(impact) {
    // Impact must be 0.0 - 1.0
    if (impact < 0.0 || impact > 1.0) {
        throw new Error('Impact cannot be less than 0.0 or greater than 1.0');
    }
    else {
        if (impact >= 0.9) {
            return 'critical';
        }
        if (impact >= 0.7) {
            return 'high';
        }
        if (impact >= 0.4) {
            return 'medium';
        }
        if (impact >= 0.1) {
            return 'low';
        }
        return 'none';
    }
}
exports.impactNumberToSeverityString = impactNumberToSeverityString;
function convertEncodedHTMLIntoJson(encodedHTML) {
    if (encodedHTML) {
        // Some STIGs regarding XSS put the < character inside of the description which breaks parsing
        const patchedHTML = encodedHTML.replace(/"&lt;"/g, '[[[REPLACE_LESS_THAN]]]');
        const xmlChunks = [];
        const htmlParser = new htmlparser.Parser({
            ontext(text) {
                xmlChunks.push(text);
            },
        });
        htmlParser.write(patchedHTML);
        htmlParser.end();
        const converted = convertEncodedXmlIntoJson(xmlChunks.join(''));
        let cleaned = {};
        if (typeof converted.VulnDiscussion === 'object') { // Some STIGs have xml tags inside of the actual text which breaks processing, e.g U_ASD_STIG_V5R1_Manual-xccdf.xml and all Oracle Database STIGs
            let extractedVulnDescription = '';
            const remainingFields = lodash_1.default.omit(converted.VulnDiscussion, ['FalsePositives', 'FalseNegatives', 'Documentable', 'Mitigations', 'SeverityOverrideGuidance', 'PotentialImpacts', 'ThirdPartyTools', 'MitigationControl', 'Responsibility', 'IAControls']);
            Object.entries(remainingFields).forEach(([field, value]) => {
                extractedVulnDescription += `<${field}> ${value}`;
            });
            cleaned = {
                VulnDiscussion: extractedVulnDescription.replace(/\[\[\[REPLACE_LESS_THAN]]]/, '"<"'),
            };
            Object.entries(converted.VulnDiscussion).forEach(([key, value]) => {
                if (typeof value === 'string') {
                    cleaned[key] = value.replace(/\[\[\[REPLACE_LESS_THAN]]]/, '"<"');
                }
                else {
                    cleaned[key] = value;
                }
            });
        }
        else {
            Object.entries(converted).forEach(([key, value]) => {
                if (typeof value === 'string') {
                    cleaned[key] = value.replace(/\[\[\[REPLACE_LESS_THAN]]]/, '"<"');
                }
                else {
                    cleaned[key] = value;
                }
            });
        }
        return cleaned;
    }
    return {};
}
exports.convertEncodedHTMLIntoJson = convertEncodedHTMLIntoJson;
