"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createDiffMarkdown = createDiffMarkdown;
const tslib_1 = require("tslib");
const mustache_1 = tslib_1.__importDefault(require("mustache"));
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const automatticUpdateTemplate_json_1 = tslib_1.__importDefault(require("../resources/automatticUpdateTemplate.json"));
/**
 * Generates a markdown representation of the differences between two profiles.
 *
 * The function processes the differences to create a renderable data structure
 * that includes added controls, renamed controls, and updated properties such as
 * checks, fixes, impacts, titles, and descriptions. It then uses a mustache template
 * to render the markdown output.
 *
 * @param diff - An object containing the differences between two profiles.
 * @param diff.ignoreFormattingDiff - The profile differences ignoring formatting changes.
 * @param diff.rawDiff - The raw differences between the profiles.
 * @returns A string containing the markdown representation of the differences.
 */
function createDiffMarkdown(diff) {
    const renderableDiffData = {
        addedControls: Object.values(diff.ignoreFormattingDiff.addedControls),
        hasRenamedControls: false,
        renamedControls: [],
        updatedChecks: [],
        updatedFixes: [],
        updatedImpacts: [],
        updatedTitles: [],
        updatedDescriptions: [],
    };
    Object.entries(diff.ignoreFormattingDiff.renamedControlIDs).forEach(([oldId, newId]) => {
        renderableDiffData.hasRenamedControls = true;
        renderableDiffData.renamedControls.push({
            oldId: oldId,
            newId: newId,
        });
    });
    Object.entries(diff.rawDiff.changedControls).forEach(([id, controlDiff]) => {
        var _a, _b;
        if ((_a = controlDiff.descs) === null || _a === void 0 ? void 0 : _a.check) {
            const oldCheck = lodash_1.default.get(controlDiff.descs.check, '__old', 'undefined');
            const newCheck = lodash_1.default.get(controlDiff.descs.check, '__new', 'undefined');
            if (oldCheck.replace(/\n/g, '').replace(/\W/g, '') !==
                newCheck.replace(/\n/g, '').replace(/\W/g, '')) {
                renderableDiffData.updatedChecks.push({
                    id: id,
                    old: oldCheck,
                    new: newCheck,
                });
            }
        }
        if ((_b = controlDiff.descs) === null || _b === void 0 ? void 0 : _b.fix) {
            const oldFix = lodash_1.default.get(controlDiff.descs.fix, '__old', 'undefined');
            const newFix = lodash_1.default.get(controlDiff.descs.fix, '__new', 'undefined');
            if (oldFix.replace(/\n/g, '').replace(/\W/g, '') !==
                newFix.replace(/\n/g, '').replace(/\W/g, '')) {
                renderableDiffData.updatedFixes.push({
                    id: id,
                    old: oldFix,
                    new: newFix,
                });
            }
        }
        if (controlDiff.impact) {
            const oldImpact = lodash_1.default.get(controlDiff.impact, '__old', 'undefined');
            const newImpact = lodash_1.default.get(controlDiff.impact, '__new', 'undefined');
            if (oldImpact !== newImpact) {
                renderableDiffData.updatedImpacts.push({
                    id: id,
                    old: oldImpact,
                    new: newImpact,
                });
            }
        }
        if (controlDiff.title) {
            const oldTitle = lodash_1.default.get(controlDiff.title, '__old', 'undefined');
            const newTitle = lodash_1.default.get(controlDiff.title, '__new', 'undefined');
            if (oldTitle !== newTitle) {
                renderableDiffData.updatedTitles.push({
                    id: id,
                    old: oldTitle,
                    new: newTitle,
                });
            }
        }
        if (controlDiff.desc) {
            const oldDesc = lodash_1.default.get(controlDiff.desc, '__old', 'undefined');
            const newDesc = lodash_1.default.get(controlDiff.desc, '__new', 'undefined');
            if (oldDesc !== newDesc) {
                renderableDiffData.updatedDescriptions.push({
                    id: id,
                    old: oldDesc,
                    new: newDesc,
                });
            }
        }
    });
    // Render output
    return mustache_1.default.render(automatticUpdateTemplate_json_1.default.data, renderableDiffData);
}
