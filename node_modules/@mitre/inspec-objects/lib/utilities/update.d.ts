import winston from 'winston';
import Control from '../objects/control';
import Profile from '../objects/profile';
import { ProfileDiff } from '../types/diff';
import { OvalDefinitionValue } from '../types/oval';
/**
 * Represents the return type of an updated profile operation.
 *
 * @typedef UpdatedProfileReturn
 *
 * @property {Profile} profile - The updated profile object.
 * @property {Object} diff - The differences between the original and updated profiles.
 * @property {ProfileDiff} diff.ignoreFormattingDiff - The differences ignoring formatting changes.
 * @property {Record<string, unknown>} diff.rawDiff - The raw differences as a record.
 * @property {string} markdown - The markdown representation of the differences.
 */
export type UpdatedProfileReturn = {
    profile: Profile;
    diff: {
        ignoreFormattingDiff: ProfileDiff;
        rawDiff: Record<string, unknown>;
    };
    markdown: string;
};
/**
 * This is the most likely thing to break if you are getting code formatting issues.
 *
 * Extracts the `describe` block (what is actually run by inspec for validation)
 * from an InSpec control object, collapsing multi-line strings.
 *
 * @param control - The InSpec control object containing the code to extract the `describe` block from.
 * @returns The extracted `describe` block as a string, or an empty string if the control has no code.
 */
export declare function getExistingDescribeFromControl(control: Control): string;
/**
 * Finds an updated control from a list of updated controls by matching all possible identifiers.
 *
 * This function attempts to find a matching control in the `updatedControls` array by comparing
 * the `id` of the `existingControl` with the `id` of each control in the `updatedControls` array.
 * If no match is found based on `id`, it then tries to match based on legacy identifiers found
 * in the `tags.legacy` property of each control in the `updatedControls` array.
 *
 * @param existingControl - The control to find a match for in the updated controls.
 * @param updatedControls - An array of updated controls to search through.
 * @returns The matching updated control if found, otherwise `undefined`.
 */
export declare function findUpdatedControlByAllIdentifiers(existingControl: Control, updatedControls: Control[]): Control | undefined;
/**
 * Updates a given control object with the provided partial update and logs the process.
 *
 * @param {Control} from - The original control object to be updated.
 * @param {Partial<Control>} update - An object containing the properties to update in the original control.
 * @param {winston.Logger} logger - A logger instance to log debug information.
 * @returns {Control} - The updated control object.
 */
export declare function updateControl(from: Control, update: Partial<Control>, logger: winston.Logger): Control;
/**
 * Updates the describe block of a control with the describe block from another control.
 *
 * @param from - The control from which to get the existing describe block.
 * @param update - The partial control data to update.
 * @param logger - The logger instance to use for logging debug information.
 * @returns The updated control with the describe block from the `from` control.
 */
export declare function updateControlDescribeBlock(from: Control, update: Partial<Control>, logger: winston.Logger): Control;
/**
 * Updates a given profile with new metadata and controls from another profile.
 *
 * @param from - The original profile to be updated.
 * @param using - The profile containing the new metadata and controls.
 * @param logger - A winston logger instance for logging debug information.
 * @returns An object containing the updated profile and the diff between the original and updated profiles, excluding markdown.
 *
 * @throws Will throw an error if a new control is added but the control data is not available.
 */
export declare function updateProfile(from: Profile, using: Profile, logger: winston.Logger): Omit<UpdatedProfileReturn, 'markdown'>;
/**
 * Update a Profile with with new metadata from a XCCDF benchmark
 *
 * @param from - A Profile object
 * @param using - An XCCDF in string format (XML)
 * @param id - Specifies the rule ID format to use ('group', 'rule', 'version', or 'cis').
 * @param logger - A winston logger instance for logging debug information.
 * @param ovalDefinitions - Optional OVAL definitions to use for resolving values.
 * @returns The Updated Profile (profile, the diff between from and using, and the markdown)
 */
export declare function updateProfileUsingXCCDF(from: Profile, using: string, id: 'group' | 'rule' | 'version' | 'cis', logger: winston.Logger, ovalDefinitions?: Record<string, OvalDefinitionValue>): UpdatedProfileReturn;
