"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.diffProfile = exports.ignoreFormattingDiff = exports.removeNewlines = void 0;
const tslib_1 = require("tslib");
const json_diff_1 = require("json-diff");
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const update_1 = require("./update");
const global_1 = require("./global");
function removeNewlines(control) {
    if (!control) {
        return {};
    }
    return lodash_1.default.mapValues(control, (value) => {
        if (typeof value === 'string') {
            return value.replace(/\n/g, '{{{{newlineHERE}}}}').trim();
        }
        else if (typeof value === 'object' && value !== null) {
            return removeNewlines(value);
        }
        return value;
    });
}
exports.removeNewlines = removeNewlines;
// Goal is to use a linter for the formatting and compare characters without whitespaces here
function ignoreFormattingDiff(diffData) {
    return lodash_1.default.transform(diffData, (result, diffValue, key) => {
        if (lodash_1.default.has(diffValue, '__new')) {
            // Remove any trailing space
            if (typeof lodash_1.default.get(diffValue, '__new') === 'string' &&
                typeof lodash_1.default.get(diffValue, '__old') === 'string') {
                if ((0, global_1.removeWhitespace)(lodash_1.default.get(diffValue, '__new')) !==
                    (0, global_1.removeWhitespace)(lodash_1.default.get(diffValue, '__old'))) {
                    lodash_1.default.set(result, key, lodash_1.default.get(diffValue, '__new'));
                }
            }
            else {
                result[key] = lodash_1.default.get(diffValue, '__new');
            }
        }
        else if (Array.isArray(diffValue)) {
            result[key] = diffValue
                .map((value) => value[0] === '+' && value[1])
                .filter((value) => value);
        }
        else if (typeof diffValue === 'object') {
            result[key] = ignoreFormattingDiff(diffValue);
        }
        else if (key.endsWith('__deleted')) {
            return undefined;
        }
        else {
            result[key] = diffValue;
        }
    });
}
exports.ignoreFormattingDiff = ignoreFormattingDiff;
function diffProfile(fromProfile, toProfile, logger) {
    var _a;
    const profileDiff = {
        addedControlIDs: [],
        removedControlIDs: [],
        renamedControlIDs: {},
        changedControlIDs: [],
        addedControls: {},
        changedControls: {},
    };
    const originalDiff = {
        addedControlIDs: [],
        removedControlIDs: [],
        renamedControlIDs: {},
        changedControlIDs: [],
        addedControls: {},
        changedControls: {},
    };
    const fromControlIDs = fromProfile.controls
        .map((control) => control.id)
        .sort();
    const toControlIDs = toProfile.controls.map((control) => control.id).sort();
    // Find new controls
    const controlIDDiff = (_a = (0, json_diff_1.diff)(fromControlIDs, toControlIDs)) === null || _a === void 0 ? void 0 : _a.filter((item) => !(item.length === 1 && item[0] === ' '));
    // Contains the new IDs
    const changedControlIds = [];
    // a diffValue has an entry for both what was subtracted ("-")
    // and what was added ("+") -- need to handle both
    controlIDDiff === null || controlIDDiff === void 0 ? void 0 : controlIDDiff.forEach((diffValue) => {
        if (diffValue[0] === '-') {
            const existingControl = fromProfile.controls.find((control) => control.id === diffValue[1]);
            // Check if the control has been given a new ID
            if (existingControl) {
                const newControl = (0, update_1.findUpdatedControlByAllIdentifiers)(existingControl, toProfile.controls);
                if (newControl && newControl.id !== existingControl.id) {
                    profileDiff.renamedControlIDs[existingControl.id] = newControl.id;
                    originalDiff.renamedControlIDs[existingControl.id] = newControl.id;
                    changedControlIds.push(newControl.id.toLowerCase());
                    const controlDiff = lodash_1.default.omit((0, json_diff_1.diff)(existingControl, newControl), 'code__deleted');
                    // logger.info("CONTROL DIFF:" + JSON.stringify(controlDiff, null, 2))
                    const renamedControlIgnoredFormatting = ignoreFormattingDiff(controlDiff);
                    logger.info(JSON.stringify(renamedControlIgnoredFormatting));
                    profileDiff.changedControls[newControl.id] = renamedControlIgnoredFormatting;
                    profileDiff.changedControlIDs.push(newControl.id);
                    originalDiff.changedControls[newControl.id] = controlDiff;
                    originalDiff.changedControlIDs.push(newControl.id);
                    logger.verbose(`Control ${existingControl.id} has been updated to ${newControl.id}`);
                }
                else {
                    profileDiff.removedControlIDs.push(diffValue[1]);
                    originalDiff.removedControlIDs.push(diffValue[1]);
                }
            }
            else {
                logger.error(`Unable to find existing control ${diffValue[1]}`);
            }
        }
        else if (diffValue[0] === '+' && !changedControlIds.includes(diffValue[1].toLowerCase()) && diffValue[1]) {
            logger.info(JSON.stringify(diffValue));
            logger.info(JSON.stringify(changedControlIds));
            profileDiff.addedControlIDs.push(diffValue[1]);
            originalDiff.addedControlIDs.push(diffValue[1]);
        }
    });
    // take the list of renamed controls out of the list of added controls
    // (a control is not "new" if it was renamed)
    profileDiff.addedControlIDs = profileDiff.addedControlIDs.filter((item) => !Object.values(profileDiff.renamedControlIDs).includes(item));
    originalDiff.addedControlIDs = originalDiff.addedControlIDs.filter((item) => !Object.values(originalDiff.renamedControlIDs).includes(item));
    // Add new controls to addedControls
    profileDiff.addedControlIDs.forEach((addedControl) => {
        const newControl = toProfile.controls.find((control) => addedControl === control.id);
        if (newControl && !profileDiff.changedControls[newControl.id]) {
            profileDiff.addedControls[addedControl] = newControl;
            originalDiff.addedControls[addedControl] = newControl;
        }
    });
    // Find changed controls
    for (const fromControl of fromProfile.controls) {
        const toControl = toProfile.controls.find((control) => control.id === fromControl.id);
        if (toControl) {
            const controlDiff = lodash_1.default.omit((0, json_diff_1.diff)(fromControl, toControl), 'code__deleted');
            if (controlDiff) {
                // eslint-disable-next-line  @typescript-eslint/no-non-null-assertion
                profileDiff.changedControls[toControl.id] = ignoreFormattingDiff(controlDiff);
                profileDiff.changedControlIDs.push(toControl.id);
                // eslint-disable-next-line  @typescript-eslint/no-non-null-assertion
                originalDiff.changedControls[toControl.id] = controlDiff;
                originalDiff.changedControlIDs.push(toControl.id);
            }
        }
    }
    return { ignoreFormattingDiff: profileDiff, rawDiff: originalDiff };
}
exports.diffProfile = diffProfile;
