import { BaseCommand } from '../../utils/oclif/baseCommand';
/**
 * This class is used to prepare profile controls from one SRG or STIG baseline
 * to another. The controls are updated based on guidances provided by the
 * Extensible Configuration Checklist Description Format (XCCDF) document.
 *
 * The XCCDF document is an XML formatted file that containing the updated
 * structured collection of security configuration rules for a specific target
 * system.
 *
 * How are profile controls updated from baseline X to baseline Y
 * 1 - The directory where baseline X controls are located is provided
 * 2 - An InSpec json formatted file containing all baseline X controls is
 *     provided or generated
 *     a - The json file is generated using the inspec json CLI command
 * 3 - A XCCDF file containing the new baseline guidances is provided. The file
 *     is obtained from the DISA site
 *
 * Process:
 * 1 - Housekeeping is done to ensure required data is provided
 * 2 - The InSpec json object is processed - it is converted into a
 *     Profile object (baseline X)
 * 3 - The XCCDF XML data is converted into a json Profile (includes controls)
 *     (baseline Y)
 * 4 - The baseline Y metadata is combined with baseline X code
 * 5 - New controls are written to provided output directory
 */
export default class GenerateUpdateControls extends BaseCommand<typeof GenerateUpdateControls> {
    static readonly usage = "<%= command.id %> [ARGUMENTS]";
    static readonly description = "Update Profile Control(s) from baseline X to Y based on DISA XCCDF guidance";
    static readonly examples: string[];
    static readonly flags: {
        xccdfXmlFile: import("@oclif/core/interfaces").OptionFlag<string, import("@oclif/core/interfaces").CustomOptions>;
        inspecJsonFile: import("@oclif/core/interfaces").OptionFlag<string | undefined, import("@oclif/core/interfaces").CustomOptions>;
        controlsDir: import("@oclif/core/interfaces").OptionFlag<string, import("@oclif/core/interfaces").CustomOptions>;
        controlPrefix: import("@oclif/core/interfaces").OptionFlag<string, import("@oclif/core/interfaces").CustomOptions>;
        useXccdfGroupId: import("@oclif/core/interfaces").BooleanFlag<boolean>;
        formatControls: import("@oclif/core/interfaces").BooleanFlag<boolean>;
        backupControls: import("@oclif/core/interfaces").BooleanFlag<boolean>;
    };
    static backupDir: string;
    run(): Promise<any>;
}
