import Profile from '@mitre/inspec-objects/lib/objects/profile';
import { BaseCommand } from '../../utils/oclif/baseCommand';
/**
 * This class extends the capabilities of the update_controls4delta providing the following capabilities:
 *   1 - Creates new controls found in updated guidances
*    2 - Fuzzy matching capability (optional)
*        a - Maps controls based on similarity and not control IDs
*        b - For controls which a match is found, the describe block (code)
*            within the old control is mapped over to the new control
*    3 - Detailed logging
*        a - report file (.md), mapping statistics (CliProcessOutput.log)
*/
export default class GenerateDelta extends BaseCommand<typeof GenerateDelta> {
    static description: string;
    static flags: {
        inspecJsonFile: import("@oclif/core/interfaces").OptionFlag<string | undefined, import("@oclif/core/interfaces").CustomOptions>;
        xccdfXmlFile: import("@oclif/core/interfaces").OptionFlag<string | undefined, import("@oclif/core/interfaces").CustomOptions>;
        deltaOutputDir: import("@oclif/core/interfaces").OptionFlag<string | undefined, import("@oclif/core/interfaces").CustomOptions>;
        ovalXmlFile: import("@oclif/core/interfaces").OptionFlag<string | undefined, import("@oclif/core/interfaces").CustomOptions>;
        reportFile: import("@oclif/core/interfaces").OptionFlag<string | undefined, import("@oclif/core/interfaces").CustomOptions>;
        idType: import("@oclif/core/interfaces").OptionFlag<string, import("@oclif/core/interfaces").CustomOptions>;
        runMapControls: import("@oclif/core/interfaces").BooleanFlag<boolean>;
        controlsDir: import("@oclif/core/interfaces").OptionFlag<string | undefined, import("@oclif/core/interfaces").CustomOptions>;
    };
    static readonly examples: {
        description: string;
        command: string;
    }[];
    static match: number;
    static noMatch: number;
    static dupMatch: number;
    static posMisMatch: number;
    static newXccdfControl: number;
    static oldControlsLength: number;
    static newControlsLength: number;
    run(): Promise<void>;
    mapControls(oldProfile: Profile, newProfile: Profile): Promise<object>;
    getMappedStatisticsValidation(totalMappedControls: number, statValidation: string): string;
    requiredFlagsProvided(flags: any): boolean;
    updateTitle(str: string): string;
    createMappedDirectory(controlsDir: string): string;
}
