import winston from 'winston';
import { Profile } from '@mitre/inspec-objects';
import { BaseCommand } from '../../utils/oclif/baseCommand';
/**
 * This class extends the capabilities of the update_controls4delta providing the following capabilities:
 *   1 - Creates new controls found in updated guidances
*    2 - Fuzzy matching capability (optional)
*        a - Maps controls based on similarity and not control IDs
*        b - For controls which a match is found, the describe block (code)
*            within the old control is mapped over to the new control
*    3 - Detailed logging
*        a - report file (.md), mapping statistics (CliProcessOutput.log)
*/
export default class GenerateDelta extends BaseCommand<typeof GenerateDelta> {
    static readonly description = "Update an existing InSpec profile with new or updated XCCDF guidance";
    static readonly flags: {
        inspecJsonFile: import("@oclif/core/interfaces").OptionFlag<string | undefined, import("@oclif/core/interfaces").CustomOptions>;
        xccdfXmlFile: import("@oclif/core/interfaces").OptionFlag<string | undefined, import("@oclif/core/interfaces").CustomOptions>;
        xccdfUrl: import("@oclif/core/interfaces").OptionFlag<import("url").URL | undefined, import("@oclif/core/interfaces").CustomOptions>;
        deltaOutputDir: import("@oclif/core/interfaces").OptionFlag<string | undefined, import("@oclif/core/interfaces").CustomOptions>;
        ovalXmlFile: import("@oclif/core/interfaces").OptionFlag<string | undefined, import("@oclif/core/interfaces").CustomOptions>;
        reportFile: import("@oclif/core/interfaces").OptionFlag<string | undefined, import("@oclif/core/interfaces").CustomOptions>;
        idType: import("@oclif/core/interfaces").OptionFlag<string, import("@oclif/core/interfaces").CustomOptions>;
        runMapControls: import("@oclif/core/interfaces").BooleanFlag<boolean>;
        controlsDir: import("@oclif/core/interfaces").OptionFlag<string | undefined, import("@oclif/core/interfaces").CustomOptions>;
    };
    static readonly examples: {
        description: string;
        command: string;
    }[];
    static logger: winston.Logger;
    static match: number;
    static noMatch: number;
    static dupMatch: number;
    static posMisMatch: number;
    static newXccdfControl: number;
    static oldControlsLength: number;
    static newControlsLength: number;
    run(): Promise<void>;
    mapControls(oldProfile: Profile, newProfile: Profile): Promise<object>;
    getMappedStatisticsValidation(totalMappedControls: number, statValidation: string): string;
    requiredFlagsProvided(flags: any): boolean;
    /**
     * Retrieves the content of an XCCDF file or extracts it from a URL or zip package.
     *
     * @param xccdfType - The type of the XCCDF input, either 'File' or 'URL'.
     * @param xccdfInput - The path to the XCCDF file or the URL containing the XCCDF content.
     * @returns A promise that resolves to an object containing:
     *          - `xccdfFile`: The name of the XCCDF file.
     *          - `xccdfContent`: The content of the XCCDF file as a string.
     *
     * @throws Will terminate the process if the input file or URL is invalid or processing fails.
     */
    getXccdfContent(xccdfType: string, xccdfInput: string): Promise<{
        xccdfFile: string;
        xccdfContent: string;
    }>;
    updateTitle(str: string): string;
    /**
     * Creates the mapped directory for controls within the specified directory path.
     *
     * This method performs the following steps:
     * 1. Determines the destination file path based on the provided `controlsDir`.
     * 2. Constructs the path for the mapped directory (`mapped_controls/controls`).
     * 3. Deletes the mapped directory if it already exists.
     * 4. Creates the mapped directory recursively.
     * 5. Copies the `inspec.yml` file from the destination directory to the parent
     *    of the mapped directory to ensure proper generation of the profile controls summary.
     *
     * @param controlsDir - The path to the directory containing the controls.
     * @returns The path to the newly created mapped directory.
     * @throws An error if any file system operation fails, with the error message extracted using `getErrorMessage`.
     */
    createMappedDirectory(controlsDir: string): string;
    logThis(logMsg: string, logLevel: string): void;
}
