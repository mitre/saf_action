import { InSpecControl } from '../../types/inspec';
import { BaseCommand } from '../../utils/oclif/baseCommand';
export default class Spreadsheet2HDF extends BaseCommand<typeof Spreadsheet2HDF> {
    static readonly usage = "<%= command.id %> -i, --input=<XLSX or CSV> -o, --output=FOLDER";
    static readonly description = "Convert CSV STIGs or CIS XLSX benchmarks into a skeleton InSpec profile";
    static readonly examples: string[];
    static readonly flags: {
        input: import("@oclif/core/interfaces").OptionFlag<string, import("@oclif/core/interfaces").CustomOptions>;
        controlNamePrefix: import("@oclif/core/interfaces").OptionFlag<string, import("@oclif/core/interfaces").CustomOptions>;
        format: import("@oclif/core/interfaces").OptionFlag<string, import("@oclif/core/interfaces").CustomOptions>;
        encodingHeader: import("@oclif/core/interfaces").BooleanFlag<boolean>;
        metadata: import("@oclif/core/interfaces").OptionFlag<string | undefined, import("@oclif/core/interfaces").CustomOptions>;
        mapping: import("@oclif/core/interfaces").OptionFlag<string | undefined, import("@oclif/core/interfaces").CustomOptions>;
        lineLength: import("@oclif/core/interfaces").OptionFlag<number, import("@oclif/core/interfaces").CustomOptions>;
        output: import("@oclif/core/interfaces").OptionFlag<string, import("@oclif/core/interfaces").CustomOptions>;
    };
    matchReferences(control: Partial<InSpecControl>): Partial<InSpecControl>;
    matchImpactFromSeverityIfImpactNotSet(control: Partial<InSpecControl>): Partial<InSpecControl>;
    matchCISControls(control: Partial<InSpecControl>, flags: {
        [name: string]: any;
    }): Partial<InSpecControl>;
    extractCCIsFromText(control: Partial<InSpecControl>): Partial<InSpecControl>;
    run(): Promise<void>;
}
