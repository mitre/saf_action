"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@oclif/core");
const fs_1 = tslib_1.__importDefault(require("fs"));
const hdf_converters_1 = require("@mitre/hdf-converters");
const global_1 = require("../../utils/global");
const baseCommand_1 = require("../../utils/oclif/baseCommand");
class AnchoreGrype2HDF extends baseCommand_1.BaseCommand {
    static usage = '<%= command.id %> -i <anchoregrype-json> -o <hdf-scan-results-json>';
    static description = 'Translate an Anchore Grype output file into an HDF results set';
    static examples = ['<%= config.bin %> <%= command.id %> -i anchoregrype.json -o output-hdf-name.json'];
    static flags = {
        input: core_1.Flags.string({
            char: 'i',
            required: true,
            description: 'Input Anchore Grype file',
        }),
        output: core_1.Flags.string({
            char: 'o',
            required: true,
            description: 'Output HDF file',
        }),
        includeRaw: core_1.Flags.boolean({
            char: 'w',
            required: false,
            description: 'Include raw data from the input Anchore Grype file',
        }),
    };
    async run() {
        const { flags } = await this.parse(AnchoreGrype2HDF);
        const input = fs_1.default.readFileSync(flags.input, 'utf8');
        (0, global_1.checkInput)({ data: input, filename: flags.input }, 'grype', 'Anchore Grype JSON results file');
        const converter = new hdf_converters_1.AnchoreGrypeMapper(input, flags.includeRaw);
        fs_1.default.writeFileSync((0, global_1.checkSuffix)(flags.output), JSON.stringify(converter.toHdf(), null, 2));
    }
}
exports.default = AnchoreGrype2HDF;
//# sourceMappingURL=anchoregrype2hdf.js.map