"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@oclif/core");
const fs_1 = tslib_1.__importDefault(require("fs"));
const hdf_converters_1 = require("@mitre/hdf-converters");
const global_1 = require("../../utils/global");
class AnchoreGrype2HDF extends core_1.Command {
    static usage = 'convert anchoregrype2hdf -i <anchoregrype-json> -o <hdf-scan-results-json>';
    static description = 'Translate a Anchore Grype output file into an HDF results set';
    static examples = ['saf convert anchoregrype2hdf -i anchoregrype.json -o output-hdf-name.json'];
    static flags = {
        help: core_1.Flags.help({ char: 'h' }),
        input: core_1.Flags.string({ char: 'i', required: true, description: 'Input Anchore Grype file' }),
        output: core_1.Flags.string({ char: 'o', required: true, description: 'Output HDF file' }),
        'with-raw': core_1.Flags.boolean({ char: 'w', required: false }),
    };
    async run() {
        const { flags } = await this.parse(AnchoreGrype2HDF);
        const input = fs_1.default.readFileSync(flags.input, 'utf8');
        (0, global_1.checkInput)({ data: input, filename: flags.input }, 'grype', 'Anchore Grype JSON results file');
        const converter = new hdf_converters_1.AnchoreGrypeMapper(input, flags['with-raw']);
        fs_1.default.writeFileSync((0, global_1.checkSuffix)(flags.output), JSON.stringify(converter.toHdf(), null, 2));
    }
}
exports.default = AnchoreGrype2HDF;
//# sourceMappingURL=anchoregrype2hdf.js.map