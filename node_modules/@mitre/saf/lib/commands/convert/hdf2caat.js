"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@oclif/core");
const fs_1 = tslib_1.__importDefault(require("fs"));
const path_1 = tslib_1.__importDefault(require("path"));
const hdf_converters_1 = require("@mitre/hdf-converters");
const baseCommand_1 = require("../../utils/oclif/baseCommand");
class HDF2CAAT extends baseCommand_1.BaseCommand {
    static usage = '<%= command.id %> -i <hdf-scan-results-json>... -o <output-caat-xlsx> [-h]';
    static description = 'Translate an HDF file into a Compliance Assessment and Audit Tracking (CAAT) XLSX file';
    static examples = [
        '<%= config.bin %> <%= command.id %> -i hdf_input.json -o caat-results.xlsx',
    ];
    static flags = {
        input: core_1.Flags.string({
            char: 'i',
            required: true,
            multiple: true,
            description: 'Input HDF JSON file',
        }),
        output: core_1.Flags.string({
            char: 'o',
            required: true,
            description: 'Output CAAT XLSX file',
        }),
    };
    async run() {
        const { flags } = await this.parse(HDF2CAAT);
        const inputData = flags.input.map(filename => ({
            data: fs_1.default.readFileSync(filename, 'utf8'),
            filename: path_1.default.basename(filename),
        }));
        const converter = new hdf_converters_1.FromHDFToCAATMapper(inputData);
        fs_1.default.writeFileSync(flags.output, converter.toCAAT(false, { bookType: 'xlsx', type: 'buffer' }));
    }
}
exports.default = HDF2CAAT;
//# sourceMappingURL=hdf2caat.js.map