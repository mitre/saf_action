"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@oclif/core");
const fs_1 = tslib_1.__importDefault(require("fs"));
const hdf_converters_1 = require("@mitre/hdf-converters");
const global_1 = require("../../utils/global");
class Veracode2HDF extends core_1.Command {
    async run() {
        const { flags } = await this.parse(Veracode2HDF);
        // Check for correct input type
        const data = fs_1.default.readFileSync(flags.input, 'utf8');
        (0, global_1.checkInput)({ data, filename: flags.input }, 'veracode', 'Veracode XML');
        const converter = new hdf_converters_1.VeracodeMapper(data);
        fs_1.default.writeFileSync((0, global_1.checkSuffix)(flags.output), JSON.stringify(converter.toHdf()));
    }
}
Veracode2HDF.usage = 'convert veracode2hdf -i <veracode-xml> -o <hdf-scan-results-json> [-h]';
Veracode2HDF.description = 'Translate a Veracode XML file into a Heimdall Data Format JSON file';
Veracode2HDF.examples = ['saf convert veracode2hdf -i veracode_results.xml -o output-hdf-name.json'];
Veracode2HDF.flags = {
    help: core_1.Flags.help({ char: 'h' }),
    input: core_1.Flags.string({ char: 'i', required: true, description: 'Input Veracode XML File' }),
    output: core_1.Flags.string({ char: 'o', required: true, description: 'Output HDF JSON File' }),
};
exports.default = Veracode2HDF;
