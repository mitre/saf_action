"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@oclif/core");
const fs_1 = tslib_1.__importDefault(require("fs"));
const hdf_converters_1 = require("@mitre/hdf-converters");
const path_1 = tslib_1.__importDefault(require("path"));
const lodash_1 = tslib_1.__importDefault(require("lodash"));
class Prisma2HDF extends core_1.Command {
    static usage = 'convert prisma2hdf -i <prisma-cloud-csv> -o <hdf-output-folder> [-h]';
    static description = 'Translate a Prisma Cloud Scan Report CSV file into Heimdall Data Format JSON files';
    static examples = ['saf convert prisma2hdf -i prismacloud-report.csv -o output-hdf-name.json'];
    static flags = {
        help: core_1.Flags.help({ char: 'h' }),
        input: core_1.Flags.string({ char: 'i', required: true, description: 'Prisma Cloud Scan Report CSV' }),
        output: core_1.Flags.string({ char: 'o', required: true, description: 'Output HDF JSON File' }),
    };
    async run() {
        const { flags } = await this.parse(Prisma2HDF);
        const converter = new hdf_converters_1.PrismaMapper(fs_1.default.readFileSync(flags.input, { encoding: 'utf8' }));
        const results = converter.toHdf();
        if (!fs_1.default.existsSync(flags.output)) {
            fs_1.default.mkdirSync(flags.output);
        }
        lodash_1.default.forOwn(results, result => {
            fs_1.default.writeFileSync(path_1.default.join(flags.output, `${lodash_1.default.get(result, 'platform.target_id')}.json`), JSON.stringify(result));
        });
    }
}
exports.default = Prisma2HDF;
