"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@oclif/core");
const fs_1 = tslib_1.__importDefault(require("fs"));
const hdf_converters_1 = require("@mitre/hdf-converters");
const global_1 = require("../../utils/global");
class Sonarqube2HDF extends core_1.Command {
    async run() {
        const { flags } = await this.parse(Sonarqube2HDF);
        const converter = new hdf_converters_1.SonarQubeResults(flags.url, flags.projectKey, flags.auth, flags.branch, flags.pullRequestID);
        fs_1.default.writeFileSync((0, global_1.checkSuffix)(flags.output), JSON.stringify(await converter.toHdf()));
    }
}
exports.default = Sonarqube2HDF;
Sonarqube2HDF.usage = 'convert sonarqube2hdf -n <sonar_project_key> -u <http://your.sonar.instance:9000> --auth <your-sonar-api-key> [ -b <target_branch> || -p <pull-request-id> ] -o <hdf-scan-results-json>';
Sonarqube2HDF.description = 'Pull SonarQube vulnerabilities for the specified project name and optional branch or pull/merge request ID name from an API and convert into a Heimdall Data Format JSON file';
Sonarqube2HDF.examples = ['saf convert sonarqube2hdf -n sonar_project_key -u http://sonar:9000 --auth YOUR_API_KEY [ -b my_branch || -p 123 ]-o scan_results.json'];
Sonarqube2HDF.flags = {
    help: core_1.Flags.help({ char: 'h' }),
    auth: core_1.Flags.string({ char: 'a', required: true }),
    projectKey: core_1.Flags.string({ char: 'n', required: true }),
    url: core_1.Flags.string({ char: 'u', required: true }),
    branch: core_1.Flags.string({ char: 'b', required: false, exclusive: ['pullRequestID'], description: 'Requires Sonarqube Developer Edition or above' }),
    pullRequestID: core_1.Flags.string({ char: 'p', required: false, exclusive: ['branch'], description: 'Requires Sonarqube Developer Edition or above' }),
    output: core_1.Flags.string({ char: 'o', required: true }),
};
