"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@oclif/core");
const fs_1 = tslib_1.__importDefault(require("fs"));
const hdf_converters_1 = require("@mitre/hdf-converters");
const global_1 = require("../../utils/global");
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const path_1 = tslib_1.__importDefault(require("path"));
class Trivy2HDF extends core_1.Command {
    static usage = 'convert trivy2hdf -i <trivy-finding-json> -o <hdf-output-folder>';
    static description = 'Translate a Trivy-derived AWS Security Finding Format results from JSONL into a Heimdall Data Format JSON file';
    static examples = ['saf convert trivy2hdf -i trivy-asff.json -o output-folder'];
    static flags = {
        help: core_1.Flags.help({ char: 'h' }),
        input: core_1.Flags.string({ char: 'i', required: true, description: 'Input Trivy ASFF JSON File' }),
        output: core_1.Flags.string({ char: 'o', required: true, description: 'Output HDF JSON Folder' }),
    };
    async run() {
        const { flags } = await this.parse(Trivy2HDF);
        // comes as an _asff.json file which is basically the array of findings but without the surrounding object; however, could also be properly formed asff since it depends on the template used
        const input = fs_1.default.readFileSync(flags.input, 'utf8').trim();
        // if (Array.isArray(JSON.parse(input))) {
        //   input = `{"Findings": ${fs.readFileSync(flags.input, 'utf8').trim()}}`
        // }
        (0, global_1.checkInput)({ data: input, filename: flags.input }, 'asff', 'Trivy-derived AWS Security Finding Format results');
        const converter = new hdf_converters_1.ASFFResults(input);
        const results = converter.toHdf();
        if (!fs_1.default.existsSync(flags.output)) {
            fs_1.default.mkdirSync(flags.output);
        }
        lodash_1.default.forOwn(results, (result, filename) => {
            fs_1.default.writeFileSync(path_1.default.join(flags.output, (0, global_1.checkSuffix)(filename)), JSON.stringify(result));
        });
    }
}
exports.default = Trivy2HDF;
