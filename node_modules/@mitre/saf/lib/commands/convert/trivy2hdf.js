"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@oclif/core");
const fs_1 = tslib_1.__importDefault(require("fs"));
const hdf_converters_1 = require("@mitre/hdf-converters");
const global_1 = require("../../utils/global");
class Trivy2HDF extends core_1.Command {
    async run() {
        const { flags } = await this.parse(Trivy2HDF);
        // comes as an _asff.json file which is basically the array of findings but without the surrounding object; however, could also be properly formed asff since it depends on the template used
        let input = fs_1.default.readFileSync(flags.input, 'utf-8').trim();
        if (Array.isArray(JSON.parse(input))) {
            input = `{"Findings": ${fs_1.default.readFileSync(flags.input, 'utf-8').trim()}}`;
        }
        const converter = new hdf_converters_1.ASFFResults(input);
        fs_1.default.writeFileSync((0, global_1.checkSuffix)(flags.output), JSON.stringify(converter.toHdf()));
    }
}
exports.default = Trivy2HDF;
Trivy2HDF.usage = 'convert trivy2hdf -i <asff-finding-json> [--securityhub <standard-1-json> ... <standard-n-json>] -o <hdf-scan-results-json>';
Trivy2HDF.description = 'Translate a Trivy-derived AWS Security Finding Format results from concatenated JSON blobs into a Heimdall Data Format JSON file';
Trivy2HDF.examples = ['saf convert trivy2hdf -i trivy-asff.json -o output-hdf-name.json'];
Trivy2HDF.flags = {
    help: core_1.Flags.help({ char: 'h' }),
    input: core_1.Flags.string({ char: 'i', required: true }),
    output: core_1.Flags.string({ char: 'o', required: true }),
};
