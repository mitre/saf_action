"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@oclif/core");
const inspecjs_1 = require("inspecjs");
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const fs_1 = tslib_1.__importDefault(require("fs"));
const uuid_1 = require("uuid");
const files_json_1 = tslib_1.__importDefault(require("../../resources/files.json"));
const mustache_1 = tslib_1.__importDefault(require("mustache"));
const global_1 = require("../../utils/global");
const checklist_1 = require("../../utils/checklist");
class HDF2CKL extends core_1.Command {
    async run() {
        const { flags } = await this.parse(HDF2CKL);
        const contextualizedEvaluation = (0, inspecjs_1.contextualizeEvaluation)(JSON.parse(fs_1.default.readFileSync(flags.input, 'utf8')));
        const profileName = contextualizedEvaluation.data.profiles[0].name;
        const controls = contextualizedEvaluation.contains.flatMap(profile => profile.contains) || [];
        let cklData = {};
        const cklMetadata = {
            fileName: (0, global_1.convertFullPathToFilename)(flags.input),
            benchmark: {
                title: null,
                version: null,
                plaintext: null,
            },
            stigid: profileName || null,
            role: null,
            type: null,
            hostname: flags.hostname || lodash_1.default.get(contextualizedEvaluation, 'evaluation.data.passthrough.hostname') || null,
            ip: flags.ip || lodash_1.default.get(contextualizedEvaluation, 'evaluation.data.passthrough.ip') || null,
            mac: flags.mac || lodash_1.default.get(contextualizedEvaluation, 'evaluation.data.passthrough.mac') || null,
            fqdn: flags.fqdn || lodash_1.default.get(contextualizedEvaluation, 'evaluation.data.passthrough.fqdn') || null,
            tech_area: null,
            target_key: null,
            web_or_database: null,
            web_db_site: null,
            web_db_instance: null,
        };
        if (flags.metadata) {
            const cklMetadataInput = JSON.parse(fs_1.default.readFileSync(flags.metadata, 'utf8'));
            for (const field in cklMetadataInput) {
                if (typeof cklMetadata[field] === 'string' || typeof cklMetadata[field] === 'object') {
                    cklMetadata[field] = cklMetadataInput[field];
                }
            }
        }
        cklData = {
            releaseInfo: cklMetadata.benchmark.plaintext,
            ...cklMetadata,
            profileInfo: (0, global_1.getProfileInfo)(contextualizedEvaluation, cklMetadata.fileName),
            uuid: (0, uuid_1.v4)(),
            controls: controls.map(control => (0, checklist_1.getDetails)(control, profileName)),
        };
        fs_1.default.writeFileSync(flags.output, mustache_1.default.render(files_json_1.default['cklExport.ckl'].data, cklData).replace(/[^\x00-\x7F]/g, ''));
    }
}
exports.default = HDF2CKL;
HDF2CKL.usage = 'hdf2ckl -i, --input=<INPUT-JSON> -o, --output=<OUTPUT-CKL>';
HDF2CKL.description = 'Translate a Heimdall Data Format JSON file into a DISA checklist file';
HDF2CKL.flags = {
    help: core_1.Flags.help({ char: 'h' }),
    input: core_1.Flags.string({ char: 'i', required: true, description: 'Input HDF file' }),
    metadata: core_1.Flags.string({ char: 'm', required: false, description: 'Metadata JSON file, generate one with "saf generate ckl_metadata"' }),
    output: core_1.Flags.string({ char: 'o', required: true, description: 'Output CKL file' }),
    hostname: core_1.Flags.string({ char: 'H', required: false, description: 'Hostname for CKL metadata' }),
    fqdn: core_1.Flags.string({ char: 'F', required: false, description: 'FQDN for CKL metadata' }),
    mac: core_1.Flags.string({ char: 'M', required: false, description: 'MAC address for CKL metadata' }),
    ip: core_1.Flags.string({ char: 'I', required: false, description: 'IP address for CKL metadata' }),
};
HDF2CKL.examples = ['saf convert hdf2ckl -i rhel7-results.json -o rhel7.ckl --fqdn reverseproxy.example.org --hostname reverseproxy --ip 10.0.0.3 --mac 12:34:56:78:90'];
