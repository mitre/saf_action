"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@oclif/core");
const fs_1 = tslib_1.__importDefault(require("fs"));
const hdf_converters_1 = require("@mitre/hdf-converters");
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const global_1 = require("../../utils/global");
class Snyk2HDF extends core_1.Command {
    static usage = 'convert snyk2hdf -i <snyk-json> -o <hdf-scan-results-json> [-h]';
    static description = 'Translate a Snyk results JSON file into a Heimdall Data Format JSON file\nA separate HDF JSON is generated for each project reported in the Snyk Report.';
    static examples = ['saf convert snyk2hdf -i snyk_results.json -o output-file-prefix'];
    static flags = {
        help: core_1.Flags.help({ char: 'h' }),
        input: core_1.Flags.string({ char: 'i', required: true, description: 'Input Snyk Results JSON File' }),
        output: core_1.Flags.string({ char: 'o', required: true, description: 'Output HDF JSON File' }),
    };
    async run() {
        const { flags } = await this.parse(Snyk2HDF);
        // Check for correct input type
        const data = fs_1.default.readFileSync(flags.input, 'utf8');
        (0, global_1.checkInput)({ data: data, filename: flags.input }, 'snyk', 'Snyk results JSON');
        const converter = new hdf_converters_1.SnykResults(data);
        const result = converter.toHdf();
        if (Array.isArray(result)) {
            for (const element of result) {
                fs_1.default.writeFileSync(`${flags.output.replaceAll(/\.json/gi, '')}-${lodash_1.default.get(element, 'platform.target_id')}.json`, JSON.stringify(element));
            }
        }
        else {
            fs_1.default.writeFileSync((0, global_1.checkSuffix)(flags.output), JSON.stringify(result));
        }
    }
}
exports.default = Snyk2HDF;
