"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@oclif/core");
const fs_1 = tslib_1.__importDefault(require("fs"));
const hdf_converters_1 = require("@mitre/hdf-converters");
const global_1 = require("../../utils/global");
class Prowler2HDF extends core_1.Command {
    async run() {
        const { flags } = await this.parse(Prowler2HDF);
        // comes as an asff-json file which is basically all the findings concatenated into one file instead of putting it in the proper wrapper data structure
        const input = `{"Findings": [${fs_1.default.readFileSync(flags.input, 'utf-8').trim().split('\n').join(',')}]}`;
        const converter = new hdf_converters_1.ASFFResults(input);
        fs_1.default.writeFileSync((0, global_1.checkSuffix)(flags.output), JSON.stringify(converter.toHdf()));
    }
}
exports.default = Prowler2HDF;
Prowler2HDF.usage = 'convert prowler2hdf -i <asff-finding-json> [--securityhub <standard-1-json> ... <standard-n-json>] -o <hdf-scan-results-json>';
Prowler2HDF.description = 'Translate a Prowler-derived AWS Security Finding Format results from concatenated JSON blobs into a Heimdall Data Format JSON file';
Prowler2HDF.examples = ['saf convert prowler2hdf -i prowler-asff.json -o output-hdf-name.json'];
Prowler2HDF.flags = {
    help: core_1.Flags.help({ char: 'h' }),
    input: core_1.Flags.string({ char: 'i', required: true }),
    output: core_1.Flags.string({ char: 'o', required: true }),
};
