"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@oclif/core");
const fs_1 = tslib_1.__importDefault(require("fs"));
const hdf_converters_1 = require("@mitre/hdf-converters");
const global_1 = require("../../utils/global");
class Sarif2HDF extends core_1.Command {
    async run() {
        const { flags } = await this.parse(Sarif2HDF);
        const converter = new hdf_converters_1.SarifMapper(fs_1.default.readFileSync(flags.input, 'utf8'));
        fs_1.default.writeFileSync((0, global_1.checkSuffix)(flags.output), JSON.stringify(converter.toHdf()));
    }
}
exports.default = Sarif2HDF;
Sarif2HDF.usage = 'convert sarif2hdf -i, --input=JSON -o, --output=OUTPUT';
Sarif2HDF.description = 'Translate a SARIF JSON file into a Heimdall Data Format JSON file\nSARIF level to HDF impact Mapping:\nSARIF level error -> HDF impact 0.7\nSARIF level warning -> HDF impact 0.5\nSARIF level note -> HDF impact 0.3\nSARIF level none -> HDF impact 0.1\nSARIF level not provided -> HDF impact 0.1 as default';
Sarif2HDF.examples = ['saf convert sarif2hdf -i sarif-results.json -o output-hdf-name.json'];
Sarif2HDF.flags = {
    help: core_1.Flags.help({ char: 'h' }),
    input: core_1.Flags.string({ char: 'i', required: true }),
    output: core_1.Flags.string({ char: 'o', required: true }),
};
