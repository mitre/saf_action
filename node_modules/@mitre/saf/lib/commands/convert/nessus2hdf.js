"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@oclif/core");
const fs_1 = tslib_1.__importDefault(require("fs"));
const hdf_converters_1 = require("@mitre/hdf-converters");
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const global_1 = require("../../utils/global");
const baseCommand_1 = require("../../utils/oclif/baseCommand");
class Nessus2HDF extends baseCommand_1.BaseCommand {
    static usage = '<%= command.id %> -i <nessus-xml> -o <hdf-scan-results-json> [-h] [-w]';
    static description = 'Translate a Nessus XML results file into a Heimdall Data Format JSON file\n' +
        "The current iteration maps all plugin families except 'Policy Compliance'\n" +
        'A separate HDF JSON is generated for each host reported in the Nessus Report.';
    static examples = [
        '<%= config.bin %> <%= command.id %> -i nessus_results.xml -o output-hdf-name.json',
    ];
    static flags = {
        input: core_1.Flags.string({
            char: 'i',
            required: true,
            description: 'Input Nessus XML File',
        }),
        output: core_1.Flags.string({
            char: 'o',
            required: true,
            description: 'Output HDF JSON File',
        }),
        includeRaw: core_1.Flags.boolean({
            char: 'w',
            required: false,
            description: 'Include raw input file in HDF JSON file',
        }),
    };
    async run() {
        const { flags } = await this.parse(Nessus2HDF);
        // Check for correct input type
        const data = fs_1.default.readFileSync(flags.input, 'utf8');
        (0, global_1.checkInput)({ data, filename: flags.input }, 'nessus', 'Nessus XML results file');
        const converter = new hdf_converters_1.NessusResults(data, flags.includeRaw);
        const result = converter.toHdf();
        if (Array.isArray(result)) {
            for (const element of result) {
                fs_1.default.writeFileSync(`${flags.output.replaceAll(/\.json/gi, '')}-${lodash_1.default.get(element, 'platform.target_id')}.json`, JSON.stringify(element, null, 2));
            }
        }
        else {
            fs_1.default.writeFileSync(`${(0, global_1.checkSuffix)(flags.output)}`, JSON.stringify(result, null, 2));
        }
    }
}
exports.default = Nessus2HDF;
//# sourceMappingURL=nessus2hdf.js.map