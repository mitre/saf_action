"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@oclif/core");
const fs_1 = tslib_1.__importDefault(require("fs"));
const hdf_converters_1 = require("@mitre/hdf-converters");
const files_json_1 = tslib_1.__importDefault(require("../../resources/files.json"));
const baseCommand_1 = require("../../utils/oclif/baseCommand");
class HDF2XCCDF extends baseCommand_1.BaseCommand {
    static usage = '<%= command.id %> -i <hdf-scan-results-json> -o <output-xccdf-xml> [-h]';
    static description = 'Translate an HDF file into an XCCDF XML file';
    static examples = [
        '<%= config.bin %> <%= command.id %> -i hdf_input.json -o xccdf-results.xml',
    ];
    static flags = {
        input: core_1.Flags.string({
            char: 'i',
            required: true,
            description: 'Input HDF JSON file',
        }),
        output: core_1.Flags.string({
            char: 'o',
            required: true,
            description: 'Output XCCDF XML file',
        }),
    };
    async run() {
        const { flags } = await this.parse(HDF2XCCDF);
        const converter = new hdf_converters_1.FromHDFToXCCDFMapper(fs_1.default.readFileSync(flags.input, 'utf8'), files_json_1.default['xccdfTemplate.xml'].data);
        fs_1.default.writeFileSync(flags.output, converter.toXCCDF());
    }
}
exports.default = HDF2XCCDF;
//# sourceMappingURL=hdf2xccdf.js.map