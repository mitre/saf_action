import { SplunkMapper } from '@mitre/hdf-converters/lib/src/splunk-mapper';
import { BaseCommand } from '../../utils/oclif/baseCommand';
export default class Splunk2HDF extends BaseCommand<typeof Splunk2HDF> {
    static readonly usage: string;
    static readonly description = "Pull HDF data from your Splunk instance back into an HDF file";
    static readonly examples: string[];
    static readonly flags: {
        host: import("@oclif/core/interfaces").OptionFlag<string, import("@oclif/core/interfaces").CustomOptions>;
        port: import("@oclif/core/interfaces").OptionFlag<number, import("@oclif/core/interfaces").CustomOptions>;
        scheme: import("@oclif/core/interfaces").OptionFlag<string, import("@oclif/core/interfaces").CustomOptions>;
        username: import("@oclif/core/interfaces").OptionFlag<string | undefined, import("@oclif/core/interfaces").CustomOptions>;
        password: import("@oclif/core/interfaces").OptionFlag<string | undefined, import("@oclif/core/interfaces").CustomOptions>;
        token: import("@oclif/core/interfaces").OptionFlag<string | undefined, import("@oclif/core/interfaces").CustomOptions>;
        index: import("@oclif/core/interfaces").OptionFlag<string, import("@oclif/core/interfaces").CustomOptions>;
        input: import("@oclif/core/interfaces").OptionFlag<string[] | undefined, import("@oclif/core/interfaces").CustomOptions>;
        output: import("@oclif/core/interfaces").OptionFlag<string | undefined, import("@oclif/core/interfaces").CustomOptions>;
    };
    searchExecutions(mapper: SplunkMapper, filename: string, index?: string): Promise<import("@mitre/hdf-converters/lib/types/splunk-report-types").SplunkReport[]>;
    run(): Promise<void>;
}
