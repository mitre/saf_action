"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@oclif/core");
const fs_1 = tslib_1.__importDefault(require("fs"));
const hdf_converters_1 = require("@mitre/hdf-converters");
const global_1 = require("../../utils/global");
class NeuVector2HDF extends core_1.Command {
    static usage = 'convert neuvector2hdf -i <neuvector-json> -o <hdf-scan-results-json>';
    static description = 'Translate a NeuVector results JSON to a Heimdall Data Format JSON file';
    static examples = [
        'saf convert neuvector2hdf -i neuvector.json -o output-hdf-name.json',
    ];
    static flags = {
        help: core_1.Flags.help({ char: 'h' }),
        input: core_1.Flags.string({
            char: 'i',
            required: true,
            description: 'Input NeuVector Results JSON File',
        }),
        output: core_1.Flags.string({
            char: 'o',
            required: true,
            description: 'Output HDF JSON file',
        }),
        'with-raw': core_1.Flags.boolean({
            char: 'w',
            required: false,
            description: 'Include raw input file in HDF JSON file',
        }),
    };
    async run() {
        const { flags } = await this.parse(NeuVector2HDF);
        const input = fs_1.default.readFileSync(flags.input, 'utf8');
        (0, global_1.checkInput)({ data: input, filename: flags.input }, 'neuvector', 'NeuVector results JSON');
        const converter = new hdf_converters_1.NeuVectorMapper(input, flags['with-raw']);
        fs_1.default.writeFileSync((0, global_1.checkSuffix)(flags.output), JSON.stringify(converter.toHdf(), null, 2));
    }
}
exports.default = NeuVector2HDF;
//# sourceMappingURL=neuvector2hdf.js.map