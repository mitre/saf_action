"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@oclif/core");
const fs_1 = tslib_1.__importDefault(require("fs"));
class WriteTarget extends core_1.Command {
    static usage = 'supplement target write -i <input-hdf-json> (-f <input-target-json> | -d <target-json>) [-o <output-hdf-json>]';
    static summary = 'Overwrite the `target` attribute in a given HDF file with the provided `target` JSON data';
    static description = 'Target data can be any context/structure. See sample ideas at https://github.com/mitre/saf/wiki/Supplement-HDF-files-with-additional-information-(ex.-%60passthrough%60,-%60target%60)';
    static examples = [
        'saf supplement target write -i hdf.json -d \'{"a": 5}\'',
        'saf supplement target write -i hdf.json -f target.json -o new-hdf.json',
    ];
    static flags = {
        help: core_1.Flags.help({ char: 'h' }),
        input: core_1.Flags.string({ char: 'i', required: true, description: 'An input Heimdall Data Format file' }),
        targetFile: core_1.Flags.string({ char: 'f', exclusive: ['targetData'], description: 'An input target-data file (can contain any valid JSON); this flag or `targetData` must be provided' }),
        targetData: core_1.Flags.string({ char: 'd', exclusive: ['targetFile'], description: 'Input target-data (can be any valid JSON); this flag or `targetFile` must be provided' }),
        output: core_1.Flags.string({ char: 'o', description: 'An output Heimdall Data Format JSON file (otherwise the input file is overwritten)' }),
    };
    async run() {
        const { flags } = await this.parse(WriteTarget);
        const input = JSON.parse(fs_1.default.readFileSync(flags.input, 'utf8'));
        const output = flags.output || flags.input;
        let target;
        if (flags.targetFile) {
            try {
                target = JSON.parse(fs_1.default.readFileSync(flags.targetFile, 'utf8'));
            }
            catch (error) {
                throw new Error(`Couldn't parse target data: ${error}`);
            }
        }
        else if (flags.targetData) {
            try {
                target = JSON.parse(flags.targetData);
            }
            catch {
                target = flags.targetData;
            }
        }
        else {
            throw new Error('One out of targetFile or targetData must be passed');
        }
        input.target = target;
        fs_1.default.writeFileSync(output, JSON.stringify(input, null, 2));
    }
}
exports.default = WriteTarget;
