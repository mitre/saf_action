"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@oclif/core");
const fs_1 = tslib_1.__importDefault(require("fs"));
const accurate_search_1 = tslib_1.__importDefault(require("accurate-search"));
const xlsx_populate_1 = tslib_1.__importDefault(require("xlsx-populate"));
const prompt_sync_1 = tslib_1.__importDefault(require("prompt-sync"));
const files_json_1 = tslib_1.__importDefault(require("../../resources/files.json"));
const global_1 = require("../../utils/global");
const yaml_1 = tslib_1.__importDefault(require("yaml"));
const baseCommand_1 = require("../../utils/oclif/baseCommand");
const MAX_SEARCH_RESULTS = 5;
const prompt = (0, prompt_sync_1.default)();
class CreateAttestations extends baseCommand_1.BaseCommand {
    static usage = '<%= command.id %> -o <attestation-file> [-i <hdf-json> -t <json | xlsx | yml | yaml>]';
    static description = 'Create attestation files for use with `saf attest apply`';
    static examples = [
        '<%= config.bin %> <%= command.id %> -o attestation.json -i hdf.json',
        '<%= config.bin %> <%= command.id %> -o attestation.xlsx -t xlsx',
    ];
    static flags = {
        input: core_1.Flags.string({ char: 'i', description: '(optional) An input HDF file to search for controls' }),
        output: core_1.Flags.string({ char: 'o', required: true, description: 'The output filename' }),
        format: core_1.Flags.string({ char: 't', description: '(optional) The output file type', default: 'json', options: ['json', 'xlsx', 'yml', 'yaml'] }),
    };
    promptForever(promptValue) {
        while (true) {
            const ret = prompt(promptValue);
            if (ret.trim() !== '') {
                return ret;
            }
        }
    }
    getStatus() {
        const validPassResponses = new Set(['p', 'passed', 'pass']);
        const validFailResponses = new Set(['f', 'failed', 'fail', 'failure']);
        while (true) {
            const input = prompt('Enter status ((p)assed/(f)ailed): ') || '';
            if (validPassResponses.has(input.trim().toLowerCase())) {
                return 'passed';
            }
            if (validFailResponses.has(input.trim().toLowerCase())) {
                return 'failed';
            }
        }
    }
    promptForAttestation(id) {
        return {
            control_id: id,
            explanation: this.promptForever('Attestation explanation: '),
            frequency: this.promptForever('Attestation valid for (enter a number followed by d/w/m/y to indicate days, weeks, months, or years, e.g. 1d/6w/3m/1y/1.5y/custom):'),
            status: this.getStatus(),
            updated: new Date().toISOString(),
            updated_by: this.promptForever('Updated By: '),
        };
    }
    async run() {
        const { flags } = await this.parse(CreateAttestations);
        const attestations = [];
        if (flags.input) {
            const evaluation = JSON.parse(fs_1.default.readFileSync(flags.input, 'utf8'));
            const search = new accurate_search_1.default();
            const controls = {};
            for (const profile of evaluation.profiles) {
                for (const control of profile.controls) {
                    controls[control.id] = control;
                    search.addText(control.id, `${control.id}: ${control.title || ''} ${control.desc || ''}`);
                }
            }
            while (true) {
                const input = prompt("Enter a control ID, search for a control, or enter 'q' to exit: ");
                if (input.trim().toLowerCase() === 'q') {
                    break;
                }
                else if (input in controls) {
                    attestations.push(this.promptForAttestation(controls[input].id));
                }
                else {
                    const ids = search.search(input).slice(0, MAX_SEARCH_RESULTS);
                    for (const id of ids) {
                        const control = controls[id];
                        console.log(`\t${control.id}: ${control.title?.replaceAll('\n', '').replaceAll(/\s\s+/g, ' ')}`);
                    }
                }
            }
        }
        else {
            while (true) {
                const input = prompt("Enter a control ID or enter 'q' to exit: ");
                if (input.trim().toLowerCase() === 'q') {
                    break;
                }
                else {
                    attestations.push(this.promptForAttestation(input));
                }
            }
        }
        switch (flags.format) {
            case 'json': {
                fs_1.default.writeFileSync(flags.output, JSON.stringify(attestations, null, 2));
                break;
            }
            case 'xlsx': {
                xlsx_populate_1.default.fromDataAsync((0, global_1.dataURLtoU8Array)(files_json_1.default.AttestationTemplate.data)).then((workBook) => {
                    const sheet = workBook.sheet(0); // Attestations worksheet
                    let currentRow = 2;
                    for (const attestation of attestations) {
                        sheet.cell(`A${currentRow}`).value(attestation.control_id);
                        sheet.cell(`B${currentRow}`).value(attestation.explanation);
                        sheet.cell(`C${currentRow}`).value(attestation.frequency);
                        sheet.cell(`D${currentRow}`).value(attestation.status);
                        sheet.cell(`E${currentRow}`).value(attestation.updated);
                        sheet.cell(`F${currentRow}`).value(attestation.updated_by);
                        currentRow++;
                    }
                    return workBook.toFileAsync(flags.output);
                });
                break;
            }
            case 'yaml':
            case 'yml': {
                fs_1.default.writeFileSync(flags.output, yaml_1.default.stringify(attestations));
                break;
            }
            default: {
                throw new Error('Invalid file output type');
            }
        }
    }
}
exports.default = CreateAttestations;
//# sourceMappingURL=create.js.map