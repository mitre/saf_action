"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@oclif/core");
const hdf_converters_1 = require("@mitre/hdf-converters");
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const yaml_1 = tslib_1.__importDefault(require("yaml"));
const fs_1 = tslib_1.__importDefault(require("fs"));
const path_1 = tslib_1.__importDefault(require("path"));
const global_1 = require("../../utils/global");
class ApplyAttestation extends core_1.Command {
    async run() {
        const { flags } = await this.parse(ApplyAttestation);
        const attestations = [];
        const executions = {};
        for (const inputFile of flags.input) {
            let inputData;
            try {
                inputData = JSON.parse(fs_1.default.readFileSync(inputFile, 'utf8'));
                if (Array.isArray(inputData) && inputData.length > 0 && lodash_1.default.get(inputData, '[0].control_id')) {
                    // We have an attestations JSON
                    attestations.push(...inputData);
                }
                else if (Array.isArray(lodash_1.default.get(inputData, 'plugins.inspec-reporter-json-hdf.attestations'))) {
                    // We have a legacy Inspec Tools attestations file
                    attestations.push(...lodash_1.default.get(inputData, 'plugins.inspec-reporter-json-hdf.attestations'));
                }
                else if ('profiles' in inputData) {
                    // We have an execution file
                    executions[(0, global_1.convertFullPathToFilename)(inputFile)] = inputData;
                }
                else {
                    // Unknown file
                    console.error(`Unknown input file: ${inputFile}`);
                    process.exit(1);
                }
            }
            catch {
                inputData = fs_1.default.readFileSync(inputFile, 'utf8');
                if (inputFile.toLowerCase().endsWith('xlsx')) {
                    // We have a spreadsheet
                    attestations.push(...(await (0, hdf_converters_1.parseXLSXAttestations)(fs_1.default.readFileSync(inputFile, null))));
                }
                else if (inputFile.toLowerCase().endsWith('yml') || inputFile.toLowerCase().endsWith('yaml')) {
                    // We have a YAML
                    attestations.push(...yaml_1.default.parse(inputData));
                }
                else {
                    throw new Error(`Unknown input file: ${inputFile}`);
                }
            }
        }
        if (Object.entries(executions).length > 1 && !fs_1.default.existsSync(flags.output)) {
            fs_1.default.mkdirSync(flags.output);
        }
        if (Object.keys(executions).length === 0) {
            throw new Error('Please provide at least one HDF file');
        }
        for (const [originalFilename, execution] of Object.entries(executions)) {
            const applied = (0, hdf_converters_1.addAttestationToHDF)(execution, attestations);
            if (Object.entries(executions).length <= 1) {
                fs_1.default.writeFileSync(flags.output, JSON.stringify(applied, null, 2));
            }
            else {
                fs_1.default.writeFileSync(path_1.default.join(flags.output, originalFilename), JSON.stringify(applied, null, 2));
            }
        }
    }
}
exports.default = ApplyAttestation;
ApplyAttestation.flags = {
    help: core_1.Flags.help({ char: 'h' }),
    input: core_1.Flags.string({ char: 'i', required: true, multiple: true, description: 'Your input HDF and Attestation file(s)' }),
    output: core_1.Flags.string({ char: 'o', required: true, description: 'Output file or folder (for multiple executions)' }),
};
