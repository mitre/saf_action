import { Command } from '@oclif/core';
/**
 * Summary Class
 *
 * This class represents a command in the CLI that provides a quick compliance overview of an HDF file.
 * It includes methods to convert the data to different formats (JSON, YAML, Markdown) and to print the data to the console or write it to a file.
 *
 * @class
 * @public
 * @property {string[]} aliases - The aliases for this command. Users can invoke this command by typing 'summary'.
 */
export default class Summary extends Command {
    /**
     * @property {string[]} aliases - Alternative command name.
     */
    static aliases: string[];
    /**
     * @property {ReturnType<typeof createWinstonLogger>} logger - Winston logger for this command.
     */
    private logger;
    /**
     * @property {string} description - Command description displayed in the help message.
     */
    static description: string;
    static flags: {
        input: import("@oclif/core/interfaces").OptionFlag<string[], import("@oclif/core/interfaces").CustomOptions>;
        output: import("@oclif/core/interfaces").OptionFlag<string | undefined, import("@oclif/core/interfaces").CustomOptions>;
        format: import("@oclif/core/interfaces").OptionFlag<string, import("@oclif/core/interfaces").CustomOptions>;
        stdout: import("@oclif/core/interfaces").BooleanFlag<boolean>;
        'print-pretty': import("@oclif/core/interfaces").BooleanFlag<boolean>;
        'title-table': import("@oclif/core/interfaces").BooleanFlag<boolean>;
        logLevel: import("@oclif/core/interfaces").OptionFlag<string, import("@oclif/core/interfaces").CustomOptions>;
        help: import("@oclif/core/interfaces").BooleanFlag<void>;
    };
    static examples: string[];
    /**
     * @private
     * Holds the parsed command line flags.
     * @type {CommandFlags}
     */
    private parsedFlags;
    /**
     * This is the main function that runs when the 'summary' command is invoked.
     * It performs the following steps:
     * 1. Parses the command line flags.
     * 2. Loads the execution JSONs from the provided input files.
     * 3. Calculates the summaries for each execution JSON.
     * 4. Calculates the total counts for each summary.
     * 5. Calculates the compliance scores for each execution JSON.
     * 6. Creates a printable summary for each profile using the total counts and compliance scores.
     * 7. Prints the printable summaries to the console and optionally writes them to an output file.
     *
     * @throws {Error} If there's an error during the execution, it will be logged and the process will exit.
     * @returns {Promise<void>} A promise that resolves when the command has finished executing.
     */
    run(): Promise<void>;
}
