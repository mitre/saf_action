"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@oclif/core");
const express_1 = tslib_1.__importDefault(require("express"));
const fs_1 = tslib_1.__importDefault(require("fs"));
const path_1 = tslib_1.__importDefault(require("path"));
const open_1 = tslib_1.__importDefault(require("open"));
const global_1 = require("../../utils/global");
class Heimdall extends core_1.Command {
    async run() {
        const { flags, args } = await this.parse(Heimdall);
        let parsedJSONs = [];
        // Is the defined port valid?
        if (Number.isNaN(flags.port) || flags.port < 1 || flags.port >= 65536) {
            console.error(`Error: ${flags.port} is not a valid port.`);
            return;
        }
        // If we were passed a file, does it exist? Can it convert to JSON correctly?
        if (flags.files && flags.files.length > 0) {
            if (!flags.files.every(file => fs_1.default.statSync(file).isFile())) {
                console.log('An option passed as a file was not a file');
                return;
            }
            parsedJSONs = flags.files.map(file => {
                return { filename: path_1.default.parse(file).base, data: fs_1.default.readFileSync(file, 'utf8') };
            });
        }
        // Provide Heimdall with a path to grab our Data from
        const predefinedLoadJSON = (req, res, next) => {
            if (req.originalUrl.toLowerCase() === '/dynamic/predefinedload.json' && flags.files) {
                return res.json(parsedJSONs);
            }
            next();
        };
        flags.files ? console.log(`Serving Heimdall at http://localhost:${flags.port}/?predefinedLoad=true`) : console.log(`Serving Heimdall at http://localhost:${flags.port}`);
        if (!flags.noOpenBrowser) {
            flags.files ? (0, open_1.default)('http://localhost:3000/?predefinedLoad=true') : (0, open_1.default)('http://localhost:3000/');
        }
        const installedPath = (0, global_1.getInstalledPath)();
        (0, express_1.default)()
            .use(predefinedLoadJSON)
            .use(express_1.default.static(path_1.default.join(installedPath, 'node_modules/@mitre/heimdall-lite/dist')))
            .listen(flags.port);
    }
}
exports.default = Heimdall;
Heimdall.aliases = ['heimdall'];
Heimdall.usage = 'view:heimdall -p, --port=PORT <filename>';
Heimdall.description = 'Run an instance of Heimdall Lite to visualize your Data';
Heimdall.flags = {
    help: core_1.Flags.help({ char: 'h' }),
    port: core_1.Flags.integer({ char: 'p', required: false, default: 3000, description: 'Port To Expose Heimdall On (Default 3000)' }),
    files: core_1.Flags.string({ char: 'f', required: false, multiple: true, description: 'File(s) to display in Heimdall' }),
    noOpenBrowser: core_1.Flags.boolean({ char: 'n', required: false, default: false, description: "Don't open the default browser automatically" }),
};
