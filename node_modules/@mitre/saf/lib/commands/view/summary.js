"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@oclif/core");
const logging_1 = require("../../utils/logging");
const dataLoader_1 = require("../../utils/ohdf/dataLoader");
const calculations_1 = require("../../utils/ohdf/calculations");
const outputGenerator_1 = require("../../utils/ohdf/outputGenerator");
/** The prefix used for logging messages in this command */
const VIEW_SUMMARY = 'view summary:';
/** The help group for input/output related flags */
const IO_GROUP = 'I/O';
/** The help group for formatting related flags */
const FORMATTING_GROUP = 'formatting';
/** The default log level for this command */
const DEFAULT_LOG_LEVEL = 'info';
/** The available format options for the output */
const FORMAT_OPTIONS = ['json', 'yaml', 'markdown'];
/**
 * Summary Class
 *
 * This class represents a command in the CLI that provides a quick compliance
 * overview of an HDF file.
 *
 * It includes methods to convert the data to different formats (JSON, YAML,
 * Markdown) and to print the data to the console or write it to a file.
 *
 * @class
 * @public
 * @property {string[]} aliases - The aliases for this command. Users can invoke this command by typing 'summary'.
 */
class Summary extends core_1.Command {
    /**
     * @property {string[]} aliases - Alternative command name.
     */
    static aliases = ['summary'];
    /**
     * @property {ReturnType<typeof createWinstonLogger>} logger - Winston logger for this command.
     */
    logger = (0, logging_1.createWinstonLogger)('View Summary');
    /**
     * @property {string} description - Command description displayed in the help message.
     */
    static description = 'Generate a comprehensive summary of compliance data, including totals and counts, from your HDF files.\n'
        + 'The output can be displayed in the console, or exported as YAML, JSON, or a GitHub-flavored Markdown table.';
    static flags = {
        input: core_1.Flags.string({ char: 'i', required: true, multiple: true, description: 'Specify input HDF file(s)', helpGroup: IO_GROUP }),
        output: core_1.Flags.string({ char: 'o', description: 'Specify output file(s)', helpGroup: IO_GROUP }),
        format: core_1.Flags.string({ char: 'f', description: 'Specify output format', helpGroup: FORMATTING_GROUP, options: FORMAT_OPTIONS, default: 'yaml' }),
        stdout: core_1.Flags.boolean({ char: 's', description: 'Enable printing to console', default: true, allowNo: true, helpGroup: IO_GROUP }),
        'print-pretty': core_1.Flags.boolean({ char: 'r', description: 'Enable human-readable data output', helpGroup: FORMATTING_GROUP, default: true, allowNo: true }),
        'title-table': core_1.Flags.boolean({ char: 't', description: 'Add titles to the markdown table(s)', helpGroup: FORMATTING_GROUP, default: true, allowNo: true }),
        logLevel: core_1.Flags.string({ char: 'l', description: 'Set log level', helpGroup: 'debugging', default: DEFAULT_LOG_LEVEL }),
        help: core_1.Flags.help({ char: 'h', description: 'Show help information', helpGroup: 'help' }),
    };
    static examples = [
        // Basic usage
        "\x1B[93mSummarize 'input.hdf' single HDF file\n"
            + '\x1B[93m  $\x1B[34m saf summary -i input.hdf',
        // Specify output format
        '\x1B[93mSpecify Formats\n'
            + '\x1B[93m  $\x1B[34m saf summary -i input.hdf input.json --format=json',
        '\x1B[93mOutput GitHub Flavored Markdown Table, skip the console, and save to \'output.md\n'
            + '\x1B[93m  $\x1B[34m saf summary -i input.hdf input.json --format=markdown --no-stdout -o output.md',
        // Multiple input files
        '\x1B[93mSummarize multiple HDF files\n'
            + '\x1B[93m  $\x1B[34m saf summary --input input1.hdf --input input2.hdf\n'
            + '\x1B[93m  $\x1B[34m saf summary --input input1.hdf input2.hdf',
        // Specify output file
        "\x1B[93mSave summary to 'output.json' and print to the console\n"
            + '\x1B[93m  $\x1B[34m saf summary -i input.hdf --output output.json',
        // Enable and disable flags
        '\x1B[93mEnable human-readable output\n'
            + '\x1B[93m  $\x1B[34m saf summary --input input.hdf --pretty-print',
        '\x1B[93mUseful for scripts or data-processing (RAW yaml/json/etc.)\n'
            + '\x1B[93m  $\x1B[34m saf summary -i input.hdf --no-pretty-print',
    ];
    /**
     * @private
     * Holds the parsed command line flags.
     * @type {CommandFlags}
     */
    parsedFlags;
    /**
     * This is the main function that runs when the 'summary' command is invoked.
     * It performs the following steps:
     * 1. Parses the command line flags.
     * 2. Loads the execution JSONs from the provided input files.
     * 3. Calculates the summaries for each execution JSON.
     * 4. Calculates the total counts for each summary.
     * 5. Calculates the compliance scores for each execution JSON.
     * 6. Creates a printable summary for each profile using the total counts and compliance scores.
     * 7. Prints the printable summaries to the console and optionally writes them to an output file.
     *
     * @throws {Error} If there's an error during the execution, it will be logged and the process will exit.
     * @returns {Promise<void>} A promise that resolves when the command has finished executing.
     */
    async run() {
        try {
            const { flags } = await this.parse(Summary);
            this.parsedFlags = flags;
            const { format, 'print-pretty': printPretty, stdout, output, 'title-table': titleTable, logLevel } = flags;
            this.logger = (0, logging_1.createWinstonLogger)(VIEW_SUMMARY, (logLevel ?? process.env.LOG_LEVEL ?? 'info'));
            this.logger.verbose('Parsed command line flags');
            const executionData = (0, dataLoader_1.loadExecJSONs)(this.parsedFlags.input);
            this.logger.verbose(`Loaded execution data from ${this.parsedFlags.input.length} file(s)`);
            const summaries = (0, calculations_1.calculateSummariesForExecJSONs)(executionData);
            this.logger.verbose(`Calculated summaries for ${executionData.length} execution data`);
            const totals = (0, calculations_1.calculateTotalCountsForSummaries)(summaries);
            this.logger.verbose(`Calculated total counts for ${summaries.length} summaries`);
            const complianceScores = (0, calculations_1.calculateComplianceScoresForExecJSONs)(executionData);
            this.logger.verbose(`Calculated compliance scores for ${executionData.length} execution data`);
            const printableSummaries = Object.entries(totals).map(([profileName, profileMetrics]) => {
                this.logger.verbose(`Building printable summary for profile: ${profileName}`);
                return (0, outputGenerator_1.createPrintableSummary)(profileName, profileMetrics, executionData, complianceScores);
            });
            this.logger.verbose(`Generated ${printableSummaries.length} printable summaries`);
            (0, outputGenerator_1.printAndWriteOutput)({ printableSummaries, titleTable, format, printPretty, stdout, output });
            this.logger.verbose('Printed and wrote the output');
        }
        catch (error) {
            if (error instanceof Error) {
                this.logger.error(`Error occurred: ${error.message}`);
            }
            else {
                this.logger.error(`An unknown error occurred: ${error}`);
            }
            process.exit(1);
        }
    }
}
exports.default = Summary;
//# sourceMappingURL=summary.js.map