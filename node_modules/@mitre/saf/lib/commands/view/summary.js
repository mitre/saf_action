"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@oclif/core");
const inspecjs_1 = require("inspecjs");
const fs_1 = tslib_1.__importDefault(require("fs"));
const yaml_1 = tslib_1.__importDefault(require("yaml"));
const threshold_1 = require("../../utils/threshold");
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const flat_1 = tslib_1.__importDefault(require("flat"));
const global_1 = require("../../utils/global");
class Summary extends core_1.Command {
    async run() {
        const { flags } = await this.parse(Summary);
        const summaries = {};
        const complianceScores = {};
        const execJSONs = {};
        flags.input.forEach(file => {
            execJSONs[file] = (0, inspecjs_1.convertFileContextual)(fs_1.default.readFileSync(file, 'utf8'));
        });
        Object.entries(execJSONs).forEach(([, parsedExecJSON]) => {
            const summary = {};
            const parsedProfile = parsedExecJSON.contains[0];
            const profileName = parsedProfile.data.name;
            const overallStatusCounts = (0, threshold_1.extractStatusCounts)(parsedProfile);
            const overallCompliance = (0, threshold_1.calculateCompliance)(overallStatusCounts);
            const existingCompliance = lodash_1.default.get(complianceScores, profileName) || [];
            existingCompliance.push(overallCompliance);
            lodash_1.default.set(complianceScores, `["${profileName.replace(/"/g, '\\"')}"]`, existingCompliance);
            // Severity counts
            for (const [severity, severityTargets] of Object.entries(threshold_1.severityTargetsObject)) {
                const severityStatusCounts = (0, threshold_1.extractStatusCounts)(parsedProfile, severity);
                for (const severityTarget of severityTargets) {
                    const [statusName, _severity, thresholdType] = severityTarget.split('.');
                    lodash_1.default.set(summary, severityTarget.replace(`.${thresholdType}`, ''), lodash_1.default.get(severityStatusCounts, (0, threshold_1.renameStatusName)(statusName)));
                }
            }
            // Total Counts
            for (const [type, counts] of Object.entries(summary)) {
                let total = 0;
                for (const [, count] of Object.entries(counts)) {
                    total += count;
                }
                lodash_1.default.set(summary, `${type}.total`, total);
            }
            summaries[profileName] = (lodash_1.default.get(summaries, profileName) || []);
            summaries[profileName].push(summary);
        });
        const totals = {};
        Object.entries(summaries).forEach(([profileName, profileSummaries]) => {
            profileSummaries.forEach(profileSummary => {
                const flattened = flat_1.default.flatten(profileSummary);
                Object.entries(flattened).forEach(([key, value]) => {
                    const existingValue = lodash_1.default.get(totals, `${profileName}.${key}`);
                    if (existingValue) {
                        lodash_1.default.set(totals, `["${profileName.replace(/"/g, '\\"')}"].${key}`, existingValue + value);
                    }
                    else {
                        lodash_1.default.set(totals, `["${profileName.replace(/"/g, '\\"')}"].${key}`, value);
                    }
                });
            });
        });
        const printableSummaries = [];
        Object.entries(totals).forEach(([profileName, profileValues]) => {
            printableSummaries.push({
                profileName: profileName,
                // Extract filename from execJSONs
                resultSets: Object.entries(execJSONs).filter(([, execJSON]) => {
                    return execJSON.data.profiles[0].name === profileName;
                }).map(([filePath]) => {
                    return (0, global_1.convertFullPathToFilename)(filePath);
                }),
                compliance: lodash_1.default.mean(complianceScores[profileName]),
                ...profileValues,
            });
        });
        console.log(flags.json ? JSON.stringify(printableSummaries) : yaml_1.default.stringify(printableSummaries));
        if (flags.output) {
            fs_1.default.writeFileSync(flags.output, flags.json ? JSON.stringify(printableSummaries) : yaml_1.default.stringify(printableSummaries));
        }
    }
}
exports.default = Summary;
Summary.aliases = ['summary'];
Summary.usage = 'view -i, --input=FILE -j, --json';
Summary.description = 'Get a quick compliance overview of an HDF file ';
Summary.flags = {
    help: core_1.Flags.help({ char: 'h' }),
    input: core_1.Flags.string({ char: 'i', required: true, multiple: true, description: 'Input HDF files' }),
    json: core_1.Flags.boolean({ char: 'j', required: false, description: 'Output results as JSON' }),
    output: core_1.Flags.string({ char: 'o', required: false }),
};
Summary.examples = ['saf view summary -i rhel7-results.json'];
