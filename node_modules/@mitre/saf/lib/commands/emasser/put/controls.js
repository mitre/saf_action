"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const fs_1 = tslib_1.__importDefault(require("fs"));
const promises_1 = require("fs/promises");
const json_colorizer_1 = tslib_1.__importDefault(require("json-colorizer"));
const core_1 = require("@oclif/core");
const outputError_1 = require("../../../utils/emasser/outputError");
const apiConnection_1 = require("../../../utils/emasser/apiConnection");
const outputFormatter_1 = require("../../../utils/emasser/outputFormatter");
const utilities_1 = require("../../../utils/emasser/utilities");
const emass_client_1 = require("@mitre/emass_client");
function printHelpMsg() {
    console.log('\x1B[93m', '\nInvoke saf emasser put controls [-h, --help] for additional help', '\x1B[0m');
}
function printRedMsg(msg) {
    console.log('\x1B[91m', msg, '\x1B[0m');
}
function assertParamExists(object, value) {
    if (value === undefined) {
        printRedMsg(`Missing required parameter/field: ${object}`);
        throw new Error('Value not defined');
    }
}
function addRequiredFieldsToRequestBody(dataObj) {
    const bodyObj = {};
    try {
        assertParamExists('acronym', dataObj.acronym);
        assertParamExists('responsibleEntities', dataObj.responsibleEntities);
        assertParamExists('controlDesignation', dataObj.controlDesignation);
        assertParamExists('estimatedCompletionDate', dataObj.estimatedCompletionDate);
        assertParamExists('implementationNarrative', dataObj.implementationNarrative);
    }
    catch (error) {
        console.log('Required JSON fields are:');
        console.log((0, json_colorizer_1.default)(JSON.stringify((0, utilities_1.getJsonExamples)('controls-required'), null, 2)));
        throw error;
    }
    bodyObj.acronym = dataObj.acronym;
    bodyObj.responsibleEntities = dataObj.responsibleEntities;
    bodyObj.controlDesignation = dataObj.controlDesignation;
    bodyObj.estimatedCompletionDate = dataObj.estimatedCompletionDate;
    bodyObj.implementationNarrative = dataObj.implementationNarrative;
    return bodyObj;
}
function addConditionalFields(bodyObject, dataObj) {
    if (Object.prototype.hasOwnProperty.call(dataObj, 'commonControlProvider')) {
        bodyObject.commonControlProvider = dataObj.commonControlProvider;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'naJustification')) {
        bodyObject.naJustification = dataObj.naJustification;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'slcmCriticality')) {
        bodyObject.slcmCriticality = dataObj.slcmCriticality;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'slcmFrequency')) {
        bodyObject.slcmFrequency = dataObj.slcmFrequency;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'slcmMethod')) {
        bodyObject.slcmMethod = dataObj.slcmMethod;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'slcmReporting')) {
        bodyObject.slcmReporting = dataObj.slcmReporting;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'slcmTracking')) {
        bodyObject.slcmTracking = dataObj.slcmTracking;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'slcmComments')) {
        bodyObject.slcmComments = dataObj.slcmComments;
    }
}
function addOptionalFields(bodyObject, dataObj) {
    if (Object.prototype.hasOwnProperty.call(dataObj, 'implementationStatus')) {
        bodyObject.implementationStatus = dataObj.implementationStatus;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'severity')) {
        bodyObject.severity = dataObj.severity;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'vulnerabiltySummary')) {
        bodyObject.vulnerabiltySummary = dataObj.vulnerabiltySummary;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'recommendations')) {
        bodyObject.recommendations = dataObj.recommendations;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'relevanceOfThreat')) {
        bodyObject.relevanceOfThreat = dataObj.relevanceOfThreat;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'likelihood')) {
        bodyObject.likelihood = dataObj.likelihood;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'impact')) {
        bodyObject.impact = dataObj.impact;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'impactDescription')) {
        bodyObject.impactDescription = dataObj.impactDescription;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'residualRiskLevel')) {
        bodyObject.residualRiskLevel = dataObj.residualRiskLevel;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'testMethod')) {
        bodyObject.testMethod = dataObj.testMethod;
    }
}
function processBusinessLogic(bodyObject, dataObj) {
    //----------------------------------------------------------------------------------------
    // Conditional fields that are required based on the "implementationStatus" value
    // "Planned" or       estimatedCompletionDate, responsibleEntities, slcmCriticality,
    // "Implemented"      slcmFrequency, slcmMethod, slcmReporting, slcmTracking, slcmComments
    //
    // "Not Applicable"     naJustification, responsibleEntities
    //
    // "Manually Inherited" commonControlProvider, estimatedCompletionDate,
    //                      responsibleEntities, slcmCriticality, slcmFrequency, slcmMethod,
    //                      slcmReporting, slcmTracking, slcmComments
    //
    // "Inherited"          Only the following fields can be updated:
    //                      controlDesignation, commonnControlProvider
    //----------------------------------------------------------------------------------------
    // Only process if we have an Implementation Status
    if (Object.prototype.hasOwnProperty.call(dataObj, 'implementationStatus')) {
        // The implementation Status is always required in any of these cases
        bodyObject.implementationStatus = dataObj.implementationStatus;
        switch (dataObj.implementationStatus) {
            case 'Planned':
            case 'Implemented': {
                // No need to check for controlDesignation and estimatedCompletionDate, they are required fields
                if (!(Object.prototype.hasOwnProperty.call(dataObj, 'responsibleEntities')) || !(Object.prototype.hasOwnProperty.call(dataObj, 'slcmCriticality')) ||
                    !(Object.prototype.hasOwnProperty.call(dataObj, 'slcmFrequency')) || !(Object.prototype.hasOwnProperty.call(dataObj, 'slcmMethod')) ||
                    !(Object.prototype.hasOwnProperty.call(dataObj, 'slcmReporting')) || !(Object.prototype.hasOwnProperty.call(dataObj, 'slcmTracking')) ||
                    !(Object.prototype.hasOwnProperty.call(dataObj, 'slcmComments'))) {
                    printRedMsg('Missing one of these parameters/fields:');
                    printRedMsg('    responsibleEntities, slcmCriticality, slcmFrequency,');
                    printRedMsg('    slcmMethod,slcmReporting, slcmTracking, slcmComments');
                    printHelpMsg();
                    process.exit(1);
                }
                else {
                    bodyObject.responsibleEntities = dataObj.responsibleEntities;
                    bodyObject.slcmCriticality = dataObj.slcmCriticality;
                    bodyObject.slcmFrequency = dataObj.slcmFrequency;
                    bodyObject.slcmMethod = dataObj.slcmMethod;
                    bodyObject.slcmReporting = dataObj.slcmReporting;
                    bodyObject.slcmTracking = dataObj.slcmTracking;
                    bodyObject.slcmComments = dataObj.slcmComments;
                }
                break;
            }
            case 'Not Applicable': {
                // No need to check for controlDesignation, it is a required field
                if ((Object.prototype.hasOwnProperty.call(dataObj, 'naJustification') && Object.prototype.hasOwnProperty.call(dataObj, 'responsibleEntities'))) {
                    bodyObject.naJustification = dataObj.naJustification;
                    bodyObject.responsibleEntities = dataObj.responsibleEntities;
                }
                else {
                    printRedMsg('Missing one of these parameters/fields:');
                    printRedMsg('    naJustification, responsibleEntities');
                    printHelpMsg();
                    process.exit(1);
                }
                break;
            }
            case 'Manually Inherited': {
                // No need to check for controlDesignation and estimatedCompletionDate, they are required fields
                if (!(Object.prototype.hasOwnProperty.call(dataObj, 'commonControlProvider')) || !(Object.prototype.hasOwnProperty.call(dataObj, 'responsibleEntities')) ||
                    !(Object.prototype.hasOwnProperty.call(dataObj, 'slcmCriticality')) || !(Object.prototype.hasOwnProperty.call(dataObj, 'slcmFrequency')) ||
                    !(Object.prototype.hasOwnProperty.call(dataObj, 'slcmMethod')) || !(Object.prototype.hasOwnProperty.call(dataObj, 'slcmReporting')) ||
                    !(Object.prototype.hasOwnProperty.call(dataObj, 'slcmTracking')) || !(Object.prototype.hasOwnProperty.call(dataObj, 'slcmComments'))) {
                    printRedMsg('Missing one of these parameters/fields:');
                    printRedMsg('    commonControlProvider, responsibleEntities, slcmCriticality,');
                    printRedMsg('    slcmFrequency, slcmMethod, slcmReporting, slcmTracking, slcmComments');
                    printHelpMsg();
                    process.exit(1);
                }
                else {
                    bodyObject.commonControlProvider = dataObj.commonControlProvider;
                    bodyObject.responsibleEntities = dataObj.responsibleEntities;
                    bodyObject.slcmCriticality = dataObj.slcmCriticality;
                    bodyObject.slcmFrequency = dataObj.slcmFrequency;
                    bodyObject.slcmMethod = dataObj.slcmMethod;
                    bodyObject.slcmReporting = dataObj.slcmReporting;
                    bodyObject.slcmTracking = dataObj.slcmTracking;
                    bodyObject.slcmComments = dataObj.slcmComments;
                }
                break;
            }
            case 'Inherited': {
                // No need to check for controlDesignation, it is a required field
                if ((Object.prototype.hasOwnProperty.call(dataObj, 'commonControlProvider'))) {
                    bodyObject.commonControlProvider = dataObj.commonControlProvider;
                }
                else {
                    printRedMsg('When implementationStatus value is "Inherited" the following field is required: commonControlProvider');
                    printHelpMsg();
                    process.exit(1);
                }
                break;
            }
            default: {
                printRedMsg('The "implementationStatus" field must one of the following:');
                printRedMsg('    Planned, Implemented, Not Applicable, Inherited, or Manually Inherited');
                printRedMsg(`Status provided was: ${dataObj.implementationStatus}`);
                process.exit(1);
            }
        }
    }
}
function generateBodyObj(dataObject) {
    let bodyObj = {};
    try {
        bodyObj = addRequiredFieldsToRequestBody(dataObject);
        processBusinessLogic(bodyObj, dataObject);
        addConditionalFields(bodyObj, dataObject);
        addOptionalFields(bodyObj, dataObject);
    }
    catch {
        process.exit(1);
    }
    return bodyObj;
}
class EmasserPutControls extends core_1.Command {
    static usage = '<%= command.id %> [options]';
    static description = 'Update Security Control information of a system for both the Implementation Plan and Risk Assessment.';
    static examples = ['<%= config.bin %> <%= command.id %> [-s,--systemId] [-f,--controlsFile]',
        'The input file should be a well formed JSON containing the Security Control information based on defined business rules.',
        'Required JSON parameter/fields are: ',
        (0, json_colorizer_1.default)(JSON.stringify((0, utilities_1.getJsonExamples)('controls-required'), null, 2)),
        'Conditional JSON parameters/fields are: ',
        (0, json_colorizer_1.default)(JSON.stringify((0, utilities_1.getJsonExamples)('controls-conditional'), null, 2)),
        'Optional JSON parameters/fields are:',
        (0, json_colorizer_1.default)(JSON.stringify((0, utilities_1.getJsonExamples)('controls-optional'), null, 2))];
    static flags = {
        help: core_1.Flags.help({ char: 'h', description: 'Put (update) control information in a system for one or many controls. See emasser Features (emasserFeatures.md) for additional information.' }),
        ...(0, utilities_1.getFlagsForEndpoint)(process.argv), // skipcq: JS-0349
    };
    async run() {
        const { flags } = await this.parse(EmasserPutControls);
        const apiCxn = new apiConnection_1.ApiConnection();
        const updateControl = new emass_client_1.ControlsApi(apiCxn.configuration, apiCxn.basePath, apiCxn.axiosInstances);
        const requestBodyArray = [];
        // Check if a Security Control information json file was provided
        if (fs_1.default.existsSync(flags.controlFile)) {
            let data;
            try {
                data = JSON.parse(await (0, promises_1.readFile)(flags.controlFile, 'utf8'));
            }
            catch (error) {
                if (error.code === 'ENOENT') {
                    console.log('Security Control information JSON file not found!');
                    process.exit(1);
                }
                else {
                    console.log('Error reading Security Control information file, possible malformed json. Please use the -h flag for help.');
                    console.log('Error message was:', error.message);
                    process.exit(1);
                }
            }
            // Security Control information json file provided, check if we have multiple content to process
            if (Array.isArray(data)) {
                data.forEach((dataObject) => {
                    // Generate the put request object based on business logic
                    requestBodyArray.push(generateBodyObj(dataObject));
                });
            }
            else if (typeof data === 'object') {
                const dataObject = data;
                // Generate the put request object based on business logic
                requestBodyArray.push(generateBodyObj(dataObject));
            }
        }
        else {
            console.error('Invalid or Security Control information JSON file not found on the provided directory:', flags.controlFile);
            process.exit(1);
        }
        updateControl.updateControlBySystemId(flags.systemId, requestBodyArray).then((response) => {
            console.log((0, json_colorizer_1.default)((0, outputFormatter_1.outputFormat)(response)));
        }).catch((error) => console.error((0, json_colorizer_1.default)((0, outputError_1.outputError)(error))));
    }
}
exports.default = EmasserPutControls;
