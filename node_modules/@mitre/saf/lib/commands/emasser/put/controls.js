"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const fs_1 = tslib_1.__importDefault(require("fs"));
const promises_1 = require("fs/promises");
const json_colorizer_1 = require("json-colorizer");
const core_1 = require("@oclif/core");
const apiConnection_1 = require("../../../utils/emasser/apiConnection");
const outputFormatter_1 = require("../../../utils/emasser/outputFormatter");
const utilities_1 = require("../../../utils/emasser/utilities");
const emass_client_1 = require("@mitre/emass_client");
function getAllJsonExamples() {
    return {
        ...(0, utilities_1.getJsonExamples)('controls-required'),
        ...(0, utilities_1.getJsonExamples)('controls-conditional'),
        ...(0, utilities_1.getJsonExamples)('controls-optional'),
    };
}
function assertParamExists(object, value) {
    if (value === undefined) {
        (0, utilities_1.printRedMsg)(`Missing required parameter/field: ${object}`);
        throw new Error('Value not defined');
    }
}
function addRequiredFieldsToRequestBody(dataObj) {
    const bodyObj = {};
    try {
        assertParamExists('acronym', dataObj.acronym);
        assertParamExists('responsibleEntities', dataObj.responsibleEntities);
        assertParamExists('controlDesignation', dataObj.controlDesignation);
        assertParamExists('estimatedCompletionDate', dataObj.estimatedCompletionDate);
        assertParamExists('implementationNarrative', dataObj.implementationNarrative);
    }
    catch (error) {
        console.log('Required JSON fields are:');
        console.log((0, json_colorizer_1.colorize)(JSON.stringify((0, utilities_1.getJsonExamples)('controls-required'), null, 2)));
        throw error;
    }
    bodyObj.acronym = dataObj.acronym;
    bodyObj.responsibleEntities = dataObj.responsibleEntities;
    bodyObj.controlDesignation = dataObj.controlDesignation;
    bodyObj.estimatedCompletionDate = dataObj.estimatedCompletionDate;
    bodyObj.implementationNarrative = dataObj.implementationNarrative;
    return bodyObj;
}
function addConditionalFields(bodyObject, dataObj) {
    if (Object.prototype.hasOwnProperty.call(dataObj, 'commonControlProvider')) {
        bodyObject.commonControlProvider = dataObj.commonControlProvider;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'naJustification')) {
        bodyObject.naJustification = dataObj.naJustification;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'slcmCriticality')) {
        bodyObject.slcmCriticality = dataObj.slcmCriticality;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'slcmFrequency')) {
        bodyObject.slcmFrequency = dataObj.slcmFrequency;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'slcmMethod')) {
        bodyObject.slcmMethod = dataObj.slcmMethod;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'slcmReporting')) {
        bodyObject.slcmReporting = dataObj.slcmReporting;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'slcmTracking')) {
        bodyObject.slcmTracking = dataObj.slcmTracking;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'slcmComments')) {
        bodyObject.slcmComments = dataObj.slcmComments;
    }
}
function addOptionalFields(bodyObject, dataObj) {
    if (Object.prototype.hasOwnProperty.call(dataObj, 'implementationStatus')) {
        bodyObject.implementationStatus = dataObj.implementationStatus;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'severity')) {
        bodyObject.severity = dataObj.severity;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'vulnerabiltySummary')) {
        bodyObject.vulnerabiltySummary = dataObj.vulnerabiltySummary;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'recommendations')) {
        bodyObject.recommendations = dataObj.recommendations;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'relevanceOfThreat')) {
        bodyObject.relevanceOfThreat = dataObj.relevanceOfThreat;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'likelihood')) {
        bodyObject.likelihood = dataObj.likelihood;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'impact')) {
        bodyObject.impact = dataObj.impact;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'impactDescription')) {
        bodyObject.impactDescription = dataObj.impactDescription;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'residualRiskLevel')) {
        bodyObject.residualRiskLevel = dataObj.residualRiskLevel;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'testMethod')) {
        bodyObject.testMethod = dataObj.testMethod;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'mitigations')) {
        bodyObject.mitigations = dataObj.mitigations;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'applicationLayer')) {
        bodyObject.applicationLayer = dataObj.applicationLayer;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'databaseLayer')) {
        bodyObject.databaseLayer = dataObj.databaseLayer;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'operatingSystemLayer')) {
        bodyObject.operatingSystemLayer = dataObj.operatingSystemLayer;
    }
}
function processBusinessLogic(bodyObject, dataObj) {
    // ----------------------------------------------------------------------------------------
    // Conditional fields that are required based on the "implementationStatus" value
    // "Planned" or       estimatedCompletionDate, responsibleEntities, slcmCriticality,
    // "Implemented"      slcmFrequency, slcmMethod, slcmReporting, slcmTracking, slcmComments
    //
    // "Not Applicable"     naJustification, responsibleEntities
    //
    // "Manually Inherited" commonControlProvider, estimatedCompletionDate,
    //                      responsibleEntities, slcmCriticality, slcmFrequency, slcmMethod,
    //                      slcmReporting, slcmTracking, slcmComments
    //
    // "Inherited"          Only the following fields can be updated:
    //                      controlDesignation, commonnControlProvider
    // ----------------------------------------------------------------------------------------
    const HELP_MSG = 'Invoke saf emasser put controls [-h, --help] for additional help';
    // Only process if we have an Implementation Status (optional field)
    if (Object.prototype.hasOwnProperty.call(dataObj, 'implementationStatus')) {
        // The implementation Status is always required in any of these cases
        bodyObject.implementationStatus = dataObj.implementationStatus;
        switch (dataObj.implementationStatus) {
            case 'Planned':
            case 'Implemented': {
                // No need to check for controlDesignation and estimatedCompletionDate, they are required fields
                if (!(Object.prototype.hasOwnProperty.call(dataObj, 'responsibleEntities')) || !(Object.prototype.hasOwnProperty.call(dataObj, 'slcmCriticality'))
                    || !(Object.prototype.hasOwnProperty.call(dataObj, 'slcmFrequency')) || !(Object.prototype.hasOwnProperty.call(dataObj, 'slcmMethod'))
                    || !(Object.prototype.hasOwnProperty.call(dataObj, 'slcmReporting')) || !(Object.prototype.hasOwnProperty.call(dataObj, 'slcmTracking'))
                    || !(Object.prototype.hasOwnProperty.call(dataObj, 'slcmComments'))) {
                    (0, utilities_1.printRedMsg)('Missing one of these parameters/fields:');
                    (0, utilities_1.printRedMsg)('    responsibleEntities, slcmCriticality, slcmFrequency,');
                    (0, utilities_1.printRedMsg)('    slcmMethod,slcmReporting, slcmTracking, slcmComments');
                    (0, utilities_1.printHelpMsg)(HELP_MSG);
                    process.exit(1);
                }
                else {
                    bodyObject.responsibleEntities = dataObj.responsibleEntities;
                    bodyObject.slcmCriticality = dataObj.slcmCriticality;
                    bodyObject.slcmFrequency = dataObj.slcmFrequency;
                    bodyObject.slcmMethod = dataObj.slcmMethod;
                    bodyObject.slcmReporting = dataObj.slcmReporting;
                    bodyObject.slcmTracking = dataObj.slcmTracking;
                    bodyObject.slcmComments = dataObj.slcmComments;
                }
                break;
            }
            case 'Not Applicable': {
                // No need to check for controlDesignation, it is a required field
                if ((Object.prototype.hasOwnProperty.call(dataObj, 'naJustification') && Object.prototype.hasOwnProperty.call(dataObj, 'responsibleEntities'))) {
                    bodyObject.naJustification = dataObj.naJustification;
                    bodyObject.responsibleEntities = dataObj.responsibleEntities;
                }
                else {
                    (0, utilities_1.printRedMsg)('Missing one of these parameters/fields:');
                    (0, utilities_1.printRedMsg)('    naJustification, responsibleEntities');
                    (0, utilities_1.printHelpMsg)(HELP_MSG);
                    process.exit(1);
                }
                break;
            }
            case 'Manually Inherited': {
                // No need to check for controlDesignation and estimatedCompletionDate, they are required fields
                if (!(Object.prototype.hasOwnProperty.call(dataObj, 'commonControlProvider')) || !(Object.prototype.hasOwnProperty.call(dataObj, 'responsibleEntities'))
                    || !(Object.prototype.hasOwnProperty.call(dataObj, 'slcmCriticality')) || !(Object.prototype.hasOwnProperty.call(dataObj, 'slcmFrequency'))
                    || !(Object.prototype.hasOwnProperty.call(dataObj, 'slcmMethod')) || !(Object.prototype.hasOwnProperty.call(dataObj, 'slcmReporting'))
                    || !(Object.prototype.hasOwnProperty.call(dataObj, 'slcmTracking')) || !(Object.prototype.hasOwnProperty.call(dataObj, 'slcmComments'))) {
                    (0, utilities_1.printRedMsg)('Missing one of these parameters/fields:');
                    (0, utilities_1.printRedMsg)('    commonControlProvider, responsibleEntities, slcmCriticality,');
                    (0, utilities_1.printRedMsg)('    slcmFrequency, slcmMethod, slcmReporting, slcmTracking, slcmComments');
                    (0, utilities_1.printHelpMsg)(HELP_MSG);
                    process.exit(1);
                }
                else {
                    bodyObject.commonControlProvider = dataObj.commonControlProvider;
                    bodyObject.responsibleEntities = dataObj.responsibleEntities;
                    bodyObject.slcmCriticality = dataObj.slcmCriticality;
                    bodyObject.slcmFrequency = dataObj.slcmFrequency;
                    bodyObject.slcmMethod = dataObj.slcmMethod;
                    bodyObject.slcmReporting = dataObj.slcmReporting;
                    bodyObject.slcmTracking = dataObj.slcmTracking;
                    bodyObject.slcmComments = dataObj.slcmComments;
                }
                break;
            }
            case 'Inherited': {
                // No need to check for controlDesignation, it is a required field
                if ((Object.prototype.hasOwnProperty.call(dataObj, 'commonControlProvider'))) {
                    bodyObject.commonControlProvider = dataObj.commonControlProvider;
                }
                else {
                    (0, utilities_1.printRedMsg)('When implementationStatus value is "Inherited" the following field is required: commonControlProvider');
                    (0, utilities_1.printHelpMsg)(HELP_MSG);
                    process.exit(1);
                }
                break;
            }
            default: {
                (0, utilities_1.printRedMsg)('The "implementationStatus" field must one of the following:');
                (0, utilities_1.printRedMsg)('    Planned, Implemented, Not Applicable, Inherited, or Manually Inherited');
                (0, utilities_1.printRedMsg)(`Status provided was: ${dataObj.implementationStatus}`);
                process.exit(1);
            }
        }
    }
}
function generateBodyObj(dataObject) {
    let bodyObj = {};
    try {
        bodyObj = addRequiredFieldsToRequestBody(dataObject);
        processBusinessLogic(bodyObj, dataObject);
        addConditionalFields(bodyObj, dataObject);
        addOptionalFields(bodyObj, dataObject);
    }
    catch {
        process.exit(1);
    }
    return bodyObj;
}
const CMD_HELP = 'saf emasser put controls -h or --help';
class EmasserPutControls extends core_1.Command {
    static usage = '<%= command.id %> [FLAGS]\n\x1B[93m NOTE: see EXAMPLES for command usages\x1B[0m';
    static description = 'Update Security Control information of a system for both the Implementation Plan and Risk Assessment.';
    static examples = [
        '<%= config.bin %> <%= command.id %> [-s,--systemId] [-f, --dataFile]',
        'The input file should be a well formed JSON containing the Security Control information based on defined business rules.',
        'Required JSON parameter/fields are: ',
        (0, json_colorizer_1.colorize)(JSON.stringify((0, utilities_1.getJsonExamples)('controls-required'), null, 2)),
        'Conditional JSON parameters/fields are: ',
        (0, json_colorizer_1.colorize)(JSON.stringify((0, utilities_1.getJsonExamples)('controls-conditional'), null, 2)),
        'Optional JSON parameters/fields are:',
        (0, json_colorizer_1.colorize)(JSON.stringify((0, utilities_1.getJsonExamples)('controls-optional'), null, 2)),
        '\x1B[1m\x1B[32mAll accepted parameters/fields are:\x1B[0m',
        (0, json_colorizer_1.colorize)(getAllJsonExamples()),
    ];
    static flags = {
        help: core_1.Flags.help({ char: 'h', description: 'Show eMASSer CLI help for the PUT Controls command' }),
        ...(0, utilities_1.getFlagsForEndpoint)(process.argv), // skipcq: JS-0349
    };
    async run() {
        const { flags } = await this.parse(EmasserPutControls);
        const apiCxn = new apiConnection_1.ApiConnection();
        const updateControl = new emass_client_1.ControlsApi(apiCxn.configuration, apiCxn.basePath, apiCxn.axiosInstances);
        const requestBodyArray = [];
        // Check if a Security Control information json file was provided
        if (!fs_1.default.existsSync(flags.dataFile)) {
            console.error('\x1B[91m» Security Control(s) data file (.json) not found or invalid:', flags.dataFile, '\x1B[0m');
            process.exit(1);
        }
        try {
            // Read and parse the JSON file
            const fileContent = await (0, promises_1.readFile)(flags.dataFile, 'utf8');
            const data = JSON.parse(fileContent);
            // Security Control information json file provided, check if we have multiple content to process
            if (Array.isArray(data)) {
                data.forEach((dataObject) => {
                    // Generate the put request object based on business logic
                    requestBodyArray.push(generateBodyObj(dataObject));
                });
            }
            else if (typeof data === 'object' && data !== null) {
                const dataObject = data;
                // Generate the put request object based on business logic
                requestBodyArray.push(generateBodyObj(dataObject));
            }
            else {
                console.error('\x1B[91m» Invalid data format in Security Controls file\x1B[0m');
                process.exit(1);
            }
        }
        catch (error) {
            if (error instanceof Error) {
                console.error('\x1B[91m» Error reading Security Control(s) data file, possible malformed json. Please use the -h flag for help.\x1B[0m');
                console.error('\x1B[93m→ Error message was:', error.message, '\x1B[0m');
            }
            else {
                console.error('\x1B[91m» Unknown error occurred while reading the file:', flags.dataFile, '\x1B[0m');
            }
            process.exit(1);
        }
        updateControl.updateControlBySystemId(flags.systemId, requestBodyArray).then((response) => {
            console.log((0, json_colorizer_1.colorize)((0, outputFormatter_1.outputFormat)(response)));
        }).catch((error) => (0, utilities_1.displayError)(error, 'Controls'));
    }
    // skipcq: JS-0116 - Base class (CommandError) expects expected catch to return a Promise
    async catch(err) {
        // If error message is for missing flags, display
        // what fields are required, otherwise show the error
        if (err.message.includes('See more help with --help')) {
            this.warn(err.message.replace('with --help', `with: \x1B[93m${CMD_HELP}\x1B[0m`));
        }
        else {
            this.warn(err);
        }
    }
}
exports.default = EmasserPutControls;
//# sourceMappingURL=controls.js.map