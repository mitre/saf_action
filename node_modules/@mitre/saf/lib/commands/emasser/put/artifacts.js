"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const json_colorizer_1 = require("json-colorizer");
const fs_1 = tslib_1.__importDefault(require("fs"));
const promises_1 = require("fs/promises");
const core_1 = require("@oclif/core");
const emass_client_1 = require("@mitre/emass_client");
const apiConnection_1 = require("../../../utils/emasser/apiConnection");
const outputFormatter_1 = require("../../../utils/emasser/outputFormatter");
const utilities_1 = require("../../../utils/emasser/utilities");
const outputError_1 = require("../../../utils/emasser/outputError");
function getAllJsonExamples() {
    let exampleBodyObj = {};
    exampleBodyObj = {
        ...(0, utilities_1.getJsonExamples)('artifacts-put-required'),
        ...(0, utilities_1.getJsonExamples)('artifacts-put-optional'),
    };
    return exampleBodyObj;
}
function assertParamExists(object, value) {
    if (value === undefined) {
        (0, utilities_1.printRedMsg)(`Missing required parameter/field: ${object}`);
        throw new Error('Value not defined');
    }
}
function addRequiredFieldsToRequestBody(dataObj) {
    const bodyObj = {};
    try {
        assertParamExists('filename', dataObj.filename);
        assertParamExists('isTemplate', dataObj.isTemplate);
        assertParamExists('type', dataObj.type);
        assertParamExists('category', dataObj.category);
    }
    catch (error) {
        console.log('Required JSON fields are:');
        console.log((0, json_colorizer_1.colorize)(JSON.stringify((0, utilities_1.getJsonExamples)('artifacts-put-required'), null, 2)));
        throw error;
    }
    bodyObj.filename = dataObj.filename;
    bodyObj.isTemplate = dataObj.isTemplate;
    bodyObj.type = dataObj.type;
    bodyObj.category = dataObj.category;
    return bodyObj;
}
function addOptionalFields(bodyObject, dataObj) {
    if (Object.prototype.hasOwnProperty.call(dataObj, 'name')) {
        bodyObject.name = dataObj.name;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'description')) {
        bodyObject.description = dataObj.description;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'referencePageNumber')) {
        bodyObject.referencePageNumber = dataObj.referencePageNumber;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'controls')) {
        bodyObject.controls = dataObj.controls;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'assessmentProcedures')) {
        bodyObject.assessmentProcedures = dataObj.assessmentProcedures;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'expirationDate')) {
        bodyObject.expirationDate = dataObj.expirationDate;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'lastReviewedDate')) {
        bodyObject.lastReviewedDate = dataObj.lastReviewedDate;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'signedDate')) {
        bodyObject.signedDate = dataObj.signedDate;
    }
}
function generateBodyObj(dataObject) {
    let bodyObj = {};
    try {
        bodyObj = addRequiredFieldsToRequestBody(dataObject);
        addOptionalFields(bodyObj, dataObject);
    }
    catch {
        process.exit(1);
    }
    return bodyObj;
}
const CMD_HELP = 'saf emasser put artifacts -h or --help';
class EmasserPutArtifacts extends core_1.Command {
    static usage = '<%= command.id %> [FLAGS]\n\x1B[93m NOTE: see EXAMPLES for command usages\x1B[0m';
    static description = 'Updates artifacts for a system with provided entries';
    static examples = [
        '<%= config.bin %> <%= command.id %> [-s,--systemId] [-f,--dataFile]',
        'The input file should be a well formed JSON containing the POA&M information based on defined business rules.',
        'Required JSON parameter/fields are: ',
        (0, json_colorizer_1.colorize)(JSON.stringify((0, utilities_1.getJsonExamples)('artifacts-put-required'), null, 2)),
        'Optional JSON parameters/fields are:',
        (0, json_colorizer_1.colorize)(JSON.stringify((0, utilities_1.getJsonExamples)('artifacts-put-optional'), null, 2)),
        '\x1B[1m\x1B[32mAll accepted parameters/fields are:\x1B[0m',
        (0, json_colorizer_1.colorize)(getAllJsonExamples()),
    ];
    static flags = {
        help: core_1.Flags.help({ char: 'h', description: 'Show eMASSer CLI help for the PUT Artifacts command' }),
        ...(0, utilities_1.getFlagsForEndpoint)(process.argv), // skipcq: JS-0349
    };
    async run() {
        const { flags } = await this.parse(EmasserPutArtifacts);
        const apiCxn = new apiConnection_1.ApiConnection();
        const artifactApi = new emass_client_1.ArtifactsApi(apiCxn.configuration, apiCxn.basePath, apiCxn.axiosInstances);
        const requestBodyArray = [];
        // Check if a Artifacts json file was provided
        if (fs_1.default.existsSync(flags.dataFile)) {
            let data;
            try {
                data = JSON.parse(await (0, promises_1.readFile)(flags.dataFile, 'utf8'));
            }
            catch (error) {
                console.error('\x1B[91m» Error reading Artifacts data file, possible malformed json. Please use the -h flag for help.\x1B[0m');
                console.error('\x1B[93m→ Error message was:', error.message, '\x1B[0m');
                process.exit(1);
            }
            // Artifacts json file provided, check if we have multiple Artifacts to process
            if (Array.isArray(data)) {
                data.forEach((dataObject) => {
                    // Generate the put request object based on business logic
                    requestBodyArray.push(generateBodyObj(dataObject));
                });
            }
            else if (typeof data === 'object') {
                const dataObject = data;
                // Generate the put request object based on business logic
                requestBodyArray.push(generateBodyObj(dataObject));
            }
        }
        else {
            console.error('\x1B[91m» Artifacts data file (.json) not found or invalid:', flags.dataFile, '\x1B[0m');
            process.exit(1);
        }
        // Call API endpoint
        artifactApi.updateArtifactBySystemId(flags.systemId, requestBodyArray).then((response) => {
            console.log((0, json_colorizer_1.colorize)((0, outputFormatter_1.outputFormat)(response, false)));
        }).catch((error) => console.error((0, json_colorizer_1.colorize)((0, outputError_1.outputError)(error))));
    }
    async catch(err) {
        // If error message is for missing flags, display
        // what fields are required, otherwise show the error
        if (err.message.includes('See more help with --help')) {
            this.warn(err.message.replace('with --help', `with: \x1B[93m${CMD_HELP}\x1B[0m`));
        }
        else {
            this.warn(err);
        }
    }
}
exports.default = EmasserPutArtifacts;
//# sourceMappingURL=artifacts.js.map