"use strict";
/* eslint-disable valid-jsdoc */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const fs_1 = tslib_1.__importDefault(require("fs"));
const promises_1 = require("fs/promises");
const json_colorizer_1 = require("json-colorizer");
const core_1 = require("@oclif/core");
const utilities_1 = require("../../../utils/emasser/utilities");
const apiConnection_1 = require("../../../utils/emasser/apiConnection");
const outputFormatter_1 = require("../../../utils/emasser/outputFormatter");
const outputError_1 = require("../../../utils/emasser/outputError");
const emass_client_1 = require("@mitre/emass_client");
/**
 * Combines JSON examples from multiple sources into a single object.
 *
 * This function aggregates JSON examples from three different sources:
 * 'software-put-required', 'software-post-put-conditional', and 'software-post-put-optional'.
 * It merges these examples into a single object and returns it as a string.
 *
 * @returns {string} A string representation of the combined JSON examples.
 */
function getAllJsonExamples() {
    let exampleBodyObj = {};
    exampleBodyObj = {
        ...(0, utilities_1.getJsonExamples)('software-put-required'),
        ...(0, utilities_1.getJsonExamples)('software-post-put-conditional'),
        ...(0, utilities_1.getJsonExamples)('software-post-put-optional'),
    };
    return exampleBodyObj;
}
/**
 * Asserts that a required parameter exists and is not undefined.
 *
 * @param object - The name of the parameter or field being checked.
 * @param value - The value of the parameter or field to check.
 * @throws Will throw an error if the value is undefined.
 */
function assertParamExists(object, value) {
    if (value === undefined) {
        (0, utilities_1.printRedMsg)(`Missing required parameter/field: ${object}`);
        throw new Error('Value not defined');
    }
}
/**
 * Adds required fields to the request body for a software object.
 *
 * This function ensures that the required fields `softwareId`, `softwareVendor`,
 * `softwareName`, and `version` are present in the input `dataObj`. If any of these
 * fields are missing, an error is thrown and an example JSON structure is logged.
 *
 * @param dataObj - The software object containing the data to be validated and added to the request body.
 * @returns A new software object containing only the required fields.
 * @throws Will throw an error if any of the required fields are missing in `dataObj`.
 */
function addRequiredFieldsToRequestBody(dataObj) {
    const bodyObj = {};
    try {
        assertParamExists('softwareId', dataObj.softwareId);
        assertParamExists('softwareVendor', dataObj.softwareVendor);
        assertParamExists('softwareName', dataObj.softwareName);
        assertParamExists('version', dataObj.version);
    }
    catch (error) {
        console.log('Required JSON fields are:');
        console.log((0, json_colorizer_1.colorize)(JSON.stringify((0, utilities_1.getJsonExamples)('software-put-required'), null, 2)));
        throw error;
    }
    // The required parameter "systemId" is validated by oclif
    bodyObj.softwareId = dataObj.softwareId;
    bodyObj.softwareVendor = dataObj.softwareVendor;
    bodyObj.softwareName = dataObj.softwareName;
    bodyObj.version = dataObj.version;
    return bodyObj;
}
/**
 * Adds conditional fields from the data object to the body object.
 *
 * @param bodyObject - The target object to which fields may be added.
 * @param dataObj - The source object from which fields are conditionally copied.
 */
function addConditionalFields(bodyObject, dataObj) {
    if (Object.prototype.hasOwnProperty.call(dataObj, 'publicFacingFqdn')) {
        bodyObject.approvalDate = dataObj.approvalDate;
    }
}
/**
 * Adds optional fields from the `dataObj` to the `bodyObject` if they exist.
 *
 * @param bodyObject - The target object to which optional fields will be added.
 * @param dataObj - The source object containing optional fields.
 */
// skipcq: JS-R1005 - Ignore Function cyclomatic complexity high threshold
function addOptionalFields(bodyObject, dataObj) {
    if (Object.prototype.hasOwnProperty.call(dataObj, 'softwareType')) {
        bodyObject.softwareType = dataObj.softwareType;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'parentSystem')) {
        bodyObject.parentSystem = dataObj.parentSystem;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'subsystem')) {
        bodyObject.subsystem = dataObj.subsystem;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'network')) {
        bodyObject.network = dataObj.network;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'hostingEnvironment')) {
        bodyObject.hostingEnvironment = dataObj.hostingEnvironment;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'softwareDependencies')) {
        bodyObject.softwareDependencies = dataObj.softwareDependencies;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'cryptographicHash')) {
        bodyObject.cryptographicHash = dataObj.cryptographicHash;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'inServiceData')) {
        bodyObject.inServiceData = dataObj.inServiceData;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'itBudgetUii')) {
        bodyObject.itBudgetUii = dataObj.itBudgetUii;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'fiscalYear')) {
        bodyObject.fiscalYear = dataObj.fiscalYear;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'popEndDate')) {
        bodyObject.popEndDate = dataObj.popEndDate;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'licenseOrContract')) {
        bodyObject.licenseOrContract = dataObj.licenseOrContract;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'licenseTerm')) {
        bodyObject.licenseTerm = dataObj.licenseTerm;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'costPerLicense')) {
        bodyObject.costPerLicense = dataObj.costPerLicense;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'totalLicenses')) {
        bodyObject.totalLicenses = dataObj.totalLicenses;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'totalLicenseCost')) {
        bodyObject.totalLicenseCost = dataObj.totalLicenseCost;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'licensesUsed')) {
        bodyObject.licensesUsed = dataObj.licensesUsed;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'licensePoc')) {
        bodyObject.licensePoc = dataObj.licensePoc;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'licenseRenewalDate')) {
        bodyObject.licenseRenewalDate = dataObj.licenseRenewalDate;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'licenseExpirationDate ')) {
        bodyObject.licenseExpirationDate = dataObj.licenseExpirationDate;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'approvalStatus')) {
        bodyObject.approvalStatus = dataObj.approvalStatus;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'releaseDate')) {
        bodyObject.releaseDate = dataObj.releaseDate;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'maintenanceDate')) {
        bodyObject.maintenanceDate = dataObj.maintenanceDate;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'retirementDate')) {
        bodyObject.retirementDate = dataObj.retirementDate;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'endOfLifeSupportDate')) {
        bodyObject.endOfLifeSupportDate = dataObj.endOfLifeSupportDate;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'extendedEndOfLifeSupportDate')) {
        bodyObject.extendedEndOfLifeSupportDate = dataObj.extendedEndOfLifeSupportDate;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'criticalAsset')) {
        bodyObject.criticalAsset = dataObj.criticalAsset;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'location')) {
        bodyObject.location = dataObj.location;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'purpose')) {
        bodyObject.purpose = dataObj.purpose;
    }
    // VA Only
    if (Object.prototype.hasOwnProperty.call(dataObj, 'unsupportedOperatingSystem')) {
        bodyObject.unsupportedOperatingSystem = dataObj.unsupportedOperatingSystem;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'unapprovedSoftwareFromTrm')) {
        bodyObject.unapprovedSoftwareFromTrm = dataObj.unapprovedSoftwareFromTrm;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'approvedWaiver')) {
        bodyObject.approvedWaiver = dataObj.approvedWaiver;
    }
}
/**
 * Generates a body object for a software baseline request.
 *
 * This function takes a `Software` object as input and constructs a new `Software`
 * object by adding required, conditional, and optional fields to it. If an error
 * occurs during this process, the function will terminate the process with an exit code of 1.
 *
 * @param dataObject - The input `Software` object containing the initial data.
 * @returns The constructed `Software` object with the necessary fields added.
 */
function generateBodyObj(dataObject) {
    let bodyObj = {};
    try {
        bodyObj = addRequiredFieldsToRequestBody(dataObject);
        addConditionalFields(bodyObj, dataObject);
        addOptionalFields(bodyObj, dataObject);
    }
    catch {
        process.exit(1);
    }
    return bodyObj;
}
const CMD_HELP = 'saf emasser put software_baseline -h or --help';
class EmasserSoftwareBaseline extends core_1.Command {
    static usage = '<%= command.id %> [FLAGS]\n\x1B[93m NOTE: see EXAMPLES for command usages\x1B[0m';
    static description = 'Update one or many software assets to a system.\n' +
        'The CLI expects an input JSON file containing the required, conditional\n' +
        'and optional fields for the software asset(s) being added to the system.';
    static examples = [
        '<%= config.bin %> <%= command.id %> [-s,--systemId] [-f,--dataFile]',
        'The input file should be a well formed JSON containing Software Assets.',
        '\x1B[1mRequired JSON parameter/field is:\x1B[0m',
        (0, json_colorizer_1.colorize)(JSON.stringify((0, utilities_1.getJsonExamples)('software-put-required'), null, 2)),
        '\x1B[1mConditional JSON parameters/fields are:\x1B[0m',
        (0, json_colorizer_1.colorize)(JSON.stringify((0, utilities_1.getJsonExamples)('software-post-put-conditional'), null, 2)),
        '\x1B[1mOptional JSON parameters/fields are:\x1B[0m',
        (0, json_colorizer_1.colorize)(JSON.stringify((0, utilities_1.getJsonExamples)('software-post-put-optional'), null, 2)),
        '\x1B[1m\x1B[32mAll accepted parameters/fields are:\x1B[0m',
        (0, json_colorizer_1.colorize)(getAllJsonExamples()),
    ];
    static flags = {
        help: core_1.Flags.help({ char: 'h', description: 'Show eMASSer CLI help for the PUT Software Baseline command' }),
        ...(0, utilities_1.getFlagsForEndpoint)(process.argv), // skipcq: JS-0349
    };
    async run() {
        const { flags } = await this.parse(EmasserSoftwareBaseline);
        const apiCxn = new apiConnection_1.ApiConnection();
        const swBaseline = new emass_client_1.SoftwareBaselineApi(apiCxn.configuration, apiCxn.basePath, apiCxn.axiosInstances);
        const requestBodyArray = [];
        // Check if a Software json file was provided
        if (fs_1.default.existsSync(flags.dataFile)) {
            let data;
            try {
                data = JSON.parse(await (0, promises_1.readFile)(flags.dataFile, 'utf8'));
            }
            catch (error) {
                console.error('\x1B[91m» Error reading Software data file, possible malformed json. Please use the -h flag for help.\x1B[0m');
                console.error('\x1B[93m→ Error message was:', error.message, '\x1B[0m');
                process.exit(1);
            }
            // Process the Software data file
            if (Array.isArray(data)) {
                data.forEach((dataObject) => {
                    // Generate the put request object
                    requestBodyArray.push(generateBodyObj(dataObject));
                });
            }
            else if (typeof data === 'object') {
                const dataObject = data;
                // Generate the put request object
                requestBodyArray.push(generateBodyObj(dataObject));
            }
        }
        else {
            console.error('\x1B[91m» Software data file (.json) not found or invalid:', flags.dataFile, '\x1B[0m');
            process.exit(1);
        }
        // Call the endpoint
        swBaseline.updateSwBaselineAssets(flags.systemId, requestBodyArray).then((response) => {
            console.log((0, json_colorizer_1.colorize)((0, outputFormatter_1.outputFormat)(response, false)));
        }).catch((error) => console.error((0, json_colorizer_1.colorize)((0, outputError_1.outputError)(error))));
    }
    async catch(err) {
        // If error message is for missing flags, display
        // what fields are required, otherwise show the error
        if (err.message.includes('See more help with --help')) {
            this.warn(err.message.replace('with --help', `with: \x1B[93m${CMD_HELP}\x1B[0m`));
        }
        else {
            this.warn(err);
        }
    }
}
exports.default = EmasserSoftwareBaseline;
//# sourceMappingURL=software_baseline.js.map