"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const json_colorizer_1 = require("json-colorizer");
const core_1 = require("@oclif/core");
const outputError_1 = require("../../../utils/emasser/outputError");
const apiConnection_1 = require("../../../utils/emasser/apiConnection");
const outputFormatter_1 = require("../../../utils/emasser/outputFormatter");
const utilities_1 = require("../../../utils/emasser/utilities");
const emass_client_1 = require("@mitre/emass_client");
const CMD_HELP = 'saf emasser delete software_baseline -h or --help';
class EmasserDeleteSoftwareBaseline extends core_1.Command {
    static usage = '<%= command.id %> [FLAGS]';
    static description = 'Remove one or many Software items in a system identified by system and software Id';
    static examples = ['<%= config.bin %> <%= command.id %> [-s,--systemId] [-a,--assetsSoftwareId] <software-id> <software-id> ...'];
    static flags = {
        help: core_1.Flags.help({ char: 'h', description: 'Show help for the SAF CLI eMASSer DELETE Software Baseline command' }),
        ...(0, utilities_1.getFlagsForEndpoint)(process.argv), // skipcq: JS-0349
    };
    async run() {
        const { flags } = await this.parse(EmasserDeleteSoftwareBaseline);
        const apiCxn = new apiConnection_1.ApiConnection();
        const delSwBaseline = new emass_client_1.SoftwareBaselineApi(apiCxn.configuration, apiCxn.basePath, apiCxn.axiosInstances);
        const requestBodyArray = [];
        flags.assetsSoftwareId.forEach((softwareId) => {
            requestBodyArray.push({ softwareId: softwareId }); // skipcq: JS-0240
        });
        // Call the endpoint
        delSwBaseline.deleteSwBaselineAssets(flags.systemId, requestBodyArray).then((response) => {
            console.log((0, json_colorizer_1.colorize)((0, outputFormatter_1.outputFormat)(response, false)));
        }).catch((error) => console.error((0, json_colorizer_1.colorize)((0, outputError_1.outputError)(error))));
    }
    async catch(err) {
        // If error message is for missing flags, display
        // what fields are required, otherwise show the error
        if (err.message.includes('See more help with --help')) {
            this.warn(err.message.replace('with --help', `with: \x1B[93m${CMD_HELP}\x1B[0m`));
        }
        else {
            this.warn(err);
        }
    }
}
exports.default = EmasserDeleteSoftwareBaseline;
//# sourceMappingURL=software_baseline.js.map