"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const json_colorizer_1 = require("json-colorizer");
const core_1 = require("@oclif/core");
const apiConnection_1 = require("../../../utils/emasser/apiConnection");
const emass_client_1 = require("@mitre/emass_client");
const outputFormatter_1 = require("../../../utils/emasser/outputFormatter");
const utilities_1 = require("../../../utils/emasser/utilities");
class EmasserGetSystem extends core_1.Command {
    static usage = '<%= command.id %> [FLAG]';
    static description = 'Get system information for a specific system defined by ID (systemId)';
    static examples = ['<%= config.bin %> <%= command.id %> [-s, --systemId] <value> [options]'];
    static flags = {
        help: core_1.Flags.help({ char: 'h', description: 'Show eMASSer CLI help for the GET System command' }),
        ...(0, utilities_1.getFlagsForEndpoint)(process.argv), // skipcq: JS-0349
    };
    async run() {
        const { flags } = await this.parse(EmasserGetSystem);
        const apiCxn = new apiConnection_1.ApiConnection();
        const getSystems = new emass_client_1.SystemsApi(apiCxn.configuration, apiCxn.basePath, apiCxn.axiosInstances);
        // Order is important here
        getSystems.getSystem(flags.systemId, flags.includePackage, flags.policy).then((response) => {
            console.log((0, json_colorizer_1.colorize)((0, outputFormatter_1.outputFormat)(response)));
        }).catch((error) => (0, utilities_1.displayError)(error, 'Systems'));
    }
    // skipcq: JS-0116 - Base class (CommandError) expects expected catch to be async
    async catch(error) {
        if (error instanceof Error) {
            this.warn(error.message);
        }
        else {
            const suggestions = 'get system [-h or --help]';
            this.warn('Invalid arguments\nTry this ðŸ‘‡:\n\t' + suggestions);
        }
    }
}
exports.default = EmasserGetSystem;
//# sourceMappingURL=system.js.map