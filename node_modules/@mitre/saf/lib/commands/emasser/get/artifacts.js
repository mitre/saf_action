"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const json_colorizer_1 = require("json-colorizer");
const core_1 = require("@oclif/core");
const apiConnection_1 = require("../../../utils/emasser/apiConnection");
const apiConfig_1 = require("../../../utils/emasser/apiConfig");
const emass_client_1 = require("@mitre/emass_client");
const outputFormatter_1 = require("../../../utils/emasser/outputFormatter");
const outputError_1 = require("../../../utils/emasser/outputError");
const utilities_1 = require("../../../utils/emasser/utilities");
const endpoint = 'artifacts';
class EmasserGetArtifacts extends core_1.Command {
    static usage = '<%= command.id %> [ARGUMENT] [FLAGS]\n \x1B[93m NOTE: see EXAMPLES for argument case format\x1B[0m';
    static description = (0, utilities_1.getDescriptionForEndpoint)(process.argv, endpoint);
    static examples = (0, utilities_1.getExamplesForEndpoint)(process.argv);
    static flags = {
        help: core_1.Flags.help({ char: 'h', description: 'Show eMASSer CLI help for the GET Artifacts command' }),
        ...(0, utilities_1.getFlagsForEndpoint)(process.argv), // skipcq: JS-0349
    };
    // NOTE: The way args are being implemented are mainly for the purposes of help clarity, there is, displays
    //       the available arguments with associate description.
    // Only args.name is used, there is, it contains the argument listed by the user.
    // Example: If the user uses the command (saf eMASSer get artifacts forSystem), args.name is set to forSystem
    static args = {
        name: core_1.Args.string({ name: 'name', required: false, hidden: true }),
        forSystem: core_1.Args.string({ name: 'forSystem', description: 'Retrieves available milestones for provided system (Id)', required: false }),
        export: core_1.Args.string({ name: 'export', description: 'Exports the milestone(s) for provided system (Id) and file name', required: false }),
    };
    async run() {
        const { args, flags } = await this.parse(EmasserGetArtifacts);
        const apiCxn = new apiConnection_1.ApiConnection();
        if (args.name === 'forSystem') {
            const getArtifacts = new emass_client_1.ArtifactsApi(apiCxn.configuration, apiCxn.basePath, apiCxn.axiosInstances);
            // Order is important here
            getArtifacts.getSystemArtifacts(flags.systemId, flags.filename, flags.controlAcronyms, flags.ccis, flags.systemOnly).then((response) => {
                console.log((0, json_colorizer_1.colorize)((0, outputFormatter_1.outputFormat)(response)));
            }).catch((error) => console.error((0, json_colorizer_1.colorize)((0, outputError_1.outputError)(error))));
        }
        else if (args.name === 'export') {
            const getArtifactsExport = new emass_client_1.ArtifactsExportApi(apiCxn.configuration, apiCxn.basePath, apiCxn.axiosInstances);
            // Order is important here
            getArtifactsExport.getSystemArtifactsExport(flags.systemId, flags.filename, flags.compress).then((response) => {
                const fileName = response.config.url.split('=')[1];
                // Zip and compress file data is of type of string output to download directory
                try {
                    if (typeof response.data === 'string') {
                        const conf = new apiConfig_1.ApiConfig();
                        console.log(`\x1B[33mOutput file: ${fileName} saved to directory: ${conf.downloadDir}\x1B[0m`);
                        (0, utilities_1.saveFile)(conf.downloadDir, fileName, response.data);
                    }
                    else if (flags.printToStdOut) {
                        console.log((0, json_colorizer_1.colorize)(JSON.stringify(response.data, null, 2)));
                    }
                    else {
                        const conf = new apiConfig_1.ApiConfig();
                        console.log(`\x1B[33mOutput file: ${fileName} saved to directory: ${conf.downloadDir}\x1B[0m`);
                        (0, utilities_1.saveFile)(conf.downloadDir, fileName, JSON.stringify(response.data));
                    }
                }
                catch (error) {
                    console.error(`\x1B[31mSave File Error: ${error.message}\x1B[0m`);
                }
            }).catch((error) => console.error((0, json_colorizer_1.colorize)((0, outputError_1.outputError)(error))));
        }
        else {
            throw this.error;
        }
    }
    async catch(error) {
        if (error.message) {
            this.warn(error.message);
        }
        else {
            const suggestions = 'get artifacts [-h or --help]\n\tget artifacts forSystem\n\tget artifacts export';
            this.warn('Invalid arguments\nTry this:\n\t' + suggestions);
        }
    }
}
exports.default = EmasserGetArtifacts;
//# sourceMappingURL=artifacts.js.map