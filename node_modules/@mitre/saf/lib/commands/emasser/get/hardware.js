"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const json_colorizer_1 = require("json-colorizer");
const core_1 = require("@oclif/core");
const apiConnection_1 = require("../../../utils/emasser/apiConnection");
const emass_client_1 = require("@mitre/emass_client");
const outputFormatter_1 = require("../../../utils/emasser/outputFormatter");
const utilities_1 = require("../../../utils/emasser/utilities");
class EmasserGetHardwareBaseline extends core_1.Command {
    static usage = '<%= command.id %> [ARGUMENT] [FLAGS]\n \x1B[93m NOTE: see EXAMPLES for argument case format\x1B[0m';
    static description = 'View all hardware baseline for a system available on the eMASS instance';
    static examples = [
        {
            description: '\x1B[93mRetrieve baselines without pagination\x1B[0m',
            command: '<%= config.bin %> <%= command.id %> baseline [-s, --systemId] <value> [options]',
        },
        {
            description: '\x1B[93mRetrieve baselines with pagination\x1B[0m',
            command: '<%= config.bin %> <%= command.id %> baseline [-s, --systemId] <value> [-S, --pageSize]=<value> [-i, --pageIndex]=<value>',
        },
    ];
    static flags = {
        help: core_1.Flags.help({ char: 'h', description: 'Show eMASSer CLI help for the GET Hardware Baseline command' }),
        ...(0, utilities_1.getFlagsForEndpoint)(process.argv), // skipcq: JS-0349
    };
    // NOTE: The way args are being implemented are mainly for clarity purposes, there is, it displays
    //       the available arguments with associate description.
    // Only args.name is used, there is, it contains the argument listed by the user.
    // Example: If the user uses the command (saf emasser get hardware baseline), args.name is set to baseline
    static args = {
        name: core_1.Args.string({ name: 'name', required: false, hidden: true }),
        baseline: core_1.Args.string({ name: 'baseline', description: 'Retrieves all hardware baseline for a system', required: false }),
    };
    async run() {
        const { args, flags } = await this.parse(EmasserGetHardwareBaseline);
        const apiCxn = new apiConnection_1.ApiConnection();
        const getHardwareBaseline = new emass_client_1.HardwareBaselineApi(apiCxn.configuration, apiCxn.basePath, apiCxn.axiosInstances);
        if (args.name === 'baseline') {
            // Order is important here
            getHardwareBaseline.getSystemHwBaseline(flags.systemId, flags.pageIndex, flags.pageSize)
                .then((response) => {
                console.log((0, json_colorizer_1.colorize)((0, outputFormatter_1.outputFormat)(response)));
            }).catch((error) => (0, utilities_1.displayError)(error, 'Hardware'));
        }
        else {
            throw this.error;
        }
    }
    // skipcq: JS-0116 - Base class (CommandError) expects expected catch to be async
    async catch(error) {
        if (error instanceof Error) {
            this.warn(error);
        }
        else {
            const suggestions = 'get hardware [-h or --help]\n\tget hardware baseline';
            this.warn('Invalid arguments\nTry this ðŸ‘‡:\n\t' + suggestions);
        }
    }
}
exports.default = EmasserGetHardwareBaseline;
//# sourceMappingURL=hardware.js.map