"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const json_colorizer_1 = require("json-colorizer");
const core_1 = require("@oclif/core");
const apiConnection_1 = require("../../../utils/emasser/apiConnection");
const emass_client_1 = require("@mitre/emass_client");
const outputFormatter_1 = require("../../../utils/emasser/outputFormatter");
const outputError_1 = require("../../../utils/emasser/outputError");
class EmasserGetTestConnection extends core_1.Command {
    static usage = '<%= command.id %>';
    static description = 'Test if eMASSer is properly configured to a valid eMASS URL\nUse the eMASSer CLI command "saf emasser configure" to generate or update an eMASS configuration file.';
    static examples = ['<%= config.bin %> <%= command.id %>'];
    static flags = {
        help: core_1.Flags.help({ char: 'h', description: 'Show eMASSer CLI help for the GET Test Connection command' }),
    };
    async run() {
        const apiCxn = new apiConnection_1.ApiConnection();
        const getTestApi = new emass_client_1.TestApi(apiCxn.configuration, apiCxn.basePath, apiCxn.axiosInstances);
        getTestApi.testConnection().then((response) => {
            console.log((0, json_colorizer_1.colorize)((0, outputFormatter_1.outputFormat)(response)));
        }).catch((error) => console.error((0, json_colorizer_1.colorize)((0, outputError_1.outputError)(error))));
    }
    async catch(error) {
        if (error.message) {
            this.warn(error.message);
        }
        else {
            const suggestions = 'get test_connection [-h or --help]';
            this.warn('Invalid arguments\nTry this ðŸ‘‡:\n\t' + suggestions);
        }
    }
}
exports.default = EmasserGetTestConnection;
//# sourceMappingURL=test_connection.js.map