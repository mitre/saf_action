"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const colors_1 = tslib_1.__importDefault(require("colors")); // eslint-disable-line no-restricted-imports
const core_1 = require("@oclif/core");
const generateConfig_1 = require("../../utils/emasser/generateConfig");
class EmasserBuildConfig extends core_1.Command {
    static summary = 'Generate a configuration file (.env) for accessing an eMASS instances.';
    static description = `
   ${colors_1.default.yellow('The following variables are required:')}
   ${colors_1.default.blue('\tEMASSER_API_KEY') + colors_1.default.green('           <The eMASS API key (api-key) - valid key is > 30 alpha numeric characters>\b')}
   ${colors_1.default.blue('\tEMASSER_USER_UID') + colors_1.default.green('          <The eMASS User Unique Identifier (user-uid)>\b')}
   ${colors_1.default.blue('\tEMASSER_HOST_URL') + colors_1.default.green('          <The Full Qualified Domain Name (FQDN) for the eMASS server>')}
   ${colors_1.default.blue('\tEMASSER_KEY_FILE_PATH') + colors_1.default.green('     <The eMASS key.pem private encrypting the key in PEM format (file, include the path)>')}
   ${colors_1.default.blue('\tEMASSER_CERT_FILE_PATH') + colors_1.default.green('    <The eMASS cert.pem containing the certificate information in PEM format (file, include the path)>')}
   ${colors_1.default.blue('\tEMASSER_KEY_FILE_PASSWORD') + colors_1.default.green(' <The password for the private encryption key.pem file>')}
   ${colors_1.default.yellow('The following variables are optional, if not provided defaults are used:')}
   ${colors_1.default.blue('\tEMASSER_PORT') + colors_1.default.green('                <The server communication port number (default is 443)>\b')}
   ${colors_1.default.blue('\tEMASSER_REQUEST_CERT') + colors_1.default.green('        <Server requests a certificate from connecting clients - true or false (default true)>')}
   ${colors_1.default.blue('\tEMASSER_REJECT_UNAUTHORIZED') + colors_1.default.green(' <Reject clients with invalid certificates - true or false (default true)>')}
   ${colors_1.default.blue('\tEMASSER_DEBUGGING') + colors_1.default.green('           <Set debugging on (true) or off (false) (default false)>')}
   ${colors_1.default.blue('\tEMASSER_CLI_DISPLAY_NULL') + colors_1.default.green('    <Display null value fields - true or false (default true)>')}
   ${colors_1.default.blue('\tEMASSER_EPOCH_TO_DATETIME') + colors_1.default.green('   <Convert epoch to data/time value - true or false (default false)>')}
  `;
    static examples = ['<%= config.bin %> <%= command.id %>'];
    async run() {
        (0, generateConfig_1.generateConfig)();
    }
}
exports.default = EmasserBuildConfig;
