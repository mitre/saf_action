"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const fs_1 = tslib_1.__importDefault(require("fs"));
const promises_1 = require("fs/promises");
const json_colorizer_1 = require("json-colorizer");
const core_1 = require("@oclif/core");
const utilities_1 = require("../../../utils/emasser/utilities");
const apiConnection_1 = require("../../../utils/emasser/apiConnection");
const outputFormatter_1 = require("../../../utils/emasser/outputFormatter");
const emass_client_1 = require("@mitre/emass_client");
/**
 * Retrieves all JSON examples by merging the results of multiple example sets.
 *
 * This function combines the JSON examples from three different categories:
 * - Required hardware post examples
 * - Conditional hardware post/put examples
 * - Optional hardware post/put examples
 *
 * @returns {Record<string, unknown>} An object containing all merged JSON examples.
 */
function getAllJsonExamples() {
    return {
        ...(0, utilities_1.getJsonExamples)('hardware-post-required'),
        ...(0, utilities_1.getJsonExamples)('hardware-post-put-conditional'),
        ...(0, utilities_1.getJsonExamples)('hardware-post-put-optional'),
    };
}
/**
 * Asserts that a required parameter exists and is not undefined.
 *
 * @param object - The name of the parameter or field being checked.
 * @param value - The value of the parameter or field to check.
 * @throws Will throw an error if the value is undefined.
 */
function assertParamExists(object, value) {
    if (value === undefined) {
        (0, utilities_1.printRedMsg)(`Missing required parameter/field: ${object}`);
        throw new Error('Value not defined');
    }
}
/**
 * Adds required fields to the request body for a hardware object.
 *
 * This function ensures that the required fields are present in the request body.
 * If the required field `assetName` is missing, an error is thrown and an example
 * JSON structure is logged to the console.
 *
 * @param dataObj - The hardware object containing the data to be validated and added to the request body.
 * @returns The hardware object with the required fields added.
 * @throws Will throw an error if the required field `assetName` is missing.
 */
function addRequiredFieldsToRequestBody(dataObj) {
    const bodyObj = {};
    try {
        assertParamExists('assetName', dataObj.assetName);
    }
    catch (error) {
        console.log('Required JSON field is:');
        console.log((0, json_colorizer_1.colorize)(JSON.stringify((0, utilities_1.getJsonExamples)('hardware-post-required'), null, 2)));
        throw error;
    }
    // The required parameter "systemId" is validated by oclif
    bodyObj.assetName = dataObj.assetName;
    return bodyObj;
}
/**
 * Adds conditional fields from the `dataObj` to the `bodyObject` if they exist.
 *
 * @param bodyObject - The target object to which fields will be added.
 * @param dataObj - The source object from which fields will be copied if they exist.
 */
function addConditionalFields(bodyObject, dataObj) {
    if (Object.prototype.hasOwnProperty.call(dataObj, 'publicFacingFqdn')) {
        bodyObject.publicFacingFqdn = dataObj.publicFacingFqdn;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'publicFacingIpAddress')) {
        bodyObject.publicFacingIpAddress = dataObj.publicFacingIpAddress;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'publicFacingUrls')) {
        bodyObject.publicFacingUrls = dataObj.publicFacingUrls;
    }
}
/**
 * Adds optional fields from the `dataObj` to the `bodyObject` if they exist.
 *
 * @param bodyObject - The target object to which optional fields will be added.
 * @param dataObj - The source object from which optional fields will be copied.
 */
function addOptionalFields(bodyObject, dataObj) {
    if (Object.prototype.hasOwnProperty.call(dataObj, 'componentType')) {
        bodyObject.componentType = dataObj.componentType;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'nickname')) {
        bodyObject.nickname = dataObj.nickname;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'assetIpAddress')) {
        bodyObject.assetIpAddress = dataObj.assetIpAddress;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'publicFacing')) {
        bodyObject.publicFacing = dataObj.publicFacing;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'virtualAsset')) {
        bodyObject.virtualAsset = dataObj.virtualAsset;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'manufacturer')) {
        bodyObject.manufacturer = dataObj.manufacturer;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'modelNumber')) {
        bodyObject.modelNumber = dataObj.modelNumber;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'serialNumber')) {
        bodyObject.serialNumber = dataObj.serialNumber;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'OsIosFwVersion')) {
        bodyObject.OsIosFwVersion = dataObj.OsIosFwVersion;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'memorySizeType')) {
        bodyObject.memorySizeType = dataObj.memorySizeType;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'location')) {
        bodyObject.location = dataObj.location;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'approvalStatus')) {
        bodyObject.approvalStatus = dataObj.approvalStatus;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'criticalAsset')) {
        bodyObject.criticalAsset = dataObj.criticalAsset;
    }
}
/**
 * Generates a body object for a hardware baseline.
 *
 * This function takes a `Hardware` object as input and creates a new `Hardware` object
 * with required, conditional, and optional fields populated based on the input object.
 * If any error occurs during the process, the function will terminate the process with an exit code of 1.
 *
 * @param dataObject - The input `Hardware` object containing the data to populate the body object.
 * @returns The generated `Hardware` body object.
 */
function generateBodyObj(dataObject) {
    let bodyObj = {};
    try {
        bodyObj = addRequiredFieldsToRequestBody(dataObject);
        addConditionalFields(bodyObj, dataObject);
        addOptionalFields(bodyObj, dataObject);
    }
    catch {
        process.exit(1);
    }
    return bodyObj;
}
/**
 * Type guard function to check if an object is of type `Hardware`.
 *
 * @param obj - The object to check.
 * @returns `true` if the object is of type `Hardware`, otherwise `false`.
 */
function isHardware(obj) {
    if (typeof obj !== 'object' || obj === null) {
        return false;
    }
    const hardwareObj = obj;
    // Check that required fields, if present, have the correct type
    // skipcq: JS-W1041 - Skip complex boolean return
    if (hardwareObj.assetName !== undefined && typeof hardwareObj.assetName !== 'string') {
        return false;
    }
    return true;
}
const CMD_HELP = 'saf emasser post hardware_baseline -h or --help';
class EmasserHardwareBaseline extends core_1.Command {
    static usage = '<%= command.id %> [FLAGS]\n\x1B[93m NOTE: see EXAMPLES for command usages\x1B[0m';
    static description = 'Add one or many hardware assets to a system.\n'
        + 'The CLI expects an input JSON file containing the required, conditional\n'
        + 'and optional fields for the hardware asset(s) being added to the system.';
    static examples = [
        '<%= config.bin %> <%= command.id %> [-s,--systemId] [-f,--dataFile]',
        'The input file should be a well formed JSON containing Hardware Assets.',
        '\x1B[1mRequired JSON parameter/field is:\x1B[0m',
        (0, json_colorizer_1.colorize)(JSON.stringify((0, utilities_1.getJsonExamples)('hardware-post-required'), null, 2)),
        '\x1B[1mConditional JSON parameters/fields are:\x1B[0m',
        (0, json_colorizer_1.colorize)(JSON.stringify((0, utilities_1.getJsonExamples)('hardware-post-put-conditional'), null, 2)),
        '\x1B[1mOptional JSON parameters/fields are:\x1B[0m',
        (0, json_colorizer_1.colorize)(JSON.stringify((0, utilities_1.getJsonExamples)('hardware-post-put-optional'), null, 2)),
        '\x1B[1m\x1B[32mAll accepted parameters/fields are:\x1B[0m',
        (0, json_colorizer_1.colorize)(getAllJsonExamples()),
    ];
    static flags = {
        help: core_1.Flags.help({ char: 'h', description: 'Show eMASSer CLI help for the POST Hardware Baseline command' }),
        ...(0, utilities_1.getFlagsForEndpoint)(process.argv), // skipcq: JS-0349
    };
    async run() {
        const { flags } = await this.parse(EmasserHardwareBaseline);
        const apiCxn = new apiConnection_1.ApiConnection();
        const hwBaseline = new emass_client_1.HardwareBaselineApi(apiCxn.configuration, apiCxn.basePath, apiCxn.axiosInstances);
        const requestBodyArray = [];
        // Check if a Hardware JSON file was provided
        if (!fs_1.default.existsSync(flags.dataFile)) {
            console.error(`\x1B[91m» Hardware data file (.json) not found or invalid: ${flags.dataFile}\x1B[0m`);
            process.exit(1);
        }
        try {
            const fileContent = await (0, promises_1.readFile)(flags.dataFile, 'utf8');
            const data = JSON.parse(fileContent);
            if (Array.isArray(data)) {
                data.forEach((dataObject) => {
                    if (isHardware(dataObject)) {
                        requestBodyArray.push(generateBodyObj(dataObject));
                    }
                });
            }
            else if (isHardware(data)) {
                requestBodyArray.push(generateBodyObj(data));
            }
        }
        catch (error) {
            if (error instanceof Error) {
                console.error('\x1B[91m» Error reading Hardware data file, possible malformed JSON. Please use the -h flag for help.\x1B[0m');
                console.error(`\x1B[93m→ Error message was: ${error.message}\x1B[0m`);
            }
            else {
                console.error(`\x1B[91m» Unknown error occurred while reading the file: ${flags.dataFile}.\x1B[0m`);
            }
            process.exit(1);
        }
        // Call the endpoint
        hwBaseline.addHwBaselineAssets(flags.systemId, requestBodyArray).then((response) => {
            console.log((0, json_colorizer_1.colorize)((0, outputFormatter_1.outputFormat)(response, false)));
        }).catch((error) => (0, utilities_1.displayError)(error, 'Hardware Baseline'));
    }
    // skipcq: JS-0116 - Base class (CommandError) expects expected catch to return a Promise
    async catch(err) {
        // If error message is for missing flags, display
        // what fields are required, otherwise show the error
        if (err.message.includes('See more help with --help')) {
            this.warn(err.message.replace('with --help', `with: \x1B[93m${CMD_HELP}\x1B[0m`));
        }
        else {
            this.warn(err);
        }
    }
}
exports.default = EmasserHardwareBaseline;
//# sourceMappingURL=hardware_baseline.js.map