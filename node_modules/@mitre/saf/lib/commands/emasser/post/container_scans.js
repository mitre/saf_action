"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const json_colorizer_1 = tslib_1.__importDefault(require("json-colorizer"));
const core_1 = require("@oclif/core");
const emass_client_1 = require("@mitre/emass_client");
const apiConnection_1 = require("../../../utils/emasser/apiConnection");
const outputFormatter_1 = require("../../../utils/emasser/outputFormatter");
const utilities_1 = require("../../../utils/emasser/utilities");
const outputError_1 = require("../../../utils/emasser/outputError");
const promises_1 = require("fs/promises");
const fs_1 = tslib_1.__importDefault(require("fs"));
function printRedMsg(msg) {
    console.log('\x1B[91m', msg, '\x1B[0m');
}
function assertParamExists(object, value) {
    if (value === undefined) {
        printRedMsg(`Missing required parameter/field: ${object}`);
        throw new Error('Value not defined');
    }
}
function addRequiredFieldsToRequestBody(dataObj) {
    const bodyObj = {
        containerId: '',
        containerName: '',
        time: 0,
        benchmarks: [],
    };
    const benchmarksArray = [];
    const resultsArray = [];
    try {
        assertParamExists('containerId', dataObj.containerId);
        assertParamExists('containerName', dataObj.containerName);
        assertParamExists('time', dataObj.time);
        let i = 0;
        let j = 0;
        dataObj.benchmarks.forEach((entryObject) => {
            assertParamExists(`benchmarks[${i}].benchmark`, entryObject.benchmark);
            entryObject.results.forEach((resultObj) => {
                assertParamExists(`benchmarks.results[${j}].ruleId`, resultObj.ruleId);
                assertParamExists(`benchmarks.results[${j}].lastSeen`, resultObj.lastSeen);
                assertParamExists(`benchmarks.results[${j}].status`, resultObj.status);
                j++;
                const resultsObj = {
                    ruleId: '',
                    status: 'Pass',
                    lastSeen: 0,
                };
                resultsObj.ruleId = resultObj.ruleId;
                resultsObj.lastSeen = resultObj.lastSeen;
                resultsObj.status = resultObj.status;
                resultsArray.push(resultsObj);
            });
            i++;
            const benchMarksObj = {
                benchmark: '',
                results: [],
            };
            benchMarksObj.benchmark = entryObject.benchmark;
            benchMarksObj.results = resultsArray;
            benchmarksArray.push(benchMarksObj);
        });
    }
    catch (error) {
        console.log('Required JSON fields are:');
        console.log((0, json_colorizer_1.default)(JSON.stringify((0, utilities_1.getJsonExamples)('container_scans-required'), null, 2)));
        throw error;
    }
    bodyObj.containerId = dataObj.containerId;
    bodyObj.containerName = dataObj.containerName;
    bodyObj.time = dataObj.time;
    bodyObj.benchmarks = benchmarksArray;
    return bodyObj;
}
function addOptionalFields(bodyObject, dataObj) {
    // Add object optional entries
    if (Object.prototype.hasOwnProperty.call(dataObj, 'namespace')) {
        bodyObject.namespace = dataObj.namespace;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'podIp')) {
        bodyObject.podIp = dataObj.podIp;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'podName')) {
        bodyObject.podName = dataObj.podName;
    }
    // Add optional tags objects if available
    if (Object.prototype.hasOwnProperty.call(dataObj, 'tags')) {
        const tagsObj = {};
        Object.keys(dataObj.tags).forEach(key => {
            tagsObj[key.toString()] = dataObj.tags[key];
        });
        bodyObject.tags = tagsObj;
    }
    const benchmarksArray = [];
    const resultsArray = [];
    // Add the optional benchmark entries
    dataObj.benchmarks.forEach((entryObject) => {
        const benchmarksObj = {
            benchmark: '',
            results: [],
        };
        // These are required
        benchmarksObj.benchmark = entryObject.benchmark;
        // Check for the optional entry
        if (Object.prototype.hasOwnProperty.call(entryObject, 'isBaseline')) {
            benchmarksObj.isBaseline = entryObject.isBaseline;
        }
        // Add the optional results entries
        entryObject.results.forEach((resultObj) => {
            const resultsObj = {
                ruleId: '',
                status: 'Pass',
                lastSeen: 0,
            };
            // These are required
            resultsObj.ruleId = resultObj.ruleId;
            resultsObj.status = resultObj.status;
            resultsObj.lastSeen = resultObj.lastSeen;
            // Check for the optional entry
            if (Object.prototype.hasOwnProperty.call(resultObj, 'isBaseline')) {
                resultsObj.message = resultObj.message;
            }
            resultsArray.push(resultsObj);
        });
        benchmarksObj.results = resultsArray;
        benchmarksArray.push(benchmarksObj);
    });
    bodyObject.benchmarks = benchmarksArray;
}
class EmasserContainerScans extends core_1.Command {
    static usage = '<%= command.id %> [options]';
    static description = 'Upload containers and their scan results in the assets module for a system';
    static examples = ['<%= config.bin %> <%= command.id %> [-s,--systemId] [-f,--containerCodeScanFile]',
        'The input file should be a well formed JSON containing the container scan results information.',
        'Required JSON parameter/fields are: ',
        (0, json_colorizer_1.default)(JSON.stringify((0, utilities_1.getJsonExamples)('container_scans-required'), null, 2)),
        'Optional JSON parameters/fields are:',
        (0, json_colorizer_1.default)(JSON.stringify((0, utilities_1.getJsonExamples)('container_scans-optional'), null, 2))];
    static flags = {
        help: core_1.Flags.help({ char: 'h', description: 'Post (upload) one or many containers and their scan results for a system' }),
        ...(0, utilities_1.getFlagsForEndpoint)(process.argv), // skipcq: JS-0349
    };
    async run() {
        const { flags } = await this.parse(EmasserContainerScans);
        const apiCxn = new apiConnection_1.ApiConnection();
        const addContainer = new emass_client_1.ContainersApi(apiCxn.configuration, apiCxn.basePath, apiCxn.axiosInstances);
        const requestBodyArray = [];
        // Check if a Cloud Resource json file was provided
        if (fs_1.default.existsSync(flags.containerCodeScanFile)) {
            let data;
            try {
                data = JSON.parse(await (0, promises_1.readFile)(flags.containerCodeScanFile, 'utf8'));
            }
            catch (error) {
                if (error.code === 'ENOENT') {
                    console.log('Container Scan Results JSON file not found!');
                    process.exit(1);
                }
                else {
                    console.log('Error reading Container Scan Results file, possible malformed json. Please use the -h flag for help.');
                    console.log('Error message was:', error.message);
                    process.exit(1);
                }
            }
            // Create request body based on key/pair values provide in the input file
            if (Array.isArray(data)) {
                data.forEach((dataObject) => {
                    let bodyObj = {
                        containerId: '',
                        containerName: '',
                        time: 0,
                        benchmarks: [],
                    };
                    // Add required fields to request array object based on business logic
                    try {
                        bodyObj = addRequiredFieldsToRequestBody(dataObject);
                        addOptionalFields(bodyObj, dataObject);
                        requestBodyArray.push(bodyObj);
                    }
                    catch {
                        process.exit(1);
                    }
                });
            }
            else if (typeof data === 'object') {
                const dataObject = data;
                let bodyObj = {
                    containerId: '',
                    containerName: '',
                    time: 0,
                    benchmarks: [],
                };
                // Add required fields to request array object based on business logic
                try {
                    bodyObj = addRequiredFieldsToRequestBody(dataObject);
                    addOptionalFields(bodyObj, dataObject);
                    requestBodyArray.push(bodyObj);
                }
                catch {
                    process.exit(1);
                }
            }
        }
        else {
            console.error('Invalid or Container Scan Results JSON file not found on the provided directory:', flags.containerCodeScanFile);
            process.exit(1);
        }
        addContainer.addContainerSansBySystemId(flags.systemId, requestBodyArray).then((response) => {
            console.log((0, json_colorizer_1.default)((0, outputFormatter_1.outputFormat)(response, false)));
        }).catch((error) => console.error((0, json_colorizer_1.default)((0, outputError_1.outputError)(error))));
    }
}
exports.default = EmasserContainerScans;
