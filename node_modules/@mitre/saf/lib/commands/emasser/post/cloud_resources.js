"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const json_colorizer_1 = require("json-colorizer");
const core_1 = require("@oclif/core");
const emass_client_1 = require("@mitre/emass_client");
const apiConnection_1 = require("../../../utils/emasser/apiConnection");
const outputFormatter_1 = require("../../../utils/emasser/outputFormatter");
const utilities_1 = require("../../../utils/emasser/utilities");
const promises_1 = require("fs/promises");
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const fs_1 = tslib_1.__importDefault(require("fs"));
/**
 * Combines JSON examples for 'cloud_resources-required' and 'cloud_resources-optional'
 * into a single JSON string.
 *
 * @returns {string} A JSON string that merges the required and optional cloud resources examples.
 */
function getAllJsonExamples() {
    return JSON.stringify(lodash_1.default.merge({}, (0, utilities_1.getJsonExamples)('cloud_resources-required'), (0, utilities_1.getJsonExamples)('cloud_resources-optional')));
}
/**
 * Asserts that a required parameter exists and is not undefined.
 *
 * @param object - The name of the parameter or field being checked.
 * @param value - The value of the parameter or field to check. Can be a string, boolean, undefined, or null.
 * @throws {Error} Throws an error if the value is undefined.
 */
function assertParamExists(object, value) {
    if (value === undefined) {
        (0, utilities_1.printRedMsg)(`Missing required parameter/field: ${object}`);
        throw new Error('Value not defined');
    }
}
/**
 * Adds required fields to the request body for a CloudResource object.
 *
 * This function ensures that all required fields are present in the provided
 * CloudResource object. If any required field is missing, an error is thrown.
 *
 * @param dataObj - The CloudResource object containing the data to be validated and added to the request body.
 * @returns A new CloudResource object with all required fields populated.
 * @throws Will throw an error if any required field is missing in the provided dataObj.
 */
function addRequiredFieldsToRequestBody(dataObj) {
    const bodyObj = {
        provider: '',
        resourceId: '',
        resourceName: '',
        resourceType: '',
        complianceResults: [],
    };
    const complianceResultsArray = [];
    try {
        assertParamExists('provider', dataObj.provider);
        assertParamExists('resourceId', dataObj.resourceId);
        assertParamExists('resourceName', dataObj.resourceName);
        assertParamExists('resourceType', dataObj.resourceType);
        let i = 0;
        dataObj.complianceResults.forEach((entryObject) => {
            assertParamExists(`dataObj.complianceResults[${i}].cspPolicyDefinitionId`, entryObject.cspPolicyDefinitionId);
            assertParamExists(`dataObj.complianceResults[${i}].isCompliant`, entryObject.isCompliant);
            assertParamExists(`dataObj.complianceResults[${i}].policyDefinitionTitle`, entryObject.policyDefinitionTitle);
            i++;
            const complianceResultsObj = {
                cspPolicyDefinitionId: '',
                isCompliant: false,
                policyDefinitionTitle: '',
            };
            complianceResultsObj.cspPolicyDefinitionId = entryObject.cspPolicyDefinitionId;
            complianceResultsObj.isCompliant = entryObject.isCompliant;
            complianceResultsObj.policyDefinitionTitle = entryObject.policyDefinitionTitle;
            complianceResultsArray.push(complianceResultsObj);
        });
    }
    catch (error) {
        console.log('Required JSON fields are:');
        console.log((0, json_colorizer_1.colorize)(JSON.stringify((0, utilities_1.getJsonExamples)('cloud_resources-required'), null, 2)));
        throw error;
    }
    bodyObj.provider = dataObj.provider;
    bodyObj.resourceId = dataObj.resourceId;
    bodyObj.resourceName = dataObj.resourceName;
    bodyObj.resourceType = dataObj.resourceType;
    bodyObj.complianceResults = complianceResultsArray;
    return bodyObj;
}
/**
 * Adds optional fields from the `dataObj` to the `bodyObject` if they exist.
 *
 * @param bodyObject - The target object to which optional fields will be added.
 * @param dataObj - The source object containing optional fields.
 *
 * @remarks
 * This function checks for the presence of optional fields in the `dataObj` and
 * adds them to the `bodyObject` if they exist.
 * It handles the following optional fields:
 * - `cspAccountId`
 * - `cspRegion`
 * - `initiatedBy`
 * - `isBaseline`
 * - `tags`
 * - `complianceResults`
 *
 * For the `tags` field, it creates a new `Tags` object and copies the key-value
 * pairs from `dataObj.tags`.
 *
 * For the `complianceResults` field, it creates a new array of `ComplianceResults`
 * objects and copies the properties from `dataObj.complianceResults`.
 */
function addOptionalFields(bodyObject, dataObj) {
    // Add object optional entries
    if (Object.prototype.hasOwnProperty.call(dataObj, 'cspAccountId')) {
        bodyObject.cspAccountId = dataObj.cspAccountId;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'cspRegion')) {
        bodyObject.cspRegion = dataObj.cspRegion;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'initiatedBy')) {
        bodyObject.initiatedBy = dataObj.initiatedBy;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'isBaseline')) {
        bodyObject.isBaseline = dataObj.isBaseline;
    }
    // Add optional tags objects if available
    if (dataObj.tags && typeof dataObj.tags === 'object') {
        const tagsObj = {};
        Object.keys(dataObj.tags).forEach((key) => {
            tagsObj[key] = dataObj.tags?.[key]; // Ensure type safety
        });
        bodyObject.tags = tagsObj;
    }
    // Add optional compliance results fields
    const complianceResultsArray = [];
    dataObj.complianceResults.forEach((entryObject) => {
        const complianceResultsObj = {
            cspPolicyDefinitionId: '',
            isCompliant: false,
            policyDefinitionTitle: '',
        };
        complianceResultsObj.cspPolicyDefinitionId = entryObject.cspPolicyDefinitionId;
        complianceResultsObj.isCompliant = entryObject.isCompliant;
        complianceResultsObj.policyDefinitionTitle = entryObject.policyDefinitionTitle;
        if (Object.prototype.hasOwnProperty.call(entryObject, 'assessmentProcedure')) {
            complianceResultsObj.assessmentProcedure = entryObject.assessmentProcedure;
        }
        if (Object.prototype.hasOwnProperty.call(entryObject, 'complianceCheckTimestamp')) {
            complianceResultsObj.complianceCheckTimestamp = entryObject.complianceCheckTimestamp;
        }
        if (Object.prototype.hasOwnProperty.call(entryObject, 'complianceReason')) {
            complianceResultsObj.complianceReason = entryObject.complianceReason;
        }
        if (Object.prototype.hasOwnProperty.call(entryObject, 'control')) {
            complianceResultsObj.control = entryObject.control;
        }
        if (Object.prototype.hasOwnProperty.call(entryObject, 'policyDeploymentName')) {
            complianceResultsObj.policyDeploymentName = entryObject.policyDeploymentName;
        }
        if (Object.prototype.hasOwnProperty.call(entryObject, 'policyDeploymentVersion')) {
            complianceResultsObj.policyDeploymentVersion = entryObject.policyDeploymentVersion;
        }
        if (Object.prototype.hasOwnProperty.call(entryObject, 'severity')) {
            complianceResultsObj.severity = entryObject.severity;
        }
        complianceResultsArray.push(complianceResultsObj);
    });
    bodyObject.complianceResults = complianceResultsArray;
}
/**
 * Checks if the given object is a valid CloudResource.
 *
 * @param obj - The object to check.
 * @returns True if the object is a CloudResource, false otherwise.
 */
function isValidCloudResource(obj) {
    if (typeof obj !== 'object' || obj === null)
        return false;
    const requiredFields = ['provider', 'resourceId', 'resourceName', 'resourceType', 'complianceResults'];
    return requiredFields.every(field => field in obj);
}
const CMD_HELP = 'saf emasser post cloud_resources -h or --help';
class EmasserPostCloudResources extends core_1.Command {
    static usage = '<%= command.id %> [FLAGS]\n\x1B[93m NOTE: see EXAMPLES for command usages\x1B[0m';
    static description = 'Add a cloud resource and their scan results in the assets module for a system';
    static examples = [
        '<%= config.bin %> <%= command.id %> [-s,--systemId] [-f,--dataFile]',
        'The input file should be a well formed JSON containing the cloud resources and their scan results information.',
        'Required JSON parameter/fields are: ',
        (0, json_colorizer_1.colorize)(JSON.stringify((0, utilities_1.getJsonExamples)('cloud_resources-required'), null, 2)),
        'Optional JSON parameters/fields are:',
        (0, json_colorizer_1.colorize)(JSON.stringify((0, utilities_1.getJsonExamples)('cloud_resources-optional'), null, 2)),
        '\x1B[1m\x1B[32mAll accepted parameters/fields are:\x1B[0m',
        (0, json_colorizer_1.colorize)(getAllJsonExamples()),
    ];
    static flags = {
        help: core_1.Flags.help({ char: 'h', description: 'Show eMASSer CLI help for the POST Cloud Resource Results command' }),
        ...(0, utilities_1.getFlagsForEndpoint)(process.argv), // skipcq: JS-0349
    };
    async run() {
        const { flags } = await this.parse(EmasserPostCloudResources);
        const apiCxn = new apiConnection_1.ApiConnection();
        const addCloudResource = new emass_client_1.CloudResourceResultsApi(apiCxn.configuration, apiCxn.basePath, apiCxn.axiosInstances);
        const requestBodyArray = [];
        // Check if a Cloud Resource json file was provided
        if (!fs_1.default.existsSync(flags.dataFile)) {
            console.error('\x1B[91mÂ» Cloud Resource data file (.json) not found or invalid:', flags.dataFile, '\x1B[0m');
            process.exit(1);
        }
        try {
            const fileContent = await (0, promises_1.readFile)(flags.dataFile, 'utf8');
            const data = JSON.parse(fileContent);
            // Create request body based on key/pair values provide in the input file
            if (Array.isArray(data)) {
                data.forEach((item) => {
                    if (!isValidCloudResource(item)) {
                        console.error('\x1B[91mÂ» Invalid Cloud Resource entry in array.\x1B[0m');
                        process.exit(1);
                    }
                    try {
                        const bodyObj = addRequiredFieldsToRequestBody(item);
                        addOptionalFields(bodyObj, item);
                        requestBodyArray.push(bodyObj);
                    }
                    catch {
                        process.exit(1);
                    }
                });
            }
            else if (isValidCloudResource(data)) {
                try {
                    const bodyObj = addRequiredFieldsToRequestBody(data);
                    addOptionalFields(bodyObj, data);
                    requestBodyArray.push(bodyObj);
                }
                catch {
                    process.exit(1);
                }
            }
            else {
                console.error('\x1B[91mÂ» Invalid Cloud Resource data format.\x1B[0m');
                process.exit(1);
            }
        }
        catch (error) {
            if (error instanceof Error) {
                console.error('\x1B[91mÂ» Error reading Cloud Resource data file, possible malformed JSON. Please use the -h flag for help.\x1B[0m');
                console.error('\x1B[93mâ Error message was:', error.message, '\x1B[0m');
            }
            else {
                console.error('\x1B[91mÂ» Unknown error occurred while reading the file:', flags.dataFile, '\x1B[0m');
            }
            process.exit(1);
        }
        // Call the endpoint
        addCloudResource.addCloudResourcesBySystemId(flags.systemId, requestBodyArray).then((response) => {
            console.log((0, json_colorizer_1.colorize)((0, outputFormatter_1.outputFormat)(response, false)));
        }).catch((error) => (0, utilities_1.displayError)(error, 'Cloud Resources'));
    }
    // skipcq: JS-0116 - Base class (CommandError) expects expected catch to return a Promise
    async catch(err) {
        // If error message is for missing flags, display
        // what fields are required, otherwise show the error
        if (err.message.includes('See more help with --help')) {
            this.warn(err.message.replace('with --help', `with: \x1B[93m${CMD_HELP}\x1B[0m`));
        }
        else {
            this.warn(err);
        }
    }
}
exports.default = EmasserPostCloudResources;
//# sourceMappingURL=cloud_resources.js.map