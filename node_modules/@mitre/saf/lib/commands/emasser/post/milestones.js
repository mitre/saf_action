"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const json_colorizer_1 = require("json-colorizer");
const core_1 = require("@oclif/core");
const outputError_1 = require("../../../utils/emasser/outputError");
const apiConnection_1 = require("../../../utils/emasser/apiConnection");
const outputFormatter_1 = require("../../../utils/emasser/outputFormatter");
const utilities_1 = require("../../../utils/emasser/utilities");
const emass_client_1 = require("@mitre/emass_client");
class EmasserPostMilestones extends core_1.Command {
    static usage = '<%= command.id %> -s <system-id> -p <poam-id> -d <description> -c <completion-date>';
    static description = 'Add milestones to one or many POA&M items in a system';
    static examples = ['<%= config.bin %> <%= command.id %> [-s,--systemId] [-p,--poamId] [-d,--description] [-c,--scheduledCompletionDate]'];
    static flags = {
        ...(0, utilities_1.getFlagsForEndpoint)(process.argv), // skipcq: JS-0349
    };
    async run() {
        const { flags } = await this.parse(EmasserPostMilestones);
        const apiCxn = new apiConnection_1.ApiConnection();
        const addMilestone = new emass_client_1.MilestonesApi(apiCxn.configuration, apiCxn.basePath, apiCxn.axiosInstances);
        const requestBodyArray = [];
        requestBodyArray.push({
            description: flags.description,
            scheduledCompletionDate: flags.scheduledCompletionDate,
        });
        addMilestone.addMilestoneBySystemIdAndPoamId(flags.systemId, flags.poamId, requestBodyArray).then((response) => {
            console.log((0, json_colorizer_1.colorize)((0, outputFormatter_1.outputFormat)(response, false)));
        }).catch((error) => console.error((0, json_colorizer_1.colorize)((0, outputError_1.outputError)(error))));
    }
    async catch(err) {
        // If error message is for missing flags, display what fields
        // are required, otherwise show the error
        if (err.message.includes('See more help with --help')) {
            this.warn(err.message.replace('--help', '\x1B[93m<cli-command> -h or --help\x1B[0m'));
        }
        else {
            this.warn(err);
        }
    }
}
exports.default = EmasserPostMilestones;
//# sourceMappingURL=milestones.js.map