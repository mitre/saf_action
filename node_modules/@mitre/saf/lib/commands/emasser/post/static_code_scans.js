"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const fs_1 = tslib_1.__importDefault(require("fs"));
const promises_1 = require("fs/promises");
const json_colorizer_1 = tslib_1.__importDefault(require("json-colorizer"));
const core_1 = require("@oclif/core");
const outputError_1 = require("../../../utils/emasser/outputError");
const apiConnection_1 = require("../../../utils/emasser/apiConnection");
const outputFormatter_1 = require("../../../utils/emasser/outputFormatter");
const utilities_1 = require("../../../utils/emasser/utilities");
const emass_client_1 = require("@mitre/emass_client");
function printRedMsg(msg) {
    console.log('\x1B[91m', msg, '\x1B[0m');
}
function assertParamExists(object, value) {
    if (value === undefined) {
        printRedMsg(`Missing required parameter/field: ${object}`);
        throw new Error('Value not defined');
    }
}
function addApplicationToRequestBody(dataObj) {
    const bodyObj = {
        applicationName: '',
        version: '',
    };
    const requestBody = {};
    try {
        assertParamExists('application.applicationName', dataObj.application?.applicationName);
        assertParamExists('application.version', dataObj.application?.version);
    }
    catch (error) {
        console.log('Required JSON fields are:');
        console.log((0, json_colorizer_1.default)(JSON.stringify((0, utilities_1.getJsonExamples)('scan_findings-application'), null, 2)));
        throw error;
    }
    bodyObj.applicationName = dataObj.application?.applicationName;
    bodyObj.version = dataObj.application?.version;
    requestBody.application = bodyObj;
    return requestBody;
}
function addApplicationFindingsFields(bodyObject, dataObj) {
    const findingsArray = [];
    try {
        let findingsObj = {};
        let i = 0;
        dataObj.applicationFindings?.forEach((appFindings) => {
            if (Object.prototype.hasOwnProperty.call(appFindings, 'clearFindings')) {
                findingsObj.clearFindings = appFindings.clearFindings;
                findingsArray.push(findingsObj);
            }
            else {
                assertParamExists(`applicationFindings[${i}].codeCheckName`, appFindings.codeCheckName);
                assertParamExists(`applicationFindings[${i}].count`, appFindings.count);
                assertParamExists(`applicationFindings[${i}].cweId`, appFindings.cweId);
                assertParamExists(`applicationFindings[${i}].scanDate`, appFindings.scanDate);
                i++;
                findingsObj.codeCheckName = appFindings.codeCheckName;
                findingsObj.count = appFindings.count;
                findingsObj.cweId = appFindings.cweId;
                findingsObj.scanDate = appFindings.scanDate;
                // rawSeverity is an optional field
                if (Object.prototype.hasOwnProperty.call(appFindings, 'rawSeverity')) {
                    findingsObj.rawSeverity = appFindings.rawSeverity;
                }
                findingsArray.push(findingsObj);
                findingsObj = {};
            }
        });
    }
    catch (error) {
        console.log('Required JSON fields are:');
        console.log((0, json_colorizer_1.default)(JSON.stringify((0, utilities_1.getJsonExamples)('scan_findings-applicationFindings'), null, 2)));
        throw error;
    }
    bodyObject.applicationFindings = findingsArray;
}
class EmasserPostStaticCodeScans extends core_1.Command {
    static usage = '<%= command.id %> [options]';
    static description = "upload application scan findings into a system's assets module";
    static examples = ['<%= config.bin %> <%= command.id %> [-s,--systemId] [-f,--cloudResourceFile]',
        'The input file should be a well formed JSON containing application scan findings.',
        'Required "application" JSON object parameter/fields are: ',
        (0, json_colorizer_1.default)(JSON.stringify((0, utilities_1.getJsonExamples)('scan_findings-application'), null, 2)),
        'Required "applicationFindings" JSON array parameters/fields are:',
        (0, json_colorizer_1.default)(JSON.stringify((0, utilities_1.getJsonExamples)('scan_findings-applicationFindings'), null, 2)),
        'Required "applicationFindings" JSON array for clearing findings for an application is:',
        (0, json_colorizer_1.default)(JSON.stringify((0, utilities_1.getJsonExamples)('scan_findings-clearFindings'), null, 2))];
    static flags = {
        help: core_1.Flags.help({ char: 'h', description: 'Post (upload) static code scans, can also clear application\'s findings' }),
        ...(0, utilities_1.getFlagsForEndpoint)(process.argv), // skipcq: JS-0349
    };
    async run() {
        const { flags } = await this.parse(EmasserPostStaticCodeScans);
        const apiCxn = new apiConnection_1.ApiConnection();
        const addStaticCodeScans = new emass_client_1.StaticCodeScansApi(apiCxn.configuration, apiCxn.basePath, apiCxn.axiosInstances);
        const requestBodyArray = [];
        // Check if a Cloud Resource json file was provided
        if (fs_1.default.existsSync(flags.statiCodeScanFile)) {
            let data;
            try {
                data = JSON.parse(await (0, promises_1.readFile)(flags.statiCodeScanFile, 'utf8'));
            }
            catch (error) {
                if (error.code === 'ENOENT') {
                    console.log('Scan Findings JSON file not found!');
                    process.exit(1);
                }
                else {
                    console.log('Error reading Scan Findings file, possible malformed json. Please use the -h flag for help.');
                    console.log('Error message was:', error.message);
                    process.exit(1);
                }
            }
            // Create request body based on key/pair values provide in the input file
            if (Array.isArray(data)) {
                data.forEach((dataObject) => {
                    let bodyObj = {};
                    // Add required fields to request array object based on business logic
                    try {
                        bodyObj = addApplicationToRequestBody(dataObject);
                        addApplicationFindingsFields(bodyObj, dataObject);
                        requestBodyArray.push(bodyObj);
                    }
                    catch {
                        process.exit(1);
                    }
                });
            }
            else if (typeof data === 'object') {
                const dataObject = data;
                let bodyObj = {};
                // Add required fields to request array object based on business logic
                try {
                    bodyObj = addApplicationToRequestBody(dataObject);
                    addApplicationFindingsFields(bodyObj, dataObject);
                    requestBodyArray.push(bodyObj);
                }
                catch {
                    process.exit(1);
                }
            }
        }
        else {
            console.error('Invalid or Scan Findings JSON file not found on the provided directory:', flags.statiCodeScanFile);
            process.exit(1);
        }
        addStaticCodeScans.addStaticCodeScansBySystemId(flags.systemId, requestBodyArray).then((response) => {
            console.log((0, json_colorizer_1.default)((0, outputFormatter_1.outputFormat)(response, false)));
        }).catch((error) => console.error((0, json_colorizer_1.default)((0, outputError_1.outputError)(error))));
    }
}
exports.default = EmasserPostStaticCodeScans;
