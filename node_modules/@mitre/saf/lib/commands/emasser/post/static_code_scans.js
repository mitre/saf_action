"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
/* eslint-disable valid-jsdoc */
const fs_1 = tslib_1.__importDefault(require("fs"));
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const promises_1 = require("fs/promises");
const json_colorizer_1 = require("json-colorizer");
const core_1 = require("@oclif/core");
const outputError_1 = require("../../../utils/emasser/outputError");
const apiConnection_1 = require("../../../utils/emasser/apiConnection");
const outputFormatter_1 = require("../../../utils/emasser/outputFormatter");
const utilities_1 = require("../../../utils/emasser/utilities");
const emass_client_1 = require("@mitre/emass_client");
/**
 * Generates a JSON string based on the provided action.
 *
 * @param action - The action to determine which JSON examples to merge.
 *                 Valid values are 'add' and 'clear'.
 *                 - 'add': Merges 'scan_findings-application' and 'scan_findings-applicationFindings'.
 *                 - 'clear': Merges 'scan_findings-application' and 'scan_findings-clearFindings'.
 * @returns A JSON string representing the merged examples for the specified action.
 *          Returns an empty string if the action is not recognized.
 */
function getAllJsonExamples(action) {
    if (action === 'add') {
        return JSON.stringify(lodash_1.default.merge({}, (0, utilities_1.getJsonExamples)('scan_findings-application'), (0, utilities_1.getJsonExamples)('scan_findings-applicationFindings')));
    }
    if (action === 'clear') {
        return JSON.stringify(lodash_1.default.merge({}, (0, utilities_1.getJsonExamples)('scan_findings-application'), (0, utilities_1.getJsonExamples)('scan_findings-clearFindings')));
    }
    return '';
}
/**
 * Asserts that a parameter exists and is not undefined.
 *
 * @param {string} object - The name of the parameter or field being checked.
 * @param {string | boolean | number | undefined | null} value - The value of the parameter or field to check.
 * @throws {Error} Throws an error if the value is undefined.
 */
function assertParamExists(object, value) {
    if (value === undefined) {
        (0, utilities_1.printRedMsg)(`Missing required parameter/field: ${object}`);
        throw new Error('Value not defined');
    }
}
/**
 * Adds application details to the request body for a static code scan.
 *
 * @param {StaticCodeRequest} dataObj - The input data object containing application details.
 * @returns {StaticCodeRequest} The request body with the application details added.
 * @throws Will throw an error if required application details are missing.
 */
function addApplicationToRequestBody(dataObj) {
    const bodyObj = { applicationName: '', version: '' };
    const requestBody = {};
    try {
        assertParamExists('application.applicationName', dataObj.application?.applicationName);
        assertParamExists('application.version', dataObj.application?.version);
    }
    catch (error) {
        console.log('Required JSON fields are:');
        console.log((0, json_colorizer_1.colorize)(JSON.stringify((0, utilities_1.getJsonExamples)('scan_findings-application'), null, 2)));
        throw error;
    }
    bodyObj.applicationName = dataObj.application?.applicationName;
    bodyObj.version = dataObj.application?.version;
    requestBody.application = bodyObj;
    return requestBody;
}
/**
 * Adds application findings fields from the data object to the body object.
 *
 * @param bodyObject - The object to which the application findings will be added.
 * @param dataObj - The object containing the application findings data.
 *
 * @throws Will throw an error if required fields are missing in the application findings.
 *
 * The function processes each finding in the `dataObj.applicationFindings` array.
 * If a finding has the `clearFindings` property, it adds it directly to the `findingsArray`.
 * Otherwise, it validates the presence of required fields (`codeCheckName`, `count`,
 * `cweId`, `scanDate`) and optionally includes the `rawSeverity` field if present.
 *
 * The processed findings are then added to the `bodyObject.applicationFindings` array.
 */
function addApplicationFindingsFields(bodyObject, dataObj) {
    const findingsArray = [];
    try {
        let findingsObj = {};
        let i = 0;
        dataObj.applicationFindings?.forEach((appFindings) => {
            // If clearing findings
            if (Object.prototype.hasOwnProperty.call(appFindings, 'clearFindings')) {
                findingsObj.clearFindings = appFindings.clearFindings;
                findingsArray.push(findingsObj);
                // Adding findings
            }
            else {
                assertParamExists(`applicationFindings[${i}].codeCheckName`, appFindings.codeCheckName);
                assertParamExists(`applicationFindings[${i}].count`, appFindings.count);
                assertParamExists(`applicationFindings[${i}].cweId`, appFindings.cweId);
                assertParamExists(`applicationFindings[${i}].scanDate`, appFindings.scanDate);
                i++;
                findingsObj.codeCheckName = appFindings.codeCheckName;
                findingsObj.count = appFindings.count;
                findingsObj.cweId = appFindings.cweId;
                findingsObj.scanDate = appFindings.scanDate;
                // rawSeverity is an optional field
                if (Object.prototype.hasOwnProperty.call(appFindings, 'rawSeverity')) {
                    findingsObj.rawSeverity = appFindings.rawSeverity;
                }
                findingsArray.push(findingsObj);
                findingsObj = {};
            }
        });
    }
    catch (error) {
        console.log('Required JSON fields are:');
        console.log((0, json_colorizer_1.colorize)(JSON.stringify((0, utilities_1.getJsonExamples)('scan_findings-applicationFindings'), null, 2)));
        throw error;
    }
    bodyObject.applicationFindings = findingsArray;
}
const CMD_HELP = 'saf emasser post static_code_scans -h or --help';
class EmasserPostStaticCodeScans extends core_1.Command {
    static usage = '<%= command.id %> [FLAGS]\n\x1B[93m NOTE: see EXAMPLES for command usages\x1B[0m';
    static description = "Upload application scan findings into a system's assets module";
    static examples = [
        '<%= config.bin %> <%= command.id %> [-s,--systemId] [-f,--dataFile]',
        'The input file should be a well formed JSON containing static code scan findings.',
        '\x1B[1m\x1B[46mAdd Findings\x1B[0m',
        'Required "application" JSON object parameter/fields are: ',
        (0, json_colorizer_1.colorize)(JSON.stringify((0, utilities_1.getJsonExamples)('scan_findings-application'), null, 2)),
        'Required "applicationFindings" JSON array parameters/fields are:',
        (0, json_colorizer_1.colorize)(JSON.stringify((0, utilities_1.getJsonExamples)('scan_findings-applicationFindings'), null, 2)),
        '\x1B[1m\x1B[32mAll accepted parameters/fields are:\x1B[0m',
        (0, json_colorizer_1.colorize)(getAllJsonExamples('add')),
        '\x1B[1m\x1B[46mClear Findings\x1B[0m \x1B[33m(can only be used on a single application with a single finding)\x1B[0m',
        'Required "application" JSON object parameter/fields are: ',
        (0, json_colorizer_1.colorize)(JSON.stringify((0, utilities_1.getJsonExamples)('scan_findings-application'), null, 2)),
        'Required "applicationFindings" JSON array object field(s):',
        (0, json_colorizer_1.colorize)(JSON.stringify((0, utilities_1.getJsonExamples)('scan_findings-clearFindings'), null, 2)),
        '\x1B[1m\x1B[32mAll accepted parameters/fields are:\x1B[0m',
        (0, json_colorizer_1.colorize)(getAllJsonExamples('clear')),
    ];
    static flags = {
        help: core_1.Flags.help({ char: 'h', description: 'Show eMASSer CLI help for the POST Static Code Scans command' }),
        ...(0, utilities_1.getFlagsForEndpoint)(process.argv), // skipcq: JS-0349
    };
    async run() {
        const { flags } = await this.parse(EmasserPostStaticCodeScans);
        const apiCxn = new apiConnection_1.ApiConnection();
        const addStaticCodeScans = new emass_client_1.StaticCodeScansApi(apiCxn.configuration, apiCxn.basePath, apiCxn.axiosInstances);
        const requestBodyArray = [];
        // Check if a Cloud Resource json file was provided
        if (fs_1.default.existsSync(flags.dataFile)) {
            let data;
            try {
                data = JSON.parse(await (0, promises_1.readFile)(flags.dataFile, 'utf8'));
            }
            catch (error) {
                console.error('\x1B[91m» Error reading Static Code Scans data file, possible malformed json. Please use the -h flag for help.\x1B[0m');
                console.error('\x1B[93m→ Error message was:', error.message, '\x1B[0m');
                process.exit(1);
            }
            // Create request body based on key/pair values provide in the input file
            if (Array.isArray(data)) {
                data.forEach((dataObject) => {
                    let bodyObj = {};
                    // Add required fields to request array object based on business logic
                    try {
                        bodyObj = addApplicationToRequestBody(dataObject);
                        addApplicationFindingsFields(bodyObj, dataObject);
                        requestBodyArray.push(bodyObj);
                    }
                    catch {
                        process.exit(1);
                    }
                });
            }
            else if (typeof data === 'object') {
                const dataObject = data;
                let bodyObj = {};
                // Add required fields to request array object based on business logic
                try {
                    bodyObj = addApplicationToRequestBody(dataObject);
                    addApplicationFindingsFields(bodyObj, dataObject);
                    requestBodyArray.push(bodyObj);
                }
                catch {
                    process.exit(1);
                }
            }
        }
        else {
            console.error('\x1B[91m» Static Code Scans data file (.json) not found or invalid:', flags.dataFile, '\x1B[0m');
            process.exit(1);
        }
        // Call the API endpoint
        addStaticCodeScans.addStaticCodeScansBySystemId(flags.systemId, requestBodyArray).then((response) => {
            console.log((0, json_colorizer_1.colorize)((0, outputFormatter_1.outputFormat)(response, false)));
        }).catch((error) => console.error((0, json_colorizer_1.colorize)((0, outputError_1.outputError)(error))));
    }
    async catch(err) {
        // If error message is for missing flags, display
        // what fields are required, otherwise show the error
        if (err.message.includes('See more help with --help')) {
            this.warn(err.message.replace('with --help', `with: \x1B[93m${CMD_HELP}\x1B[0m`));
        }
        else {
            this.warn(err);
        }
    }
}
exports.default = EmasserPostStaticCodeScans;
//# sourceMappingURL=static_code_scans.js.map