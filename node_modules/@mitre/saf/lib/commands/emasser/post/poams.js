"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
/* eslint-disable valid-jsdoc */
const fs_1 = tslib_1.__importDefault(require("fs"));
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const promises_1 = require("fs/promises");
const json_colorizer_1 = require("json-colorizer");
const core_1 = require("@oclif/core");
const outputError_1 = require("../../../utils/emasser/outputError");
const apiConnection_1 = require("../../../utils/emasser/apiConnection");
const outputFormatter_1 = require("../../../utils/emasser/outputFormatter");
const utilities_1 = require("../../../utils/emasser/utilities");
const emass_client_1 = require("@mitre/emass_client");
/**
 * Retrieves and combines JSON examples from various sources.
 *
 * This function aggregates JSON examples by merging the results of
 * multiple calls to `getJsonExamples` with different parameters.
 * The resulting object includes required, conditional, and optional
 * examples for POAMs (Plan of Action and Milestones).
 *
 * @returns {string} A string representation of the combined JSON examples.
 */
function getAllJsonExamples() {
    let exampleBodyObj = {};
    exampleBodyObj = {
        ...(0, utilities_1.getJsonExamples)('poams-post-required'),
        ...(0, utilities_1.getJsonExamples)('poams-post-put-required-va'),
        ...(0, utilities_1.getJsonExamples)('poams-post-conditional'),
        ...(0, utilities_1.getJsonExamples)('poams-post-put-optional'),
    };
    return exampleBodyObj;
}
/**
 * Asserts that a required parameter exists and is not undefined.
 *
 * @param object - The name of the parameter or field being checked.
 * @param value - The value of the parameter or field to check.
 * @throws Will throw an error if the value is undefined.
 */
function assertParamExists(object, value) {
    if (value === undefined) {
        (0, utilities_1.printRedMsg)(`Missing required parameter/field: ${object}`);
        throw new Error('Value not defined');
    }
}
/**
 * Adds required fields to the request body for a POAM (Plan of Action and Milestones) object.
 *
 * This function ensures that the required fields are present in the input `dataObj` and then
 * constructs a new `Poams` object with these fields. If any required field is missingFields, an error
 * is thrown, and a sample JSON structure of the required fields is logged.
 *
 * @param {Poams} dataObj - The input POAM object containing the data to be validated and added to the request body.
 * @returns {Poams} - A new POAM object containing the required fields.
 * @throws Will throw an error if any of the required fields are missingFields in the input `dataObj`.
 */
function addRequiredFieldsToRequestBody(dataObj) {
    const bodyObj = {};
    try {
        assertParamExists('status', dataObj.status);
        assertParamExists('vulnerabilityDescription', dataObj.vulnerabilityDescription);
        assertParamExists('sourceIdentifyingVulnerability', dataObj.sourceIdentifyingVulnerability);
        assertParamExists('pocOrganization', dataObj.pocOrganization);
        assertParamExists('resources', dataObj.resources);
    }
    catch (error) {
        console.log('Required JSON fields are:');
        console.log((0, json_colorizer_1.colorize)(JSON.stringify((0, utilities_1.getJsonExamples)('poams-post-required'), null, 2)));
        throw error;
    }
    // The required parameter "systemId" is validated by oclif
    bodyObj.status = dataObj.status;
    bodyObj.vulnerabilityDescription = dataObj.vulnerabilityDescription;
    bodyObj.sourceIdentifyingVulnerability = dataObj.sourceIdentifyingVulnerability;
    bodyObj.pocOrganization = dataObj.pocOrganization;
    bodyObj.resources = dataObj.resources;
    return bodyObj;
}
/**
 * Adds conditional fields from the `dataObj` to the `bodyObject` if they exist.
 *
 * @remarks
 * This function checks if the properties `pocFirstName`, `pocLastName`, `pocEmail`,
 * `pocPhoneNumber`, `severity`
 * exist in the `dataObj`. If they do, it assigns their values to the corresponding properties
 * in the `bodyObject`.
 *
 * The properties `scheduledCompletionDate`, `completionDate`, and `comments` are checked
 * in the business logic function.
 */
function addConditionalFields(bodyObject, dataObj) {
    if (Object.prototype.hasOwnProperty.call(dataObj, 'pocFirstName')) {
        bodyObject.pocFirstName = dataObj.pocFirstName;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'pocLastName')) {
        bodyObject.pocLastName = dataObj.pocLastName;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'pocEmail')) {
        bodyObject.pocEmail = dataObj.pocEmail;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'pocPhoneNumber')) {
        bodyObject.pocPhoneNumber = dataObj.pocPhoneNumber;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'severity')) {
        bodyObject.severity = dataObj.severity;
    }
}
/**
 * Adds optional fields from the data object to the body object if they exist.
 *
 * @param bodyObject - The target object to which optional fields will be added.
 * @param dataObj - The source object containing optional fields.
 */
// skipcq: JS-R1005 - Ignore Function cyclomatic complexity high threshold
function addOptionalFields(bodyObject, dataObj) {
    if (Object.prototype.hasOwnProperty.call(dataObj, 'externalUid')) {
        bodyObject.externalUid = dataObj.externalUid;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'controlAcronym')) {
        bodyObject.controlAcronym = dataObj.controlAcronym;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'assessmentProcedure')) {
        bodyObject.assessmentProcedure = dataObj.assessmentProcedure;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'securityChecks')) {
        bodyObject.securityChecks = dataObj.securityChecks;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'rawSeverity')) {
        bodyObject.rawSeverity = dataObj.rawSeverity;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'relevanceOfThreat')) {
        bodyObject.relevanceOfThreat = dataObj.relevanceOfThreat;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'likelihood')) {
        bodyObject.likelihood = dataObj.likelihood;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'impact')) {
        bodyObject.impact = dataObj.impact;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'impactDescription')) {
        bodyObject.impactDescription = dataObj.impactDescription;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'residualRiskLevel')) {
        bodyObject.residualRiskLevel = dataObj.residualRiskLevel;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'recommendations')) {
        bodyObject.recommendations = dataObj.recommendations;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'mitigations')) {
        bodyObject.mitigations = dataObj.mitigations;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'resultingResidualRiskLevelAfterProposedMitigations')) {
        bodyObject.resultingResidualRiskLevelAfterProposedMitigations = dataObj.resultingResidualRiskLevelAfterProposedMitigations;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'predisposingConditions')) {
        bodyObject.predisposingConditions = dataObj.predisposingConditions;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'threatDescription')) {
        bodyObject.threatDescription = dataObj.threatDescription;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'devicesAffected')) {
        bodyObject.devicesAffected = dataObj.devicesAffected;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'identifiedInCFOAuditOrOtherReview')) {
        bodyObject.identifiedInCFOAuditOrOtherReview = dataObj.identifiedInCFOAuditOrOtherReview;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'personnelResourcesFundedBaseHours')) {
        bodyObject.personnelResourcesFundedBaseHours = dataObj.personnelResourcesFundedBaseHours;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'personnelResourcesCostCode')) {
        bodyObject.personnelResourcesCostCode = dataObj.personnelResourcesCostCode;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'personnelResourcesUnfundedBaseHours')) {
        bodyObject.personnelResourcesUnfundedBaseHours = dataObj.personnelResourcesUnfundedBaseHours;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'personnelResourcesNonfundingObstacle')) {
        bodyObject.personnelResourcesNonfundingObstacle = dataObj.personnelResourcesNonfundingObstacle;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'personnelResourcesNonfundingObstacleOtherReason')) {
        bodyObject.personnelResourcesNonfundingObstacleOtherReason = dataObj.personnelResourcesNonfundingObstacleOtherReason;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'nonPersonnelResourcesFundedAmount')) {
        bodyObject.nonPersonnelResourcesFundedAmount = dataObj.nonPersonnelResourcesFundedAmount;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'nonPersonnelResourcesCostCode')) {
        bodyObject.nonPersonnelResourcesCostCode = dataObj.nonPersonnelResourcesCostCode;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'nonPersonnelResourcesUnfundedAmount')) {
        bodyObject.nonPersonnelResourcesUnfundedAmount = dataObj.nonPersonnelResourcesUnfundedAmount;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'nonPersonnelResourcesNonfundingObstacle')) {
        bodyObject.nonPersonnelResourcesNonfundingObstacle = dataObj.nonPersonnelResourcesNonfundingObstacle;
    }
    if (Object.prototype.hasOwnProperty.call(dataObj, 'nonPersonnelResourcesNonfundingObstacleOtherReason')) {
        bodyObject.nonPersonnelResourcesNonfundingObstacleOtherReason = dataObj.nonPersonnelResourcesNonfundingObstacleOtherReason;
    }
}
/**
 * Processes the business logic for POA&M (Plan of Action and Milestones) based on the status field value.
 *
 * @param bodyObject - The object that will be populated with the required fields based on the status.
 * @param dataObj - The input object containing the status and other fields to be validated and processed.
 *
 * The function performs the following checks and operations based on the status:
 *
 * - "Risk Accepted":
 *   - Requires `comments` field.
 *   - Ensures `scheduledCompletionDate` and `milestones` fields are not present.
 *
 * - "Ongoing":
 *   - Requires `scheduledCompletionDate` and `milestones` fields.
 *   - Ensures at least one milestone object has `description` and `scheduledCompletionDate`.
 *
 * - "Completed":
 *   - Requires `scheduledCompletionDate`, `comments`, `completionDate`, and `milestones` fields.
 *
 * - "Not Applicable":
 *   - POAMs cannot be created with this status.
 *
 *
 * If any required fields are missingFields or invalid, the function prints an error message and exits the process.
 *
 * Additionally, if any POC (Point of Contact) information is provided, all POC fields (`pocFirstName`, `pocLastName`, `pocEmail`, `pocPhoneNumber`) are required.
 *
 * @remarks
 * The function uses `printRedMsg` to display error messages and `printHelpMsg` to display help messages.
 * It exits the process with a status code of 1 if any validation fails.
 */
// skipcq: JS-R1005 - Ignore Function cyclomatic complexity high threshold
function processBusinessLogic(bodyObject, dataObj) {
    const HELP_MSG = 'Invoke saf emasser post poams [-h, --help] for additional help';
    switch (dataObj.status) {
        case 'Risk Accepted': {
            // Risk Accepted POA&M Item require a comments field
            if (dataObj.comments === undefined) {
                (0, utilities_1.printRedMsg)('When status is "Risk Accepted" the following parameter/field is required:');
                (0, utilities_1.printRedMsg)('    comments');
                (0, utilities_1.printHelpMsg)(HELP_MSG);
                process.exit(1);
                // Risk Accepted POA&M Item cannot be saved with a Scheduled Completion Date or Milestones.
            }
            else if (Object.prototype.hasOwnProperty.call(dataObj, 'scheduledCompletionDate') || Object.prototype.hasOwnProperty.call(dataObj, 'milestones')) {
                (0, utilities_1.printRedMsg)('When status is "Risk Accepted" POA&Ms CAN NOT be saved with the following parameters/fields:');
                (0, utilities_1.printRedMsg)('    scheduledCompletionDate, or milestones');
                (0, utilities_1.printHelpMsg)(HELP_MSG);
                process.exit(1);
            }
            else {
                bodyObject.comments = dataObj.comments;
            }
            break;
        }
        case 'Ongoing': {
            // POA&M Items that have a status of “Ongoing” cannot be saved without Milestones or Scheduled Completion.
            if (!(Object.prototype.hasOwnProperty.call(dataObj, 'scheduledCompletionDate') && Object.prototype.hasOwnProperty.call(dataObj, 'milestones'))) {
                (0, utilities_1.printRedMsg)('When status is "Ongoing" the following parameters/fields are required:');
                (0, utilities_1.printRedMsg)('    scheduledCompletionDate, milestones');
                (0, utilities_1.printHelpMsg)(HELP_MSG);
                process.exit(1);
                // If we have a milestone, ensure the required fields are provided.
            }
            else if (!(lodash_1.default.some(dataObj.milestones, 'description')) || !(lodash_1.default.some(dataObj.milestones, 'scheduledCompletionDate'))) {
                (0, utilities_1.printRedMsg)('Milestone object requires the following fields:');
                (0, utilities_1.printRedMsg)('    "milestones": [{"description": "The milestone description", "scheduledCompletionDate": Unix date format }], ');
                process.exit(1);
            }
            else {
                // Add the POA&M completion date
                bodyObject.scheduledCompletionDate = dataObj.scheduledCompletionDate;
                // Add the milestone object
                const milestoneArray = [];
                dataObj.milestones?.forEach((milestone) => {
                    const milestoneObj = {};
                    milestoneObj.description = milestone.description;
                    milestoneObj.scheduledCompletionDate = milestone.scheduledCompletionDate;
                    milestoneArray.push(milestoneObj);
                });
                bodyObject.milestones = [...milestoneArray];
            }
            break;
        }
        case 'Completed': {
            // Completed POA&M Item require the completionDate, comments, and Milestones.
            // Given that this is a POST and the POA&M is completed, the scheduledCompletionDate is acceptable
            if (!(Object.prototype.hasOwnProperty.call(dataObj, 'scheduledCompletionDate')) || !(Object.prototype.hasOwnProperty.call(dataObj, 'comments')) ||
                !(Object.prototype.hasOwnProperty.call(dataObj, 'completionDate')) || !(Object.prototype.hasOwnProperty.call(dataObj, 'milestones'))) {
                (0, utilities_1.printRedMsg)('When status is "Completed" the following parameters/fields are required:');
                (0, utilities_1.printRedMsg)('    scheduledCompletionDate, comments, completionDate, or milestone');
                (0, utilities_1.printHelpMsg)(HELP_MSG);
                process.exit(1);
            }
            else {
                // Add the POA&M schedule and completion date, comments
                bodyObject.comments = dataObj.comments;
                bodyObject.completionDate = dataObj.completionDate;
                bodyObject.scheduledCompletionDate = dataObj.scheduledCompletionDate;
                // Add the milestone object
                const milestoneArray = [];
                dataObj.milestones?.forEach((milestone) => {
                    const milestoneObj = {};
                    milestoneObj.description = milestone.description;
                    milestoneObj.scheduledCompletionDate = milestone.scheduledCompletionDate;
                    milestoneArray.push(milestoneObj);
                });
                bodyObject.milestones = [...milestoneArray];
            }
            break;
        }
        case 'Not Applicable': {
            (0, utilities_1.printRedMsg)('POA&M Item cannot be created manually if a security Control or Assessment Procedure is "Not Applicable".');
            process.exit(1);
            break;
        }
        default: {
            (0, utilities_1.printRedMsg)('The "status" field must one of the following:');
            (0, utilities_1.printRedMsg)('    Risk Accepted, Ongoing, or Completed');
            (0, utilities_1.printRedMsg)(`Status provided was: ${dataObj.status}`);
            process.exit(1);
            break;
        }
    }
    // POC checks: If any poc information is provided all POC fields are required
    let missingFields = '';
    if ((lodash_1.default.get(dataObj, 'pocFirstName') === undefined))
        missingFields = 'pocFirstName';
    if ((lodash_1.default.get(dataObj, 'pocLastName') === undefined))
        missingFields += (missingFields === '') ? 'pocLastName' : ', pocLastName';
    if ((lodash_1.default.get(dataObj, 'pocEmail') === undefined))
        missingFields += (missingFields === '') ? 'pocEmail' : ', pocEmail';
    if ((lodash_1.default.get(dataObj, 'pocPhoneNumber') === undefined))
        missingFields += (missingFields === '') ? 'pocPhoneNumber' : ', pocPhoneNumber';
    const totalPocMissingFields = missingFields.split(',').length;
    if ((totalPocMissingFields >= 1 && totalPocMissingFields < 4) && missingFields !== '') {
        (0, utilities_1.printRedMsg)('If any POC fields are provided (pocFirstName, pocLastName, pocEmail, pocPhoneNumber) than all POC fields are required:');
        (0, utilities_1.printRedMsg)(`    Missing field(s): ${missingFields}`);
        (0, utilities_1.printHelpMsg)(HELP_MSG);
        process.exit(1);
    }
}
function generateBodyObj(dataObject) {
    let bodyObj = {};
    try {
        bodyObj = addRequiredFieldsToRequestBody(dataObject);
        processBusinessLogic(bodyObj, dataObject);
        addConditionalFields(bodyObj, dataObject);
        addOptionalFields(bodyObj, dataObject);
    }
    catch {
        process.exit(1);
    }
    return bodyObj;
}
const CMD_HELP = 'saf emasser post poams -h or --help';
class EmasserPostPoams extends core_1.Command {
    static usage = '<%= command.id %> [FLAGS]\n\x1B[93m NOTE: see EXAMPLES for command usages\x1B[0m';
    static description = 'Add a Plan of Action and Milestones (POA&M) into a systems.\n' +
        'This CLI expects an input file containing the necessary fields to add a POA&M. The content\n' +
        'of the file must be in compliance with the eMASS API defined business rules for adding POA&Ms.';
    static examples = [
        '<%= config.bin %> <%= command.id %> [-s,--systemId] [-f,--dataFile]',
        'The input file should be a well formed JSON containing the POA&M information based on defined business rules.',
        '\x1B[1mRequired JSON parameter/fields are:\x1B[0m',
        (0, json_colorizer_1.colorize)(JSON.stringify((0, utilities_1.getJsonExamples)('poams-post-required'), null, 2)),
        '\x1B[1mRequired for VA but Conditional for Army and USCG JSON parameters/fields are:\x1B[0m',
        (0, json_colorizer_1.colorize)(JSON.stringify((0, utilities_1.getJsonExamples)('poams-post-put-required-va'), null, 2)),
        '\x1B[1mConditional JSON parameters/fields are:\x1B[0m',
        (0, json_colorizer_1.colorize)(JSON.stringify((0, utilities_1.getJsonExamples)('poams-post-conditional'), null, 2)),
        '\x1B[1mOptional JSON parameters/fields are:\x1B[0m',
        (0, json_colorizer_1.colorize)(JSON.stringify((0, utilities_1.getJsonExamples)('poams-post-put-optional'), null, 2)),
        '\x1B[1m\x1B[32mAll accepted parameters/fields are:\x1B[0m',
        (0, json_colorizer_1.colorize)(getAllJsonExamples()),
    ];
    static flags = {
        help: core_1.Flags.help({ char: 'h', description: 'Show eMASSer CLI help for the POST POA&Ms command' }),
        ...(0, utilities_1.getFlagsForEndpoint)(process.argv), // skipcq: JS-0349
    };
    async run() {
        const { flags } = await this.parse(EmasserPostPoams);
        const apiCxn = new apiConnection_1.ApiConnection();
        const addPoam = new emass_client_1.POAMApi(apiCxn.configuration, apiCxn.basePath, apiCxn.axiosInstances);
        const requestBodyArray = [];
        // Check if a POA&Ms json file was provided
        if (fs_1.default.existsSync(flags.dataFile)) {
            let data;
            try {
                data = JSON.parse(await (0, promises_1.readFile)(flags.dataFile, 'utf8'));
            }
            catch (error) {
                console.error('\x1B[91m» Error reading POA&Ms data file, possible malformed json. Please use the -h flag for help.\x1B[0m');
                console.error('\x1B[93m→ Error message was:', error.message, '\x1B[0m');
                process.exit(1);
            }
            // POA&Ms json file provided, check if we have multiple POA&Ms to process
            if (Array.isArray(data)) {
                data.forEach((dataObject) => {
                    // Generate the post request object based on business logic
                    requestBodyArray.push(generateBodyObj(dataObject));
                });
            }
            else if (typeof data === 'object') {
                const dataObject = data;
                // Generate the post request object based on business logic
                requestBodyArray.push(generateBodyObj(dataObject));
            }
        }
        else {
            console.error('\x1B[91m» POA&M(s) data file (.json) not found or invalid:', flags.dataFile, '\x1B[0m');
            process.exit(1);
        }
        // Call the endpoint
        addPoam.addPoamBySystemId(flags.systemId, requestBodyArray).then((response) => {
            console.log((0, json_colorizer_1.colorize)((0, outputFormatter_1.outputFormat)(response, false)));
        }).catch((error) => console.error((0, json_colorizer_1.colorize)((0, outputError_1.outputError)(error))));
    }
    async catch(err) {
        // If error message is for missing flags, display
        // what fields are required, otherwise show the error
        if (err.message.includes('See more help with --help')) {
            this.warn(err.message.replace('with --help', `with: \x1B[93m${CMD_HELP}\x1B[0m`));
        }
        else {
            this.warn(err);
        }
    }
}
exports.default = EmasserPostPoams;
//# sourceMappingURL=poams.js.map