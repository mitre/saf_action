"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const json_colorizer_1 = tslib_1.__importDefault(require("json-colorizer"));
const zip_lib_1 = require("zip-lib");
const core_1 = require("@oclif/core");
const emass_client_1 = require("@mitre/emass_client");
const apiConnection_1 = require("../../../utils/emasser/apiConnection");
const outputFormatter_1 = require("../../../utils/emasser/outputFormatter");
const utilities_1 = require("../../../utils/emasser/utilities");
const outputError_1 = require("../../../utils/emasser/outputError");
const fs_1 = tslib_1.__importDefault(require("fs"));
const os_1 = tslib_1.__importDefault(require("os"));
const path_1 = tslib_1.__importDefault(require("path"));
class EmasserPostArtifacts extends core_1.Command {
    static usage = '<%= command.id %> [options]';
    static description = 'Uploads [FILES] to the given [SYSTEM_ID] as artifacts';
    static examples = ['<%= config.bin %> <%= command.id %> [-s,--systemId] [-i,--input] [options]'];
    static flags = {
        help: core_1.Flags.help({ char: 'h', description: 'Post (add) artifact file(s) to a system' }),
        ...(0, utilities_1.getFlagsForEndpoint)(process.argv), // skipcq: JS-0349
    };
    async run() {
        const { flags } = await this.parse(EmasserPostArtifacts);
        const apiCxn = new apiConnection_1.ApiConnection();
        const artifactApi = new emass_client_1.ArtifactsApi(apiCxn.configuration, apiCxn.basePath, apiCxn.axiosInstances);
        // Create the archive object, add all files
        const archiver = new zip_lib_1.Zip();
        flags.input.forEach((inputFile) => {
            if (fs_1.default.existsSync(inputFile)) {
                archiver.addFile(inputFile);
            }
        });
        // Generate zip file
        const zipper = path_1.default.join(os_1.default.tmpdir(), 'zipper.zip');
        await archiver.archive(zipper);
        const fileStream = fs_1.default.createReadStream(zipper);
        artifactApi.addArtifactsBySystemId(flags.systemId, fileStream, String(flags.isTemplate), flags.type, flags.category).then((response) => {
            console.log((0, json_colorizer_1.default)((0, outputFormatter_1.outputFormat)(response, false)));
        }).catch((error) => console.error((0, json_colorizer_1.default)((0, outputError_1.outputError)(error))));
    }
}
exports.default = EmasserPostArtifacts;
