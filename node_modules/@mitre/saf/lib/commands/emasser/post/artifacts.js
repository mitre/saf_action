"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const os_1 = tslib_1.__importDefault(require("os"));
const path_1 = tslib_1.__importDefault(require("path"));
const adm_zip_1 = tslib_1.__importDefault(require("adm-zip"));
const fs_1 = tslib_1.__importDefault(require("fs"));
const json_colorizer_1 = require("json-colorizer");
const core_1 = require("@oclif/core");
const emass_client_1 = require("@mitre/emass_client");
const apiConnection_1 = require("../../../utils/emasser/apiConnection");
const outputFormatter_1 = require("../../../utils/emasser/outputFormatter");
const utilities_1 = require("../../../utils/emasser/utilities");
const CMD_HELP = 'saf emasser post artifacts -h or --help';
class EmasserPostArtifacts extends core_1.Command {
    static usage = '<%= command.id %> [FLAGS]\n\x1B[93m NOTE: see EXAMPLES for command options\x1B[0m';
    static description = 'Uploads a single or multiple artifacts to a system.\n'
        + 'The single file can be an individual artifact or a .zip\n'
        + 'file containing multiple artifacts. If multiple files are\n'
        + 'provided they are archived into a zip file and sent as bulk.';
    static examples = [
        {
            description: 'Add a single artifact file',
            command: '<%= config.bin %> <%= command.id %> [-s,--systemId] [-f,--fileName] <path-to-file> [FLAGS]',
        },
        {
            description: 'Add multiple artifact files',
            command: '<%= config.bin %> <%= command.id %> [-s,--systemId] [-f,--fileName] <path-to-file1> <path-to-file2> ... [FLAGS]',
        },
        {
            description: 'Add bulk artifact file (.zip)',
            command: '<%= config.bin %> <%= command.id %> [-s,--systemId] [-f,--fileName] <path-to-zip-file> [FLAGS]',
        },
    ];
    static flags = {
        help: core_1.Flags.help({ char: 'h', description: 'Show eMASSer CLI help for the POST Artifacts command' }),
        ...(0, utilities_1.getFlagsForEndpoint)(process.argv), // skipcq: JS-0349
    };
    async run() {
        const { flags } = await this.parse(EmasserPostArtifacts);
        const apiCxn = new apiConnection_1.ApiConnection();
        const artifactApi = new emass_client_1.ArtifactsApi(apiCxn.configuration, apiCxn.basePath, apiCxn.axiosInstances);
        // Check if we have a single file, could be a zip file
        if (flags.fileName.length === 1 || flags.fileName[0].endsWith('.zip')) {
            if (fs_1.default.existsSync(flags.fileName[0])) {
                const isBulk = Boolean(flags.fileName[0].endsWith('.zip'));
                const fileStream = fs_1.default.createReadStream(flags.fileName[0]);
                artifactApi.addArtifactsBySystemId(flags.systemId, fileStream, isBulk, flags.isTemplate, flags.type, flags.category).then((response) => {
                    console.log((0, json_colorizer_1.colorize)((0, outputFormatter_1.outputFormat)(response, false)));
                }).catch((error) => (0, utilities_1.displayError)(error, 'Artifacts'));
            }
            else {
                console.error('\x1B[91m» Artifact file not found:', flags.fileName[0], '\x1B[0m');
            }
            // Multiple files, create a zip file
        }
        else {
            // Create a new AdmZip instance
            const zip = new adm_zip_1.default();
            // Add all files to the zip archive
            flags.fileName.forEach((inputFile) => {
                if (fs_1.default.existsSync(inputFile)) {
                    zip.addLocalFile(inputFile);
                }
                else {
                    console.error('\x1B[91m» Artifact file not found:', inputFile, '\x1B[0m');
                    process.exit(1);
                }
            });
            // Generate a temporary zip file in the system's temp directory
            const zipper = path_1.default.join(os_1.default.tmpdir(), 'zipper.zip');
            zip.writeZip(zipper); // Write the zip file to disk
            // Read the generated zip file as a stream
            const fileStream = fs_1.default.createReadStream(zipper);
            artifactApi.addArtifactsBySystemId(flags.systemId, fileStream, true, flags.isTemplate, flags.type, flags.category).then((response) => {
                console.log((0, json_colorizer_1.colorize)((0, outputFormatter_1.outputFormat)(response, false)));
            }).catch((error) => (0, utilities_1.displayError)(error, 'Artifacts'));
        }
    }
    // skipcq: JS-0116 - Base class (CommandError) expects expected catch to return a Promise
    async catch(err) {
        // If error message is for missing flags, display
        // what fields are required, otherwise show the error
        if (err.message.includes('See more help with --help')) {
            this.warn(err.message.replace('with --help', `with: \x1B[93m${CMD_HELP}\x1B[0m`));
        }
        else {
            this.warn(err);
        }
    }
}
exports.default = EmasserPostArtifacts;
//# sourceMappingURL=artifacts.js.map