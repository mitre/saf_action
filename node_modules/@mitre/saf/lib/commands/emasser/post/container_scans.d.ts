import { Command } from '@oclif/core';
/**
 * Enum representing the status of a container scan.
 *
 * @readonly
 * @enum {string}
 * @property {string} Pass - The scan passed.
 * @property {string} Fail - The scan failed.
 * @property {string} Other - The scan has a status other than pass or fail.
 * @property {string} NotReviewed - The scan has not been reviewed.
 * @property {string} NotChecked - The scan has not been checked.
 * @property {string} NotApplicable - The scan is not applicable.
 */
export declare const StatusEnum: {
    readonly Pass: 'Pass';
    readonly Fail: 'Fail';
    readonly Other: 'Other';
    readonly NotReviewed: 'Not Reviewed';
    readonly NotChecked: 'Not Checked';
    readonly NotApplicable: 'Not Applicable';
};
/**
 * Represents the possible status values for the StatusEnum type.
 * This type is derived from the keys of the StatusEnum object.
 */
export declare type StatusEnum = typeof StatusEnum[keyof typeof StatusEnum];
export default class EmasserContainerScans extends Command {
    static readonly usage = "<%= command.id %> [FLAGS]\n\u001B[93m NOTE: see EXAMPLES for command usages\u001B[0m";
    static readonly description = "Upload containers and their scan results in the assets module for a system";
    static readonly examples: string[];
    static readonly flags: {
        systemId?: import("@oclif/core/interfaces").OptionFlag<number>;
        poamId?: import("@oclif/core/interfaces").OptionFlag<number>;
        poamsId?: import("@oclif/core/interfaces").OptionFlag<number[]>;
        milestoneId?: import("@oclif/core/interfaces").OptionFlag<number>;
        milestonesId?: import("@oclif/core/interfaces").OptionFlag<number[]>;
        workflowInstanceId?: import("@oclif/core/interfaces").OptionFlag<number>;
        pageIndex?: import("@oclif/core/interfaces").OptionFlag<number | undefined>;
        includeComments?: import("@oclif/core/interfaces").BooleanFlag<boolean | undefined>;
        includeDecommissionSystems?: import("@oclif/core/interfaces").BooleanFlag<boolean | undefined>;
        excludeInherited?: import("@oclif/core/interfaces").BooleanFlag<boolean | undefined>;
        includeInactive?: import("@oclif/core/interfaces").BooleanFlag<boolean | undefined>;
        isTemplate?: import("@oclif/core/interfaces").BooleanFlag<boolean>;
        includeDitprMetrics?: import("@oclif/core/interfaces").BooleanFlag<boolean | undefined>;
        includeDecommissioned?: import("@oclif/core/interfaces").BooleanFlag<boolean | undefined>;
        reportsForScorecard?: import("@oclif/core/interfaces").BooleanFlag<boolean | undefined>;
        latestOnly?: import("@oclif/core/interfaces").BooleanFlag<boolean | undefined>;
        systemOnly?: import("@oclif/core/interfaces").BooleanFlag<boolean | undefined>;
        compress?: import("@oclif/core/interfaces").BooleanFlag<boolean | undefined>;
        printToStdOut?: import("@oclif/core/interfaces").BooleanFlag<boolean | undefined>;
        policy?: import("@oclif/core/interfaces").OptionFlag<string | undefined>;
        registrationType?: import("@oclif/core/interfaces").OptionFlag<string | undefined>;
        ditprId?: import("@oclif/core/interfaces").OptionFlag<string | undefined>;
        coamsId?: import("@oclif/core/interfaces").OptionFlag<string | undefined>;
        roleCategory?: import("@oclif/core/interfaces").OptionFlag<string>;
        role?: import("@oclif/core/interfaces").OptionFlag<string>;
        acronyms?: import("@oclif/core/interfaces").OptionFlag<string | undefined>;
        controlAcronyms?: import("@oclif/core/interfaces").OptionFlag<string | undefined>;
        assessmentProcedures?: import("@oclif/core/interfaces").OptionFlag<string | undefined>;
        ccis?: import("@oclif/core/interfaces").OptionFlag<string | undefined>;
        sinceDate?: import("@oclif/core/interfaces").OptionFlag<string | any>;
        scheduledCompletionDateStart?: import("@oclif/core/interfaces").OptionFlag<string | undefined>;
        scheduledCompletionDateEnd?: import("@oclif/core/interfaces").OptionFlag<string | undefined>;
        filename?: import("@oclif/core/interfaces").OptionFlag<string | any>;
        status?: import("@oclif/core/interfaces").OptionFlag<string | undefined>;
        assessmentProcedure?: import("@oclif/core/interfaces").OptionFlag<string>;
        testedBy?: import("@oclif/core/interfaces").OptionFlag<string>;
        testDate?: import("@oclif/core/interfaces").OptionFlag<string>;
        description?: import("@oclif/core/interfaces").OptionFlag<string | any>;
        artifactDescription?: import("@oclif/core/interfaces").OptionFlag<string | any>;
        complianceStatus?: import("@oclif/core/interfaces").OptionFlag<string | any>;
        scheduledCompletionDate?: import("@oclif/core/interfaces").OptionFlag<string | any>;
        orgId?: import("@oclif/core/interfaces").OptionFlag<number>;
        pageSize?: import("@oclif/core/interfaces").OptionFlag<number | undefined>;
        fileName?: import("@oclif/core/interfaces").OptionFlag<string[]>;
        resourceId?: import("@oclif/core/interfaces").OptionFlag<string[]>;
        containerId?: import("@oclif/core/interfaces").OptionFlag<string[]>;
        assetsHardwareId?: import("@oclif/core/interfaces").OptionFlag<string[]>;
        assetsSoftwareId?: import("@oclif/core/interfaces").OptionFlag<string[]>;
        dataFile?: import("@oclif/core/interfaces").OptionFlag<string>;
        type?: import("@oclif/core/interfaces").OptionFlag<string | any>;
        category?: import("@oclif/core/interfaces").OptionFlag<string | any>;
        refPageNumber?: import("@oclif/core/interfaces").OptionFlag<string | undefined>;
        controls?: import("@oclif/core/interfaces").OptionFlag<string | undefined>;
        signedDate?: import("@oclif/core/interfaces").OptionFlag<string | any>;
        expirationDate?: import("@oclif/core/interfaces").OptionFlag<string | any>;
        lastReviewDate?: import("@oclif/core/interfaces").OptionFlag<string | any>;
        controlAcronym?: import("@oclif/core/interfaces").OptionFlag<string | any>;
        comments?: import("@oclif/core/interfaces").OptionFlag<string | any>;
        workflow?: import("@oclif/core/interfaces").OptionFlag<string | any>;
        name?: import("@oclif/core/interfaces").OptionFlag<string | any>;
        help: import("@oclif/core/interfaces").BooleanFlag<void>;
    };
    run(): Promise<void>;
    protected catch(err: Error & {
        exitCode?: number;
    }): Promise<void>;
}
