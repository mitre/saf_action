"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const json_colorizer_1 = require("json-colorizer");
const core_1 = require("@oclif/core");
const apiConnection_1 = require("../../../utils/emasser/apiConnection");
const outputFormatter_1 = require("../../../utils/emasser/outputFormatter");
const utilities_1 = require("../../../utils/emasser/utilities");
const emass_client_1 = require("@mitre/emass_client");
const CMD_HELP = 'saf emasser post pac -h or --help';
class EmasserPostPac extends core_1.Command {
    static usage = '<%= command.id %> [FLAGS]';
    static description = 'Add new Package Approval Chain (PAC) workflow(s) for a system';
    static examples = ['<%= config.bin %> <%= command.id %> [-s,--systemId] [-w,--workflow] [-n,--name] [-c,--comments]'];
    static flags = {
        help: core_1.Flags.help({ char: 'h', description: 'Show eMASSer CLI help for the POST Package Approval Chain (PAC) command' }),
        ...(0, utilities_1.getFlagsForEndpoint)(process.argv), // skipcq: JS-0349
    };
    async run() {
        const { flags } = await this.parse(EmasserPostPac);
        const apiCxn = new apiConnection_1.ApiConnection();
        const addPac = new emass_client_1.PACApi(apiCxn.configuration, apiCxn.basePath, apiCxn.axiosInstances);
        const requestBodyArray = [];
        requestBodyArray.push({
            workflow: flags.workflow,
            name: flags.name,
            comments: flags.comments,
        });
        addPac.addSystemPac(flags.systemId, requestBodyArray).then((response) => {
            console.log((0, json_colorizer_1.colorize)((0, outputFormatter_1.outputFormat)(response, false)));
        }).catch((error) => (0, utilities_1.displayError)(error, 'PAC'));
    }
    // skipcq: JS-0116 - Base class (CommandError) expects expected catch to return a Promise
    async catch(err) {
        // If error message is for missing flags, display
        // what fields are required, otherwise show the error
        if (err.message.includes('See more help with --help')) {
            this.warn(err.message.replace('with --help', `with: \x1B[93m${CMD_HELP}\x1B[0m`));
        }
        else {
            this.warn(err);
        }
    }
}
exports.default = EmasserPostPac;
//# sourceMappingURL=pac.js.map