"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const json_colorizer_1 = require("json-colorizer");
const core_1 = require("@oclif/core");
const errors_1 = require("@oclif/core/errors");
const emass_client_1 = require("@mitre/emass_client");
const apiConnection_1 = require("../../../utils/emasser/apiConnection");
const outputFormatter_1 = require("../../../utils/emasser/outputFormatter");
const fs_1 = tslib_1.__importDefault(require("fs"));
const path_1 = tslib_1.__importDefault(require("path"));
const utilities_1 = require("../../../utils/emasser/utilities");
const CMD_HELP = 'saf emasser post device_scans -h or --help';
class EmasserPostDeviceScans extends core_1.Command {
    static usage = '<%= command.id %> [FLAGS]';
    static description = 'Add (upload) device scan results in the assets module for a system\n'
        + 'Supported scan types: ACAS, DISA STIG Viewer, Policy Auditor, SCAP Compliance Checker\n'
        + 'See the [-S, --scanType] command line flag for acceptable option names for scan type';
    static examples = [
        {
            description: 'Add a DISA STIG Viewer file (disaStigViewerCklCklb)',
            command: '<%= config.bin %> <%= command.id %> [-s, --systemId] <value> [-f, --dataFile] <filename.ckl or filename.cklb> [-S, --scanType] <disaStigViewerCklCklb>  [-B, --[no-]isBaseline]',
        },
        {
            description: 'Add an ACAS (acasAsrArf) or Policy Auditor (policyAuditor)',
            command: '<%= config.bin %> <%= command.id %> [-s, --systemId] <value> [-f, --dataFile] <filename.zip> [-S, --scanType] <acasAsrArf or policyAuditor> [-B, --[no-]isBaseline]',
        },
        {
            description: 'All other supported scan types, a single file is expected',
            command: '<%= config.bin %> <%= command.id %> [-s, --systemId] <value> [-f, --dataFile] <path-to-file> [-S, --scanType] <acasNessus or disaStigViewerCmrs or scapComplianceChecker>  [-B, --[no-]isBaseline]',
        },
    ];
    static flags = {
        help: core_1.Flags.help({ char: 'h', description: 'Show eMASSer CLI help for the POST Device Scan Results command' }),
        systemId: core_1.Flags.integer({ char: 's', description: 'The system identification number', required: true }),
        filename: core_1.Flags.string({ char: 'f', description: 'The device scan result file to be uploaded.', required: true }),
        scanType: core_1.Flags.string({ char: 'S', description: 'The type of scan being uploaded', required: true,
            options: ['acasAsrArf', 'acasNessus', 'disaStigViewerCklCklb', 'disaStigViewerCmrs', 'policyAuditor', 'scapComplianceChecker'] }),
        isBaseline: core_1.Flags.boolean({ char: 'B', description: 'Indicates if the scan is a baseline scan', default: false, allowNo: true }),
    };
    async run() {
        const { flags } = await this.parse(EmasserPostDeviceScans);
        const apiCxn = new apiConnection_1.ApiConnection();
        const addDeviceScans = new emass_client_1.DeviceScanResultsApi(apiCxn.configuration, apiCxn.basePath, apiCxn.axiosInstances);
        /**
         * Upload device scans (delivery method can be a file or a zip file)
         * Specific file extensions are expected depending upon the scanType parameter.
         *
         * Scan Type                    File Type
         * ───────────────────────────  ─────────────
         * disaStigViewerCklCklb        .ckl or .cklb
         * acasAsrArf or policyAuditor  .zip
         *
         * Single files are expected for all other scan types as this endpoint
         * requires files to be uploaded consecutively as opposed to in bulk.
         *
         * Current scan types that are supported:
         *   ACAS: acasAsrArf or acasNessus
         *   DISA STIG Viewer: disaStigViewerCklCklb or disaStigViewerCmrs
         *   Policy Auditor: policyAuditor
         *   SCAP Compliance Checker: scapComplianceChecker
         */
        try {
            if (!fs_1.default.existsSync(flags.filename)) {
                throw new errors_1.CLIError(`The file ${flags.filename} does not exist. Please provide a valid file path.`);
            }
            else if (flags.scanType === 'disaStigViewerCklCklb' && !flags.filename.includes('.ckl')) {
                throw new errors_1.CLIError(`If the scan type is "disaStigViewerCklCklb" a .ckl or .cklb file is expected not a ${path_1.default.extname(flags.filename)} file`);
            }
            else if ((flags.scanType === 'acasAsrArf' || flags.scanType === 'policyAuditor') && !flags.filename.includes('.zip')) {
                throw new errors_1.CLIError(`If the scan type is "acasAsrArf" or "policyAuditor" a .zip file is expected not a ${path_1.default.extname(flags.filename)} file`);
            }
        }
        catch (error) {
            console.error(`\x1B[91m » ${error} \x1B[0m`);
            process.exit(1);
        }
        const fileStream = fs_1.default.createReadStream(flags.filename);
        addDeviceScans.addScanResultsBySystemId(flags.systemId, flags.scanType, fileStream, flags.isBaseline).then((response) => {
            console.log((0, json_colorizer_1.colorize)((0, outputFormatter_1.outputFormat)(response, false)));
        }).catch((error) => (0, utilities_1.displayError)(error, 'Device Scans'));
    }
    // skipcq: JS-0116 - Base class (CommandError) expects expected catch to return a Promise
    async catch(err) {
        // If error message is for missing flags, display
        // what fields are required, otherwise show the error
        if (err.message.includes('See more help with --help')) {
            this.warn(err.message.replace('with --help', `with: \x1B[93m${CMD_HELP}\x1B[0m`));
        }
        else {
            this.warn(err);
        }
    }
}
exports.default = EmasserPostDeviceScans;
//# sourceMappingURL=device_scans.js.map