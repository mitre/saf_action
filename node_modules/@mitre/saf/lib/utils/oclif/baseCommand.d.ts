import { Command, Interfaces } from '@oclif/core';
export type Flags<T extends typeof Command> = Interfaces.InferredFlags<typeof BaseCommand['baseFlags'] & T['flags']>;
export type Args<T extends typeof Command> = Interfaces.InferredArgs<T['args']>;
export declare abstract class HelpBaseCommand extends Command {
    static readonly baseFlags: {
        help: Interfaces.BooleanFlag<void>;
    };
}
export declare abstract class InteractiveBaseCommand extends Command {
    static readonly baseFlags: {
        interactive: Interfaces.BooleanFlag<boolean>;
    };
}
export declare abstract class BaseCommand<T extends typeof Command> extends Command {
    static readonly baseFlags: {
        logLevel: Interfaces.OptionFlag<"info" | "warn" | "debug" | "verbose", Interfaces.CustomOptions>;
        interactive: Interfaces.BooleanFlag<boolean>;
        help: Interfaces.BooleanFlag<void>;
    };
    protected flags: Flags<T>;
    protected args: Args<T>;
    init(): Promise<void>;
    protected catch(err: Error & {
        exitCode?: number;
    }): Promise<any>;
    protected finally(_: Error | undefined): Promise<any>;
}
