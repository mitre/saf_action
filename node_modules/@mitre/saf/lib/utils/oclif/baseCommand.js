"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseCommand = exports.InteractiveBaseCommand = exports.HelpBaseCommand = void 0;
/* eslint-disable @typescript-eslint/no-explicit-any */
const core_1 = require("@oclif/core");
class HelpBaseCommand extends core_1.Command {
    static baseFlags = {
        help: core_1.Flags.help({
            char: 'h',
            aliases: ['explain', 'tell-me-more'],
            // Show this flag under a separate GLOBAL section in help.
            helpGroup: 'GLOBAL',
            description: 'Show CLI help',
        }),
    };
}
exports.HelpBaseCommand = HelpBaseCommand;
class InteractiveBaseCommand extends core_1.Command {
    static baseFlags = {
        interactive: core_1.Flags.boolean({
            aliases: ['interactive', 'ask-me'],
            // Show this flag under a separate GLOBAL section in help.
            helpGroup: 'GLOBAL',
            description: 'Collect input tags interactively \x1B[31m(not available on all CLI commands)\x1B[0m',
        }),
    };
}
exports.InteractiveBaseCommand = InteractiveBaseCommand;
class BaseCommand extends core_1.Command {
    // define flags that can be inherited by any command that extends BaseCommand
    static baseFlags = {
        ...HelpBaseCommand.baseFlags,
        ...InteractiveBaseCommand.baseFlags,
        logLevel: core_1.Flags.option({
            char: 'L',
            default: 'info',
            helpGroup: 'GLOBAL',
            options: ['info', 'warn', 'debug', 'verbose'],
            description: 'Specify level for logging \x1B[31m(if implemented by the CLI command)\x1B[0m',
        })(),
    };
    flags;
    args;
    async init() {
        await super.init();
        const { args, flags } = await this.parse({
            flags: this.ctor.flags,
            baseFlags: super.ctor.baseFlags,
            enableJsonFlag: this.ctor.enableJsonFlag,
            args: this.ctor.args,
            strict: this.ctor.strict,
        });
        this.flags = flags;
        this.args = args;
    }
    async catch(err) {
        // If error message is for missing flags, display what fields
        // are required, otherwise show the error
        if (err.message.includes('See more help with --help')) {
            this.warn(err.message.replace('--help', `\x1B[93m${process.argv.at(-2)} ${process.argv.at(-1)} -h or --help\x1B[0m`));
        }
        else {
            this.warn(err);
        }
    }
    async finally(_) {
        // called after run and catch regardless of whether or not the command errored
        return super.finally(_);
    }
}
exports.BaseCommand = BaseCommand;
//# sourceMappingURL=baseCommand.js.map