"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDetails = exports.cklResults = exports.cklStatus = exports.cklSeverity = void 0;
const tslib_1 = require("tslib");
const uuid_1 = require("uuid");
const lodash_1 = tslib_1.__importDefault(require("lodash"));
function cklSeverity(severity) {
    switch (severity) {
        case 'critical':
        case 'high':
            return 'high';
        case 'medium':
            return 'medium';
        case 'low':
        case 'none':
            return 'low';
        default:
            return 'high';
    }
}
exports.cklSeverity = cklSeverity;
function cklStatus(status) {
    switch (status) {
        case 'Not Applicable':
        case 'From Profile':
            return 'Not_Applicable';
        case 'Profile Error':
        case 'Not Reviewed':
            return 'Not_Reviewed';
        case 'Passed':
            return 'NotAFinding';
        default:
            return 'Open';
    }
}
exports.cklStatus = cklStatus;
// Get segments/results as strings
function cklResults(segments) {
    if (typeof segments === 'undefined') {
        return '';
    }
    return segments
        .map(segment => {
        if (segment.message) {
            return `${segment.status}\n${segment.code_desc}\n${segment.message}`;
        }
        if (segment.skip_message) {
            return `${segment.status}\n${segment.code_desc}\n${segment.skip_message}`;
        }
        return `${segment.status}\n${segment.code_desc}`;
    })
        .join('\n--------------------------------\n');
}
exports.cklResults = cklResults;
function getDetails(control, profileName) {
    return {
        vid: control.data.id,
        severity: cklSeverity(control.root.hdf.severity),
        title: control.data.title || '',
        description: control.data.desc || '',
        checkText: control.hdf.descriptions.check || control.data.tags.check,
        fixText: control.hdf.descriptions.fix || control.data.tags.fix,
        profileName: profileName,
        startTime: lodash_1.default.get(control, 'hdf.segments![0].start_time'),
        targetKey: 0,
        uuidV4: (0, uuid_1.v4)(),
        ccis: control.data.tags.cci,
        status: cklStatus(control.hdf.status),
        results: cklResults(control.hdf.segments),
    };
}
exports.getDetails = getDetails;
