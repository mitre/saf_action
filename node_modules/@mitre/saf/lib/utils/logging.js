"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getHDFSummary = exports.createWinstonLogger = void 0;
const tslib_1 = require("tslib");
const inspecjs_1 = require("inspecjs");
const winston_1 = tslib_1.__importDefault(require("winston"));
function createWinstonLogger(mapperName, level = 'debug') {
    return winston_1.default.createLogger({
        transports: [new winston_1.default.transports.Console()],
        level: level,
        format: winston_1.default.format.combine(winston_1.default.format.timestamp({
            format: 'MMM-DD-YYYY HH:mm:ss Z',
        }), winston_1.default.format.printf(info => `[${[info.timestamp]}] ${mapperName} ${info.message}`)),
    });
}
exports.createWinstonLogger = createWinstonLogger;
function getHDFSummary(hdf) {
    let summary = 'Execution<';
    const summaryObject = {
        profileNames: [],
        controlCount: 0,
        passedCount: 0,
        failedCount: 0,
        notApplicableCount: 0,
        notReviewedCount: 0,
        errorCount: 0,
    };
    const contextualizedEvaluation = (0, inspecjs_1.contextualizeEvaluation)(hdf);
    contextualizedEvaluation.contains.forEach(profile => {
        summaryObject.profileNames.push(profile.data.name);
    });
    const controls = contextualizedEvaluation.contains.flatMap(profile => profile.contains);
    controls.forEach(control => {
        switch (control.hdf.status) {
            case 'Passed': {
                summaryObject.passedCount += 1;
                break;
            }
            case 'Failed': {
                summaryObject.failedCount += 1;
                break;
            }
            case 'Not Applicable': {
                summaryObject.notApplicableCount += 1;
                break;
            }
            case 'Not Reviewed': {
                summaryObject.notReviewedCount += 1;
                break;
            }
            case 'Profile Error': {
                summaryObject.errorCount += 1;
                break;
            }
            default:
        }
    });
    summary += `Profiles: [Profile<${summaryObject.profileNames.join('> Profile<')}>], Passed=${summaryObject.passedCount}, Failed=${summaryObject.failedCount}, Not Applicable=${summaryObject.notApplicableCount}, Not Reviewed=${summaryObject.notReviewedCount}>`;
    return summary;
}
exports.getHDFSummary = getHDFSummary;
