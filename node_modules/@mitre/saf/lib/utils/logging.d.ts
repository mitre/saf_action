import { Logger } from 'winston';
import { ExecJSON } from 'inspecjs';
/**
 * Summary type represents a summary of an HDF execution.
 * @property {string[]} profileNames - An array of profile names.
 * @property {number} controlCount - The total number of controls.
 * @property {number} passedCount - The number of controls that passed.
 * @property {number} failedCount - The number of controls that failed.
 * @property {number} notApplicableCount - The number of controls that are not applicable.
 * @property {number} notReviewedCount - The number of controls that were not reviewed.
 * @property {number} errorCount - The number of controls that resulted in an error.
 */
export type Summary = {
    profileNames: string[];
    controlCount: number;
    passedCount: number;
    failedCount: number;
    notApplicableCount: number;
    notReviewedCount: number;
    errorCount: number;
};
/**
 * createWinstonLogger function creates a Winston logger.
 * @param {string} mapperName - The name of the mapper.
 * @param {string} [level='info'] - The log level. Default is 'info'.
 * @returns {Logger} A Winston logger.
 */
export declare function createWinstonLogger(mapperName: string, level?: string): Logger;
/**
 * The function `getHDFSummary` takes an execution object and returns a summary string containing
 * information about the profiles, passed/failed/not applicable/not reviewed counts.
 * @param {ExecJSON.Execution} hdf - The `hdf` parameter is of type `ExecJSON.Execution` which represents the execution of a set of controls against a target.
 * @returns {string} A string that represents a summary of the execution.
 */
export declare function getHDFSummary(hdf: ExecJSON.Execution): string;
