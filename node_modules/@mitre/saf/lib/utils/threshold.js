"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractControlSummariesBySeverity = exports.getControlIdMap = exports.reverseStatusName = exports.renameStatusName = exports.exitNonZeroIfTrue = exports.calculateCompliance = exports.extractStatusCounts = exports.emptyStatusAndSeverityCounts = exports.statusSeverityPaths = exports.totalMax = exports.totalMin = exports.severityTargetsObject = void 0;
const tslib_1 = require("tslib");
const lodash_1 = tslib_1.__importDefault(require("lodash"));
exports.severityTargetsObject = {
    critical: ['passed.critical.min', 'passed.critical.max', 'failed.critical.min', 'failed.critical.max', 'skipped.critical.min', 'skipped.critical.max', 'error.critical.min', 'error.critical.max'],
    high: ['passed.high.min', 'passed.high.max', 'failed.high.min', 'failed.high.max', 'skipped.high.min', 'skipped.high.max', 'error.high.min', 'error.high.max'],
    medium: ['passed.medium.min', 'passed.medium.max', 'failed.medium.min', 'failed.medium.max', 'skipped.medium.min', 'skipped.medium.max', 'error.medium.min', 'error.medium.max'],
    low: ['passed.low.min', 'passed.low.max', 'failed.low.min', 'failed.low.max', 'skipped.low.min', 'skipped.low.max', 'error.low.min', 'error.low.max'],
    none: ['no_impact.none.min', 'no_impact.none.max'],
};
exports.totalMin = ['passed.total.min', 'failed.total.min', 'skipped.total.min', 'error.total.min'];
exports.totalMax = ['passed.total.max', 'failed.total.max', 'skipped.total.max', 'error.total.max'];
exports.statusSeverityPaths = {
    critical: ['passed.critical.controls', 'failed.critical.controls', 'skipped.critical.controls', 'error.critical.controls'],
    high: ['passed.high.controls', 'failed.high.controls', 'skipped.high.controls', 'error.high.controls'],
    medium: ['passed.medium.controls', 'failed.medium.controls', 'skipped.medium.controls', 'error.medium.controls'],
    low: ['passed.low.controls', 'failed.low.controls', 'skipped.low.controls', 'error.low.controls'],
    none: ['no_impact.none.controls'],
};
exports.emptyStatusAndSeverityCounts = {
    passed: {
        critical: [],
        high: [],
        medium: [],
        low: [],
    },
    failed: {
        critical: [],
        high: [],
        medium: [],
        low: [],
    },
    skipped: {
        critical: [],
        high: [],
        medium: [],
        low: [],
    },
    no_impact: {
        none: [],
    },
    error: {
        critical: [],
        high: [],
        medium: [],
        low: [],
    },
};
function extractStatusCounts(profile, severity) {
    var _a;
    const hash = {
        Failed: 0,
        'From Profile': 0,
        'Not Applicable': 0,
        'Not Reviewed': 0,
        Passed: 0,
        'Profile Error': 0,
        PassedTests: 0,
        FailedTests: 0,
        PassingTestsFailedControl: 0,
        Waived: 0,
    };
    for (const c of profile.contains.filter(control => control.extendedBy.length === 0)) {
        const control = c.root;
        const status = control.hdf.status;
        const controlSeverity = control.hdf.severity;
        if (!severity || (controlSeverity === severity)) {
            ++hash[status];
            if (status === 'Passed') {
                hash.PassedTests += (control.hdf.segments || []).length;
            }
            else if (status === 'Failed') {
                hash.PassingTestsFailedControl += (control.hdf.segments || []).filter(s => s.status === 'passed').length;
                hash.FailedTests += (control.hdf.segments || []).filter(s => s.status === 'failed').length;
            }
            else if (status === 'Not Applicable' && control.hdf.waived) {
                hash.Waived += ((_a = control.hdf.segments) === null || _a === void 0 ? void 0 : _a.length) || 0;
            }
        }
    }
    return hash;
}
exports.extractStatusCounts = extractStatusCounts;
function calculateCompliance(statusHash) {
    const total = statusHash.Passed + statusHash.Failed + statusHash['Not Reviewed'] + statusHash['Profile Error'];
    if (total === 0) {
        return 0;
    }
    return Math.round((100 * statusHash.Passed) / total);
}
exports.calculateCompliance = calculateCompliance;
function exitNonZeroIfTrue(condition, reason) {
    if (condition) {
        throw new Error(reason || 'Compliance levels were not met');
    }
}
exports.exitNonZeroIfTrue = exitNonZeroIfTrue;
function renameStatusName(statusName) {
    switch (statusName) {
        case 'passed':
            return 'Passed';
        case 'failed':
            return 'Failed';
        case 'skipped':
            return 'Not Reviewed';
        case 'no_impact':
            return 'Not Applicable';
        case 'error':
            return 'Profile Error';
        default:
            return 'Profile Error';
    }
}
exports.renameStatusName = renameStatusName;
function reverseStatusName(statusName) {
    switch (statusName) {
        case 'Passed':
            return 'passed';
        case 'Failed':
            return 'failed';
        case 'Not Reviewed':
            return 'skipped';
        case 'Not Applicable':
            return 'no_impact';
        case 'Profile Error':
            return 'error';
        default:
            return 'error';
    }
}
exports.reverseStatusName = reverseStatusName;
function getControlIdMap(profile, thresholds) {
    if (!thresholds) {
        thresholds = {};
    }
    for (const c of profile.contains.filter(control => control.extendedBy.length === 0)) {
        const control = c.root;
        const severity = c.root.hdf.severity;
        const path = `${reverseStatusName(control.hdf.status)}.${severity}.controls`;
        const existingData = lodash_1.default.get(thresholds, path) || [];
        lodash_1.default.set(thresholds, path, [...existingData, control.data.id]);
    }
    return thresholds;
}
exports.getControlIdMap = getControlIdMap;
function getDescriptionContentsOrUndefined(label, descriptions) {
    let found;
    if (descriptions) {
        descriptions.forEach((description) => {
            if (description.label === label) {
                found = description.data;
            }
        });
    }
    return found;
}
function cklControlStatus(control, for_summary) {
    var _a;
    const statuses = (_a = control.hdf.segments) === null || _a === void 0 ? void 0 : _a.map(segment => segment.status);
    if (control.data.impact === 0) {
        return 'Not_Applicable';
    }
    if ((statuses === null || statuses === void 0 ? void 0 : statuses.includes('error')) || ((statuses === null || statuses === void 0 ? void 0 : statuses.length) === 0 && for_summary)) {
        return 'Profile_Error';
    }
    if (statuses === null || statuses === void 0 ? void 0 : statuses.includes('failed')) {
        return 'Open';
    }
    if (statuses === null || statuses === void 0 ? void 0 : statuses.includes('passed')) {
        return 'NotAFinding';
    }
    return 'Not_Reviewed';
}
function controlFindingDetails(control, controlCKLStatus) {
    control.message.sort();
    switch (controlCKLStatus) {
        case 'Open':
            return `One or more of the automated tests failed or was inconclusive for the control \n\n ${control.message.join('\n')}`;
        case 'NotAFinding':
            return `All Automated tests passed for the control \n\n ${control.message.join('\n')}`;
        case 'Not_Reviewed':
            return `Automated test skipped due to known accepted condition in the control : \n\n${control.message.join('\n')}`;
        case 'Not_Applicable':
            return `Justification: \n ${control.message.join('\n')}`;
        default:
            return 'No test available or some test errors occurred for this control';
    }
}
function extractControlSummariesBySeverity(profile) {
    var _a, _b;
    const result = {
        failed: {},
        passed: {},
        no_impact: {},
        skipped: {},
        error: {},
    };
    for (const c of profile.contains.filter(control => control.extendedBy.length === 0)) {
        const control = c.root;
        const status = control.hdf.status;
        const extracted = {
            vuln_num: control.data.id,
            rule_title: control.data.title || undefined,
            vuln_discuss: control.data.desc || undefined,
            severity: control.hdf.severity,
            gid: control.data.tags.gid,
            group_title: control.data.tags.gtitle,
            rule_id: control.data.tags.rid,
            rule_ver: control.data.tags.stig_id,
            cci_ref: control.data.tags.cci,
            nist: (control.data.tags.nist || []).join(' '),
            check_content: getDescriptionContentsOrUndefined('check', control.data.descriptions),
            fix_text: getDescriptionContentsOrUndefined('fix', control.data.descriptions),
            impact: control.data.impact.toString() || undefined,
            profile_name: profile.data.name,
            profile_shasum: profile.data.sha256,
            status: (_a = control.hdf.segments) === null || _a === void 0 ? void 0 : _a.map(segment => segment.status),
            message: [],
            control_status: cklControlStatus(control, true),
        };
        (_b = control.hdf.segments) === null || _b === void 0 ? void 0 : _b.forEach(segment => {
            switch (segment.status) {
                case 'skipped':
                    extracted.message.push(`SKIPPED -- Test: ${segment.code_desc}\nMessage: ${segment.skip_message}\n`);
                    break;
                case 'failed':
                    extracted.message.push(`FAILED -- Test: ${segment.code_desc}\nMessage: ${segment.message}\n`);
                    break;
                case 'passed':
                    extracted.message.push(`PASS -- ${segment.code_desc}\n`);
                    break;
                case 'error':
                    extracted.message.push(`PROFILE_ERROR -- Test: ${segment.code_desc}\nMessage: ${segment.code_desc}\n`);
                    break;
                default:
                    break;
            }
        });
        if (control.data.impact === 0) {
            extracted.message.push(`NOT_APPLICABLE -- Description: ${control.data.desc}\n\n`);
        }
        extracted.finding_details = controlFindingDetails(extracted, cklControlStatus(control, true));
        result[reverseStatusName(status)][control.data.id] = extracted;
    }
    return result;
}
exports.extractControlSummariesBySeverity = extractControlSummariesBySeverity;
