"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.outputFormat = void 0;
const tslib_1 = require("tslib");
const apiConfig_1 = require("./apiConfig");
const lodash_1 = tslib_1.__importDefault(require("lodash"));
function removeNullsFromObject(dataObject) {
    const jsonData = {};
    Object.keys(dataObject).forEach(key => {
        if (dataObject[key] !== null) {
            jsonData[key] = dataObject[key];
        }
    });
    return jsonData;
}
function convertEpochToDateTime(dataObject) {
    const jsonData = {};
    Object.keys(dataObject).forEach(key => {
        if (Array.isArray(dataObject[key])) {
            let jsonObj = {}; // skipcq: JS-0242
            const hash_array = [];
            const data_array = Object.values(dataObject[key]);
            data_array.forEach((dataObj) => {
                if (typeof data_array[0] === 'string') {
                    hash_array.push(dataObj);
                }
                else {
                    jsonObj = convertEpochToDateTime(dataObj);
                    hash_array.push(jsonObj);
                }
            });
            jsonData[key] = hash_array;
        }
        else if (dataObject[key] !== null) {
            const value = key;
            const epochDate = Number.parseInt(dataObject[key], 10);
            jsonData[key] = value.search('date') > 0 || value.search('Date') > 0 ? new Date(epochDate * 1000) : dataObject[key];
        }
        else if (dataObject[key] === null) {
            jsonData[key] = dataObject[key];
        }
    });
    return jsonData;
}
function outputFormat(data, doConversion = true) {
    const conf = new apiConfig_1.ApiConfig();
    const hideNulls = conf.displayNulls !== 'true';
    const showEpoch = (conf.displayDateTime === 'true');
    const debugging = (conf.debugging === 'true');
    let formatDataObj = data;
    if (debugging) {
        // When debugging is on, output the entire content returned from
        // the server. Output text in yellow and revert back to default
        console.log('\x1B[93m', 'Debugging is on', '\x1B[0m');
        try {
            console.log(JSON.stringify(data, null, 2));
        }
        catch {
            console.log(data);
        }
        return '';
    }
    try {
        if (Object.prototype.hasOwnProperty.call(data, 'headers')) {
            // Need to use the non null assertion (!) or return and empty objet as _.get can return undefined
            formatDataObj = lodash_1.default.get(data, 'data') || {};
        }
        if (doConversion) {
            if (hideNulls) {
                const newData = {};
                Object.keys(formatDataObj).forEach(key1 => {
                    // Process the 'meta' content
                    if (key1 === 'meta') {
                        const jsonData = {};
                        jsonData[key1] = formatDataObj[key1];
                        lodash_1.default.merge(newData, jsonData);
                        // Process the 'data' content
                    }
                    else if (key1 === 'data') {
                        // data: is an array of objects
                        if (Array.isArray(formatDataObj[key1])) {
                            const data_array = Object.values(formatDataObj[key1]);
                            const hash_array = [];
                            data_array.forEach(dataEntries => {
                                const jsonData = removeNullsFromObject(dataEntries);
                                hash_array.push(jsonData);
                            });
                            lodash_1.default.merge(newData, { data: hash_array });
                            formatDataObj = newData;
                            // data: is NOT and array of object it is a simple object
                        }
                        else {
                            const jsonData = {};
                            const obj = formatDataObj[key1];
                            // If we have a data key/pair of null
                            if (formatDataObj[key1] === null) {
                                lodash_1.default.merge(newData, { data: null });
                            }
                            else {
                                Object.keys(obj).forEach(key2 => {
                                    if (Array.isArray(obj[key2])) {
                                        let jsonObj = {}; // skipcq: JS-0242
                                        const data_array = Object.values(obj[key2]);
                                        const hash_array = [];
                                        data_array.forEach((dataObject) => {
                                            jsonObj = removeNullsFromObject(dataObject);
                                            hash_array.push(jsonObj);
                                        });
                                        jsonData[key2] = hash_array;
                                    }
                                    else if (obj[key2] !== null) {
                                        jsonData[key2] = obj[key2];
                                    }
                                });
                                const dataObj = {};
                                dataObj.data = jsonData;
                                lodash_1.default.merge(newData, dataObj);
                            }
                            formatDataObj = newData;
                        }
                    }
                });
            }
            if (showEpoch) {
                const newData = {};
                const dataObj = {};
                Object.keys(formatDataObj).forEach(key1 => {
                    let jsonData = {}; // skipcq: JS-0242
                    if (key1 === 'meta') {
                        jsonData[key1] = formatDataObj[key1];
                        lodash_1.default.merge(newData, jsonData);
                    }
                    else if (key1 === 'data') {
                        if (Array.isArray(formatDataObj[key1])) {
                            const data_array = Object.values(formatDataObj[key1]);
                            const hash_array = [];
                            data_array.forEach(dataEntries => {
                                jsonData = convertEpochToDateTime(dataEntries);
                                hash_array.push(jsonData);
                            });
                            lodash_1.default.merge(newData, { data: hash_array });
                            formatDataObj = newData;
                        }
                        else {
                            const obj = formatDataObj[key1];
                            Object.keys(obj).forEach(key2 => {
                                if (Array.isArray(obj[key2])) {
                                    let jsonObj = {}; // skipcq: JS-0242
                                    const data_array = Object.values(obj[key2]);
                                    const hash_array = [];
                                    data_array.forEach((dataObject) => {
                                        jsonObj = convertEpochToDateTime(dataObject);
                                        hash_array.push(jsonObj);
                                    });
                                    jsonData[key2] = hash_array;
                                }
                                else if (obj[key2] !== null) {
                                    const value = key2;
                                    jsonData[key2] = value.search('date') > 0 || value.search('Date') > 0 ? new Date(obj[key2] * 1000) : obj[key2];
                                }
                                else if (obj[key2] === null) {
                                    jsonData[key2] = obj[key2];
                                }
                            });
                        }
                        dataObj.data = jsonData;
                        lodash_1.default.merge(newData, dataObj);
                    }
                });
                formatDataObj = newData;
            }
        }
        if (typeof formatDataObj === 'string') {
            return formatDataObj;
        } // skipcq: JS-0056
        return JSON.stringify(formatDataObj, null, 2);
    }
    catch {
        if (typeof formatDataObj === 'string') {
            return formatDataObj;
        } // skipcq: JS-0056
        return JSON.stringify(formatDataObj, null, 2);
    }
}
exports.outputFormat = outputFormat;
