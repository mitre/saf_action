/**
 * The `ApiConfig` class is responsible for loading and managing the configuration
 * settings required for connecting to the eMASS API. It reads environment variables
 * from a `.env` file and provides methods to retrieve required and optional configuration
 * values.
 *
 * @class ApiConfig
 * @property {string} url - The URL of the eMASS API host.
 * @property {number | any} port - The port number for the eMASS API.
 * @property {string | undefined} caCert - The path to the CA certificate file.
 * @property {string | undefined} keyCert - The path to the key certificate file.
 * @property {string | undefined} clientCert - The path to the client certificate file.
 * @property {string} apiPassPhrase - The passphrase for the API key file.
 * @property {string} apiKey - The API key for authenticating requests.
 * @property {string} userUid - The user UID required for actionable requests.
 * @property {boolean} sslVerify - Whether to verify SSL certificates.
 * @property {boolean} reqCert - Whether to request a certificate.
 * @property {string} debugging - Debugging mode flag.
 * @property {string} displayNulls - Flag to display null values.
 * @property {string} displayDateTime - Flag to display date and time.
 * @property {string} downloadDir - The directory for downloads.
 *
 * @constructor
 * Initializes a new instance of the `ApiConfig` class. Loads environment variables
 * from a `.env` file and sets the configuration properties. If required environment
 * variables are missing, it prints an error message and exits the process.
 */
export declare class ApiConfig {
    private envConfig;
    url: string;
    port: number | any;
    caCert: string | undefined;
    keyCert: string | undefined;
    clientCert: string | undefined;
    apiPassPhrase: string;
    apiKey: string;
    userUid: string;
    sslVerify: boolean;
    reqCert: boolean;
    debugging: string;
    displayNulls: string;
    displayDateTime: string;
    downloadDir: string;
    constructor();
    /**
     * Retrieves the value of the specified environment variable from the configuration.
     * If the environment variable is not found, an error is thrown.
     *
     * @param {string} key - The key of the environment variable to retrieve.
     * @returns {string | any} - The value of the environment variable.
     * @throws {Error} - Throws an error if the environment variable is not found.
     */
    getRequiredEnv(key: string): string | any;
    /**
     * Retrieves the value of an environment variable if it exists, otherwise returns a default value.
     *
     * @param key - The key of the environment variable to retrieve.
     * @param defaultValue - The default value to return if the environment variable does not exist.
     * @returns The value of the environment variable if it exists, otherwise the default value.
     */
    getOptionalEnv(key: string, defaultValue: any): string | any;
}
