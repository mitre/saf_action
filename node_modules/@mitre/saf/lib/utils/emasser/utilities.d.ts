import { BooleanFlag, OptionFlag } from '@oclif/core/interfaces';
/**
 * Interface representing various flag options used in the application.
 * Property are listed here as optional but are set to required based
 * on what endpoint being supported (see getFlagsForEndpoint)
 */
export interface FlagOptions {
    systemId?: OptionFlag<number>;
    poamId?: OptionFlag<number>;
    poamsId?: OptionFlag<number[]>;
    milestoneId?: OptionFlag<number>;
    milestonesId?: OptionFlag<number[]>;
    workflowInstanceId?: OptionFlag<number>;
    pageIndex?: OptionFlag<number | undefined>;
    includeComments?: BooleanFlag<boolean | undefined>;
    includeDecommissionSystems?: BooleanFlag<boolean | undefined>;
    excludeInherited?: BooleanFlag<boolean | undefined>;
    includeInactive?: BooleanFlag<boolean | undefined>;
    isTemplate?: BooleanFlag<boolean>;
    includeDitprMetrics?: BooleanFlag<boolean | undefined>;
    includeDecommissioned?: BooleanFlag<boolean | undefined>;
    reportsForScorecard?: BooleanFlag<boolean | undefined>;
    latestOnly?: BooleanFlag<boolean | undefined>;
    systemOnly?: BooleanFlag<boolean | undefined>;
    compress?: BooleanFlag<boolean | undefined>;
    printToStdOut?: BooleanFlag<boolean | undefined>;
    policy?: OptionFlag<string | undefined>;
    registrationType?: OptionFlag<string | undefined>;
    ditprId?: OptionFlag<string | undefined>;
    coamsId?: OptionFlag<string | undefined>;
    roleCategory?: OptionFlag<string>;
    role?: OptionFlag<string>;
    acronyms?: OptionFlag<string | undefined>;
    controlAcronyms?: OptionFlag<string | undefined>;
    assessmentProcedures?: OptionFlag<string | undefined>;
    ccis?: OptionFlag<string | undefined>;
    sinceDate?: OptionFlag<string | any>;
    scheduledCompletionDateStart?: OptionFlag<string | undefined>;
    scheduledCompletionDateEnd?: OptionFlag<string | undefined>;
    filename?: OptionFlag<string | any>;
    status?: OptionFlag<string | undefined>;
    assessmentProcedure?: OptionFlag<string>;
    testedBy?: OptionFlag<string>;
    testDate?: OptionFlag<string>;
    description?: OptionFlag<string | any>;
    artifactDescription?: OptionFlag<string | any>;
    complianceStatus?: OptionFlag<string | any>;
    scheduledCompletionDate?: OptionFlag<string | any>;
    orgId?: OptionFlag<number>;
    pageSize?: OptionFlag<number | undefined>;
    fileName?: OptionFlag<string[]>;
    resourceId?: OptionFlag<string[]>;
    containerId?: OptionFlag<string[]>;
    assetsHardwareId?: OptionFlag<string[]>;
    assetsSoftwareId?: OptionFlag<string[]>;
    dataFile?: OptionFlag<string>;
    type?: OptionFlag<string | any>;
    category?: OptionFlag<string | any>;
    refPageNumber?: OptionFlag<string | undefined>;
    controls?: OptionFlag<string | undefined>;
    signedDate?: OptionFlag<string | any>;
    expirationDate?: OptionFlag<string | any>;
    lastReviewDate?: OptionFlag<string | any>;
    controlAcronym?: OptionFlag<string | any>;
    comments?: OptionFlag<string | any>;
    workflow?: OptionFlag<string | any>;
    name?: OptionFlag<string | any>;
}
/**
 * Generates flag options for a given endpoint based on the provided command line arguments.
 *
 * @param argv - The command line arguments.
 * @returns An object containing the flag options for the specified endpoint.
 *
 * The function processes different request types (`get`, `post`, `put`, `delete`) and endpoints
 * to generate the appropriate flag options. Each endpoint has its own set of flags with specific
 * descriptions and requirements.
 *
 * Example usage:
 * ```typescript
 * const flags = getFlagsForEndpoint(['get', 'system']);
 * ```
 *
 * The returned `FlagOptions` object will vary based on the endpoint and request type.
 */
export declare function getFlagsForEndpoint(argv: string[]): FlagOptions;
/**
 * Retrieves a description for a given endpoint based on the provided arguments.
 *
 * @param argv - The command line arguments passed to the function.
 * @param endpoint - The endpoint for which the description is to be retrieved.
 * @returns A string description for the specified endpoint and arguments.
 */
export declare function getDescriptionForEndpoint(argv: string[], endpoint: string): string;
/**
 * Generates example command strings for a given endpoint and arguments.
 *
 * @param argv - The array of command-line arguments.
 * @param endpoint - The optional endpoint to generate examples for.
 * @returns An array of example command strings.
 */
export declare function getExamplesForEndpoint(argv: string[], endpoint?: string): string[];
/**
 * Retrieves JSON examples based on the specified endpoint.
 *
 * @param {string} [endpoint] - The endpoint for which to retrieve JSON examples.
 * @returns {string[]} An array of JSON examples corresponding to the specified endpoint.
 *
 * The following endpoints are supported:
 * - 'poams-post-required': Returns JSON example for POA&M post required fields.
 * - 'poams-post-put-required-va': Returns JSON example for POA&M post required fields specific to VA.
 * - 'poams-post-conditional': Returns JSON example for POA&M post conditional fields.
 * - 'poams-put-required': Returns JSON example for POA&M put required fields.
 * - 'poams-put-conditional': Returns JSON example for POA&M put conditional fields.
 * - 'poams-post-put-optional': Returns JSON example for POA&M post/put optional fields.
 * - 'controls-required': Returns JSON example for controls required fields.
 * - 'controls-conditional': Returns JSON example for controls conditional fields.
 * - 'controls-optional': Returns JSON example for controls optional fields.
 * - 'hardware-post-required': Returns JSON example for hardware post required fields.
 * - 'hardware-post-put-conditional': Returns JSON example for hardware post/put conditional fields.
 * - 'hardware-post-put-optional': Returns JSON example for hardware post/put optional fields.
 * - 'software-post-required': Returns JSON example for software post required fields.
 * - 'software-post-put-conditional': Returns JSON example for software post/put conditional fields.
 * - 'software-post-put-optional': Returns JSON example for software post/put optional fields.
 * - 'cloud_resources-required': Returns JSON example for cloud resources required fields.
 * - 'cloud_resources-optional': Returns JSON example for cloud resources optional fields.
 * - 'scan_findings-application': Returns JSON example for scan findings application fields.
 * - 'scan_findings-applicationFindings': Returns JSON example for scan findings application findings fields.
 * - 'scan_findings-clearFindings': Returns JSON example for clearing scan findings.
 * - 'container_scans-required': Returns JSON example for container scans required fields.
 * - 'container_scans-optional': Returns JSON example for container scans optional fields.
 */
export declare function getJsonExamples(endpoint?: string): string[];
/**
 * Saves data to a specified file within a given directory. If the directory does not exist, it will be created.
 *
 * @param dir - The directory where the file will be saved.
 * @param filename - The name of the file to save the data to.
 * @param data - The data to be saved in the file.
 *
 * @remarks
 * This function checks if the specified directory exists, and if not, it creates the directory.
 * It then writes the provided data to a file within that directory. If an error occurs during
 * the file writing process, an error message is logged to the console.
 */
export declare function saveFile(dir: string, filename: string, data: any): void;
/**
 * Prints a help message to the console with a specific format.
 *
 * The message is prefixed with an arrow (â†’) and displayed in yellow color.
 *
 * @param msg - The help message to be printed.
 */
export declare function printHelpMsg(msg: string): void;
/**
 * Prints a message to the console in red color.
 *
 * @param msg - The message to be printed.
 */
export declare function printRedMsg(msg: string): void;
/**
 * Displays an error message to the console.
 *
 * If the error is an instance of `Error`, it will be formatted and colorized
 * before being logged. Otherwise, a generic error message will be displayed,
 * indicating the endpoint that caused the error.
 *
 * @param error - The error to display. Can be of any type.
 * @param endpoint - The endpoint that was being called when the error occurred.
 */
export declare function displayError(error: unknown, endpoint: string): void;
