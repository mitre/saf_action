"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiConfig = void 0;
const tslib_1 = require("tslib");
const fs_1 = tslib_1.__importDefault(require("fs"));
const dotenv_1 = tslib_1.__importDefault(require("dotenv"));
function printYellowMsg(msg) {
    console.log('\x1B[93m', msg, '\x1B[0m');
}
function printRedMsg(msg) {
    console.log('\x1B[91m', msg, '\x1B[0m');
}
function printHelpMessage() {
    printYellowMsg('Use the emasser CLI command "saf emasser configure" to generate or update an eMASS configuration file.');
    printYellowMsg('If the configuration file is generated, it is placed in the directory where the emasser command is executed.');
}
class ApiConfig {
    envConfig;
    url;
    port;
    keyCert;
    clientCert;
    apiPassPhrase;
    apiKey;
    userUid;
    sslVerify;
    reqCert;
    debugging;
    displayNulls;
    displayDateTime;
    constructor() {
        try {
            this.envConfig = dotenv_1.default.parse(fs_1.default.readFileSync('.env'));
        }
        catch (error) {
            if (error.code === 'ENOENT') {
                this.envConfig = {};
                // File probably does not exist
                printRedMsg('An eMASS variables configuration file (.env) was not found.');
                printHelpMessage();
                process.exit(0);
            }
            else {
                throw error;
            }
        }
        // Option Environment Variable
        this.port = this.getOptionalEnv('EMASSER_PORT', 443);
        this.sslVerify = this.getOptionalEnv('EMASSER_REJECT_UNAUTHORIZED', false);
        this.reqCert = this.getOptionalEnv('EMASSER_REQUEST_CERT', false);
        this.debugging = this.getOptionalEnv('EMASSER_DEBUGGING', false);
        this.displayNulls = this.getOptionalEnv('EMASSER_CLI_DISPLAY_NULL', true);
        this.displayDateTime = this.getOptionalEnv('EMASSER_EPOCH_TO_DATETIME', false);
        // Required Environment Variables
        try {
            this.apiKey = this.getRequiredEnv('EMASSER_API_KEY');
            this.userUid = this.getRequiredEnv('EMASSER_USER_UID');
            this.url = this.getRequiredEnv('EMASSER_HOST_URL');
            this.keyCert = this.getRequiredEnv('EMASSER_KEY_FILE_PATH');
            this.clientCert = this.getRequiredEnv('EMASSER_CERT_FILE_PATH');
            this.apiPassPhrase = this.getRequiredEnv('EMASSER_KEY_FILE_PASSWORD');
        }
        catch (error) {
            if (error.name === 'EVNF') {
                printHelpMessage();
            }
            else {
                console.error(error.message);
            }
            process.exit(0);
        }
    }
    getRequiredEnv(key) {
        if (Object.prototype.hasOwnProperty.call(this.envConfig, key)) {
            return this.envConfig[key];
        } // skipcq: JS-0056
        printRedMsg('No configuration was provided for variable: ' + key);
        const err = new Error('Environment variable not found');
        err.name = 'EVNF';
        throw err;
    }
    getOptionalEnv(key, defaultValue) {
        if (Object.prototype.hasOwnProperty.call(this.envConfig, key)) {
            return this.envConfig[key];
        } // skipcq: JS-0056
        return defaultValue;
    }
}
exports.ApiConfig = ApiConfig;
