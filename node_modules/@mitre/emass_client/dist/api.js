"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Enterprise Mission Assurance Support Service (eMASS)
 * The Enterprise Mission Assurance Support Service (eMASS) Representational State Transfer (REST) Application Programming Interface (API) enables users to perform assessments and complete actions associated with system records.   <strong>Register External Application (that use the eMASS API)</strong></br> New users will need to [register](https://nisp.emass.apps.mil/Content/Help/jobaids/eMASS_OT_NewUser_Job_Aid.pdf) an API key with the eMASS development team prior to accessing the site for the first time. The eMASS REST API  requires a client certificate (SSL/TLS, DoD PKI only). Use the `Registration` POST endpoint to register the client certificate. The endpoint call returns the user `api-key`.</br></br>  Every call to the eMASS REST API will require the use of the agreed upon public key certificate and API key.  The API key must be provided in the request header for all endpoint calls (api-key). If the service receives an untrusted certificate or API key, a 401 error response code will be returned along with an error message.</br></br>  <strong>Available Request Headers</strong></br> <table>   <tr>     <th align=left>key</th>     <th align=left>Example Value</th>     <th align=left>Description</th>   </tr>   <tr>     <td>`api-key`</td>     <td>api-key-provided-by-emass</td>     <td>This API key must be provided in the request header for all endpoint calls</td>   </tr>   <tr>     <td>`user-uid`</td>     <td>USER.UID.KEY</td>     <td>This User unique identifier key must be provided in the request header for all PUT, POST, and DELETE endpoint calls</td>   </tr>   <tr>     <td></td><td></td>     <td>       Note: For DoD users this is the DoD ID Number (EIDIPI) on their DoD CAC     </td>   </tr> </table>  </br><strong>Approve API Client for Actionable Requests</strong></br> Users are required to log-in to eMASS and grant permissions for a client to update data within eMASS on their behalf. This is only required for actionable requests (PUT, POST, DELETE). The Registration Endpoint and all GET requests can be accessed without completing this process with the correct permissions. Please note that leaving a field parameter blank (for PUT/POST requests) has the potential to clear information in the active eMASS records.  To establish an account with eMASS and/or acquire an api-key/user-uid, contact one of the listed POC:
 *
 * The version of the OpenAPI document: v3.12
 * Contact: disa.meade.id.mbx.emass-tier-iii-support@mail.mil
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetSystemWorkflowInstancesStatusEnum = exports.WorkflowInstancesApi = exports.WorkflowInstancesApiFactory = exports.WorkflowInstancesApiFp = exports.WorkflowInstancesApiAxiosParamCreator = exports.WorkflowDefinitionsApi = exports.WorkflowDefinitionsApiFactory = exports.WorkflowDefinitionsApiFp = exports.WorkflowDefinitionsApiAxiosParamCreator = exports.UsersDashboardApi = exports.UsersDashboardApiFactory = exports.UsersDashboardApiFp = exports.UsersDashboardApiAxiosParamCreator = exports.ThreatRisksDashboardsApi = exports.ThreatRisksDashboardsApiFactory = exports.ThreatRisksDashboardsApiFp = exports.ThreatRisksDashboardsApiAxiosParamCreator = exports.TestResultsApi = exports.TestResultsApiFactory = exports.TestResultsApiFp = exports.TestResultsApiAxiosParamCreator = exports.TestApi = exports.TestApiFactory = exports.TestApiFp = exports.TestApiAxiosParamCreator = exports.GetSystemsPolicyEnum = exports.GetSystemPolicyEnum = exports.SystemsApi = exports.SystemsApiFactory = exports.SystemsApiFp = exports.SystemsApiAxiosParamCreator = exports.SystemStatusDashboardApi = exports.SystemStatusDashboardApiFactory = exports.SystemStatusDashboardApiFp = exports.SystemStatusDashboardApiAxiosParamCreator = exports.GetSystemRolesByCategoryIdPolicyEnum = exports.GetSystemRolesByCategoryIdRoleCategoryEnum = exports.SystemRolesApi = exports.SystemRolesApiFactory = exports.SystemRolesApiFp = exports.SystemRolesApiAxiosParamCreator = exports.SystemPL109ReportingSummaryDashboardApi = exports.SystemPL109ReportingSummaryDashboardApiFactory = exports.SystemPL109ReportingSummaryDashboardApiFp = exports.SystemPL109ReportingSummaryDashboardApiAxiosParamCreator = exports.SystemCONMONIntegrationStatusDashboardApi = exports.SystemCONMONIntegrationStatusDashboardApiFactory = exports.SystemCONMONIntegrationStatusDashboardApiFp = exports.SystemCONMONIntegrationStatusDashboardApiAxiosParamCreator = exports.SystemAssociationsDashboardApi = exports.SystemAssociationsDashboardApiFactory = exports.SystemAssociationsDashboardApiFp = exports.SystemAssociationsDashboardApiAxiosParamCreator = exports.SystemAASummaryDashboardApi = exports.SystemAASummaryDashboardApiFactory = exports.SystemAASummaryDashboardApiFp = exports.SystemAASummaryDashboardApiAxiosParamCreator = exports.SystemA20SummaryDashboardApi = exports.SystemA20SummaryDashboardApiFactory = exports.SystemA20SummaryDashboardApiFp = exports.SystemA20SummaryDashboardApiAxiosParamCreator = exports.StaticCodeScansApi = exports.StaticCodeScansApiFactory = exports.StaticCodeScansApiFp = exports.StaticCodeScansApiAxiosParamCreator = exports.SoftwareBaselineDashboardsApi = exports.SoftwareBaselineDashboardsApiFactory = exports.SoftwareBaselineDashboardsApiFp = exports.SoftwareBaselineDashboardsApiAxiosParamCreator = exports.RegistrationApi = exports.RegistrationApiFactory = exports.RegistrationApiFp = exports.RegistrationApiAxiosParamCreator = exports.PrivacyComplianceDashboardsApi = exports.PrivacyComplianceDashboardsApiFactory = exports.PrivacyComplianceDashboardsApiFp = exports.PrivacyComplianceDashboardsApiAxiosParamCreator = exports.PortsAndProtocolsDashboardsApi = exports.PortsAndProtocolsDashboardsApiFactory = exports.PortsAndProtocolsDashboardsApiFp = exports.PortsAndProtocolsDashboardsApiAxiosParamCreator = exports.POAMApi = exports.POAMApiFactory = exports.POAMApiFp = exports.POAMApiAxiosParamCreator = exports.PACApi = exports.PACApiFactory = exports.PACApiFp = exports.PACApiAxiosParamCreator = exports.MilestonesApi = exports.MilestonesApiFactory = exports.MilestonesApiFp = exports.MilestonesApiAxiosParamCreator = exports.HardwareBaselineDashboardsApi = exports.HardwareBaselineDashboardsApiFactory = exports.HardwareBaselineDashboardsApiFp = exports.HardwareBaselineDashboardsApiAxiosParamCreator = exports.FISMAInventorySummaryDashboardsApi = exports.FISMAInventorySummaryDashboardsApiFactory = exports.FISMAInventorySummaryDashboardsApiFp = exports.FISMAInventorySummaryDashboardsApiAxiosParamCreator = exports.EnterpriseVulnerabilityDashboardsApi = exports.EnterpriseVulnerabilityDashboardsApiFactory = exports.EnterpriseVulnerabilityDashboardsApiFp = exports.EnterpriseVulnerabilityDashboardsApiAxiosParamCreator = exports.EnterpriseTermsConditionsDashboardsApi = exports.EnterpriseTermsConditionsDashboardsApiFactory = exports.EnterpriseTermsConditionsDashboardsApiFp = exports.EnterpriseTermsConditionsDashboardsApiAxiosParamCreator = exports.EnterpriseSensorBasedSoftwareResourcesDashboardsApi = exports.EnterpriseSensorBasedSoftwareResourcesDashboardsApiFactory = exports.EnterpriseSensorBasedSoftwareResourcesDashboardsApiFp = exports.EnterpriseSensorBasedSoftwareResourcesDashboardsApiAxiosParamCreator = exports.EnterpriseSensorBasedHardwareResourcesDashboardsApi = exports.EnterpriseSensorBasedHardwareResourcesDashboardsApiFactory = exports.EnterpriseSensorBasedHardwareResourcesDashboardsApiFp = exports.EnterpriseSensorBasedHardwareResourcesDashboardsApiAxiosParamCreator = exports.EnterpriseSecurityControlsDashboardsApi = exports.EnterpriseSecurityControlsDashboardsApiFactory = exports.EnterpriseSecurityControlsDashboardsApiFp = exports.EnterpriseSecurityControlsDashboardsApiAxiosParamCreator = exports.EnterprisePOAMDashboardsApi = exports.EnterprisePOAMDashboardsApiFactory = exports.EnterprisePOAMDashboardsApiFp = exports.EnterprisePOAMDashboardsApiAxiosParamCreator = exports.EnterpriseArtifactsDashboardsApi = exports.EnterpriseArtifactsDashboardsApiFactory = exports.EnterpriseArtifactsDashboardsApiFp = exports.EnterpriseArtifactsDashboardsApiAxiosParamCreator = exports.ControlsApi = exports.ControlsApiFactory = exports.ControlsApiFp = exports.ControlsApiAxiosParamCreator = exports.ContainerScanResultsApi = exports.ContainerScanResultsApiFactory = exports.ContainerScanResultsApiFp = exports.ContainerScanResultsApiAxiosParamCreator = exports.CloudResourceResultsApi = exports.CloudResourceResultsApiFactory = exports.CloudResourceResultsApiFp = exports.CloudResourceResultsApiAxiosParamCreator = exports.CMMCAssessmentsApi = exports.CMMCAssessmentsApiFactory = exports.CMMCAssessmentsApiFp = exports.CMMCAssessmentsApiAxiosParamCreator = exports.CACApi = exports.CACApiFactory = exports.CACApiFp = exports.CACApiAxiosParamCreator = exports.ArtifactsExportApi = exports.ArtifactsExportApiFactory = exports.ArtifactsExportApiFp = exports.ArtifactsExportApiAxiosParamCreator = exports.AddArtifactsBySystemIdCategoryEnum = exports.AddArtifactsBySystemIdTypeEnum = exports.ArtifactsApi = exports.ArtifactsApiFactory = exports.ArtifactsApiFp = exports.ArtifactsApiAxiosParamCreator = exports.TestResultsGetComplianceStatusEnum = exports.SystemsAtcStatusEnum = exports.SystemsCloudTypeEnum = exports.SystemsCurrentRmfLifecycleStepEnum = exports.SystemsPiaStatusEnum = exports.SystemsImpactEnum = exports.SystemsDodConfidentialityEnum = exports.SystemsMacEnum = exports.SystemsAvailabilityEnum = exports.SystemsIntegrityEnum = exports.SystemsConfidentialityEnum = exports.SystemsPrimaryControlSetEnum = exports.SystemsSecurityPlanApprovalStatusEnum = exports.SystemsSystemTypeEnum = exports.SystemsRegistrationTypeEnum = exports.SystemsPolicyEnum = exports.StaticCodeApplicationPostRawSeverityEnum = exports.PoamGetResultingResidualRiskLevelAfterProposedMitigationsEnum = exports.PoamGetResidualRiskLevelEnum = exports.PoamGetImpactEnum = exports.PoamGetLikelihoodEnum = exports.PoamGetRelevanceOfThreatEnum = exports.PoamGetRawSeverityEnum = exports.PoamGetSeverityEnum = exports.PoamGetReviewStatusEnum = exports.PoamGetStatusEnum = exports.PacPostWorkflowEnum = exports.PacGetWorkflowEnum = exports.MilestonesGetReviewStatusEnum = exports.ControlsGetTestMethodEnum = exports.ControlsGetResidualRiskLevelEnum = exports.ControlsGetImpactEnum = exports.ControlsGetLikelihoodEnum = exports.ControlsGetRelevanceOfThreatEnum = exports.ControlsGetSeverityEnum = exports.ControlsGetSlcmMethodEnum = exports.ControlsGetSlcmFrequencyEnum = exports.ControlsGetControlDesignationEnum = exports.ControlsGetCommonControlProviderEnum = exports.ControlsGetImplementationStatusEnum = exports.CmmcGetOperationEnum = void 0;
var axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("./common");
// @ts-ignore
var base_1 = require("./base");
exports.CmmcGetOperationEnum = {
    Added: 'ADDED',
    Updated: 'UPDATED',
    Deleted: 'DELETED',
    UnknownDefaultOpenApi: '11184809'
};
exports.ControlsGetImplementationStatusEnum = {
    Planned: 'Planned',
    Implemented: 'Implemented',
    Inherited: 'Inherited',
    NotApplicable: 'Not Applicable',
    ManuallyInherited: 'Manually Inherited',
    UnknownDefaultOpenApi: '11184809'
};
exports.ControlsGetCommonControlProviderEnum = {
    DoD: 'DoD',
    Component: 'Component',
    Enclave: 'Enclave',
    UnknownDefaultOpenApi: '11184809'
};
exports.ControlsGetControlDesignationEnum = {
    Common: 'Common',
    SystemSpecific: 'System-Specific',
    Hybrid: 'Hybrid',
    UnknownDefaultOpenApi: '11184809'
};
exports.ControlsGetSlcmFrequencyEnum = {
    Constantly: 'Constantly',
    Daily: 'Daily',
    Weekly: 'Weekly',
    Monthly: 'Monthly',
    Quarterly: 'Quarterly',
    SemiAnnually: 'Semi-Annually',
    Annually: 'Annually',
    EveryTwoYears: 'Every Two Years',
    EveryThreeYears: 'Every Three Years',
    Undetermined: 'Undetermined',
    UnknownDefaultOpenApi: '11184809'
};
exports.ControlsGetSlcmMethodEnum = {
    Automated: 'Automated',
    SemiAutomated: 'Semi-Automated',
    Manual: 'Manual',
    Undetermined: 'Undetermined',
    UnknownDefaultOpenApi: '11184809'
};
exports.ControlsGetSeverityEnum = {
    VeryLow: 'Very Low',
    Low: 'Low',
    Moderate: 'Moderate',
    High: 'High',
    VeryHigh: 'Very High',
    UnknownDefaultOpenApi: '11184809'
};
exports.ControlsGetRelevanceOfThreatEnum = {
    VeryLow: 'Very Low',
    Low: 'Low',
    Moderate: 'Moderate',
    High: 'High',
    VeryHigh: 'Very High',
    UnknownDefaultOpenApi: '11184809'
};
exports.ControlsGetLikelihoodEnum = {
    VeryLow: 'Very Low',
    Low: 'Low',
    Moderate: 'Moderate',
    High: 'High',
    VeryHigh: 'Very High',
    UnknownDefaultOpenApi: '11184809'
};
exports.ControlsGetImpactEnum = {
    VeryLow: 'Very Low',
    Low: 'Low',
    Moderate: 'Moderate',
    High: 'High',
    VeryHigh: 'Very High',
    UnknownDefaultOpenApi: '11184809'
};
exports.ControlsGetResidualRiskLevelEnum = {
    VeryLow: 'Very Low',
    Low: 'Low',
    Moderate: 'Moderate',
    High: 'High',
    VeryHigh: 'Very High',
    UnknownDefaultOpenApi: '11184809'
};
exports.ControlsGetTestMethodEnum = {
    Test: 'Test',
    Interview: 'Interview',
    Examine: 'Examine',
    TestInterview: 'Test, Interview',
    TestExamine: 'Test, Examine',
    InterviewExamine: 'Interview, Examine',
    TestInterviewExamine: 'Test, Interview, Examine',
    UnknownDefaultOpenApi: '11184809'
};
exports.MilestonesGetReviewStatusEnum = {
    NotApproved: 'Not Approved',
    UnderReview: 'Under Review',
    Approved: 'Approved',
    UnknownDefaultOpenApi: '11184809'
};
exports.PacGetWorkflowEnum = {
    AssessAndAuthorize: 'Assess and Authorize',
    AssessOnly: 'Assess Only',
    SecurityPlanApproval: 'Security Plan Approval',
    UnknownDefaultOpenApi: '11184809'
};
exports.PacPostWorkflowEnum = {
    AssessAndAuthorize: 'Assess and Authorize',
    AssessOnly: 'Assess Only',
    SecurityPlanApproval: 'Security Plan Approval',
    UnknownDefaultOpenApi: '11184809'
};
exports.PoamGetStatusEnum = {
    Ongoing: 'Ongoing',
    RiskAccepted: 'Risk Accepted',
    Completed: 'Completed',
    NotApplicable: 'Not Applicable',
    Archived: 'Archived',
    UnknownDefaultOpenApi: '11184809'
};
exports.PoamGetReviewStatusEnum = {
    NotApproved: 'Not Approved',
    UnderReview: 'Under Review',
    Approved: 'Approved',
    UnknownDefaultOpenApi: '11184809'
};
exports.PoamGetSeverityEnum = {
    VeryLow: 'Very Low',
    Low: 'Low',
    Moderate: 'Moderate',
    High: 'High',
    VeryHigh: 'Very High',
    UnknownDefaultOpenApi: '11184809'
};
exports.PoamGetRawSeverityEnum = {
    I: 'I',
    Ii: 'II',
    Iii: 'III',
    UnknownDefaultOpenApi: '11184809'
};
exports.PoamGetRelevanceOfThreatEnum = {
    VeryLow: 'Very Low',
    Low: 'Low',
    Moderate: 'Moderate',
    High: 'High',
    VeryHigh: 'Very High',
    UnknownDefaultOpenApi: '11184809'
};
exports.PoamGetLikelihoodEnum = {
    VeryLow: 'Very Low',
    Low: 'Low',
    Moderate: 'Moderate',
    High: 'High',
    VeryHigh: 'Very High',
    UnknownDefaultOpenApi: '11184809'
};
exports.PoamGetImpactEnum = {
    VeryLow: 'Very Low',
    Low: 'Low',
    Moderate: 'Moderate',
    High: 'High',
    VeryHigh: 'Very High',
    UnknownDefaultOpenApi: '11184809'
};
exports.PoamGetResidualRiskLevelEnum = {
    VeryLow: 'Very Low',
    Low: 'Low',
    Moderate: 'Moderate',
    High: 'High',
    VeryHigh: 'Very High',
    UnknownDefaultOpenApi: '11184809'
};
exports.PoamGetResultingResidualRiskLevelAfterProposedMitigationsEnum = {
    VeryLow: 'Very Low',
    Low: 'Low',
    Moderate: 'Moderate',
    High: 'High',
    VeryHigh: 'Very High',
    UnknownDefaultOpenApi: '11184809'
};
exports.StaticCodeApplicationPostRawSeverityEnum = {
    Low: 'Low',
    Medium: 'Medium',
    Moderate: 'Moderate',
    High: 'High',
    Critical: 'Critical',
    UnknownDefaultOpenApi: '11184809'
};
exports.SystemsPolicyEnum = {
    Rmf: 'RMF',
    Diacap: 'DIACAP',
    UnknownDefaultOpenApi: '11184809'
};
exports.SystemsRegistrationTypeEnum = {
    AssessAndAuthorize: 'Assess and Authorize',
    AssessOnly: 'Assess Only',
    Guest: 'Guest',
    Regular: 'Regular',
    Functional: 'Functional',
    CloudServiceProvider: 'Cloud Service Provider',
    UnknownDefaultOpenApi: '11184809'
};
exports.SystemsSystemTypeEnum = {
    IsMajorApplication: 'IS Major Application',
    IsEnclave: 'IS Enclave',
    PlatformIt: 'Platform IT',
    PlatformItSystem: 'Platform IT System',
    PlatformItInterconnection: 'Platform IT Interconnection',
    AisApplication: 'AIS Application',
    OutsourcedItBasedProcessDoDControlled: 'Outsourced IT-Based Process (DoD-controlled)',
    Enclave: 'Enclave',
    OutsourcedItBasedProcessServiceProviderShared: 'Outsourced IT-Based Process (service provider shared)',
    UnknownDefaultOpenApi: '11184809'
};
exports.SystemsSecurityPlanApprovalStatusEnum = {
    Approved: 'Approved',
    NotYetApproved: 'Not Yet Approved',
    Denied: 'Denied',
    UnknownDefaultOpenApi: '11184809'
};
exports.SystemsPrimaryControlSetEnum = {
    NistSp80053Revision4: 'NIST SP 800-53 Revision 4',
    DoDi85002: 'DoDI 8500.2',
    UnknownDefaultOpenApi: '11184809'
};
exports.SystemsConfidentialityEnum = {
    High: 'High',
    Moderate: 'Moderate',
    Low: 'Low',
    UnknownDefaultOpenApi: '11184809'
};
exports.SystemsIntegrityEnum = {
    High: 'High',
    Moderate: 'Moderate',
    Low: 'Low',
    UnknownDefaultOpenApi: '11184809'
};
exports.SystemsAvailabilityEnum = {
    High: 'High',
    Moderate: 'Moderate',
    Low: 'Low',
    UnknownDefaultOpenApi: '11184809'
};
exports.SystemsMacEnum = {
    I: 'I',
    Ii: 'II',
    Iii: 'III',
    UnknownDefaultOpenApi: '11184809'
};
exports.SystemsDodConfidentialityEnum = {
    Public: 'Public',
    Sensitive: 'Sensitive',
    Classified: 'Classified',
    UnknownDefaultOpenApi: '11184809'
};
exports.SystemsImpactEnum = {
    Low: 'Low',
    Moderate: 'Moderate',
    High: 'High',
    UnknownDefaultOpenApi: '11184809'
};
exports.SystemsPiaStatusEnum = {
    NotStarted: 'Not Started',
    InProgress: 'In Progress',
    Completed: 'Completed',
    UnknownDefaultOpenApi: '11184809'
};
exports.SystemsCurrentRmfLifecycleStepEnum = {
    _1Categorize: '1 - Categorize',
    _2Select: '2 - Select',
    _3Implement: '3 - Implement',
    _4Assess: '4 - Assess',
    _5Authorize: '5 - Authorize',
    _6Monitor: '6 - Monitor',
    UnknownDefaultOpenApi: '11184809'
};
exports.SystemsCloudTypeEnum = {
    Hybrid: 'Hybrid',
    Private: 'Private',
    Public: 'Public',
    UnknownDefaultOpenApi: '11184809'
};
exports.SystemsAtcStatusEnum = {
    AuthorityToConnectAtc: 'Authority to Connect (ATC)',
    DenialOfAuthorityToConnectDatc: 'Denial of Authority to Connect (DATC)',
    NotYetConnected: 'Not Yet Connected',
    Decommissioned: 'Decommissioned',
    UnknownDefaultOpenApi: '11184809'
};
exports.TestResultsGetComplianceStatusEnum = {
    Compliant: 'Compliant',
    NonCompliant: 'Non-Compliant',
    NotApplicable: 'Not Applicable',
    UnknownDefaultOpenApi: '11184809'
};
/**
 * ArtifactsApi - axios parameter creator
 * @export
 */
exports.ArtifactsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * <strong>Information</strong><br> The body of a request through the Artifacts POST endpoint accepts a single binary file. Two  Artifact POST methods are currently accepted: individual and bulk. Filename uniqueness within  an eMASS system will be enforced by the API for both methods. <br><br> For POST requests that should result in a single artifact, the request should include the file. <br><br> For POST requests that should result in the creation of many artifacts, the request should include  a single file with the extension \".zip\" only and the parameter isBulk should be set to true. This  .zip file should contain one or more files corresponding to existing artifacts or new artifacts that  will be created upon successful receipt. <br><br> Upon successful receipt of one or many artifacts, if a file is matched via filename to an artifact  existing within the application, the file associated with the artifact will be updated. If no artifact  is matched via filename to the application, a new artifact will be created with the following  default values. Any values not specified below will be null <ul>   <li>isTemplate: false</li>   <li>type: Other</li>   <li>category: Evidence</li> </ul> To update values other than the file itself, please submit a PUT request.<br>  <strong>Business Rules</strong><br> Artifact cannot be saved if the fields below exceed the following character limits: <ul>   <li>Filename - 1,000 characters</li>   <li>Name - 100 characters</li>   <li>Description - 10,000 characters</li>   <li>Reference Page Number - 50 characters</li> </ul> Artifact cannot be saved if the file does not have an allowable file extension/type:      .docx,.doc,.txt,.rtf,.xfdl,.xml,.mht,.mh,tml,.html,.htm,.pdf,.mdb,.accdb,.ppt,     .pptx,.xls,.xlsx,.csv,.log,.jpeg,.jpg,.tiff,.bmp,.tif,.png,.gif,.zip,.rar,.msg,     .vsd,.vsw,.vdx,.z{#},.ckl,.avi,.vsdx  Artifact version cannot be saved if an Artifact with the same file name (filename) already exist in the system.  Artifact cannot be saved if the file size exceeds 30MB.  Artifact cannot be saved if the following fields are missing data: <ul>   <li>Filename (filename)</li>   <li>Type (type)</li>   <li>Category (category)</li> </ul>  Artifact cannot be saved if the Last Review Date (`lastReviewedDate`) is set in the future.
         * @summary Add one or many artifacts in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {File} zipper
         * @param {boolean} [isBulk] **Is Bulk**: If no value is specified, the default is false, and an individual artifact file is expected.  When set to true, a .zip file is expected which  can contain multiple artifact files\&quot;
         * @param {boolean} [isTemplate]
         * @param {AddArtifactsBySystemIdTypeEnum} [type]
         * @param {AddArtifactsBySystemIdCategoryEnum} [category]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addArtifactsBySystemId: function (systemId, zipper, isBulk, isTemplate, type, category, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarFormParams, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            common_1.assertParamExists('addArtifactsBySystemId', 'systemId', systemId);
                            // verify required parameter 'zipper' is not null or undefined
                            common_1.assertParamExists('addArtifactsBySystemId', 'zipper', zipper);
                            localVarPath = "/api/systems/{systemId}/artifacts"
                                .replace("{" + "systemId" + "}", encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (isBulk !== undefined) {
                                localVarQueryParameter['isBulk'] = isBulk;
                            }
                            if (isTemplate !== undefined) {
                                localVarFormParams.append('isTemplate', isTemplate);
                            }
                            if (type !== undefined) {
                                localVarFormParams.append('type', type);
                            }
                            if (category !== undefined) {
                                localVarFormParams.append('category', category);
                            }
                            if (zipper !== undefined) {
                                localVarFormParams.append('Zipper', zipper);
                            }
                            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = localVarFormParams;
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Remove the Artifact(s) matching `systemId` path parameter and request body artifact(s) file name<br><br> <b>Note:</b> Multiple files can be deleted by providing multiple file names at the CL (comma delimited)  Example: --files file1.txt, file2.txt
         * @summary Remove one or many artifacts in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<ArtifactsRequestDeleteBodyInner>} artifactsRequestDeleteBodyInner Delete artifact files for the given System Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteArtifact: function (systemId, artifactsRequestDeleteBodyInner, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            common_1.assertParamExists('deleteArtifact', 'systemId', systemId);
                            // verify required parameter 'artifactsRequestDeleteBodyInner' is not null or undefined
                            common_1.assertParamExists('deleteArtifact', 'artifactsRequestDeleteBodyInner', artifactsRequestDeleteBodyInner);
                            localVarPath = "/api/systems/{systemId}/artifacts"
                                .replace("{" + "systemId" + "}", encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(artifactsRequestDeleteBodyInner, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Returns selected artifacts matching parameters to include the file name containing the artifacts.
         * @summary Get one or many artifacts in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} [filename] **File Name**: The file name (to include file-extension).
         * @param {string} [controlAcronyms] **Control Acronym**: Filter query by given system acronym (single value or comma separated).
         * @param {string} [assessmentProcedures] **Assessment Procedure**: Filter query by given Security Control Assessment Procedure (single value or comma separated).
         * @param {string} [ccis] **CCI System**: Filter query by Control Correlation Identifiers (CCIs) (single value or comma separated).
         * @param {boolean} [systemOnly] **Systems Only**: Indicates that only system(s) information is retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemArtifacts: function (systemId, filename, controlAcronyms, assessmentProcedures, ccis, systemOnly, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            common_1.assertParamExists('getSystemArtifacts', 'systemId', systemId);
                            localVarPath = "/api/systems/{systemId}/artifacts"
                                .replace("{" + "systemId" + "}", encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (filename !== undefined) {
                                localVarQueryParameter['filename'] = filename;
                            }
                            if (controlAcronyms !== undefined) {
                                localVarQueryParameter['controlAcronyms'] = controlAcronyms;
                            }
                            if (assessmentProcedures !== undefined) {
                                localVarQueryParameter['assessmentProcedures'] = assessmentProcedures;
                            }
                            if (ccis !== undefined) {
                                localVarQueryParameter['ccis'] = ccis;
                            }
                            if (systemOnly !== undefined) {
                                localVarQueryParameter['systemOnly'] = systemOnly;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Updates an artifact for given `systemId` path parameter<br><br>  **Request Body Required Fields** - `filename` - `isTemplate` - `type` - `category`  <strong>Information</strong><br> The PUT request will replace all existing data with the field/value combinations included in the request body.   If any fields are not included, the absent fields will become null.     The fields `name` and `isTemplate` are non-nullable fields. If not specified in the PUT command they will default to the following:   - `name=filename`   - `isTemplate=false`    Also, note that one-to-many fields (`controls` and `ccis`) will also be replaced with the values specified in the PUT.  If existing `control or cci` mappings exist in eMASS, the values in the PUT will not append, but  rather replace all existing control and cci mappings with the values in the request body.
         * @summary Update one or many artifacts in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody See &#x60;information&#x60; above for additional instructions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateArtifactBySystemId: function (systemId, requestBody, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            common_1.assertParamExists('updateArtifactBySystemId', 'systemId', systemId);
                            // verify required parameter 'requestBody' is not null or undefined
                            common_1.assertParamExists('updateArtifactBySystemId', 'requestBody', requestBody);
                            localVarPath = "/api/systems/{systemId}/artifacts"
                                .replace("{" + "systemId" + "}", encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * ArtifactsApi - functional programming interface
 * @export
 */
exports.ArtifactsApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.ArtifactsApiAxiosParamCreator(configuration);
    return {
        /**
         * <strong>Information</strong><br> The body of a request through the Artifacts POST endpoint accepts a single binary file. Two  Artifact POST methods are currently accepted: individual and bulk. Filename uniqueness within  an eMASS system will be enforced by the API for both methods. <br><br> For POST requests that should result in a single artifact, the request should include the file. <br><br> For POST requests that should result in the creation of many artifacts, the request should include  a single file with the extension \".zip\" only and the parameter isBulk should be set to true. This  .zip file should contain one or more files corresponding to existing artifacts or new artifacts that  will be created upon successful receipt. <br><br> Upon successful receipt of one or many artifacts, if a file is matched via filename to an artifact  existing within the application, the file associated with the artifact will be updated. If no artifact  is matched via filename to the application, a new artifact will be created with the following  default values. Any values not specified below will be null <ul>   <li>isTemplate: false</li>   <li>type: Other</li>   <li>category: Evidence</li> </ul> To update values other than the file itself, please submit a PUT request.<br>  <strong>Business Rules</strong><br> Artifact cannot be saved if the fields below exceed the following character limits: <ul>   <li>Filename - 1,000 characters</li>   <li>Name - 100 characters</li>   <li>Description - 10,000 characters</li>   <li>Reference Page Number - 50 characters</li> </ul> Artifact cannot be saved if the file does not have an allowable file extension/type:      .docx,.doc,.txt,.rtf,.xfdl,.xml,.mht,.mh,tml,.html,.htm,.pdf,.mdb,.accdb,.ppt,     .pptx,.xls,.xlsx,.csv,.log,.jpeg,.jpg,.tiff,.bmp,.tif,.png,.gif,.zip,.rar,.msg,     .vsd,.vsw,.vdx,.z{#},.ckl,.avi,.vsdx  Artifact version cannot be saved if an Artifact with the same file name (filename) already exist in the system.  Artifact cannot be saved if the file size exceeds 30MB.  Artifact cannot be saved if the following fields are missing data: <ul>   <li>Filename (filename)</li>   <li>Type (type)</li>   <li>Category (category)</li> </ul>  Artifact cannot be saved if the Last Review Date (`lastReviewedDate`) is set in the future.
         * @summary Add one or many artifacts in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {File} zipper
         * @param {boolean} [isBulk] **Is Bulk**: If no value is specified, the default is false, and an individual artifact file is expected.  When set to true, a .zip file is expected which  can contain multiple artifact files\&quot;
         * @param {boolean} [isTemplate]
         * @param {AddArtifactsBySystemIdTypeEnum} [type]
         * @param {AddArtifactsBySystemIdCategoryEnum} [category]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addArtifactsBySystemId: function (systemId, zipper, isBulk, isTemplate, type, category, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addArtifactsBySystemId(systemId, zipper, isBulk, isTemplate, type, category, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Remove the Artifact(s) matching `systemId` path parameter and request body artifact(s) file name<br><br> <b>Note:</b> Multiple files can be deleted by providing multiple file names at the CL (comma delimited)  Example: --files file1.txt, file2.txt
         * @summary Remove one or many artifacts in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<ArtifactsRequestDeleteBodyInner>} artifactsRequestDeleteBodyInner Delete artifact files for the given System Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteArtifact: function (systemId, artifactsRequestDeleteBodyInner, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteArtifact(systemId, artifactsRequestDeleteBodyInner, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns selected artifacts matching parameters to include the file name containing the artifacts.
         * @summary Get one or many artifacts in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} [filename] **File Name**: The file name (to include file-extension).
         * @param {string} [controlAcronyms] **Control Acronym**: Filter query by given system acronym (single value or comma separated).
         * @param {string} [assessmentProcedures] **Assessment Procedure**: Filter query by given Security Control Assessment Procedure (single value or comma separated).
         * @param {string} [ccis] **CCI System**: Filter query by Control Correlation Identifiers (CCIs) (single value or comma separated).
         * @param {boolean} [systemOnly] **Systems Only**: Indicates that only system(s) information is retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemArtifacts: function (systemId, filename, controlAcronyms, assessmentProcedures, ccis, systemOnly, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemArtifacts(systemId, filename, controlAcronyms, assessmentProcedures, ccis, systemOnly, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Updates an artifact for given `systemId` path parameter<br><br>  **Request Body Required Fields** - `filename` - `isTemplate` - `type` - `category`  <strong>Information</strong><br> The PUT request will replace all existing data with the field/value combinations included in the request body.   If any fields are not included, the absent fields will become null.     The fields `name` and `isTemplate` are non-nullable fields. If not specified in the PUT command they will default to the following:   - `name=filename`   - `isTemplate=false`    Also, note that one-to-many fields (`controls` and `ccis`) will also be replaced with the values specified in the PUT.  If existing `control or cci` mappings exist in eMASS, the values in the PUT will not append, but  rather replace all existing control and cci mappings with the values in the request body.
         * @summary Update one or many artifacts in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody See &#x60;information&#x60; above for additional instructions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateArtifactBySystemId: function (systemId, requestBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateArtifactBySystemId(systemId, requestBody, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * ArtifactsApi - factory interface
 * @export
 */
exports.ArtifactsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.ArtifactsApiFp(configuration);
    return {
        /**
         * <strong>Information</strong><br> The body of a request through the Artifacts POST endpoint accepts a single binary file. Two  Artifact POST methods are currently accepted: individual and bulk. Filename uniqueness within  an eMASS system will be enforced by the API for both methods. <br><br> For POST requests that should result in a single artifact, the request should include the file. <br><br> For POST requests that should result in the creation of many artifacts, the request should include  a single file with the extension \".zip\" only and the parameter isBulk should be set to true. This  .zip file should contain one or more files corresponding to existing artifacts or new artifacts that  will be created upon successful receipt. <br><br> Upon successful receipt of one or many artifacts, if a file is matched via filename to an artifact  existing within the application, the file associated with the artifact will be updated. If no artifact  is matched via filename to the application, a new artifact will be created with the following  default values. Any values not specified below will be null <ul>   <li>isTemplate: false</li>   <li>type: Other</li>   <li>category: Evidence</li> </ul> To update values other than the file itself, please submit a PUT request.<br>  <strong>Business Rules</strong><br> Artifact cannot be saved if the fields below exceed the following character limits: <ul>   <li>Filename - 1,000 characters</li>   <li>Name - 100 characters</li>   <li>Description - 10,000 characters</li>   <li>Reference Page Number - 50 characters</li> </ul> Artifact cannot be saved if the file does not have an allowable file extension/type:      .docx,.doc,.txt,.rtf,.xfdl,.xml,.mht,.mh,tml,.html,.htm,.pdf,.mdb,.accdb,.ppt,     .pptx,.xls,.xlsx,.csv,.log,.jpeg,.jpg,.tiff,.bmp,.tif,.png,.gif,.zip,.rar,.msg,     .vsd,.vsw,.vdx,.z{#},.ckl,.avi,.vsdx  Artifact version cannot be saved if an Artifact with the same file name (filename) already exist in the system.  Artifact cannot be saved if the file size exceeds 30MB.  Artifact cannot be saved if the following fields are missing data: <ul>   <li>Filename (filename)</li>   <li>Type (type)</li>   <li>Category (category)</li> </ul>  Artifact cannot be saved if the Last Review Date (`lastReviewedDate`) is set in the future.
         * @summary Add one or many artifacts in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {File} zipper
         * @param {boolean} [isBulk] **Is Bulk**: If no value is specified, the default is false, and an individual artifact file is expected.  When set to true, a .zip file is expected which  can contain multiple artifact files\&quot;
         * @param {boolean} [isTemplate]
         * @param {AddArtifactsBySystemIdTypeEnum} [type]
         * @param {AddArtifactsBySystemIdCategoryEnum} [category]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addArtifactsBySystemId: function (systemId, zipper, isBulk, isTemplate, type, category, options) {
            return localVarFp.addArtifactsBySystemId(systemId, zipper, isBulk, isTemplate, type, category, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Remove the Artifact(s) matching `systemId` path parameter and request body artifact(s) file name<br><br> <b>Note:</b> Multiple files can be deleted by providing multiple file names at the CL (comma delimited)  Example: --files file1.txt, file2.txt
         * @summary Remove one or many artifacts in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<ArtifactsRequestDeleteBodyInner>} artifactsRequestDeleteBodyInner Delete artifact files for the given System Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteArtifact: function (systemId, artifactsRequestDeleteBodyInner, options) {
            return localVarFp.deleteArtifact(systemId, artifactsRequestDeleteBodyInner, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns selected artifacts matching parameters to include the file name containing the artifacts.
         * @summary Get one or many artifacts in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} [filename] **File Name**: The file name (to include file-extension).
         * @param {string} [controlAcronyms] **Control Acronym**: Filter query by given system acronym (single value or comma separated).
         * @param {string} [assessmentProcedures] **Assessment Procedure**: Filter query by given Security Control Assessment Procedure (single value or comma separated).
         * @param {string} [ccis] **CCI System**: Filter query by Control Correlation Identifiers (CCIs) (single value or comma separated).
         * @param {boolean} [systemOnly] **Systems Only**: Indicates that only system(s) information is retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemArtifacts: function (systemId, filename, controlAcronyms, assessmentProcedures, ccis, systemOnly, options) {
            return localVarFp.getSystemArtifacts(systemId, filename, controlAcronyms, assessmentProcedures, ccis, systemOnly, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Updates an artifact for given `systemId` path parameter<br><br>  **Request Body Required Fields** - `filename` - `isTemplate` - `type` - `category`  <strong>Information</strong><br> The PUT request will replace all existing data with the field/value combinations included in the request body.   If any fields are not included, the absent fields will become null.     The fields `name` and `isTemplate` are non-nullable fields. If not specified in the PUT command they will default to the following:   - `name=filename`   - `isTemplate=false`    Also, note that one-to-many fields (`controls` and `ccis`) will also be replaced with the values specified in the PUT.  If existing `control or cci` mappings exist in eMASS, the values in the PUT will not append, but  rather replace all existing control and cci mappings with the values in the request body.
         * @summary Update one or many artifacts in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody See &#x60;information&#x60; above for additional instructions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateArtifactBySystemId: function (systemId, requestBody, options) {
            return localVarFp.updateArtifactBySystemId(systemId, requestBody, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * ArtifactsApi - object-oriented interface
 * @export
 * @class ArtifactsApi
 * @extends {BaseAPI}
 */
var ArtifactsApi = /** @class */ (function (_super) {
    __extends(ArtifactsApi, _super);
    function ArtifactsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * <strong>Information</strong><br> The body of a request through the Artifacts POST endpoint accepts a single binary file. Two  Artifact POST methods are currently accepted: individual and bulk. Filename uniqueness within  an eMASS system will be enforced by the API for both methods. <br><br> For POST requests that should result in a single artifact, the request should include the file. <br><br> For POST requests that should result in the creation of many artifacts, the request should include  a single file with the extension \".zip\" only and the parameter isBulk should be set to true. This  .zip file should contain one or more files corresponding to existing artifacts or new artifacts that  will be created upon successful receipt. <br><br> Upon successful receipt of one or many artifacts, if a file is matched via filename to an artifact  existing within the application, the file associated with the artifact will be updated. If no artifact  is matched via filename to the application, a new artifact will be created with the following  default values. Any values not specified below will be null <ul>   <li>isTemplate: false</li>   <li>type: Other</li>   <li>category: Evidence</li> </ul> To update values other than the file itself, please submit a PUT request.<br>  <strong>Business Rules</strong><br> Artifact cannot be saved if the fields below exceed the following character limits: <ul>   <li>Filename - 1,000 characters</li>   <li>Name - 100 characters</li>   <li>Description - 10,000 characters</li>   <li>Reference Page Number - 50 characters</li> </ul> Artifact cannot be saved if the file does not have an allowable file extension/type:      .docx,.doc,.txt,.rtf,.xfdl,.xml,.mht,.mh,tml,.html,.htm,.pdf,.mdb,.accdb,.ppt,     .pptx,.xls,.xlsx,.csv,.log,.jpeg,.jpg,.tiff,.bmp,.tif,.png,.gif,.zip,.rar,.msg,     .vsd,.vsw,.vdx,.z{#},.ckl,.avi,.vsdx  Artifact version cannot be saved if an Artifact with the same file name (filename) already exist in the system.  Artifact cannot be saved if the file size exceeds 30MB.  Artifact cannot be saved if the following fields are missing data: <ul>   <li>Filename (filename)</li>   <li>Type (type)</li>   <li>Category (category)</li> </ul>  Artifact cannot be saved if the Last Review Date (`lastReviewedDate`) is set in the future.
     * @summary Add one or many artifacts in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {File} zipper
     * @param {boolean} [isBulk] **Is Bulk**: If no value is specified, the default is false, and an individual artifact file is expected.  When set to true, a .zip file is expected which  can contain multiple artifact files\&quot;
     * @param {boolean} [isTemplate]
     * @param {AddArtifactsBySystemIdTypeEnum} [type]
     * @param {AddArtifactsBySystemIdCategoryEnum} [category]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtifactsApi
     */
    ArtifactsApi.prototype.addArtifactsBySystemId = function (systemId, zipper, isBulk, isTemplate, type, category, options) {
        var _this = this;
        return exports.ArtifactsApiFp(this.configuration).addArtifactsBySystemId(systemId, zipper, isBulk, isTemplate, type, category, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Remove the Artifact(s) matching `systemId` path parameter and request body artifact(s) file name<br><br> <b>Note:</b> Multiple files can be deleted by providing multiple file names at the CL (comma delimited)  Example: --files file1.txt, file2.txt
     * @summary Remove one or many artifacts in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {Array<ArtifactsRequestDeleteBodyInner>} artifactsRequestDeleteBodyInner Delete artifact files for the given System Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtifactsApi
     */
    ArtifactsApi.prototype.deleteArtifact = function (systemId, artifactsRequestDeleteBodyInner, options) {
        var _this = this;
        return exports.ArtifactsApiFp(this.configuration).deleteArtifact(systemId, artifactsRequestDeleteBodyInner, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns selected artifacts matching parameters to include the file name containing the artifacts.
     * @summary Get one or many artifacts in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {string} [filename] **File Name**: The file name (to include file-extension).
     * @param {string} [controlAcronyms] **Control Acronym**: Filter query by given system acronym (single value or comma separated).
     * @param {string} [assessmentProcedures] **Assessment Procedure**: Filter query by given Security Control Assessment Procedure (single value or comma separated).
     * @param {string} [ccis] **CCI System**: Filter query by Control Correlation Identifiers (CCIs) (single value or comma separated).
     * @param {boolean} [systemOnly] **Systems Only**: Indicates that only system(s) information is retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtifactsApi
     */
    ArtifactsApi.prototype.getSystemArtifacts = function (systemId, filename, controlAcronyms, assessmentProcedures, ccis, systemOnly, options) {
        var _this = this;
        return exports.ArtifactsApiFp(this.configuration).getSystemArtifacts(systemId, filename, controlAcronyms, assessmentProcedures, ccis, systemOnly, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Updates an artifact for given `systemId` path parameter<br><br>  **Request Body Required Fields** - `filename` - `isTemplate` - `type` - `category`  <strong>Information</strong><br> The PUT request will replace all existing data with the field/value combinations included in the request body.   If any fields are not included, the absent fields will become null.     The fields `name` and `isTemplate` are non-nullable fields. If not specified in the PUT command they will default to the following:   - `name=filename`   - `isTemplate=false`    Also, note that one-to-many fields (`controls` and `ccis`) will also be replaced with the values specified in the PUT.  If existing `control or cci` mappings exist in eMASS, the values in the PUT will not append, but  rather replace all existing control and cci mappings with the values in the request body.
     * @summary Update one or many artifacts in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {Array<object>} requestBody See &#x60;information&#x60; above for additional instructions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtifactsApi
     */
    ArtifactsApi.prototype.updateArtifactBySystemId = function (systemId, requestBody, options) {
        var _this = this;
        return exports.ArtifactsApiFp(this.configuration).updateArtifactBySystemId(systemId, requestBody, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ArtifactsApi;
}(base_1.BaseAPI));
exports.ArtifactsApi = ArtifactsApi;
/**
 * @export
 */
exports.AddArtifactsBySystemIdTypeEnum = {
    Procedure: 'Procedure',
    Diagram: 'Diagram',
    Policy: 'Policy',
    Labor: 'Labor',
    Document: 'Document',
    Image: 'Image',
    Other: 'Other',
    ScanResult: 'Scan Result',
    AuditorReport: 'Auditor Report',
    UnknownDefaultOpenApi: '11184809'
};
/**
 * @export
 */
exports.AddArtifactsBySystemIdCategoryEnum = {
    ImplementationGuidance: 'Implementation Guidance',
    Evidence: 'Evidence',
    UnknownDefaultOpenApi: '11184809'
};
/**
 * ArtifactsExportApi - axios parameter creator
 * @export
 */
exports.ArtifactsExportApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * <strong>Sample Responce</strong><br>  Binary file associated with given filename.<br>  If `compress` parameter is specified, zip archive of binary file associated with given filename.
         * @summary Get the file of an artifact in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} filename **File Name**: The file name (to include file-extension).
         * @param {boolean} [compress] **Compress File**: Determines if returned file is compressed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemArtifactsExport: function (systemId, filename, compress, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            common_1.assertParamExists('getSystemArtifactsExport', 'systemId', systemId);
                            // verify required parameter 'filename' is not null or undefined
                            common_1.assertParamExists('getSystemArtifactsExport', 'filename', filename);
                            localVarPath = "/api/systems/{systemId}/artifacts-export"
                                .replace("{" + "systemId" + "}", encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (filename !== undefined) {
                                localVarQueryParameter['filename'] = filename;
                            }
                            if (compress !== undefined) {
                                localVarQueryParameter['compress'] = compress;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * ArtifactsExportApi - functional programming interface
 * @export
 */
exports.ArtifactsExportApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.ArtifactsExportApiAxiosParamCreator(configuration);
    return {
        /**
         * <strong>Sample Responce</strong><br>  Binary file associated with given filename.<br>  If `compress` parameter is specified, zip archive of binary file associated with given filename.
         * @summary Get the file of an artifact in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} filename **File Name**: The file name (to include file-extension).
         * @param {boolean} [compress] **Compress File**: Determines if returned file is compressed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemArtifactsExport: function (systemId, filename, compress, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemArtifactsExport(systemId, filename, compress, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * ArtifactsExportApi - factory interface
 * @export
 */
exports.ArtifactsExportApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.ArtifactsExportApiFp(configuration);
    return {
        /**
         * <strong>Sample Responce</strong><br>  Binary file associated with given filename.<br>  If `compress` parameter is specified, zip archive of binary file associated with given filename.
         * @summary Get the file of an artifact in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} filename **File Name**: The file name (to include file-extension).
         * @param {boolean} [compress] **Compress File**: Determines if returned file is compressed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemArtifactsExport: function (systemId, filename, compress, options) {
            return localVarFp.getSystemArtifactsExport(systemId, filename, compress, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * ArtifactsExportApi - object-oriented interface
 * @export
 * @class ArtifactsExportApi
 * @extends {BaseAPI}
 */
var ArtifactsExportApi = /** @class */ (function (_super) {
    __extends(ArtifactsExportApi, _super);
    function ArtifactsExportApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * <strong>Sample Responce</strong><br>  Binary file associated with given filename.<br>  If `compress` parameter is specified, zip archive of binary file associated with given filename.
     * @summary Get the file of an artifact in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {string} filename **File Name**: The file name (to include file-extension).
     * @param {boolean} [compress] **Compress File**: Determines if returned file is compressed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtifactsExportApi
     */
    ArtifactsExportApi.prototype.getSystemArtifactsExport = function (systemId, filename, compress, options) {
        var _this = this;
        return exports.ArtifactsExportApiFp(this.configuration).getSystemArtifactsExport(systemId, filename, compress, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ArtifactsExportApi;
}(base_1.BaseAPI));
exports.ArtifactsExportApi = ArtifactsExportApi;
/**
 * CACApi - axios parameter creator
 * @export
 */
exports.CACApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *  **Request Body Required Fields** - `controlAcronym` - `comments`  **Notes:** - Comments `comments` are not required at the first role of the CAC but are required at the second role of the CAC. Comments cannot exceed 10,000 characters.  - POST requests will only yield successful results if the control is currently sitting at the first role of the CAC. If the control is not currently sitting at the first role, then an error will be returned.
         * @summary Submit control to second role of CAC
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Add control(s) to second role of CAC
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSystemCac: function (systemId, requestBody, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            common_1.assertParamExists('addSystemCac', 'systemId', systemId);
                            // verify required parameter 'requestBody' is not null or undefined
                            common_1.assertParamExists('addSystemCac', 'requestBody', requestBody);
                            localVarPath = "/api/systems/{systemId}/approval/cac"
                                .replace("{" + "systemId" + "}", encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Returns the location of a system\'s package in the Control Approval Chain (CAC) for matching `systemId` path parameter
         * @summary Get location of one or many controls in CAC
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} [controlAcronyms] **Control Acronym**: Filter query by given system acronym (single value or comma separated).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemCac: function (systemId, controlAcronyms, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            common_1.assertParamExists('getSystemCac', 'systemId', systemId);
                            localVarPath = "/api/systems/{systemId}/approval/cac"
                                .replace("{" + "systemId" + "}", encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (controlAcronyms !== undefined) {
                                localVarQueryParameter['controlAcronyms'] = controlAcronyms;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * CACApi - functional programming interface
 * @export
 */
exports.CACApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.CACApiAxiosParamCreator(configuration);
    return {
        /**
         *  **Request Body Required Fields** - `controlAcronym` - `comments`  **Notes:** - Comments `comments` are not required at the first role of the CAC but are required at the second role of the CAC. Comments cannot exceed 10,000 characters.  - POST requests will only yield successful results if the control is currently sitting at the first role of the CAC. If the control is not currently sitting at the first role, then an error will be returned.
         * @summary Submit control to second role of CAC
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Add control(s) to second role of CAC
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSystemCac: function (systemId, requestBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addSystemCac(systemId, requestBody, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns the location of a system\'s package in the Control Approval Chain (CAC) for matching `systemId` path parameter
         * @summary Get location of one or many controls in CAC
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} [controlAcronyms] **Control Acronym**: Filter query by given system acronym (single value or comma separated).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemCac: function (systemId, controlAcronyms, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemCac(systemId, controlAcronyms, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * CACApi - factory interface
 * @export
 */
exports.CACApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.CACApiFp(configuration);
    return {
        /**
         *  **Request Body Required Fields** - `controlAcronym` - `comments`  **Notes:** - Comments `comments` are not required at the first role of the CAC but are required at the second role of the CAC. Comments cannot exceed 10,000 characters.  - POST requests will only yield successful results if the control is currently sitting at the first role of the CAC. If the control is not currently sitting at the first role, then an error will be returned.
         * @summary Submit control to second role of CAC
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Add control(s) to second role of CAC
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSystemCac: function (systemId, requestBody, options) {
            return localVarFp.addSystemCac(systemId, requestBody, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns the location of a system\'s package in the Control Approval Chain (CAC) for matching `systemId` path parameter
         * @summary Get location of one or many controls in CAC
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} [controlAcronyms] **Control Acronym**: Filter query by given system acronym (single value or comma separated).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemCac: function (systemId, controlAcronyms, options) {
            return localVarFp.getSystemCac(systemId, controlAcronyms, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * CACApi - object-oriented interface
 * @export
 * @class CACApi
 * @extends {BaseAPI}
 */
var CACApi = /** @class */ (function (_super) {
    __extends(CACApi, _super);
    function CACApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *  **Request Body Required Fields** - `controlAcronym` - `comments`  **Notes:** - Comments `comments` are not required at the first role of the CAC but are required at the second role of the CAC. Comments cannot exceed 10,000 characters.  - POST requests will only yield successful results if the control is currently sitting at the first role of the CAC. If the control is not currently sitting at the first role, then an error will be returned.
     * @summary Submit control to second role of CAC
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {Array<object>} requestBody Add control(s) to second role of CAC
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CACApi
     */
    CACApi.prototype.addSystemCac = function (systemId, requestBody, options) {
        var _this = this;
        return exports.CACApiFp(this.configuration).addSystemCac(systemId, requestBody, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns the location of a system\'s package in the Control Approval Chain (CAC) for matching `systemId` path parameter
     * @summary Get location of one or many controls in CAC
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {string} [controlAcronyms] **Control Acronym**: Filter query by given system acronym (single value or comma separated).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CACApi
     */
    CACApi.prototype.getSystemCac = function (systemId, controlAcronyms, options) {
        var _this = this;
        return exports.CACApiFp(this.configuration).getSystemCac(systemId, controlAcronyms, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return CACApi;
}(base_1.BaseAPI));
exports.CACApi = CACApi;
/**
 * CMMCAssessmentsApi - axios parameter creator
 * @export
 */
exports.CMMCAssessmentsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get all CMMC assessment after the given date `sinceDate` parameter. It is available to CMMC eMASS only.
         * @summary Get CMMC assessment information
         * @param {string} sinceDate **Date** CMMC date (Unix date format)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCmmcAssessments: function (sinceDate, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'sinceDate' is not null or undefined
                            common_1.assertParamExists('getCmmcAssessments', 'sinceDate', sinceDate);
                            localVarPath = "/api/cmmc-assessments";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (sinceDate !== undefined) {
                                localVarQueryParameter['sinceDate'] = sinceDate;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * CMMCAssessmentsApi - functional programming interface
 * @export
 */
exports.CMMCAssessmentsApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.CMMCAssessmentsApiAxiosParamCreator(configuration);
    return {
        /**
         * Get all CMMC assessment after the given date `sinceDate` parameter. It is available to CMMC eMASS only.
         * @summary Get CMMC assessment information
         * @param {string} sinceDate **Date** CMMC date (Unix date format)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCmmcAssessments: function (sinceDate, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getCmmcAssessments(sinceDate, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * CMMCAssessmentsApi - factory interface
 * @export
 */
exports.CMMCAssessmentsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.CMMCAssessmentsApiFp(configuration);
    return {
        /**
         * Get all CMMC assessment after the given date `sinceDate` parameter. It is available to CMMC eMASS only.
         * @summary Get CMMC assessment information
         * @param {string} sinceDate **Date** CMMC date (Unix date format)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCmmcAssessments: function (sinceDate, options) {
            return localVarFp.getCmmcAssessments(sinceDate, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * CMMCAssessmentsApi - object-oriented interface
 * @export
 * @class CMMCAssessmentsApi
 * @extends {BaseAPI}
 */
var CMMCAssessmentsApi = /** @class */ (function (_super) {
    __extends(CMMCAssessmentsApi, _super);
    function CMMCAssessmentsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get all CMMC assessment after the given date `sinceDate` parameter. It is available to CMMC eMASS only.
     * @summary Get CMMC assessment information
     * @param {string} sinceDate **Date** CMMC date (Unix date format)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CMMCAssessmentsApi
     */
    CMMCAssessmentsApi.prototype.getCmmcAssessments = function (sinceDate, options) {
        var _this = this;
        return exports.CMMCAssessmentsApiFp(this.configuration).getCmmcAssessments(sinceDate, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return CMMCAssessmentsApi;
}(base_1.BaseAPI));
exports.CMMCAssessmentsApi = CMMCAssessmentsApi;
/**
 * CloudResourceResultsApi - axios parameter creator
 * @export
 */
exports.CloudResourceResultsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Add cloud resources and their scan results in the assets module for a system `systemId`  **Request Body Required Fields** - `provider` - `resourceId` - `resourceName` - `resourceType` - Compliance Results Object Array `complianceResults`   - `cspPolicyDefinitionId`   - `isCompliant`   - `policyDefinitionTitle`  **Example Request Body Required Fields** ``` [    {      \"provider\": \"provide name\",     \"resourceId\": \"resource identification\",     \"resourceName\": \"resource name\",     \"resourceType\": \"resource type\",     \"complianceResults\": [        {          \"cspPolicyDefinitionId\": \"CSP policy definition identification\",         \"policyDefinitionTitle\": \"policy definition title\",         \"isCompliant\": [true or false]       }      ]    }  ] ```
         * @summary Add one or many cloud resources and their scan results
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Add cloud resources and their scan results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCloudResourcesBySystemId: function (systemId, requestBody, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            common_1.assertParamExists('addCloudResourcesBySystemId', 'systemId', systemId);
                            // verify required parameter 'requestBody' is not null or undefined
                            common_1.assertParamExists('addCloudResourcesBySystemId', 'requestBody', requestBody);
                            localVarPath = "/api/systems/{systemId}/cloud-resource-results"
                                .replace("{" + "systemId" + "}", encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Removes cloud resources and their scan results in the assets module for a system `systemId`
         * @summary Remove one or many cloud resources in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<CloudResourcesDeleteBodyInner>} cloudResourcesDeleteBodyInner Delete the given Cloud Resource Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCloudResources: function (systemId, cloudResourcesDeleteBodyInner, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            common_1.assertParamExists('deleteCloudResources', 'systemId', systemId);
                            // verify required parameter 'cloudResourcesDeleteBodyInner' is not null or undefined
                            common_1.assertParamExists('deleteCloudResources', 'cloudResourcesDeleteBodyInner', cloudResourcesDeleteBodyInner);
                            localVarPath = "/api/systems/{systemId}/cloud-resource-results"
                                .replace("{" + "systemId" + "}", encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(cloudResourcesDeleteBodyInner, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * CloudResourceResultsApi - functional programming interface
 * @export
 */
exports.CloudResourceResultsApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.CloudResourceResultsApiAxiosParamCreator(configuration);
    return {
        /**
         * Add cloud resources and their scan results in the assets module for a system `systemId`  **Request Body Required Fields** - `provider` - `resourceId` - `resourceName` - `resourceType` - Compliance Results Object Array `complianceResults`   - `cspPolicyDefinitionId`   - `isCompliant`   - `policyDefinitionTitle`  **Example Request Body Required Fields** ``` [    {      \"provider\": \"provide name\",     \"resourceId\": \"resource identification\",     \"resourceName\": \"resource name\",     \"resourceType\": \"resource type\",     \"complianceResults\": [        {          \"cspPolicyDefinitionId\": \"CSP policy definition identification\",         \"policyDefinitionTitle\": \"policy definition title\",         \"isCompliant\": [true or false]       }      ]    }  ] ```
         * @summary Add one or many cloud resources and their scan results
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Add cloud resources and their scan results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCloudResourcesBySystemId: function (systemId, requestBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addCloudResourcesBySystemId(systemId, requestBody, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Removes cloud resources and their scan results in the assets module for a system `systemId`
         * @summary Remove one or many cloud resources in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<CloudResourcesDeleteBodyInner>} cloudResourcesDeleteBodyInner Delete the given Cloud Resource Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCloudResources: function (systemId, cloudResourcesDeleteBodyInner, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteCloudResources(systemId, cloudResourcesDeleteBodyInner, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * CloudResourceResultsApi - factory interface
 * @export
 */
exports.CloudResourceResultsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.CloudResourceResultsApiFp(configuration);
    return {
        /**
         * Add cloud resources and their scan results in the assets module for a system `systemId`  **Request Body Required Fields** - `provider` - `resourceId` - `resourceName` - `resourceType` - Compliance Results Object Array `complianceResults`   - `cspPolicyDefinitionId`   - `isCompliant`   - `policyDefinitionTitle`  **Example Request Body Required Fields** ``` [    {      \"provider\": \"provide name\",     \"resourceId\": \"resource identification\",     \"resourceName\": \"resource name\",     \"resourceType\": \"resource type\",     \"complianceResults\": [        {          \"cspPolicyDefinitionId\": \"CSP policy definition identification\",         \"policyDefinitionTitle\": \"policy definition title\",         \"isCompliant\": [true or false]       }      ]    }  ] ```
         * @summary Add one or many cloud resources and their scan results
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Add cloud resources and their scan results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCloudResourcesBySystemId: function (systemId, requestBody, options) {
            return localVarFp.addCloudResourcesBySystemId(systemId, requestBody, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Removes cloud resources and their scan results in the assets module for a system `systemId`
         * @summary Remove one or many cloud resources in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<CloudResourcesDeleteBodyInner>} cloudResourcesDeleteBodyInner Delete the given Cloud Resource Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCloudResources: function (systemId, cloudResourcesDeleteBodyInner, options) {
            return localVarFp.deleteCloudResources(systemId, cloudResourcesDeleteBodyInner, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * CloudResourceResultsApi - object-oriented interface
 * @export
 * @class CloudResourceResultsApi
 * @extends {BaseAPI}
 */
var CloudResourceResultsApi = /** @class */ (function (_super) {
    __extends(CloudResourceResultsApi, _super);
    function CloudResourceResultsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Add cloud resources and their scan results in the assets module for a system `systemId`  **Request Body Required Fields** - `provider` - `resourceId` - `resourceName` - `resourceType` - Compliance Results Object Array `complianceResults`   - `cspPolicyDefinitionId`   - `isCompliant`   - `policyDefinitionTitle`  **Example Request Body Required Fields** ``` [    {      \"provider\": \"provide name\",     \"resourceId\": \"resource identification\",     \"resourceName\": \"resource name\",     \"resourceType\": \"resource type\",     \"complianceResults\": [        {          \"cspPolicyDefinitionId\": \"CSP policy definition identification\",         \"policyDefinitionTitle\": \"policy definition title\",         \"isCompliant\": [true or false]       }      ]    }  ] ```
     * @summary Add one or many cloud resources and their scan results
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {Array<object>} requestBody Add cloud resources and their scan results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudResourceResultsApi
     */
    CloudResourceResultsApi.prototype.addCloudResourcesBySystemId = function (systemId, requestBody, options) {
        var _this = this;
        return exports.CloudResourceResultsApiFp(this.configuration).addCloudResourcesBySystemId(systemId, requestBody, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Removes cloud resources and their scan results in the assets module for a system `systemId`
     * @summary Remove one or many cloud resources in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {Array<CloudResourcesDeleteBodyInner>} cloudResourcesDeleteBodyInner Delete the given Cloud Resource Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudResourceResultsApi
     */
    CloudResourceResultsApi.prototype.deleteCloudResources = function (systemId, cloudResourcesDeleteBodyInner, options) {
        var _this = this;
        return exports.CloudResourceResultsApiFp(this.configuration).deleteCloudResources(systemId, cloudResourcesDeleteBodyInner, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return CloudResourceResultsApi;
}(base_1.BaseAPI));
exports.CloudResourceResultsApi = CloudResourceResultsApi;
/**
 * ContainerScanResultsApi - axios parameter creator
 * @export
 */
exports.ContainerScanResultsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Add containers and their scan results in the assets module for a system `systemId`.  **Request Body Required Fields** - `containerId` - `containerName` - `time` - Bench Marks Object Array `benchmarks`   - `benchmark`   - Results Object Array `results`     - `ruleId`     - `status`     - `lastSeen`  **Example Request Body Required Fields** ``` [   {     \"containerId\": \"container identification\",     \"containerName\": \"container name\",     \"time\": Datetime of scan/result (1648217219),     \"benchmarks\": [       {          \"benchmark\": \"RHEL_8_STIG\",         \"results\": [            {              \"ruleId\": \"rule identification\",             \"status\": [Pass,Fail,Other,Not Reviewed,Not Checked,Not Applicable],             \"lastSeen\": Unix date format (1648217219)           }, {             \"ruleId\": \"rule identification\",             \"status\": [Pass,Fail,Other,Not Reviewed,Not Checked,Not Applicable],             \"lastSeen\": Unix date format (1648217219)           }         ]       }     ]   } ] ````
         * @summary Add one or many containers and their scan results
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Add containers and their scan results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addContainerSansBySystemId: function (systemId, requestBody, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            common_1.assertParamExists('addContainerSansBySystemId', 'systemId', systemId);
                            // verify required parameter 'requestBody' is not null or undefined
                            common_1.assertParamExists('addContainerSansBySystemId', 'requestBody', requestBody);
                            localVarPath = "/api/systems/{systemId}/container-scan-results"
                                .replace("{" + "systemId" + "}", encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Removes container scan resources and their scan results in the assets module for a system `systemId`
         * @summary Remove one or many containers in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<ContainerResourcesDeleteBodyInner>} containerResourcesDeleteBodyInner Delete the given Container Scan Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteContainerSans: function (systemId, containerResourcesDeleteBodyInner, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            common_1.assertParamExists('deleteContainerSans', 'systemId', systemId);
                            // verify required parameter 'containerResourcesDeleteBodyInner' is not null or undefined
                            common_1.assertParamExists('deleteContainerSans', 'containerResourcesDeleteBodyInner', containerResourcesDeleteBodyInner);
                            localVarPath = "/api/systems/{systemId}/container-scan-results"
                                .replace("{" + "systemId" + "}", encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(containerResourcesDeleteBodyInner, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * ContainerScanResultsApi - functional programming interface
 * @export
 */
exports.ContainerScanResultsApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.ContainerScanResultsApiAxiosParamCreator(configuration);
    return {
        /**
         * Add containers and their scan results in the assets module for a system `systemId`.  **Request Body Required Fields** - `containerId` - `containerName` - `time` - Bench Marks Object Array `benchmarks`   - `benchmark`   - Results Object Array `results`     - `ruleId`     - `status`     - `lastSeen`  **Example Request Body Required Fields** ``` [   {     \"containerId\": \"container identification\",     \"containerName\": \"container name\",     \"time\": Datetime of scan/result (1648217219),     \"benchmarks\": [       {          \"benchmark\": \"RHEL_8_STIG\",         \"results\": [            {              \"ruleId\": \"rule identification\",             \"status\": [Pass,Fail,Other,Not Reviewed,Not Checked,Not Applicable],             \"lastSeen\": Unix date format (1648217219)           }, {             \"ruleId\": \"rule identification\",             \"status\": [Pass,Fail,Other,Not Reviewed,Not Checked,Not Applicable],             \"lastSeen\": Unix date format (1648217219)           }         ]       }     ]   } ] ````
         * @summary Add one or many containers and their scan results
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Add containers and their scan results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addContainerSansBySystemId: function (systemId, requestBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addContainerSansBySystemId(systemId, requestBody, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Removes container scan resources and their scan results in the assets module for a system `systemId`
         * @summary Remove one or many containers in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<ContainerResourcesDeleteBodyInner>} containerResourcesDeleteBodyInner Delete the given Container Scan Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteContainerSans: function (systemId, containerResourcesDeleteBodyInner, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteContainerSans(systemId, containerResourcesDeleteBodyInner, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * ContainerScanResultsApi - factory interface
 * @export
 */
exports.ContainerScanResultsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.ContainerScanResultsApiFp(configuration);
    return {
        /**
         * Add containers and their scan results in the assets module for a system `systemId`.  **Request Body Required Fields** - `containerId` - `containerName` - `time` - Bench Marks Object Array `benchmarks`   - `benchmark`   - Results Object Array `results`     - `ruleId`     - `status`     - `lastSeen`  **Example Request Body Required Fields** ``` [   {     \"containerId\": \"container identification\",     \"containerName\": \"container name\",     \"time\": Datetime of scan/result (1648217219),     \"benchmarks\": [       {          \"benchmark\": \"RHEL_8_STIG\",         \"results\": [            {              \"ruleId\": \"rule identification\",             \"status\": [Pass,Fail,Other,Not Reviewed,Not Checked,Not Applicable],             \"lastSeen\": Unix date format (1648217219)           }, {             \"ruleId\": \"rule identification\",             \"status\": [Pass,Fail,Other,Not Reviewed,Not Checked,Not Applicable],             \"lastSeen\": Unix date format (1648217219)           }         ]       }     ]   } ] ````
         * @summary Add one or many containers and their scan results
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Add containers and their scan results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addContainerSansBySystemId: function (systemId, requestBody, options) {
            return localVarFp.addContainerSansBySystemId(systemId, requestBody, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Removes container scan resources and their scan results in the assets module for a system `systemId`
         * @summary Remove one or many containers in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<ContainerResourcesDeleteBodyInner>} containerResourcesDeleteBodyInner Delete the given Container Scan Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteContainerSans: function (systemId, containerResourcesDeleteBodyInner, options) {
            return localVarFp.deleteContainerSans(systemId, containerResourcesDeleteBodyInner, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * ContainerScanResultsApi - object-oriented interface
 * @export
 * @class ContainerScanResultsApi
 * @extends {BaseAPI}
 */
var ContainerScanResultsApi = /** @class */ (function (_super) {
    __extends(ContainerScanResultsApi, _super);
    function ContainerScanResultsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Add containers and their scan results in the assets module for a system `systemId`.  **Request Body Required Fields** - `containerId` - `containerName` - `time` - Bench Marks Object Array `benchmarks`   - `benchmark`   - Results Object Array `results`     - `ruleId`     - `status`     - `lastSeen`  **Example Request Body Required Fields** ``` [   {     \"containerId\": \"container identification\",     \"containerName\": \"container name\",     \"time\": Datetime of scan/result (1648217219),     \"benchmarks\": [       {          \"benchmark\": \"RHEL_8_STIG\",         \"results\": [            {              \"ruleId\": \"rule identification\",             \"status\": [Pass,Fail,Other,Not Reviewed,Not Checked,Not Applicable],             \"lastSeen\": Unix date format (1648217219)           }, {             \"ruleId\": \"rule identification\",             \"status\": [Pass,Fail,Other,Not Reviewed,Not Checked,Not Applicable],             \"lastSeen\": Unix date format (1648217219)           }         ]       }     ]   } ] ````
     * @summary Add one or many containers and their scan results
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {Array<object>} requestBody Add containers and their scan results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerScanResultsApi
     */
    ContainerScanResultsApi.prototype.addContainerSansBySystemId = function (systemId, requestBody, options) {
        var _this = this;
        return exports.ContainerScanResultsApiFp(this.configuration).addContainerSansBySystemId(systemId, requestBody, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Removes container scan resources and their scan results in the assets module for a system `systemId`
     * @summary Remove one or many containers in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {Array<ContainerResourcesDeleteBodyInner>} containerResourcesDeleteBodyInner Delete the given Container Scan Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerScanResultsApi
     */
    ContainerScanResultsApi.prototype.deleteContainerSans = function (systemId, containerResourcesDeleteBodyInner, options) {
        var _this = this;
        return exports.ContainerScanResultsApiFp(this.configuration).deleteContainerSans(systemId, containerResourcesDeleteBodyInner, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ContainerScanResultsApi;
}(base_1.BaseAPI));
exports.ContainerScanResultsApi = ContainerScanResultsApi;
/**
 * ControlsApi - axios parameter creator
 * @export
 */
exports.ControlsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Returns system control information for matching `systemId` path parameter
         * @summary Get control information in a system for one or many controls
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} [acronyms] **Acronym**: The system acronym(s) being queried (single value or comma delimited values).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemControls: function (systemId, acronyms, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            common_1.assertParamExists('getSystemControls', 'systemId', systemId);
                            localVarPath = "/api/systems/{systemId}/controls"
                                .replace("{" + "systemId" + "}", encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (acronyms !== undefined) {
                                localVarQueryParameter['acronyms'] = acronyms;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *  Update a Control for given `systemId`<br>  **Request Body Required Fields** - `acronym` - `responsibleEntities` - `controlDesignation` - `estimatedCompletionDate` - `implementationNarrative`  The following optional fields (plus the **Request Body Required Fields**) are required based on the Implementation Status `implementationStatus` value<br> | Value                    | Required Fields |--------------------------|--------------------------------------------------- | Planned  or Implemented  | `slcmCriticality`, `slcmFrequency`, `slcmMethod`, `slcmReporting`, `slcmTracking`, `slcmComments` | Not Applicable           | `naJustification` | Manually Inherited       | `commonControlProvider`, `slcmCriticality`, `slcmFrequency`, `slcmMethod`, `slcmReporting`, `slcmTracking`, `slcmComments`  If the Implementation Status `implementationStatus` value is `Inherited`, only the following fields can be updated:   - `controlDesignation`   - `commonnControlProvider`  **NOTES:** - Implementation Plan information cannot be saved if the these fields exceed 2,000 character limits:   - `naJustification`,`responsibleEntities`,`implementationNarrative`,`slcmCriticality`   - `slcmFrequency`,`slcmMethod`,`slcmReporting`,`slcmTracking`,`slcmComments` - Implementation Plan information cannot be updated if Security Control does not exist in the system record.
         * @summary Update control information in a system for one or many controls
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Update an existing control by Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateControlBySystemId: function (systemId, requestBody, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            common_1.assertParamExists('updateControlBySystemId', 'systemId', systemId);
                            // verify required parameter 'requestBody' is not null or undefined
                            common_1.assertParamExists('updateControlBySystemId', 'requestBody', requestBody);
                            localVarPath = "/api/systems/{systemId}/controls"
                                .replace("{" + "systemId" + "}", encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * ControlsApi - functional programming interface
 * @export
 */
exports.ControlsApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.ControlsApiAxiosParamCreator(configuration);
    return {
        /**
         * Returns system control information for matching `systemId` path parameter
         * @summary Get control information in a system for one or many controls
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} [acronyms] **Acronym**: The system acronym(s) being queried (single value or comma delimited values).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemControls: function (systemId, acronyms, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemControls(systemId, acronyms, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *  Update a Control for given `systemId`<br>  **Request Body Required Fields** - `acronym` - `responsibleEntities` - `controlDesignation` - `estimatedCompletionDate` - `implementationNarrative`  The following optional fields (plus the **Request Body Required Fields**) are required based on the Implementation Status `implementationStatus` value<br> | Value                    | Required Fields |--------------------------|--------------------------------------------------- | Planned  or Implemented  | `slcmCriticality`, `slcmFrequency`, `slcmMethod`, `slcmReporting`, `slcmTracking`, `slcmComments` | Not Applicable           | `naJustification` | Manually Inherited       | `commonControlProvider`, `slcmCriticality`, `slcmFrequency`, `slcmMethod`, `slcmReporting`, `slcmTracking`, `slcmComments`  If the Implementation Status `implementationStatus` value is `Inherited`, only the following fields can be updated:   - `controlDesignation`   - `commonnControlProvider`  **NOTES:** - Implementation Plan information cannot be saved if the these fields exceed 2,000 character limits:   - `naJustification`,`responsibleEntities`,`implementationNarrative`,`slcmCriticality`   - `slcmFrequency`,`slcmMethod`,`slcmReporting`,`slcmTracking`,`slcmComments` - Implementation Plan information cannot be updated if Security Control does not exist in the system record.
         * @summary Update control information in a system for one or many controls
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Update an existing control by Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateControlBySystemId: function (systemId, requestBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateControlBySystemId(systemId, requestBody, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * ControlsApi - factory interface
 * @export
 */
exports.ControlsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.ControlsApiFp(configuration);
    return {
        /**
         * Returns system control information for matching `systemId` path parameter
         * @summary Get control information in a system for one or many controls
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} [acronyms] **Acronym**: The system acronym(s) being queried (single value or comma delimited values).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemControls: function (systemId, acronyms, options) {
            return localVarFp.getSystemControls(systemId, acronyms, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *  Update a Control for given `systemId`<br>  **Request Body Required Fields** - `acronym` - `responsibleEntities` - `controlDesignation` - `estimatedCompletionDate` - `implementationNarrative`  The following optional fields (plus the **Request Body Required Fields**) are required based on the Implementation Status `implementationStatus` value<br> | Value                    | Required Fields |--------------------------|--------------------------------------------------- | Planned  or Implemented  | `slcmCriticality`, `slcmFrequency`, `slcmMethod`, `slcmReporting`, `slcmTracking`, `slcmComments` | Not Applicable           | `naJustification` | Manually Inherited       | `commonControlProvider`, `slcmCriticality`, `slcmFrequency`, `slcmMethod`, `slcmReporting`, `slcmTracking`, `slcmComments`  If the Implementation Status `implementationStatus` value is `Inherited`, only the following fields can be updated:   - `controlDesignation`   - `commonnControlProvider`  **NOTES:** - Implementation Plan information cannot be saved if the these fields exceed 2,000 character limits:   - `naJustification`,`responsibleEntities`,`implementationNarrative`,`slcmCriticality`   - `slcmFrequency`,`slcmMethod`,`slcmReporting`,`slcmTracking`,`slcmComments` - Implementation Plan information cannot be updated if Security Control does not exist in the system record.
         * @summary Update control information in a system for one or many controls
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Update an existing control by Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateControlBySystemId: function (systemId, requestBody, options) {
            return localVarFp.updateControlBySystemId(systemId, requestBody, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * ControlsApi - object-oriented interface
 * @export
 * @class ControlsApi
 * @extends {BaseAPI}
 */
var ControlsApi = /** @class */ (function (_super) {
    __extends(ControlsApi, _super);
    function ControlsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Returns system control information for matching `systemId` path parameter
     * @summary Get control information in a system for one or many controls
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {string} [acronyms] **Acronym**: The system acronym(s) being queried (single value or comma delimited values).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlsApi
     */
    ControlsApi.prototype.getSystemControls = function (systemId, acronyms, options) {
        var _this = this;
        return exports.ControlsApiFp(this.configuration).getSystemControls(systemId, acronyms, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *  Update a Control for given `systemId`<br>  **Request Body Required Fields** - `acronym` - `responsibleEntities` - `controlDesignation` - `estimatedCompletionDate` - `implementationNarrative`  The following optional fields (plus the **Request Body Required Fields**) are required based on the Implementation Status `implementationStatus` value<br> | Value                    | Required Fields |--------------------------|--------------------------------------------------- | Planned  or Implemented  | `slcmCriticality`, `slcmFrequency`, `slcmMethod`, `slcmReporting`, `slcmTracking`, `slcmComments` | Not Applicable           | `naJustification` | Manually Inherited       | `commonControlProvider`, `slcmCriticality`, `slcmFrequency`, `slcmMethod`, `slcmReporting`, `slcmTracking`, `slcmComments`  If the Implementation Status `implementationStatus` value is `Inherited`, only the following fields can be updated:   - `controlDesignation`   - `commonnControlProvider`  **NOTES:** - Implementation Plan information cannot be saved if the these fields exceed 2,000 character limits:   - `naJustification`,`responsibleEntities`,`implementationNarrative`,`slcmCriticality`   - `slcmFrequency`,`slcmMethod`,`slcmReporting`,`slcmTracking`,`slcmComments` - Implementation Plan information cannot be updated if Security Control does not exist in the system record.
     * @summary Update control information in a system for one or many controls
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {Array<object>} requestBody Update an existing control by Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlsApi
     */
    ControlsApi.prototype.updateControlBySystemId = function (systemId, requestBody, options) {
        var _this = this;
        return exports.ControlsApiFp(this.configuration).updateControlBySystemId(systemId, requestBody, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ControlsApi;
}(base_1.BaseAPI));
exports.ControlsApi = ControlsApi;
/**
 * EnterpriseArtifactsDashboardsApi - axios parameter creator
 * @export
 */
exports.EnterpriseArtifactsDashboardsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get system Artifacts details information.
         * @summary System Artifacts Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemArtifactsDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            common_1.assertParamExists('getSystemArtifactsDetails', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-artifacts-details";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get system Artifacts summary information.
         * @summary System Artifacts Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemArtifactsSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            common_1.assertParamExists('getSystemArtifactsSummary', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-artifacts-summary";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * EnterpriseArtifactsDashboardsApi - functional programming interface
 * @export
 */
exports.EnterpriseArtifactsDashboardsApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.EnterpriseArtifactsDashboardsApiAxiosParamCreator(configuration);
    return {
        /**
         * Get system Artifacts details information.
         * @summary System Artifacts Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemArtifactsDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemArtifactsDetails(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Get system Artifacts summary information.
         * @summary System Artifacts Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemArtifactsSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemArtifactsSummary(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * EnterpriseArtifactsDashboardsApi - factory interface
 * @export
 */
exports.EnterpriseArtifactsDashboardsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.EnterpriseArtifactsDashboardsApiFp(configuration);
    return {
        /**
         * Get system Artifacts details information.
         * @summary System Artifacts Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemArtifactsDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getSystemArtifactsDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get system Artifacts summary information.
         * @summary System Artifacts Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemArtifactsSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getSystemArtifactsSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * EnterpriseArtifactsDashboardsApi - object-oriented interface
 * @export
 * @class EnterpriseArtifactsDashboardsApi
 * @extends {BaseAPI}
 */
var EnterpriseArtifactsDashboardsApi = /** @class */ (function (_super) {
    __extends(EnterpriseArtifactsDashboardsApi, _super);
    function EnterpriseArtifactsDashboardsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get system Artifacts details information.
     * @summary System Artifacts Details
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseArtifactsDashboardsApi
     */
    EnterpriseArtifactsDashboardsApi.prototype.getSystemArtifactsDetails = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return exports.EnterpriseArtifactsDashboardsApiFp(this.configuration).getSystemArtifactsDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get system Artifacts summary information.
     * @summary System Artifacts Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseArtifactsDashboardsApi
     */
    EnterpriseArtifactsDashboardsApi.prototype.getSystemArtifactsSummary = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return exports.EnterpriseArtifactsDashboardsApiFp(this.configuration).getSystemArtifactsSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return EnterpriseArtifactsDashboardsApi;
}(base_1.BaseAPI));
exports.EnterpriseArtifactsDashboardsApi = EnterpriseArtifactsDashboardsApi;
/**
 * EnterprisePOAMDashboardsApi - axios parameter creator
 * @export
 */
exports.EnterprisePOAMDashboardsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get system POA&Ms details dashboard information.
         * @summary System POA&M Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPoamDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            common_1.assertParamExists('getSystemPoamDetails', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-poam-details";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get systems POA&Ms summary dashboard information.
         * @summary System POA&M Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPoamSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            common_1.assertParamExists('getSystemPoamSummary', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-poam-summary";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * EnterprisePOAMDashboardsApi - functional programming interface
 * @export
 */
exports.EnterprisePOAMDashboardsApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.EnterprisePOAMDashboardsApiAxiosParamCreator(configuration);
    return {
        /**
         * Get system POA&Ms details dashboard information.
         * @summary System POA&M Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPoamDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemPoamDetails(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Get systems POA&Ms summary dashboard information.
         * @summary System POA&M Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPoamSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemPoamSummary(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * EnterprisePOAMDashboardsApi - factory interface
 * @export
 */
exports.EnterprisePOAMDashboardsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.EnterprisePOAMDashboardsApiFp(configuration);
    return {
        /**
         * Get system POA&Ms details dashboard information.
         * @summary System POA&M Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPoamDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getSystemPoamDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get systems POA&Ms summary dashboard information.
         * @summary System POA&M Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPoamSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getSystemPoamSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * EnterprisePOAMDashboardsApi - object-oriented interface
 * @export
 * @class EnterprisePOAMDashboardsApi
 * @extends {BaseAPI}
 */
var EnterprisePOAMDashboardsApi = /** @class */ (function (_super) {
    __extends(EnterprisePOAMDashboardsApi, _super);
    function EnterprisePOAMDashboardsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get system POA&Ms details dashboard information.
     * @summary System POA&M Details
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterprisePOAMDashboardsApi
     */
    EnterprisePOAMDashboardsApi.prototype.getSystemPoamDetails = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return exports.EnterprisePOAMDashboardsApiFp(this.configuration).getSystemPoamDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get systems POA&Ms summary dashboard information.
     * @summary System POA&M Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterprisePOAMDashboardsApi
     */
    EnterprisePOAMDashboardsApi.prototype.getSystemPoamSummary = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return exports.EnterprisePOAMDashboardsApiFp(this.configuration).getSystemPoamSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return EnterprisePOAMDashboardsApi;
}(base_1.BaseAPI));
exports.EnterprisePOAMDashboardsApi = EnterprisePOAMDashboardsApi;
/**
 * EnterpriseSecurityControlsDashboardsApi - axios parameter creator
 * @export
 */
exports.EnterpriseSecurityControlsDashboardsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get systems assessement procdures details dashboard information.
         * @summary System Assessment Procedures Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemAssessmentProceduresDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            common_1.assertParamExists('getSystemAssessmentProceduresDetails', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-assessment-procedures-details";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get systems control compliance summary dashboard information.
         * @summary System Control Compliance Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemControlComplianceSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            common_1.assertParamExists('getSystemControlComplianceSummary', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-control-compliance-summary";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get systems security control details dashboard information.
         * @summary System Control Compliance Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSecurityControlDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            common_1.assertParamExists('getSystemSecurityControlDetails', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-security-controls-details";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * EnterpriseSecurityControlsDashboardsApi - functional programming interface
 * @export
 */
exports.EnterpriseSecurityControlsDashboardsApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.EnterpriseSecurityControlsDashboardsApiAxiosParamCreator(configuration);
    return {
        /**
         * Get systems assessement procdures details dashboard information.
         * @summary System Assessment Procedures Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemAssessmentProceduresDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemAssessmentProceduresDetails(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Get systems control compliance summary dashboard information.
         * @summary System Control Compliance Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemControlComplianceSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemControlComplianceSummary(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Get systems security control details dashboard information.
         * @summary System Control Compliance Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSecurityControlDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemSecurityControlDetails(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * EnterpriseSecurityControlsDashboardsApi - factory interface
 * @export
 */
exports.EnterpriseSecurityControlsDashboardsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.EnterpriseSecurityControlsDashboardsApiFp(configuration);
    return {
        /**
         * Get systems assessement procdures details dashboard information.
         * @summary System Assessment Procedures Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemAssessmentProceduresDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getSystemAssessmentProceduresDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get systems control compliance summary dashboard information.
         * @summary System Control Compliance Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemControlComplianceSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getSystemControlComplianceSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get systems security control details dashboard information.
         * @summary System Control Compliance Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSecurityControlDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getSystemSecurityControlDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * EnterpriseSecurityControlsDashboardsApi - object-oriented interface
 * @export
 * @class EnterpriseSecurityControlsDashboardsApi
 * @extends {BaseAPI}
 */
var EnterpriseSecurityControlsDashboardsApi = /** @class */ (function (_super) {
    __extends(EnterpriseSecurityControlsDashboardsApi, _super);
    function EnterpriseSecurityControlsDashboardsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get systems assessement procdures details dashboard information.
     * @summary System Assessment Procedures Details
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseSecurityControlsDashboardsApi
     */
    EnterpriseSecurityControlsDashboardsApi.prototype.getSystemAssessmentProceduresDetails = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return exports.EnterpriseSecurityControlsDashboardsApiFp(this.configuration).getSystemAssessmentProceduresDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get systems control compliance summary dashboard information.
     * @summary System Control Compliance Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseSecurityControlsDashboardsApi
     */
    EnterpriseSecurityControlsDashboardsApi.prototype.getSystemControlComplianceSummary = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return exports.EnterpriseSecurityControlsDashboardsApiFp(this.configuration).getSystemControlComplianceSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get systems security control details dashboard information.
     * @summary System Control Compliance Details
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseSecurityControlsDashboardsApi
     */
    EnterpriseSecurityControlsDashboardsApi.prototype.getSystemSecurityControlDetails = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return exports.EnterpriseSecurityControlsDashboardsApiFp(this.configuration).getSystemSecurityControlDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return EnterpriseSecurityControlsDashboardsApi;
}(base_1.BaseAPI));
exports.EnterpriseSecurityControlsDashboardsApi = EnterpriseSecurityControlsDashboardsApi;
/**
 * EnterpriseSensorBasedHardwareResourcesDashboardsApi - axios parameter creator
 * @export
 */
exports.EnterpriseSensorBasedHardwareResourcesDashboardsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get system sensor hardware details dashboard information.
         * @summary System Sensor Hardware Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSensorHardwareDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            common_1.assertParamExists('getSystemSensorHardwareDetails', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-sensor-hardware-details";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get system sensor hardware summary dashboard information.
         * @summary System Sensor Hardware Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSensorHardwareSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            common_1.assertParamExists('getSystemSensorHardwareSummary', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-sensor-hardware-summary";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * EnterpriseSensorBasedHardwareResourcesDashboardsApi - functional programming interface
 * @export
 */
exports.EnterpriseSensorBasedHardwareResourcesDashboardsApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.EnterpriseSensorBasedHardwareResourcesDashboardsApiAxiosParamCreator(configuration);
    return {
        /**
         * Get system sensor hardware details dashboard information.
         * @summary System Sensor Hardware Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSensorHardwareDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemSensorHardwareDetails(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Get system sensor hardware summary dashboard information.
         * @summary System Sensor Hardware Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSensorHardwareSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemSensorHardwareSummary(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * EnterpriseSensorBasedHardwareResourcesDashboardsApi - factory interface
 * @export
 */
exports.EnterpriseSensorBasedHardwareResourcesDashboardsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.EnterpriseSensorBasedHardwareResourcesDashboardsApiFp(configuration);
    return {
        /**
         * Get system sensor hardware details dashboard information.
         * @summary System Sensor Hardware Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSensorHardwareDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getSystemSensorHardwareDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get system sensor hardware summary dashboard information.
         * @summary System Sensor Hardware Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSensorHardwareSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getSystemSensorHardwareSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * EnterpriseSensorBasedHardwareResourcesDashboardsApi - object-oriented interface
 * @export
 * @class EnterpriseSensorBasedHardwareResourcesDashboardsApi
 * @extends {BaseAPI}
 */
var EnterpriseSensorBasedHardwareResourcesDashboardsApi = /** @class */ (function (_super) {
    __extends(EnterpriseSensorBasedHardwareResourcesDashboardsApi, _super);
    function EnterpriseSensorBasedHardwareResourcesDashboardsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get system sensor hardware details dashboard information.
     * @summary System Sensor Hardware Details
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseSensorBasedHardwareResourcesDashboardsApi
     */
    EnterpriseSensorBasedHardwareResourcesDashboardsApi.prototype.getSystemSensorHardwareDetails = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return exports.EnterpriseSensorBasedHardwareResourcesDashboardsApiFp(this.configuration).getSystemSensorHardwareDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get system sensor hardware summary dashboard information.
     * @summary System Sensor Hardware Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseSensorBasedHardwareResourcesDashboardsApi
     */
    EnterpriseSensorBasedHardwareResourcesDashboardsApi.prototype.getSystemSensorHardwareSummary = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return exports.EnterpriseSensorBasedHardwareResourcesDashboardsApiFp(this.configuration).getSystemSensorHardwareSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return EnterpriseSensorBasedHardwareResourcesDashboardsApi;
}(base_1.BaseAPI));
exports.EnterpriseSensorBasedHardwareResourcesDashboardsApi = EnterpriseSensorBasedHardwareResourcesDashboardsApi;
/**
 * EnterpriseSensorBasedSoftwareResourcesDashboardsApi - axios parameter creator
 * @export
 */
exports.EnterpriseSensorBasedSoftwareResourcesDashboardsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get system sensor hardsoftwareware count dashboard information.
         * @summary System Sensor Software Counts
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSensorSoftwareCounts: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            common_1.assertParamExists('getSystemSensorSoftwareCounts', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-sensor-software-counts";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get system sensor hardsoftwareware details dashboard information.
         * @summary System Sensor Software Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSensorSoftwareDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            common_1.assertParamExists('getSystemSensorSoftwareDetails', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-sensor-software-details";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get system sensor software summary dashboard information.
         * @summary System Sensor Software Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSensorSoftwareSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            common_1.assertParamExists('getSystemSensorSoftwareSummary', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-sensor-software-summary";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * EnterpriseSensorBasedSoftwareResourcesDashboardsApi - functional programming interface
 * @export
 */
exports.EnterpriseSensorBasedSoftwareResourcesDashboardsApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.EnterpriseSensorBasedSoftwareResourcesDashboardsApiAxiosParamCreator(configuration);
    return {
        /**
         * Get system sensor hardsoftwareware count dashboard information.
         * @summary System Sensor Software Counts
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSensorSoftwareCounts: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemSensorSoftwareCounts(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Get system sensor hardsoftwareware details dashboard information.
         * @summary System Sensor Software Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSensorSoftwareDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemSensorSoftwareDetails(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Get system sensor software summary dashboard information.
         * @summary System Sensor Software Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSensorSoftwareSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemSensorSoftwareSummary(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * EnterpriseSensorBasedSoftwareResourcesDashboardsApi - factory interface
 * @export
 */
exports.EnterpriseSensorBasedSoftwareResourcesDashboardsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.EnterpriseSensorBasedSoftwareResourcesDashboardsApiFp(configuration);
    return {
        /**
         * Get system sensor hardsoftwareware count dashboard information.
         * @summary System Sensor Software Counts
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSensorSoftwareCounts: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getSystemSensorSoftwareCounts(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get system sensor hardsoftwareware details dashboard information.
         * @summary System Sensor Software Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSensorSoftwareDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getSystemSensorSoftwareDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get system sensor software summary dashboard information.
         * @summary System Sensor Software Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSensorSoftwareSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getSystemSensorSoftwareSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * EnterpriseSensorBasedSoftwareResourcesDashboardsApi - object-oriented interface
 * @export
 * @class EnterpriseSensorBasedSoftwareResourcesDashboardsApi
 * @extends {BaseAPI}
 */
var EnterpriseSensorBasedSoftwareResourcesDashboardsApi = /** @class */ (function (_super) {
    __extends(EnterpriseSensorBasedSoftwareResourcesDashboardsApi, _super);
    function EnterpriseSensorBasedSoftwareResourcesDashboardsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get system sensor hardsoftwareware count dashboard information.
     * @summary System Sensor Software Counts
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseSensorBasedSoftwareResourcesDashboardsApi
     */
    EnterpriseSensorBasedSoftwareResourcesDashboardsApi.prototype.getSystemSensorSoftwareCounts = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return exports.EnterpriseSensorBasedSoftwareResourcesDashboardsApiFp(this.configuration).getSystemSensorSoftwareCounts(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get system sensor hardsoftwareware details dashboard information.
     * @summary System Sensor Software Details
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseSensorBasedSoftwareResourcesDashboardsApi
     */
    EnterpriseSensorBasedSoftwareResourcesDashboardsApi.prototype.getSystemSensorSoftwareDetails = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return exports.EnterpriseSensorBasedSoftwareResourcesDashboardsApiFp(this.configuration).getSystemSensorSoftwareDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get system sensor software summary dashboard information.
     * @summary System Sensor Software Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseSensorBasedSoftwareResourcesDashboardsApi
     */
    EnterpriseSensorBasedSoftwareResourcesDashboardsApi.prototype.getSystemSensorSoftwareSummary = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return exports.EnterpriseSensorBasedSoftwareResourcesDashboardsApiFp(this.configuration).getSystemSensorSoftwareSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return EnterpriseSensorBasedSoftwareResourcesDashboardsApi;
}(base_1.BaseAPI));
exports.EnterpriseSensorBasedSoftwareResourcesDashboardsApi = EnterpriseSensorBasedSoftwareResourcesDashboardsApi;
/**
 * EnterpriseTermsConditionsDashboardsApi - axios parameter creator
 * @export
 */
exports.EnterpriseTermsConditionsDashboardsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get systems terms conditions details dashboard information.
         * @summary System Terms Conditions Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemTermsConditionsDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            common_1.assertParamExists('getSystemTermsConditionsDetails', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-terms-conditions-details";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get systems terms conditions summary dashboard information.
         * @summary System Terms Conditions Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemTermsConditionsSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            common_1.assertParamExists('getSystemTermsConditionsSummary', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-terms-conditions-summary";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * EnterpriseTermsConditionsDashboardsApi - functional programming interface
 * @export
 */
exports.EnterpriseTermsConditionsDashboardsApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.EnterpriseTermsConditionsDashboardsApiAxiosParamCreator(configuration);
    return {
        /**
         * Get systems terms conditions details dashboard information.
         * @summary System Terms Conditions Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemTermsConditionsDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemTermsConditionsDetails(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Get systems terms conditions summary dashboard information.
         * @summary System Terms Conditions Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemTermsConditionsSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemTermsConditionsSummary(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * EnterpriseTermsConditionsDashboardsApi - factory interface
 * @export
 */
exports.EnterpriseTermsConditionsDashboardsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.EnterpriseTermsConditionsDashboardsApiFp(configuration);
    return {
        /**
         * Get systems terms conditions details dashboard information.
         * @summary System Terms Conditions Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemTermsConditionsDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getSystemTermsConditionsDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get systems terms conditions summary dashboard information.
         * @summary System Terms Conditions Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemTermsConditionsSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getSystemTermsConditionsSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * EnterpriseTermsConditionsDashboardsApi - object-oriented interface
 * @export
 * @class EnterpriseTermsConditionsDashboardsApi
 * @extends {BaseAPI}
 */
var EnterpriseTermsConditionsDashboardsApi = /** @class */ (function (_super) {
    __extends(EnterpriseTermsConditionsDashboardsApi, _super);
    function EnterpriseTermsConditionsDashboardsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get systems terms conditions details dashboard information.
     * @summary System Terms Conditions Details
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseTermsConditionsDashboardsApi
     */
    EnterpriseTermsConditionsDashboardsApi.prototype.getSystemTermsConditionsDetails = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return exports.EnterpriseTermsConditionsDashboardsApiFp(this.configuration).getSystemTermsConditionsDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get systems terms conditions summary dashboard information.
     * @summary System Terms Conditions Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseTermsConditionsDashboardsApi
     */
    EnterpriseTermsConditionsDashboardsApi.prototype.getSystemTermsConditionsSummary = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return exports.EnterpriseTermsConditionsDashboardsApiFp(this.configuration).getSystemTermsConditionsSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return EnterpriseTermsConditionsDashboardsApi;
}(base_1.BaseAPI));
exports.EnterpriseTermsConditionsDashboardsApi = EnterpriseTermsConditionsDashboardsApi;
/**
 * EnterpriseVulnerabilityDashboardsApi - axios parameter creator
 * @export
 */
exports.EnterpriseVulnerabilityDashboardsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get ssystem device findings details dashboard information.
         * @summary System Device Findings Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemDeviceFindingsDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            common_1.assertParamExists('getSystemDeviceFindingsDetails', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-device-findings-details";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get system device findings summary dashboard information.
         * @summary System Device Findings Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemDeviceFindingsSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            common_1.assertParamExists('getSystemDeviceFindingsSummary', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-device-findings-summary";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get system vulnerability summary dashboard information.
         * @summary System Vulnerability Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemVulnerabilitySummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            common_1.assertParamExists('getSystemVulnerabilitySummary', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-vulnerability-summary";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * EnterpriseVulnerabilityDashboardsApi - functional programming interface
 * @export
 */
exports.EnterpriseVulnerabilityDashboardsApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.EnterpriseVulnerabilityDashboardsApiAxiosParamCreator(configuration);
    return {
        /**
         * Get ssystem device findings details dashboard information.
         * @summary System Device Findings Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemDeviceFindingsDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemDeviceFindingsDetails(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Get system device findings summary dashboard information.
         * @summary System Device Findings Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemDeviceFindingsSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemDeviceFindingsSummary(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Get system vulnerability summary dashboard information.
         * @summary System Vulnerability Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemVulnerabilitySummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemVulnerabilitySummary(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * EnterpriseVulnerabilityDashboardsApi - factory interface
 * @export
 */
exports.EnterpriseVulnerabilityDashboardsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.EnterpriseVulnerabilityDashboardsApiFp(configuration);
    return {
        /**
         * Get ssystem device findings details dashboard information.
         * @summary System Device Findings Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemDeviceFindingsDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getSystemDeviceFindingsDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get system device findings summary dashboard information.
         * @summary System Device Findings Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemDeviceFindingsSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getSystemDeviceFindingsSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get system vulnerability summary dashboard information.
         * @summary System Vulnerability Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemVulnerabilitySummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getSystemVulnerabilitySummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * EnterpriseVulnerabilityDashboardsApi - object-oriented interface
 * @export
 * @class EnterpriseVulnerabilityDashboardsApi
 * @extends {BaseAPI}
 */
var EnterpriseVulnerabilityDashboardsApi = /** @class */ (function (_super) {
    __extends(EnterpriseVulnerabilityDashboardsApi, _super);
    function EnterpriseVulnerabilityDashboardsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get ssystem device findings details dashboard information.
     * @summary System Device Findings Details
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseVulnerabilityDashboardsApi
     */
    EnterpriseVulnerabilityDashboardsApi.prototype.getSystemDeviceFindingsDetails = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return exports.EnterpriseVulnerabilityDashboardsApiFp(this.configuration).getSystemDeviceFindingsDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get system device findings summary dashboard information.
     * @summary System Device Findings Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseVulnerabilityDashboardsApi
     */
    EnterpriseVulnerabilityDashboardsApi.prototype.getSystemDeviceFindingsSummary = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return exports.EnterpriseVulnerabilityDashboardsApiFp(this.configuration).getSystemDeviceFindingsSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get system vulnerability summary dashboard information.
     * @summary System Vulnerability Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseVulnerabilityDashboardsApi
     */
    EnterpriseVulnerabilityDashboardsApi.prototype.getSystemVulnerabilitySummary = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return exports.EnterpriseVulnerabilityDashboardsApiFp(this.configuration).getSystemVulnerabilitySummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return EnterpriseVulnerabilityDashboardsApi;
}(base_1.BaseAPI));
exports.EnterpriseVulnerabilityDashboardsApi = EnterpriseVulnerabilityDashboardsApi;
/**
 * FISMAInventorySummaryDashboardsApi - axios parameter creator
 * @export
 */
exports.FISMAInventorySummaryDashboardsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get VA system FISMA inventory crypto summary dashboard information.
         * @summary VA System FISMA Inventory Crypto Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemFismaInvetoryCryptoSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            common_1.assertParamExists('getVaSystemFismaInvetoryCryptoSummary', 'orgId', orgId);
                            localVarPath = "/api/dashboards/va-system-fisma-inventory-crypto-summary";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get VA system FISMA inventory summary dashboard information.
         * @summary VA System FISMA Inventory Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemFismaInvetorySummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            common_1.assertParamExists('getVaSystemFismaInvetorySummary', 'orgId', orgId);
                            localVarPath = "/api/dashboards/va-system-fisma-inventory-summary";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * FISMAInventorySummaryDashboardsApi - functional programming interface
 * @export
 */
exports.FISMAInventorySummaryDashboardsApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.FISMAInventorySummaryDashboardsApiAxiosParamCreator(configuration);
    return {
        /**
         * Get VA system FISMA inventory crypto summary dashboard information.
         * @summary VA System FISMA Inventory Crypto Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemFismaInvetoryCryptoSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getVaSystemFismaInvetoryCryptoSummary(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Get VA system FISMA inventory summary dashboard information.
         * @summary VA System FISMA Inventory Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemFismaInvetorySummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getVaSystemFismaInvetorySummary(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * FISMAInventorySummaryDashboardsApi - factory interface
 * @export
 */
exports.FISMAInventorySummaryDashboardsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.FISMAInventorySummaryDashboardsApiFp(configuration);
    return {
        /**
         * Get VA system FISMA inventory crypto summary dashboard information.
         * @summary VA System FISMA Inventory Crypto Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemFismaInvetoryCryptoSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getVaSystemFismaInvetoryCryptoSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get VA system FISMA inventory summary dashboard information.
         * @summary VA System FISMA Inventory Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemFismaInvetorySummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getVaSystemFismaInvetorySummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * FISMAInventorySummaryDashboardsApi - object-oriented interface
 * @export
 * @class FISMAInventorySummaryDashboardsApi
 * @extends {BaseAPI}
 */
var FISMAInventorySummaryDashboardsApi = /** @class */ (function (_super) {
    __extends(FISMAInventorySummaryDashboardsApi, _super);
    function FISMAInventorySummaryDashboardsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get VA system FISMA inventory crypto summary dashboard information.
     * @summary VA System FISMA Inventory Crypto Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FISMAInventorySummaryDashboardsApi
     */
    FISMAInventorySummaryDashboardsApi.prototype.getVaSystemFismaInvetoryCryptoSummary = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return exports.FISMAInventorySummaryDashboardsApiFp(this.configuration).getVaSystemFismaInvetoryCryptoSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get VA system FISMA inventory summary dashboard information.
     * @summary VA System FISMA Inventory Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FISMAInventorySummaryDashboardsApi
     */
    FISMAInventorySummaryDashboardsApi.prototype.getVaSystemFismaInvetorySummary = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return exports.FISMAInventorySummaryDashboardsApiFp(this.configuration).getVaSystemFismaInvetorySummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return FISMAInventorySummaryDashboardsApi;
}(base_1.BaseAPI));
exports.FISMAInventorySummaryDashboardsApi = FISMAInventorySummaryDashboardsApi;
/**
 * HardwareBaselineDashboardsApi - axios parameter creator
 * @export
 */
exports.HardwareBaselineDashboardsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get system hardware details dashboard information.
         * @summary System Hardware Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemHardwareDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            common_1.assertParamExists('getSystemHardwareDetails', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-hardware-details";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get system hardware summary dashboard information.
         * @summary System Hardware Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemHardwareSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            common_1.assertParamExists('getSystemHardwareSummary', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-hardware-summary";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * HardwareBaselineDashboardsApi - functional programming interface
 * @export
 */
exports.HardwareBaselineDashboardsApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.HardwareBaselineDashboardsApiAxiosParamCreator(configuration);
    return {
        /**
         * Get system hardware details dashboard information.
         * @summary System Hardware Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemHardwareDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemHardwareDetails(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Get system hardware summary dashboard information.
         * @summary System Hardware Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemHardwareSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemHardwareSummary(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * HardwareBaselineDashboardsApi - factory interface
 * @export
 */
exports.HardwareBaselineDashboardsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.HardwareBaselineDashboardsApiFp(configuration);
    return {
        /**
         * Get system hardware details dashboard information.
         * @summary System Hardware Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemHardwareDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getSystemHardwareDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get system hardware summary dashboard information.
         * @summary System Hardware Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemHardwareSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getSystemHardwareSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * HardwareBaselineDashboardsApi - object-oriented interface
 * @export
 * @class HardwareBaselineDashboardsApi
 * @extends {BaseAPI}
 */
var HardwareBaselineDashboardsApi = /** @class */ (function (_super) {
    __extends(HardwareBaselineDashboardsApi, _super);
    function HardwareBaselineDashboardsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get system hardware details dashboard information.
     * @summary System Hardware Details
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HardwareBaselineDashboardsApi
     */
    HardwareBaselineDashboardsApi.prototype.getSystemHardwareDetails = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return exports.HardwareBaselineDashboardsApiFp(this.configuration).getSystemHardwareDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get system hardware summary dashboard information.
     * @summary System Hardware Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HardwareBaselineDashboardsApi
     */
    HardwareBaselineDashboardsApi.prototype.getSystemHardwareSummary = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return exports.HardwareBaselineDashboardsApiFp(this.configuration).getSystemHardwareSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return HardwareBaselineDashboardsApi;
}(base_1.BaseAPI));
exports.HardwareBaselineDashboardsApi = HardwareBaselineDashboardsApi;
/**
 * MilestonesApi - axios parameter creator
 * @export
 */
exports.MilestonesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Adds a milestone for given `systemId` and `poamId` path parameters  **Request Body Required Fields** - `description` - `scheduledCompletionDate`
         * @summary Add milestones to one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {Array<object>} requestBody Add milestones to an existing system poam
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMilestoneBySystemIdAndPoamId: function (systemId, poamId, requestBody, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            common_1.assertParamExists('addMilestoneBySystemIdAndPoamId', 'systemId', systemId);
                            // verify required parameter 'poamId' is not null or undefined
                            common_1.assertParamExists('addMilestoneBySystemIdAndPoamId', 'poamId', poamId);
                            // verify required parameter 'requestBody' is not null or undefined
                            common_1.assertParamExists('addMilestoneBySystemIdAndPoamId', 'requestBody', requestBody);
                            localVarPath = "/api/systems/{systemId}/poams/{poamId}/milestones"
                                .replace("{" + "systemId" + "}", encodeURIComponent(String(systemId)))
                                .replace("{" + "poamId" + "}", encodeURIComponent(String(poamId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Remove the POA&M matching `systemId` and `poamId` for path parameters and `milstoneId` provide in the Requst Body  **Notes**<br> To delete a milestone the record must be inactive by having the field isActive set to false (`isActive=false`).
         * @summary Remove milestones in a system for one or many POA&M items
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {Array<MilestonesRequestDeleteBodyInner>} milestonesRequestDeleteBodyInner Delete the given Milestone Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMilestone: function (systemId, poamId, milestonesRequestDeleteBodyInner, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            common_1.assertParamExists('deleteMilestone', 'systemId', systemId);
                            // verify required parameter 'poamId' is not null or undefined
                            common_1.assertParamExists('deleteMilestone', 'poamId', poamId);
                            // verify required parameter 'milestonesRequestDeleteBodyInner' is not null or undefined
                            common_1.assertParamExists('deleteMilestone', 'milestonesRequestDeleteBodyInner', milestonesRequestDeleteBodyInner);
                            localVarPath = "/api/systems/{systemId}/poams/{poamId}/milestones"
                                .replace("{" + "systemId" + "}", encodeURIComponent(String(systemId)))
                                .replace("{" + "poamId" + "}", encodeURIComponent(String(poamId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(milestonesRequestDeleteBodyInner, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Returns system containing milestones for matching parameters.
         * @summary Get milestones in one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {string} [scheduledCompletionDateStart] **Date Started**: Filter query by the scheduled completion start date (Unix date format).
         * @param {string} [scheduledCompletionDateEnd] **Date Ended**: Filter query by the scheduled completion start date (Unix date format).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemMilestonesByPoamId: function (systemId, poamId, scheduledCompletionDateStart, scheduledCompletionDateEnd, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            common_1.assertParamExists('getSystemMilestonesByPoamId', 'systemId', systemId);
                            // verify required parameter 'poamId' is not null or undefined
                            common_1.assertParamExists('getSystemMilestonesByPoamId', 'poamId', poamId);
                            localVarPath = "/api/systems/{systemId}/poams/{poamId}/milestones"
                                .replace("{" + "systemId" + "}", encodeURIComponent(String(systemId)))
                                .replace("{" + "poamId" + "}", encodeURIComponent(String(poamId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (scheduledCompletionDateStart !== undefined) {
                                localVarQueryParameter['scheduledCompletionDateStart'] = scheduledCompletionDateStart;
                            }
                            if (scheduledCompletionDateEnd !== undefined) {
                                localVarQueryParameter['scheduledCompletionDateEnd'] = scheduledCompletionDateEnd;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Returns systems containing milestones for matching parameters.
         * @summary Get milestone by ID in POA&M item in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {number} milestoneId **Milestone Id**: The unique milestone record identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemMilestonesByPoamIdAndMilestoneId: function (systemId, poamId, milestoneId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            common_1.assertParamExists('getSystemMilestonesByPoamIdAndMilestoneId', 'systemId', systemId);
                            // verify required parameter 'poamId' is not null or undefined
                            common_1.assertParamExists('getSystemMilestonesByPoamIdAndMilestoneId', 'poamId', poamId);
                            // verify required parameter 'milestoneId' is not null or undefined
                            common_1.assertParamExists('getSystemMilestonesByPoamIdAndMilestoneId', 'milestoneId', milestoneId);
                            localVarPath = "/api/systems/{systemId}/poams/{poamId}/milestones/{milestoneId}"
                                .replace("{" + "systemId" + "}", encodeURIComponent(String(systemId)))
                                .replace("{" + "poamId" + "}", encodeURIComponent(String(poamId)))
                                .replace("{" + "milestoneId" + "}", encodeURIComponent(String(milestoneId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Updates a milestone for given `systemId` and `poamId` path parameters  **Request Body Required Fields** - `milestoneId` - `description` - `scheduledCompletionDate`
         * @summary Update one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {Array<object>} requestBody Update milestones for an existing system poam
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMilestoneBySystemIdAndPoamId: function (systemId, poamId, requestBody, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            common_1.assertParamExists('updateMilestoneBySystemIdAndPoamId', 'systemId', systemId);
                            // verify required parameter 'poamId' is not null or undefined
                            common_1.assertParamExists('updateMilestoneBySystemIdAndPoamId', 'poamId', poamId);
                            // verify required parameter 'requestBody' is not null or undefined
                            common_1.assertParamExists('updateMilestoneBySystemIdAndPoamId', 'requestBody', requestBody);
                            localVarPath = "/api/systems/{systemId}/poams/{poamId}/milestones"
                                .replace("{" + "systemId" + "}", encodeURIComponent(String(systemId)))
                                .replace("{" + "poamId" + "}", encodeURIComponent(String(poamId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * MilestonesApi - functional programming interface
 * @export
 */
exports.MilestonesApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.MilestonesApiAxiosParamCreator(configuration);
    return {
        /**
         * Adds a milestone for given `systemId` and `poamId` path parameters  **Request Body Required Fields** - `description` - `scheduledCompletionDate`
         * @summary Add milestones to one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {Array<object>} requestBody Add milestones to an existing system poam
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMilestoneBySystemIdAndPoamId: function (systemId, poamId, requestBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addMilestoneBySystemIdAndPoamId(systemId, poamId, requestBody, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Remove the POA&M matching `systemId` and `poamId` for path parameters and `milstoneId` provide in the Requst Body  **Notes**<br> To delete a milestone the record must be inactive by having the field isActive set to false (`isActive=false`).
         * @summary Remove milestones in a system for one or many POA&M items
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {Array<MilestonesRequestDeleteBodyInner>} milestonesRequestDeleteBodyInner Delete the given Milestone Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMilestone: function (systemId, poamId, milestonesRequestDeleteBodyInner, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteMilestone(systemId, poamId, milestonesRequestDeleteBodyInner, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns system containing milestones for matching parameters.
         * @summary Get milestones in one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {string} [scheduledCompletionDateStart] **Date Started**: Filter query by the scheduled completion start date (Unix date format).
         * @param {string} [scheduledCompletionDateEnd] **Date Ended**: Filter query by the scheduled completion start date (Unix date format).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemMilestonesByPoamId: function (systemId, poamId, scheduledCompletionDateStart, scheduledCompletionDateEnd, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemMilestonesByPoamId(systemId, poamId, scheduledCompletionDateStart, scheduledCompletionDateEnd, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns systems containing milestones for matching parameters.
         * @summary Get milestone by ID in POA&M item in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {number} milestoneId **Milestone Id**: The unique milestone record identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemMilestonesByPoamIdAndMilestoneId: function (systemId, poamId, milestoneId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemMilestonesByPoamIdAndMilestoneId(systemId, poamId, milestoneId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Updates a milestone for given `systemId` and `poamId` path parameters  **Request Body Required Fields** - `milestoneId` - `description` - `scheduledCompletionDate`
         * @summary Update one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {Array<object>} requestBody Update milestones for an existing system poam
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMilestoneBySystemIdAndPoamId: function (systemId, poamId, requestBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateMilestoneBySystemIdAndPoamId(systemId, poamId, requestBody, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * MilestonesApi - factory interface
 * @export
 */
exports.MilestonesApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.MilestonesApiFp(configuration);
    return {
        /**
         * Adds a milestone for given `systemId` and `poamId` path parameters  **Request Body Required Fields** - `description` - `scheduledCompletionDate`
         * @summary Add milestones to one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {Array<object>} requestBody Add milestones to an existing system poam
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMilestoneBySystemIdAndPoamId: function (systemId, poamId, requestBody, options) {
            return localVarFp.addMilestoneBySystemIdAndPoamId(systemId, poamId, requestBody, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Remove the POA&M matching `systemId` and `poamId` for path parameters and `milstoneId` provide in the Requst Body  **Notes**<br> To delete a milestone the record must be inactive by having the field isActive set to false (`isActive=false`).
         * @summary Remove milestones in a system for one or many POA&M items
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {Array<MilestonesRequestDeleteBodyInner>} milestonesRequestDeleteBodyInner Delete the given Milestone Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMilestone: function (systemId, poamId, milestonesRequestDeleteBodyInner, options) {
            return localVarFp.deleteMilestone(systemId, poamId, milestonesRequestDeleteBodyInner, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns system containing milestones for matching parameters.
         * @summary Get milestones in one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {string} [scheduledCompletionDateStart] **Date Started**: Filter query by the scheduled completion start date (Unix date format).
         * @param {string} [scheduledCompletionDateEnd] **Date Ended**: Filter query by the scheduled completion start date (Unix date format).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemMilestonesByPoamId: function (systemId, poamId, scheduledCompletionDateStart, scheduledCompletionDateEnd, options) {
            return localVarFp.getSystemMilestonesByPoamId(systemId, poamId, scheduledCompletionDateStart, scheduledCompletionDateEnd, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns systems containing milestones for matching parameters.
         * @summary Get milestone by ID in POA&M item in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {number} milestoneId **Milestone Id**: The unique milestone record identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemMilestonesByPoamIdAndMilestoneId: function (systemId, poamId, milestoneId, options) {
            return localVarFp.getSystemMilestonesByPoamIdAndMilestoneId(systemId, poamId, milestoneId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Updates a milestone for given `systemId` and `poamId` path parameters  **Request Body Required Fields** - `milestoneId` - `description` - `scheduledCompletionDate`
         * @summary Update one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {Array<object>} requestBody Update milestones for an existing system poam
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMilestoneBySystemIdAndPoamId: function (systemId, poamId, requestBody, options) {
            return localVarFp.updateMilestoneBySystemIdAndPoamId(systemId, poamId, requestBody, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * MilestonesApi - object-oriented interface
 * @export
 * @class MilestonesApi
 * @extends {BaseAPI}
 */
var MilestonesApi = /** @class */ (function (_super) {
    __extends(MilestonesApi, _super);
    function MilestonesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Adds a milestone for given `systemId` and `poamId` path parameters  **Request Body Required Fields** - `description` - `scheduledCompletionDate`
     * @summary Add milestones to one or many POA&M items in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
     * @param {Array<object>} requestBody Add milestones to an existing system poam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MilestonesApi
     */
    MilestonesApi.prototype.addMilestoneBySystemIdAndPoamId = function (systemId, poamId, requestBody, options) {
        var _this = this;
        return exports.MilestonesApiFp(this.configuration).addMilestoneBySystemIdAndPoamId(systemId, poamId, requestBody, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Remove the POA&M matching `systemId` and `poamId` for path parameters and `milstoneId` provide in the Requst Body  **Notes**<br> To delete a milestone the record must be inactive by having the field isActive set to false (`isActive=false`).
     * @summary Remove milestones in a system for one or many POA&M items
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
     * @param {Array<MilestonesRequestDeleteBodyInner>} milestonesRequestDeleteBodyInner Delete the given Milestone Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MilestonesApi
     */
    MilestonesApi.prototype.deleteMilestone = function (systemId, poamId, milestonesRequestDeleteBodyInner, options) {
        var _this = this;
        return exports.MilestonesApiFp(this.configuration).deleteMilestone(systemId, poamId, milestonesRequestDeleteBodyInner, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns system containing milestones for matching parameters.
     * @summary Get milestones in one or many POA&M items in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
     * @param {string} [scheduledCompletionDateStart] **Date Started**: Filter query by the scheduled completion start date (Unix date format).
     * @param {string} [scheduledCompletionDateEnd] **Date Ended**: Filter query by the scheduled completion start date (Unix date format).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MilestonesApi
     */
    MilestonesApi.prototype.getSystemMilestonesByPoamId = function (systemId, poamId, scheduledCompletionDateStart, scheduledCompletionDateEnd, options) {
        var _this = this;
        return exports.MilestonesApiFp(this.configuration).getSystemMilestonesByPoamId(systemId, poamId, scheduledCompletionDateStart, scheduledCompletionDateEnd, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns systems containing milestones for matching parameters.
     * @summary Get milestone by ID in POA&M item in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
     * @param {number} milestoneId **Milestone Id**: The unique milestone record identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MilestonesApi
     */
    MilestonesApi.prototype.getSystemMilestonesByPoamIdAndMilestoneId = function (systemId, poamId, milestoneId, options) {
        var _this = this;
        return exports.MilestonesApiFp(this.configuration).getSystemMilestonesByPoamIdAndMilestoneId(systemId, poamId, milestoneId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Updates a milestone for given `systemId` and `poamId` path parameters  **Request Body Required Fields** - `milestoneId` - `description` - `scheduledCompletionDate`
     * @summary Update one or many POA&M items in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
     * @param {Array<object>} requestBody Update milestones for an existing system poam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MilestonesApi
     */
    MilestonesApi.prototype.updateMilestoneBySystemIdAndPoamId = function (systemId, poamId, requestBody, options) {
        var _this = this;
        return exports.MilestonesApiFp(this.configuration).updateMilestoneBySystemIdAndPoamId(systemId, poamId, requestBody, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return MilestonesApi;
}(base_1.BaseAPI));
exports.MilestonesApi = MilestonesApi;
/**
 * PACApi - axios parameter creator
 * @export
 */
exports.PACApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Adds a Package Approval Chain (PAC) for given `systemId` path parameter  **Request Body Required Fields** - `workflow` - `name` - `comments`
         * @summary Initiate system workflow for review
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Add system package to PAC for review
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSystemPac: function (systemId, requestBody, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            common_1.assertParamExists('addSystemPac', 'systemId', systemId);
                            // verify required parameter 'requestBody' is not null or undefined
                            common_1.assertParamExists('addSystemPac', 'requestBody', requestBody);
                            localVarPath = "/api/systems/{systemId}/approval/pac"
                                .replace("{" + "systemId" + "}", encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Returns the location of a system\'s package in the Package Approval Chain (PAC) for matching `systemId` path parameter  **Notes:** - If the indicated system has any active workflows, the response will include information   such as the workflow type and the current stage of each workflow.  - If there are no active workflows, then a null data member will be returned.
         * @summary Get status of active workflows in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPac: function (systemId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            common_1.assertParamExists('getSystemPac', 'systemId', systemId);
                            localVarPath = "/api/systems/{systemId}/approval/pac"
                                .replace("{" + "systemId" + "}", encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * PACApi - functional programming interface
 * @export
 */
exports.PACApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.PACApiAxiosParamCreator(configuration);
    return {
        /**
         * Adds a Package Approval Chain (PAC) for given `systemId` path parameter  **Request Body Required Fields** - `workflow` - `name` - `comments`
         * @summary Initiate system workflow for review
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Add system package to PAC for review
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSystemPac: function (systemId, requestBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addSystemPac(systemId, requestBody, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns the location of a system\'s package in the Package Approval Chain (PAC) for matching `systemId` path parameter  **Notes:** - If the indicated system has any active workflows, the response will include information   such as the workflow type and the current stage of each workflow.  - If there are no active workflows, then a null data member will be returned.
         * @summary Get status of active workflows in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPac: function (systemId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemPac(systemId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * PACApi - factory interface
 * @export
 */
exports.PACApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.PACApiFp(configuration);
    return {
        /**
         * Adds a Package Approval Chain (PAC) for given `systemId` path parameter  **Request Body Required Fields** - `workflow` - `name` - `comments`
         * @summary Initiate system workflow for review
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Add system package to PAC for review
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSystemPac: function (systemId, requestBody, options) {
            return localVarFp.addSystemPac(systemId, requestBody, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns the location of a system\'s package in the Package Approval Chain (PAC) for matching `systemId` path parameter  **Notes:** - If the indicated system has any active workflows, the response will include information   such as the workflow type and the current stage of each workflow.  - If there are no active workflows, then a null data member will be returned.
         * @summary Get status of active workflows in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPac: function (systemId, options) {
            return localVarFp.getSystemPac(systemId, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * PACApi - object-oriented interface
 * @export
 * @class PACApi
 * @extends {BaseAPI}
 */
var PACApi = /** @class */ (function (_super) {
    __extends(PACApi, _super);
    function PACApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Adds a Package Approval Chain (PAC) for given `systemId` path parameter  **Request Body Required Fields** - `workflow` - `name` - `comments`
     * @summary Initiate system workflow for review
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {Array<object>} requestBody Add system package to PAC for review
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PACApi
     */
    PACApi.prototype.addSystemPac = function (systemId, requestBody, options) {
        var _this = this;
        return exports.PACApiFp(this.configuration).addSystemPac(systemId, requestBody, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns the location of a system\'s package in the Package Approval Chain (PAC) for matching `systemId` path parameter  **Notes:** - If the indicated system has any active workflows, the response will include information   such as the workflow type and the current stage of each workflow.  - If there are no active workflows, then a null data member will be returned.
     * @summary Get status of active workflows in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PACApi
     */
    PACApi.prototype.getSystemPac = function (systemId, options) {
        var _this = this;
        return exports.PACApiFp(this.configuration).getSystemPac(systemId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return PACApi;
}(base_1.BaseAPI));
exports.PACApi = PACApi;
/**
 * POAMApi - axios parameter creator
 * @export
 */
exports.POAMApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Add a POA&M for given `systemId`<br>  **Request Body Required Fields** - `status` - `vulnerabilityDescription` - `sourceIdentVuln` - `pocOrganization` - `resources`  **Note**<br /> If a POC email is supplied, the application will attempt to locate a user already registered within the application and pre-populate any information not explicitly supplied in the request. If no such user is found, these fields are **required** within the request.<br> `pocFirstName`, `pocLastName`, `pocPhoneNumber`<br />
         * @summary Add one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Add POA&amp;M(s) to a system (systemID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPoamBySystemId: function (systemId, requestBody, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            common_1.assertParamExists('addPoamBySystemId', 'systemId', systemId);
                            // verify required parameter 'requestBody' is not null or undefined
                            common_1.assertParamExists('addPoamBySystemId', 'requestBody', requestBody);
                            localVarPath = "/api/systems/{systemId}/poams"
                                .replace("{" + "systemId" + "}", encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Remove the POA&M matching `systemId` path parameter and `poamId` Request Body<br>
         * @summary Remove one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<PoamRequestDeleteBodyInner>} poamRequestDeleteBodyInner Delete the given POA&amp;M Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePoam: function (systemId, poamRequestDeleteBodyInner, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            common_1.assertParamExists('deletePoam', 'systemId', systemId);
                            // verify required parameter 'poamRequestDeleteBodyInner' is not null or undefined
                            common_1.assertParamExists('deletePoam', 'poamRequestDeleteBodyInner', poamRequestDeleteBodyInner);
                            localVarPath = "/api/systems/{systemId}/poams"
                                .replace("{" + "systemId" + "}", encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(poamRequestDeleteBodyInner, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Returns system(s) containing POA&M items for matching parameters.
         * @summary Get one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} [scheduledCompletionDateStart] **Date Started**: Filter query by the scheduled completion start date (Unix date format).
         * @param {string} [scheduledCompletionDateEnd] **Date Ended**: Filter query by the scheduled completion start date (Unix date format).
         * @param {string} [controlAcronyms] **Control Acronym**: Filter query by given system acronym (single value or comma separated).
         * @param {string} [assessmentProcedures] **Assessment Procedure**: Filter query by given Security Control Assessment Procedure (single value or comma separated).
         * @param {string} [ccis] **CCI System**: Filter query by Control Correlation Identifiers (CCIs) (single value or comma separated).
         * @param {boolean} [systemOnly] **Systems Only**: Indicates that only system(s) information is retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPoams: function (systemId, scheduledCompletionDateStart, scheduledCompletionDateEnd, controlAcronyms, assessmentProcedures, ccis, systemOnly, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            common_1.assertParamExists('getSystemPoams', 'systemId', systemId);
                            localVarPath = "/api/systems/{systemId}/poams"
                                .replace("{" + "systemId" + "}", encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (scheduledCompletionDateStart !== undefined) {
                                localVarQueryParameter['scheduledCompletionDateStart'] = scheduledCompletionDateStart;
                            }
                            if (scheduledCompletionDateEnd !== undefined) {
                                localVarQueryParameter['scheduledCompletionDateEnd'] = scheduledCompletionDateEnd;
                            }
                            if (controlAcronyms !== undefined) {
                                localVarQueryParameter['controlAcronyms'] = controlAcronyms;
                            }
                            if (assessmentProcedures !== undefined) {
                                localVarQueryParameter['assessmentProcedures'] = assessmentProcedures;
                            }
                            if (ccis !== undefined) {
                                localVarQueryParameter['ccis'] = ccis;
                            }
                            if (systemOnly !== undefined) {
                                localVarQueryParameter['systemOnly'] = systemOnly;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Returns system(s) containing POA&M items for matching parameters.
         * @summary Get POA&M item by ID in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPoamsByPoamId: function (systemId, poamId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            common_1.assertParamExists('getSystemPoamsByPoamId', 'systemId', systemId);
                            // verify required parameter 'poamId' is not null or undefined
                            common_1.assertParamExists('getSystemPoamsByPoamId', 'poamId', poamId);
                            localVarPath = "/api/systems/{systemId}/poams/{poamId}"
                                .replace("{" + "systemId" + "}", encodeURIComponent(String(systemId)))
                                .replace("{" + "poamId" + "}", encodeURIComponent(String(poamId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Update a POA&M for given `systemId`<br>  **Request Body Required Fields** - `poamId` - `displayPoamId` - `status` - `vulnerabilityDescription` - `sourceIdentVuln` - `pocOrganization` - `reviewStatus`  **Notes** - If a POC email is supplied, the application will attempt to locate a user already   registered within the application and pre-populate any information not explicitly supplied   in the request. If no such user is found, these fields are **required** within the request.<br>   `pocOrganization`, `pocFirstName`, `pocLastName`, `pocEmail`, `pocPhoneNumber`<br />  - To prevent uploading duplicate/undesired milestones through the POA&M PUT we must include an `isActive` field for the milestone and set it to equal to false `(isActive=false)`.
         * @summary Update one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Update an existing control by Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePoamBySystemId: function (systemId, requestBody, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            common_1.assertParamExists('updatePoamBySystemId', 'systemId', systemId);
                            // verify required parameter 'requestBody' is not null or undefined
                            common_1.assertParamExists('updatePoamBySystemId', 'requestBody', requestBody);
                            localVarPath = "/api/systems/{systemId}/poams"
                                .replace("{" + "systemId" + "}", encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * POAMApi - functional programming interface
 * @export
 */
exports.POAMApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.POAMApiAxiosParamCreator(configuration);
    return {
        /**
         * Add a POA&M for given `systemId`<br>  **Request Body Required Fields** - `status` - `vulnerabilityDescription` - `sourceIdentVuln` - `pocOrganization` - `resources`  **Note**<br /> If a POC email is supplied, the application will attempt to locate a user already registered within the application and pre-populate any information not explicitly supplied in the request. If no such user is found, these fields are **required** within the request.<br> `pocFirstName`, `pocLastName`, `pocPhoneNumber`<br />
         * @summary Add one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Add POA&amp;M(s) to a system (systemID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPoamBySystemId: function (systemId, requestBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addPoamBySystemId(systemId, requestBody, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Remove the POA&M matching `systemId` path parameter and `poamId` Request Body<br>
         * @summary Remove one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<PoamRequestDeleteBodyInner>} poamRequestDeleteBodyInner Delete the given POA&amp;M Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePoam: function (systemId, poamRequestDeleteBodyInner, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deletePoam(systemId, poamRequestDeleteBodyInner, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns system(s) containing POA&M items for matching parameters.
         * @summary Get one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} [scheduledCompletionDateStart] **Date Started**: Filter query by the scheduled completion start date (Unix date format).
         * @param {string} [scheduledCompletionDateEnd] **Date Ended**: Filter query by the scheduled completion start date (Unix date format).
         * @param {string} [controlAcronyms] **Control Acronym**: Filter query by given system acronym (single value or comma separated).
         * @param {string} [assessmentProcedures] **Assessment Procedure**: Filter query by given Security Control Assessment Procedure (single value or comma separated).
         * @param {string} [ccis] **CCI System**: Filter query by Control Correlation Identifiers (CCIs) (single value or comma separated).
         * @param {boolean} [systemOnly] **Systems Only**: Indicates that only system(s) information is retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPoams: function (systemId, scheduledCompletionDateStart, scheduledCompletionDateEnd, controlAcronyms, assessmentProcedures, ccis, systemOnly, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemPoams(systemId, scheduledCompletionDateStart, scheduledCompletionDateEnd, controlAcronyms, assessmentProcedures, ccis, systemOnly, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns system(s) containing POA&M items for matching parameters.
         * @summary Get POA&M item by ID in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPoamsByPoamId: function (systemId, poamId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemPoamsByPoamId(systemId, poamId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Update a POA&M for given `systemId`<br>  **Request Body Required Fields** - `poamId` - `displayPoamId` - `status` - `vulnerabilityDescription` - `sourceIdentVuln` - `pocOrganization` - `reviewStatus`  **Notes** - If a POC email is supplied, the application will attempt to locate a user already   registered within the application and pre-populate any information not explicitly supplied   in the request. If no such user is found, these fields are **required** within the request.<br>   `pocOrganization`, `pocFirstName`, `pocLastName`, `pocEmail`, `pocPhoneNumber`<br />  - To prevent uploading duplicate/undesired milestones through the POA&M PUT we must include an `isActive` field for the milestone and set it to equal to false `(isActive=false)`.
         * @summary Update one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Update an existing control by Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePoamBySystemId: function (systemId, requestBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updatePoamBySystemId(systemId, requestBody, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * POAMApi - factory interface
 * @export
 */
exports.POAMApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.POAMApiFp(configuration);
    return {
        /**
         * Add a POA&M for given `systemId`<br>  **Request Body Required Fields** - `status` - `vulnerabilityDescription` - `sourceIdentVuln` - `pocOrganization` - `resources`  **Note**<br /> If a POC email is supplied, the application will attempt to locate a user already registered within the application and pre-populate any information not explicitly supplied in the request. If no such user is found, these fields are **required** within the request.<br> `pocFirstName`, `pocLastName`, `pocPhoneNumber`<br />
         * @summary Add one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Add POA&amp;M(s) to a system (systemID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPoamBySystemId: function (systemId, requestBody, options) {
            return localVarFp.addPoamBySystemId(systemId, requestBody, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Remove the POA&M matching `systemId` path parameter and `poamId` Request Body<br>
         * @summary Remove one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<PoamRequestDeleteBodyInner>} poamRequestDeleteBodyInner Delete the given POA&amp;M Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePoam: function (systemId, poamRequestDeleteBodyInner, options) {
            return localVarFp.deletePoam(systemId, poamRequestDeleteBodyInner, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns system(s) containing POA&M items for matching parameters.
         * @summary Get one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} [scheduledCompletionDateStart] **Date Started**: Filter query by the scheduled completion start date (Unix date format).
         * @param {string} [scheduledCompletionDateEnd] **Date Ended**: Filter query by the scheduled completion start date (Unix date format).
         * @param {string} [controlAcronyms] **Control Acronym**: Filter query by given system acronym (single value or comma separated).
         * @param {string} [assessmentProcedures] **Assessment Procedure**: Filter query by given Security Control Assessment Procedure (single value or comma separated).
         * @param {string} [ccis] **CCI System**: Filter query by Control Correlation Identifiers (CCIs) (single value or comma separated).
         * @param {boolean} [systemOnly] **Systems Only**: Indicates that only system(s) information is retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPoams: function (systemId, scheduledCompletionDateStart, scheduledCompletionDateEnd, controlAcronyms, assessmentProcedures, ccis, systemOnly, options) {
            return localVarFp.getSystemPoams(systemId, scheduledCompletionDateStart, scheduledCompletionDateEnd, controlAcronyms, assessmentProcedures, ccis, systemOnly, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns system(s) containing POA&M items for matching parameters.
         * @summary Get POA&M item by ID in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPoamsByPoamId: function (systemId, poamId, options) {
            return localVarFp.getSystemPoamsByPoamId(systemId, poamId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update a POA&M for given `systemId`<br>  **Request Body Required Fields** - `poamId` - `displayPoamId` - `status` - `vulnerabilityDescription` - `sourceIdentVuln` - `pocOrganization` - `reviewStatus`  **Notes** - If a POC email is supplied, the application will attempt to locate a user already   registered within the application and pre-populate any information not explicitly supplied   in the request. If no such user is found, these fields are **required** within the request.<br>   `pocOrganization`, `pocFirstName`, `pocLastName`, `pocEmail`, `pocPhoneNumber`<br />  - To prevent uploading duplicate/undesired milestones through the POA&M PUT we must include an `isActive` field for the milestone and set it to equal to false `(isActive=false)`.
         * @summary Update one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Update an existing control by Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePoamBySystemId: function (systemId, requestBody, options) {
            return localVarFp.updatePoamBySystemId(systemId, requestBody, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * POAMApi - object-oriented interface
 * @export
 * @class POAMApi
 * @extends {BaseAPI}
 */
var POAMApi = /** @class */ (function (_super) {
    __extends(POAMApi, _super);
    function POAMApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Add a POA&M for given `systemId`<br>  **Request Body Required Fields** - `status` - `vulnerabilityDescription` - `sourceIdentVuln` - `pocOrganization` - `resources`  **Note**<br /> If a POC email is supplied, the application will attempt to locate a user already registered within the application and pre-populate any information not explicitly supplied in the request. If no such user is found, these fields are **required** within the request.<br> `pocFirstName`, `pocLastName`, `pocPhoneNumber`<br />
     * @summary Add one or many POA&M items in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {Array<object>} requestBody Add POA&amp;M(s) to a system (systemID)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POAMApi
     */
    POAMApi.prototype.addPoamBySystemId = function (systemId, requestBody, options) {
        var _this = this;
        return exports.POAMApiFp(this.configuration).addPoamBySystemId(systemId, requestBody, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Remove the POA&M matching `systemId` path parameter and `poamId` Request Body<br>
     * @summary Remove one or many POA&M items in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {Array<PoamRequestDeleteBodyInner>} poamRequestDeleteBodyInner Delete the given POA&amp;M Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POAMApi
     */
    POAMApi.prototype.deletePoam = function (systemId, poamRequestDeleteBodyInner, options) {
        var _this = this;
        return exports.POAMApiFp(this.configuration).deletePoam(systemId, poamRequestDeleteBodyInner, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns system(s) containing POA&M items for matching parameters.
     * @summary Get one or many POA&M items in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {string} [scheduledCompletionDateStart] **Date Started**: Filter query by the scheduled completion start date (Unix date format).
     * @param {string} [scheduledCompletionDateEnd] **Date Ended**: Filter query by the scheduled completion start date (Unix date format).
     * @param {string} [controlAcronyms] **Control Acronym**: Filter query by given system acronym (single value or comma separated).
     * @param {string} [assessmentProcedures] **Assessment Procedure**: Filter query by given Security Control Assessment Procedure (single value or comma separated).
     * @param {string} [ccis] **CCI System**: Filter query by Control Correlation Identifiers (CCIs) (single value or comma separated).
     * @param {boolean} [systemOnly] **Systems Only**: Indicates that only system(s) information is retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POAMApi
     */
    POAMApi.prototype.getSystemPoams = function (systemId, scheduledCompletionDateStart, scheduledCompletionDateEnd, controlAcronyms, assessmentProcedures, ccis, systemOnly, options) {
        var _this = this;
        return exports.POAMApiFp(this.configuration).getSystemPoams(systemId, scheduledCompletionDateStart, scheduledCompletionDateEnd, controlAcronyms, assessmentProcedures, ccis, systemOnly, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns system(s) containing POA&M items for matching parameters.
     * @summary Get POA&M item by ID in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POAMApi
     */
    POAMApi.prototype.getSystemPoamsByPoamId = function (systemId, poamId, options) {
        var _this = this;
        return exports.POAMApiFp(this.configuration).getSystemPoamsByPoamId(systemId, poamId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update a POA&M for given `systemId`<br>  **Request Body Required Fields** - `poamId` - `displayPoamId` - `status` - `vulnerabilityDescription` - `sourceIdentVuln` - `pocOrganization` - `reviewStatus`  **Notes** - If a POC email is supplied, the application will attempt to locate a user already   registered within the application and pre-populate any information not explicitly supplied   in the request. If no such user is found, these fields are **required** within the request.<br>   `pocOrganization`, `pocFirstName`, `pocLastName`, `pocEmail`, `pocPhoneNumber`<br />  - To prevent uploading duplicate/undesired milestones through the POA&M PUT we must include an `isActive` field for the milestone and set it to equal to false `(isActive=false)`.
     * @summary Update one or many POA&M items in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {Array<object>} requestBody Update an existing control by Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POAMApi
     */
    POAMApi.prototype.updatePoamBySystemId = function (systemId, requestBody, options) {
        var _this = this;
        return exports.POAMApiFp(this.configuration).updatePoamBySystemId(systemId, requestBody, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return POAMApi;
}(base_1.BaseAPI));
exports.POAMApi = POAMApi;
/**
 * PortsAndProtocolsDashboardsApi - axios parameter creator
 * @export
 */
exports.PortsAndProtocolsDashboardsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get system ports and protocols details dashboard information.
         * @summary System Ports/Protocols Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPortsProtocolsDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            common_1.assertParamExists('getSystemPortsProtocolsDetails', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-ports-protocols-details";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get system ports and protocols summary dashboard information.
         * @summary System Ports/Protocols Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPortsProtocolsSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            common_1.assertParamExists('getSystemPortsProtocolsSummary', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-ports-protocols-summary";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * PortsAndProtocolsDashboardsApi - functional programming interface
 * @export
 */
exports.PortsAndProtocolsDashboardsApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.PortsAndProtocolsDashboardsApiAxiosParamCreator(configuration);
    return {
        /**
         * Get system ports and protocols details dashboard information.
         * @summary System Ports/Protocols Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPortsProtocolsDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemPortsProtocolsDetails(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Get system ports and protocols summary dashboard information.
         * @summary System Ports/Protocols Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPortsProtocolsSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemPortsProtocolsSummary(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * PortsAndProtocolsDashboardsApi - factory interface
 * @export
 */
exports.PortsAndProtocolsDashboardsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.PortsAndProtocolsDashboardsApiFp(configuration);
    return {
        /**
         * Get system ports and protocols details dashboard information.
         * @summary System Ports/Protocols Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPortsProtocolsDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getSystemPortsProtocolsDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get system ports and protocols summary dashboard information.
         * @summary System Ports/Protocols Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPortsProtocolsSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getSystemPortsProtocolsSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * PortsAndProtocolsDashboardsApi - object-oriented interface
 * @export
 * @class PortsAndProtocolsDashboardsApi
 * @extends {BaseAPI}
 */
var PortsAndProtocolsDashboardsApi = /** @class */ (function (_super) {
    __extends(PortsAndProtocolsDashboardsApi, _super);
    function PortsAndProtocolsDashboardsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get system ports and protocols details dashboard information.
     * @summary System Ports/Protocols Details
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortsAndProtocolsDashboardsApi
     */
    PortsAndProtocolsDashboardsApi.prototype.getSystemPortsProtocolsDetails = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return exports.PortsAndProtocolsDashboardsApiFp(this.configuration).getSystemPortsProtocolsDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get system ports and protocols summary dashboard information.
     * @summary System Ports/Protocols Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortsAndProtocolsDashboardsApi
     */
    PortsAndProtocolsDashboardsApi.prototype.getSystemPortsProtocolsSummary = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return exports.PortsAndProtocolsDashboardsApiFp(this.configuration).getSystemPortsProtocolsSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return PortsAndProtocolsDashboardsApi;
}(base_1.BaseAPI));
exports.PortsAndProtocolsDashboardsApi = PortsAndProtocolsDashboardsApi;
/**
 * PrivacyComplianceDashboardsApi - axios parameter creator
 * @export
 */
exports.PrivacyComplianceDashboardsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get user system privacy summary dashboard information.
         * @summary System Privacy Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPrivacySummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            common_1.assertParamExists('getSystemPrivacySummary', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-privacy-summary";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get VA OMB-FISMA SAOP summary dashboard information.
         * @summary VA OMB FISMA SAOP Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaOmbFsmaSaopSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            common_1.assertParamExists('getVaOmbFsmaSaopSummary', 'orgId', orgId);
                            localVarPath = "/api/dashboards/va-omb-fisma-saop-summary";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * PrivacyComplianceDashboardsApi - functional programming interface
 * @export
 */
exports.PrivacyComplianceDashboardsApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.PrivacyComplianceDashboardsApiAxiosParamCreator(configuration);
    return {
        /**
         * Get user system privacy summary dashboard information.
         * @summary System Privacy Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPrivacySummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemPrivacySummary(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Get VA OMB-FISMA SAOP summary dashboard information.
         * @summary VA OMB FISMA SAOP Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaOmbFsmaSaopSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getVaOmbFsmaSaopSummary(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * PrivacyComplianceDashboardsApi - factory interface
 * @export
 */
exports.PrivacyComplianceDashboardsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.PrivacyComplianceDashboardsApiFp(configuration);
    return {
        /**
         * Get user system privacy summary dashboard information.
         * @summary System Privacy Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPrivacySummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getSystemPrivacySummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get VA OMB-FISMA SAOP summary dashboard information.
         * @summary VA OMB FISMA SAOP Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaOmbFsmaSaopSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getVaOmbFsmaSaopSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * PrivacyComplianceDashboardsApi - object-oriented interface
 * @export
 * @class PrivacyComplianceDashboardsApi
 * @extends {BaseAPI}
 */
var PrivacyComplianceDashboardsApi = /** @class */ (function (_super) {
    __extends(PrivacyComplianceDashboardsApi, _super);
    function PrivacyComplianceDashboardsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get user system privacy summary dashboard information.
     * @summary System Privacy Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrivacyComplianceDashboardsApi
     */
    PrivacyComplianceDashboardsApi.prototype.getSystemPrivacySummary = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return exports.PrivacyComplianceDashboardsApiFp(this.configuration).getSystemPrivacySummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get VA OMB-FISMA SAOP summary dashboard information.
     * @summary VA OMB FISMA SAOP Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrivacyComplianceDashboardsApi
     */
    PrivacyComplianceDashboardsApi.prototype.getVaOmbFsmaSaopSummary = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return exports.PrivacyComplianceDashboardsApiFp(this.configuration).getVaOmbFsmaSaopSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return PrivacyComplianceDashboardsApi;
}(base_1.BaseAPI));
exports.PrivacyComplianceDashboardsApi = PrivacyComplianceDashboardsApi;
/**
 * RegistrationApi - axios parameter creator
 * @export
 */
exports.RegistrationApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Returns the API Key (api-key) that must be provided in the request header for all endpoint calls.
         * @summary Register user certificate and obtain an API key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUser: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/api-key";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * RegistrationApi - functional programming interface
 * @export
 */
exports.RegistrationApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.RegistrationApiAxiosParamCreator(configuration);
    return {
        /**
         * Returns the API Key (api-key) that must be provided in the request header for all endpoint calls.
         * @summary Register user certificate and obtain an API key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUser: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.registerUser(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * RegistrationApi - factory interface
 * @export
 */
exports.RegistrationApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.RegistrationApiFp(configuration);
    return {
        /**
         * Returns the API Key (api-key) that must be provided in the request header for all endpoint calls.
         * @summary Register user certificate and obtain an API key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUser: function (options) {
            return localVarFp.registerUser(options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * RegistrationApi - object-oriented interface
 * @export
 * @class RegistrationApi
 * @extends {BaseAPI}
 */
var RegistrationApi = /** @class */ (function (_super) {
    __extends(RegistrationApi, _super);
    function RegistrationApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Returns the API Key (api-key) that must be provided in the request header for all endpoint calls.
     * @summary Register user certificate and obtain an API key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistrationApi
     */
    RegistrationApi.prototype.registerUser = function (options) {
        var _this = this;
        return exports.RegistrationApiFp(this.configuration).registerUser(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return RegistrationApi;
}(base_1.BaseAPI));
exports.RegistrationApi = RegistrationApi;
/**
 * SoftwareBaselineDashboardsApi - axios parameter creator
 * @export
 */
exports.SoftwareBaselineDashboardsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get system software details dashboard information.
         * @summary System Software Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSoftwareDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            common_1.assertParamExists('getSystemSoftwareDetails', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-software-details";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get system software summary dashboard information.
         * @summary System Software Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSoftwareSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            common_1.assertParamExists('getSystemSoftwareSummary', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-software-summary";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * SoftwareBaselineDashboardsApi - functional programming interface
 * @export
 */
exports.SoftwareBaselineDashboardsApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.SoftwareBaselineDashboardsApiAxiosParamCreator(configuration);
    return {
        /**
         * Get system software details dashboard information.
         * @summary System Software Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSoftwareDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemSoftwareDetails(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Get system software summary dashboard information.
         * @summary System Software Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSoftwareSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemSoftwareSummary(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * SoftwareBaselineDashboardsApi - factory interface
 * @export
 */
exports.SoftwareBaselineDashboardsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.SoftwareBaselineDashboardsApiFp(configuration);
    return {
        /**
         * Get system software details dashboard information.
         * @summary System Software Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSoftwareDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getSystemSoftwareDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get system software summary dashboard information.
         * @summary System Software Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSoftwareSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getSystemSoftwareSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * SoftwareBaselineDashboardsApi - object-oriented interface
 * @export
 * @class SoftwareBaselineDashboardsApi
 * @extends {BaseAPI}
 */
var SoftwareBaselineDashboardsApi = /** @class */ (function (_super) {
    __extends(SoftwareBaselineDashboardsApi, _super);
    function SoftwareBaselineDashboardsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get system software details dashboard information.
     * @summary System Software Details
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SoftwareBaselineDashboardsApi
     */
    SoftwareBaselineDashboardsApi.prototype.getSystemSoftwareDetails = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return exports.SoftwareBaselineDashboardsApiFp(this.configuration).getSystemSoftwareDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get system software summary dashboard information.
     * @summary System Software Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SoftwareBaselineDashboardsApi
     */
    SoftwareBaselineDashboardsApi.prototype.getSystemSoftwareSummary = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return exports.SoftwareBaselineDashboardsApiFp(this.configuration).getSystemSoftwareSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SoftwareBaselineDashboardsApi;
}(base_1.BaseAPI));
exports.SoftwareBaselineDashboardsApi = SoftwareBaselineDashboardsApi;
/**
 * StaticCodeScansApi - axios parameter creator
 * @export
 */
exports.StaticCodeScansApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Upload or clear application scan findings into a system\'s `systemId` assets module.  **Request Body Required Fields** - Application Object (`application`)   - `applicationName`   - `version` - Application Findings Object Array (`applicationFindings`)   - `codeCheckName`   - `count`   - `scanDate`             - `cweId`  **Note:** To clear an application\'s findings, use only the field `clearFindings` as the Request body and set it to true. Example:  ``` [    {      \"application\": {        \"applicationName\": \"application name\",        \"version\": \"application version\"      },      \"applicationFindings\": [        { \"clearFindings\": true }      ]    }  ] ```
         * @summary Upload static code scans or Clear static code scans
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {StaticCodeRequestPostBody} staticCodeRequestPostBody Add static code scans or Clear static code scans
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addStaticCodeScansBySystemId: function (systemId, staticCodeRequestPostBody, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            common_1.assertParamExists('addStaticCodeScansBySystemId', 'systemId', systemId);
                            // verify required parameter 'staticCodeRequestPostBody' is not null or undefined
                            common_1.assertParamExists('addStaticCodeScansBySystemId', 'staticCodeRequestPostBody', staticCodeRequestPostBody);
                            localVarPath = "/api/systems/{systemId}/static-code-scans"
                                .replace("{" + "systemId" + "}", encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(staticCodeRequestPostBody, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * StaticCodeScansApi - functional programming interface
 * @export
 */
exports.StaticCodeScansApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.StaticCodeScansApiAxiosParamCreator(configuration);
    return {
        /**
         * Upload or clear application scan findings into a system\'s `systemId` assets module.  **Request Body Required Fields** - Application Object (`application`)   - `applicationName`   - `version` - Application Findings Object Array (`applicationFindings`)   - `codeCheckName`   - `count`   - `scanDate`             - `cweId`  **Note:** To clear an application\'s findings, use only the field `clearFindings` as the Request body and set it to true. Example:  ``` [    {      \"application\": {        \"applicationName\": \"application name\",        \"version\": \"application version\"      },      \"applicationFindings\": [        { \"clearFindings\": true }      ]    }  ] ```
         * @summary Upload static code scans or Clear static code scans
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {StaticCodeRequestPostBody} staticCodeRequestPostBody Add static code scans or Clear static code scans
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addStaticCodeScansBySystemId: function (systemId, staticCodeRequestPostBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addStaticCodeScansBySystemId(systemId, staticCodeRequestPostBody, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * StaticCodeScansApi - factory interface
 * @export
 */
exports.StaticCodeScansApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.StaticCodeScansApiFp(configuration);
    return {
        /**
         * Upload or clear application scan findings into a system\'s `systemId` assets module.  **Request Body Required Fields** - Application Object (`application`)   - `applicationName`   - `version` - Application Findings Object Array (`applicationFindings`)   - `codeCheckName`   - `count`   - `scanDate`             - `cweId`  **Note:** To clear an application\'s findings, use only the field `clearFindings` as the Request body and set it to true. Example:  ``` [    {      \"application\": {        \"applicationName\": \"application name\",        \"version\": \"application version\"      },      \"applicationFindings\": [        { \"clearFindings\": true }      ]    }  ] ```
         * @summary Upload static code scans or Clear static code scans
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {StaticCodeRequestPostBody} staticCodeRequestPostBody Add static code scans or Clear static code scans
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addStaticCodeScansBySystemId: function (systemId, staticCodeRequestPostBody, options) {
            return localVarFp.addStaticCodeScansBySystemId(systemId, staticCodeRequestPostBody, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * StaticCodeScansApi - object-oriented interface
 * @export
 * @class StaticCodeScansApi
 * @extends {BaseAPI}
 */
var StaticCodeScansApi = /** @class */ (function (_super) {
    __extends(StaticCodeScansApi, _super);
    function StaticCodeScansApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Upload or clear application scan findings into a system\'s `systemId` assets module.  **Request Body Required Fields** - Application Object (`application`)   - `applicationName`   - `version` - Application Findings Object Array (`applicationFindings`)   - `codeCheckName`   - `count`   - `scanDate`             - `cweId`  **Note:** To clear an application\'s findings, use only the field `clearFindings` as the Request body and set it to true. Example:  ``` [    {      \"application\": {        \"applicationName\": \"application name\",        \"version\": \"application version\"      },      \"applicationFindings\": [        { \"clearFindings\": true }      ]    }  ] ```
     * @summary Upload static code scans or Clear static code scans
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {StaticCodeRequestPostBody} staticCodeRequestPostBody Add static code scans or Clear static code scans
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaticCodeScansApi
     */
    StaticCodeScansApi.prototype.addStaticCodeScansBySystemId = function (systemId, staticCodeRequestPostBody, options) {
        var _this = this;
        return exports.StaticCodeScansApiFp(this.configuration).addStaticCodeScansBySystemId(systemId, staticCodeRequestPostBody, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return StaticCodeScansApi;
}(base_1.BaseAPI));
exports.StaticCodeScansApi = StaticCodeScansApi;
/**
 * SystemA20SummaryDashboardApi - axios parameter creator
 * @export
 */
exports.SystemA20SummaryDashboardApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get VA system A2.0 summary dashboard information.
         * @summary VA System A2.0 Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemA2Summary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            common_1.assertParamExists('getVaSystemA2Summary', 'orgId', orgId);
                            localVarPath = "/api/dashboards/va-system-a2-summary";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * SystemA20SummaryDashboardApi - functional programming interface
 * @export
 */
exports.SystemA20SummaryDashboardApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.SystemA20SummaryDashboardApiAxiosParamCreator(configuration);
    return {
        /**
         * Get VA system A2.0 summary dashboard information.
         * @summary VA System A2.0 Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemA2Summary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getVaSystemA2Summary(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * SystemA20SummaryDashboardApi - factory interface
 * @export
 */
exports.SystemA20SummaryDashboardApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.SystemA20SummaryDashboardApiFp(configuration);
    return {
        /**
         * Get VA system A2.0 summary dashboard information.
         * @summary VA System A2.0 Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemA2Summary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getVaSystemA2Summary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * SystemA20SummaryDashboardApi - object-oriented interface
 * @export
 * @class SystemA20SummaryDashboardApi
 * @extends {BaseAPI}
 */
var SystemA20SummaryDashboardApi = /** @class */ (function (_super) {
    __extends(SystemA20SummaryDashboardApi, _super);
    function SystemA20SummaryDashboardApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get VA system A2.0 summary dashboard information.
     * @summary VA System A2.0 Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemA20SummaryDashboardApi
     */
    SystemA20SummaryDashboardApi.prototype.getVaSystemA2Summary = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return exports.SystemA20SummaryDashboardApiFp(this.configuration).getVaSystemA2Summary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SystemA20SummaryDashboardApi;
}(base_1.BaseAPI));
exports.SystemA20SummaryDashboardApi = SystemA20SummaryDashboardApi;
/**
 * SystemAASummaryDashboardApi - axios parameter creator
 * @export
 */
exports.SystemAASummaryDashboardApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get VA system A&A summary dashboard information.
         * @summary VA System A&A Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemAaSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            common_1.assertParamExists('getVaSystemAaSummary', 'orgId', orgId);
                            localVarPath = "/api/dashboards/va-system-aa-summary";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * SystemAASummaryDashboardApi - functional programming interface
 * @export
 */
exports.SystemAASummaryDashboardApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.SystemAASummaryDashboardApiAxiosParamCreator(configuration);
    return {
        /**
         * Get VA system A&A summary dashboard information.
         * @summary VA System A&A Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemAaSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getVaSystemAaSummary(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * SystemAASummaryDashboardApi - factory interface
 * @export
 */
exports.SystemAASummaryDashboardApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.SystemAASummaryDashboardApiFp(configuration);
    return {
        /**
         * Get VA system A&A summary dashboard information.
         * @summary VA System A&A Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemAaSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getVaSystemAaSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * SystemAASummaryDashboardApi - object-oriented interface
 * @export
 * @class SystemAASummaryDashboardApi
 * @extends {BaseAPI}
 */
var SystemAASummaryDashboardApi = /** @class */ (function (_super) {
    __extends(SystemAASummaryDashboardApi, _super);
    function SystemAASummaryDashboardApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get VA system A&A summary dashboard information.
     * @summary VA System A&A Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemAASummaryDashboardApi
     */
    SystemAASummaryDashboardApi.prototype.getVaSystemAaSummary = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return exports.SystemAASummaryDashboardApiFp(this.configuration).getVaSystemAaSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SystemAASummaryDashboardApi;
}(base_1.BaseAPI));
exports.SystemAASummaryDashboardApi = SystemAASummaryDashboardApi;
/**
 * SystemAssociationsDashboardApi - axios parameter creator
 * @export
 */
exports.SystemAssociationsDashboardApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get system associations details dashboard information.
         * @summary System Associations Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemAssociationsDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            common_1.assertParamExists('getSystemAssociationsDetails', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-associations-details";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * SystemAssociationsDashboardApi - functional programming interface
 * @export
 */
exports.SystemAssociationsDashboardApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.SystemAssociationsDashboardApiAxiosParamCreator(configuration);
    return {
        /**
         * Get system associations details dashboard information.
         * @summary System Associations Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemAssociationsDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemAssociationsDetails(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * SystemAssociationsDashboardApi - factory interface
 * @export
 */
exports.SystemAssociationsDashboardApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.SystemAssociationsDashboardApiFp(configuration);
    return {
        /**
         * Get system associations details dashboard information.
         * @summary System Associations Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemAssociationsDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getSystemAssociationsDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * SystemAssociationsDashboardApi - object-oriented interface
 * @export
 * @class SystemAssociationsDashboardApi
 * @extends {BaseAPI}
 */
var SystemAssociationsDashboardApi = /** @class */ (function (_super) {
    __extends(SystemAssociationsDashboardApi, _super);
    function SystemAssociationsDashboardApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get system associations details dashboard information.
     * @summary System Associations Details
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemAssociationsDashboardApi
     */
    SystemAssociationsDashboardApi.prototype.getSystemAssociationsDetails = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return exports.SystemAssociationsDashboardApiFp(this.configuration).getSystemAssociationsDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SystemAssociationsDashboardApi;
}(base_1.BaseAPI));
exports.SystemAssociationsDashboardApi = SystemAssociationsDashboardApi;
/**
 * SystemCONMONIntegrationStatusDashboardApi - axios parameter creator
 * @export
 */
exports.SystemCONMONIntegrationStatusDashboardApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get system CONMON integration status dashboard information.
         * @summary System CONMON Integration Status
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemCommonIntegrationStatusSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            common_1.assertParamExists('getSystemCommonIntegrationStatusSummary', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-conmon-integration-status-summary";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * SystemCONMONIntegrationStatusDashboardApi - functional programming interface
 * @export
 */
exports.SystemCONMONIntegrationStatusDashboardApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.SystemCONMONIntegrationStatusDashboardApiAxiosParamCreator(configuration);
    return {
        /**
         * Get system CONMON integration status dashboard information.
         * @summary System CONMON Integration Status
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemCommonIntegrationStatusSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemCommonIntegrationStatusSummary(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * SystemCONMONIntegrationStatusDashboardApi - factory interface
 * @export
 */
exports.SystemCONMONIntegrationStatusDashboardApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.SystemCONMONIntegrationStatusDashboardApiFp(configuration);
    return {
        /**
         * Get system CONMON integration status dashboard information.
         * @summary System CONMON Integration Status
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemCommonIntegrationStatusSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getSystemCommonIntegrationStatusSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * SystemCONMONIntegrationStatusDashboardApi - object-oriented interface
 * @export
 * @class SystemCONMONIntegrationStatusDashboardApi
 * @extends {BaseAPI}
 */
var SystemCONMONIntegrationStatusDashboardApi = /** @class */ (function (_super) {
    __extends(SystemCONMONIntegrationStatusDashboardApi, _super);
    function SystemCONMONIntegrationStatusDashboardApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get system CONMON integration status dashboard information.
     * @summary System CONMON Integration Status
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemCONMONIntegrationStatusDashboardApi
     */
    SystemCONMONIntegrationStatusDashboardApi.prototype.getSystemCommonIntegrationStatusSummary = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return exports.SystemCONMONIntegrationStatusDashboardApiFp(this.configuration).getSystemCommonIntegrationStatusSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SystemCONMONIntegrationStatusDashboardApi;
}(base_1.BaseAPI));
exports.SystemCONMONIntegrationStatusDashboardApi = SystemCONMONIntegrationStatusDashboardApi;
/**
 * SystemPL109ReportingSummaryDashboardApi - axios parameter creator
 * @export
 */
exports.SystemPL109ReportingSummaryDashboardApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get VA system P.L. 109 reporting summary dashboard information.
         * @summary VA System P.L. 109 Reporting Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemPl109ReportingSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            common_1.assertParamExists('getVaSystemPl109ReportingSummary', 'orgId', orgId);
                            localVarPath = "/api/dashboards/va-system-pl-109-reporting-summary";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * SystemPL109ReportingSummaryDashboardApi - functional programming interface
 * @export
 */
exports.SystemPL109ReportingSummaryDashboardApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.SystemPL109ReportingSummaryDashboardApiAxiosParamCreator(configuration);
    return {
        /**
         * Get VA system P.L. 109 reporting summary dashboard information.
         * @summary VA System P.L. 109 Reporting Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemPl109ReportingSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getVaSystemPl109ReportingSummary(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * SystemPL109ReportingSummaryDashboardApi - factory interface
 * @export
 */
exports.SystemPL109ReportingSummaryDashboardApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.SystemPL109ReportingSummaryDashboardApiFp(configuration);
    return {
        /**
         * Get VA system P.L. 109 reporting summary dashboard information.
         * @summary VA System P.L. 109 Reporting Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemPl109ReportingSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getVaSystemPl109ReportingSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * SystemPL109ReportingSummaryDashboardApi - object-oriented interface
 * @export
 * @class SystemPL109ReportingSummaryDashboardApi
 * @extends {BaseAPI}
 */
var SystemPL109ReportingSummaryDashboardApi = /** @class */ (function (_super) {
    __extends(SystemPL109ReportingSummaryDashboardApi, _super);
    function SystemPL109ReportingSummaryDashboardApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get VA system P.L. 109 reporting summary dashboard information.
     * @summary VA System P.L. 109 Reporting Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemPL109ReportingSummaryDashboardApi
     */
    SystemPL109ReportingSummaryDashboardApi.prototype.getVaSystemPl109ReportingSummary = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return exports.SystemPL109ReportingSummaryDashboardApiFp(this.configuration).getVaSystemPl109ReportingSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SystemPL109ReportingSummaryDashboardApi;
}(base_1.BaseAPI));
exports.SystemPL109ReportingSummaryDashboardApi = SystemPL109ReportingSummaryDashboardApi;
/**
 * SystemRolesApi - axios parameter creator
 * @export
 */
exports.SystemRolesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Returns all available roles
         * @summary Get available roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemRoles: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/system-roles";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Returns the role(s) data matching parameters.
         * @summary Get system roles
         * @param {GetSystemRolesByCategoryIdRoleCategoryEnum} roleCategory **Role Category**: The system role category been queried
         * @param {string} role **Role**: Accepts single value from options available at base system-roles endpoint e.g., SCA.
         * @param {GetSystemRolesByCategoryIdPolicyEnum} [policy] **System Policy**: Filter query by system policy.  If no value is specified, the default returns RMF policy information for dual-policy systems.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemRolesByCategoryId: function (roleCategory, role, policy, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'roleCategory' is not null or undefined
                            common_1.assertParamExists('getSystemRolesByCategoryId', 'roleCategory', roleCategory);
                            // verify required parameter 'role' is not null or undefined
                            common_1.assertParamExists('getSystemRolesByCategoryId', 'role', role);
                            localVarPath = "/api/system-roles/{roleCategory}"
                                .replace("{" + "roleCategory" + "}", encodeURIComponent(String(roleCategory)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (role !== undefined) {
                                localVarQueryParameter['role'] = role;
                            }
                            if (policy !== undefined) {
                                localVarQueryParameter['policy'] = policy;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * SystemRolesApi - functional programming interface
 * @export
 */
exports.SystemRolesApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.SystemRolesApiAxiosParamCreator(configuration);
    return {
        /**
         * Returns all available roles
         * @summary Get available roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemRoles: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemRoles(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns the role(s) data matching parameters.
         * @summary Get system roles
         * @param {GetSystemRolesByCategoryIdRoleCategoryEnum} roleCategory **Role Category**: The system role category been queried
         * @param {string} role **Role**: Accepts single value from options available at base system-roles endpoint e.g., SCA.
         * @param {GetSystemRolesByCategoryIdPolicyEnum} [policy] **System Policy**: Filter query by system policy.  If no value is specified, the default returns RMF policy information for dual-policy systems.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemRolesByCategoryId: function (roleCategory, role, policy, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemRolesByCategoryId(roleCategory, role, policy, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * SystemRolesApi - factory interface
 * @export
 */
exports.SystemRolesApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.SystemRolesApiFp(configuration);
    return {
        /**
         * Returns all available roles
         * @summary Get available roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemRoles: function (options) {
            return localVarFp.getSystemRoles(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns the role(s) data matching parameters.
         * @summary Get system roles
         * @param {GetSystemRolesByCategoryIdRoleCategoryEnum} roleCategory **Role Category**: The system role category been queried
         * @param {string} role **Role**: Accepts single value from options available at base system-roles endpoint e.g., SCA.
         * @param {GetSystemRolesByCategoryIdPolicyEnum} [policy] **System Policy**: Filter query by system policy.  If no value is specified, the default returns RMF policy information for dual-policy systems.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemRolesByCategoryId: function (roleCategory, role, policy, options) {
            return localVarFp.getSystemRolesByCategoryId(roleCategory, role, policy, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * SystemRolesApi - object-oriented interface
 * @export
 * @class SystemRolesApi
 * @extends {BaseAPI}
 */
var SystemRolesApi = /** @class */ (function (_super) {
    __extends(SystemRolesApi, _super);
    function SystemRolesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Returns all available roles
     * @summary Get available roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemRolesApi
     */
    SystemRolesApi.prototype.getSystemRoles = function (options) {
        var _this = this;
        return exports.SystemRolesApiFp(this.configuration).getSystemRoles(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns the role(s) data matching parameters.
     * @summary Get system roles
     * @param {GetSystemRolesByCategoryIdRoleCategoryEnum} roleCategory **Role Category**: The system role category been queried
     * @param {string} role **Role**: Accepts single value from options available at base system-roles endpoint e.g., SCA.
     * @param {GetSystemRolesByCategoryIdPolicyEnum} [policy] **System Policy**: Filter query by system policy.  If no value is specified, the default returns RMF policy information for dual-policy systems.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemRolesApi
     */
    SystemRolesApi.prototype.getSystemRolesByCategoryId = function (roleCategory, role, policy, options) {
        var _this = this;
        return exports.SystemRolesApiFp(this.configuration).getSystemRolesByCategoryId(roleCategory, role, policy, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SystemRolesApi;
}(base_1.BaseAPI));
exports.SystemRolesApi = SystemRolesApi;
/**
 * @export
 */
exports.GetSystemRolesByCategoryIdRoleCategoryEnum = {
    Cac: 'CAC',
    Pac: 'PAC',
    Other: 'Other',
    UnknownDefaultOpenApi: '11184809'
};
/**
 * @export
 */
exports.GetSystemRolesByCategoryIdPolicyEnum = {
    Diacap: 'diacap',
    Rmf: 'rmf',
    Reporting: 'reporting',
    UnknownDefaultOpenApi: '11184809'
};
/**
 * SystemStatusDashboardApi - axios parameter creator
 * @export
 */
exports.SystemStatusDashboardApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get systems status detail dashboard information.
         * @summary System Status Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemStatusDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            common_1.assertParamExists('getSystemStatusDetails', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-status-details";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * SystemStatusDashboardApi - functional programming interface
 * @export
 */
exports.SystemStatusDashboardApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.SystemStatusDashboardApiAxiosParamCreator(configuration);
    return {
        /**
         * Get systems status detail dashboard information.
         * @summary System Status Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemStatusDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemStatusDetails(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * SystemStatusDashboardApi - factory interface
 * @export
 */
exports.SystemStatusDashboardApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.SystemStatusDashboardApiFp(configuration);
    return {
        /**
         * Get systems status detail dashboard information.
         * @summary System Status Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemStatusDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getSystemStatusDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * SystemStatusDashboardApi - object-oriented interface
 * @export
 * @class SystemStatusDashboardApi
 * @extends {BaseAPI}
 */
var SystemStatusDashboardApi = /** @class */ (function (_super) {
    __extends(SystemStatusDashboardApi, _super);
    function SystemStatusDashboardApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get systems status detail dashboard information.
     * @summary System Status Details
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemStatusDashboardApi
     */
    SystemStatusDashboardApi.prototype.getSystemStatusDetails = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return exports.SystemStatusDashboardApiFp(this.configuration).getSystemStatusDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SystemStatusDashboardApi;
}(base_1.BaseAPI));
exports.SystemStatusDashboardApi = SystemStatusDashboardApi;
/**
 * SystemsApi - axios parameter creator
 * @export
 */
exports.SystemsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Returns the system matching provided parameters
         * @summary Get system information for a specific system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {boolean} [includePackage] **Include Package**:  Indicates if additional packages information are retrieved for queried system.  If no value is specified, the default returns false to not include package information
         * @param {GetSystemPolicyEnum} [policy] **System Policy**: Filter query by system policy.  If no value is specified, the default returns RMF policy information for dual-policy systems.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystem: function (systemId, includePackage, policy, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            common_1.assertParamExists('getSystem', 'systemId', systemId);
                            localVarPath = "/api/systems/{systemId}"
                                .replace("{" + "systemId" + "}", encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (includePackage !== undefined) {
                                localVarQueryParameter['includePackage'] = includePackage;
                            }
                            if (policy !== undefined) {
                                localVarQueryParameter['policy'] = policy;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Returns all system(s) that match the query parameters
         * @summary Get system information
         * @param {string} [coamsId] **COAMS ID**: Filter query by Cyber Operational Attributes Management System (COAMS).
         * @param {string} [ditprId] **DITPR ID**: Filter query by DoD Information Technology (IT) Portfolio Repository (DITPR).
         * @param {boolean} [includeDecommissioned] **Include Decommissioned Systems**: Indicates if decommissioned systems are retrieved.  If no value is specified, the default returns true to include decommissioned systems.
         * @param {boolean} [includeDitprMetrics] **Include DITPR**: Indicates if DITPR metrics are retrieved.  This query string parameter cannot be used in conjunction with the following parameters:   - includePackage   - ditprId   - coamsId  If no value is specified, the default returns false to not include DITPR Metrics.
         * @param {boolean} [includePackage] **Include Package**:  Indicates if additional packages information are retrieved for queried system.  If no value is specified, the default returns false to not include package information
         * @param {GetSystemsPolicyEnum} [policy] **System Policy**: Filter query by system policy.  If no value is specified, the default returns RMF policy information for dual-policy systems.
         * @param {string} [registrationType] **Registration Type**: Filter record by selected registration type (single value or comma delimited values).  *Available values:* assessAndAuthorize, assessOnly, guest, regular, functional, cloudServiceProvider, commonControlProvider
         * @param {boolean} [reportsForScorecard] **DoD Cyber Hygiene Scorecard**: Used to filter results to only return systems that report to the DoD Cyber Hygiene Scorecard.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystems: function (coamsId, ditprId, includeDecommissioned, includeDitprMetrics, includePackage, policy, registrationType, reportsForScorecard, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/systems";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (coamsId !== undefined) {
                                localVarQueryParameter['coamsId'] = coamsId;
                            }
                            if (ditprId !== undefined) {
                                localVarQueryParameter['ditprId'] = ditprId;
                            }
                            if (includeDecommissioned !== undefined) {
                                localVarQueryParameter['includeDecommissioned'] = includeDecommissioned;
                            }
                            if (includeDitprMetrics !== undefined) {
                                localVarQueryParameter['includeDitprMetrics'] = includeDitprMetrics;
                            }
                            if (includePackage !== undefined) {
                                localVarQueryParameter['includePackage'] = includePackage;
                            }
                            if (policy !== undefined) {
                                localVarQueryParameter['policy'] = policy;
                            }
                            if (registrationType !== undefined) {
                                localVarQueryParameter['registrationType'] = registrationType;
                            }
                            if (reportsForScorecard !== undefined) {
                                localVarQueryParameter['reportsForScorecard'] = reportsForScorecard;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * SystemsApi - functional programming interface
 * @export
 */
exports.SystemsApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.SystemsApiAxiosParamCreator(configuration);
    return {
        /**
         * Returns the system matching provided parameters
         * @summary Get system information for a specific system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {boolean} [includePackage] **Include Package**:  Indicates if additional packages information are retrieved for queried system.  If no value is specified, the default returns false to not include package information
         * @param {GetSystemPolicyEnum} [policy] **System Policy**: Filter query by system policy.  If no value is specified, the default returns RMF policy information for dual-policy systems.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystem: function (systemId, includePackage, policy, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystem(systemId, includePackage, policy, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns all system(s) that match the query parameters
         * @summary Get system information
         * @param {string} [coamsId] **COAMS ID**: Filter query by Cyber Operational Attributes Management System (COAMS).
         * @param {string} [ditprId] **DITPR ID**: Filter query by DoD Information Technology (IT) Portfolio Repository (DITPR).
         * @param {boolean} [includeDecommissioned] **Include Decommissioned Systems**: Indicates if decommissioned systems are retrieved.  If no value is specified, the default returns true to include decommissioned systems.
         * @param {boolean} [includeDitprMetrics] **Include DITPR**: Indicates if DITPR metrics are retrieved.  This query string parameter cannot be used in conjunction with the following parameters:   - includePackage   - ditprId   - coamsId  If no value is specified, the default returns false to not include DITPR Metrics.
         * @param {boolean} [includePackage] **Include Package**:  Indicates if additional packages information are retrieved for queried system.  If no value is specified, the default returns false to not include package information
         * @param {GetSystemsPolicyEnum} [policy] **System Policy**: Filter query by system policy.  If no value is specified, the default returns RMF policy information for dual-policy systems.
         * @param {string} [registrationType] **Registration Type**: Filter record by selected registration type (single value or comma delimited values).  *Available values:* assessAndAuthorize, assessOnly, guest, regular, functional, cloudServiceProvider, commonControlProvider
         * @param {boolean} [reportsForScorecard] **DoD Cyber Hygiene Scorecard**: Used to filter results to only return systems that report to the DoD Cyber Hygiene Scorecard.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystems: function (coamsId, ditprId, includeDecommissioned, includeDitprMetrics, includePackage, policy, registrationType, reportsForScorecard, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystems(coamsId, ditprId, includeDecommissioned, includeDitprMetrics, includePackage, policy, registrationType, reportsForScorecard, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * SystemsApi - factory interface
 * @export
 */
exports.SystemsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.SystemsApiFp(configuration);
    return {
        /**
         * Returns the system matching provided parameters
         * @summary Get system information for a specific system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {boolean} [includePackage] **Include Package**:  Indicates if additional packages information are retrieved for queried system.  If no value is specified, the default returns false to not include package information
         * @param {GetSystemPolicyEnum} [policy] **System Policy**: Filter query by system policy.  If no value is specified, the default returns RMF policy information for dual-policy systems.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystem: function (systemId, includePackage, policy, options) {
            return localVarFp.getSystem(systemId, includePackage, policy, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns all system(s) that match the query parameters
         * @summary Get system information
         * @param {string} [coamsId] **COAMS ID**: Filter query by Cyber Operational Attributes Management System (COAMS).
         * @param {string} [ditprId] **DITPR ID**: Filter query by DoD Information Technology (IT) Portfolio Repository (DITPR).
         * @param {boolean} [includeDecommissioned] **Include Decommissioned Systems**: Indicates if decommissioned systems are retrieved.  If no value is specified, the default returns true to include decommissioned systems.
         * @param {boolean} [includeDitprMetrics] **Include DITPR**: Indicates if DITPR metrics are retrieved.  This query string parameter cannot be used in conjunction with the following parameters:   - includePackage   - ditprId   - coamsId  If no value is specified, the default returns false to not include DITPR Metrics.
         * @param {boolean} [includePackage] **Include Package**:  Indicates if additional packages information are retrieved for queried system.  If no value is specified, the default returns false to not include package information
         * @param {GetSystemsPolicyEnum} [policy] **System Policy**: Filter query by system policy.  If no value is specified, the default returns RMF policy information for dual-policy systems.
         * @param {string} [registrationType] **Registration Type**: Filter record by selected registration type (single value or comma delimited values).  *Available values:* assessAndAuthorize, assessOnly, guest, regular, functional, cloudServiceProvider, commonControlProvider
         * @param {boolean} [reportsForScorecard] **DoD Cyber Hygiene Scorecard**: Used to filter results to only return systems that report to the DoD Cyber Hygiene Scorecard.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystems: function (coamsId, ditprId, includeDecommissioned, includeDitprMetrics, includePackage, policy, registrationType, reportsForScorecard, options) {
            return localVarFp.getSystems(coamsId, ditprId, includeDecommissioned, includeDitprMetrics, includePackage, policy, registrationType, reportsForScorecard, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * SystemsApi - object-oriented interface
 * @export
 * @class SystemsApi
 * @extends {BaseAPI}
 */
var SystemsApi = /** @class */ (function (_super) {
    __extends(SystemsApi, _super);
    function SystemsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Returns the system matching provided parameters
     * @summary Get system information for a specific system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {boolean} [includePackage] **Include Package**:  Indicates if additional packages information are retrieved for queried system.  If no value is specified, the default returns false to not include package information
     * @param {GetSystemPolicyEnum} [policy] **System Policy**: Filter query by system policy.  If no value is specified, the default returns RMF policy information for dual-policy systems.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemsApi
     */
    SystemsApi.prototype.getSystem = function (systemId, includePackage, policy, options) {
        var _this = this;
        return exports.SystemsApiFp(this.configuration).getSystem(systemId, includePackage, policy, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns all system(s) that match the query parameters
     * @summary Get system information
     * @param {string} [coamsId] **COAMS ID**: Filter query by Cyber Operational Attributes Management System (COAMS).
     * @param {string} [ditprId] **DITPR ID**: Filter query by DoD Information Technology (IT) Portfolio Repository (DITPR).
     * @param {boolean} [includeDecommissioned] **Include Decommissioned Systems**: Indicates if decommissioned systems are retrieved.  If no value is specified, the default returns true to include decommissioned systems.
     * @param {boolean} [includeDitprMetrics] **Include DITPR**: Indicates if DITPR metrics are retrieved.  This query string parameter cannot be used in conjunction with the following parameters:   - includePackage   - ditprId   - coamsId  If no value is specified, the default returns false to not include DITPR Metrics.
     * @param {boolean} [includePackage] **Include Package**:  Indicates if additional packages information are retrieved for queried system.  If no value is specified, the default returns false to not include package information
     * @param {GetSystemsPolicyEnum} [policy] **System Policy**: Filter query by system policy.  If no value is specified, the default returns RMF policy information for dual-policy systems.
     * @param {string} [registrationType] **Registration Type**: Filter record by selected registration type (single value or comma delimited values).  *Available values:* assessAndAuthorize, assessOnly, guest, regular, functional, cloudServiceProvider, commonControlProvider
     * @param {boolean} [reportsForScorecard] **DoD Cyber Hygiene Scorecard**: Used to filter results to only return systems that report to the DoD Cyber Hygiene Scorecard.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemsApi
     */
    SystemsApi.prototype.getSystems = function (coamsId, ditprId, includeDecommissioned, includeDitprMetrics, includePackage, policy, registrationType, reportsForScorecard, options) {
        var _this = this;
        return exports.SystemsApiFp(this.configuration).getSystems(coamsId, ditprId, includeDecommissioned, includeDitprMetrics, includePackage, policy, registrationType, reportsForScorecard, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SystemsApi;
}(base_1.BaseAPI));
exports.SystemsApi = SystemsApi;
/**
 * @export
 */
exports.GetSystemPolicyEnum = {
    Diacap: 'diacap',
    Rmf: 'rmf',
    Reporting: 'reporting',
    UnknownDefaultOpenApi: '11184809'
};
/**
 * @export
 */
exports.GetSystemsPolicyEnum = {
    Diacap: 'diacap',
    Rmf: 'rmf',
    Reporting: 'reporting',
    UnknownDefaultOpenApi: '11184809'
};
/**
 * TestApi - axios parameter creator
 * @export
 */
exports.TestApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Tests the endpoint connection
         * @summary Test connection to the API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testConnection: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * TestApi - functional programming interface
 * @export
 */
exports.TestApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.TestApiAxiosParamCreator(configuration);
    return {
        /**
         * Tests the endpoint connection
         * @summary Test connection to the API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testConnection: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.testConnection(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * TestApi - factory interface
 * @export
 */
exports.TestApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.TestApiFp(configuration);
    return {
        /**
         * Tests the endpoint connection
         * @summary Test connection to the API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testConnection: function (options) {
            return localVarFp.testConnection(options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * TestApi - object-oriented interface
 * @export
 * @class TestApi
 * @extends {BaseAPI}
 */
var TestApi = /** @class */ (function (_super) {
    __extends(TestApi, _super);
    function TestApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Tests the endpoint connection
     * @summary Test connection to the API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApi
     */
    TestApi.prototype.testConnection = function (options) {
        var _this = this;
        return exports.TestApiFp(this.configuration).testConnection(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return TestApi;
}(base_1.BaseAPI));
exports.TestApi = TestApi;
/**
 * TestResultsApi - axios parameter creator
 * @export
 */
exports.TestResultsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Adds test results for given `systemId`  **Request Body Required Fields** - `testedBy` - `testDate` - `description` - `complianceStatus` - `assessmentProcedure`
         * @summary Add one or many test results in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Add test results to a system (systemId)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTestResultsBySystemId: function (systemId, requestBody, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            common_1.assertParamExists('addTestResultsBySystemId', 'systemId', systemId);
                            // verify required parameter 'requestBody' is not null or undefined
                            common_1.assertParamExists('addTestResultsBySystemId', 'requestBody', requestBody);
                            localVarPath = "/api/systems/{systemId}/test-results"
                                .replace("{" + "systemId" + "}", encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Returns system test results information for matching parameters.<br>
         * @summary Get one or many test results in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} [controlAcronyms] **Control Acronym**: Filter query by given system acronym (single value or comma separated).
         * @param {string} [assessmentProcedures] **Assessment Procedure**: Filter query by given Security Control Assessment Procedure (single value or comma separated).
         * @param {string} [ccis] **CCI System**: Filter query by Control Correlation Identifiers (CCIs) (single value or comma separated).
         * @param {boolean} [latestOnly] **Latest Results Only**: Indicates that only the latest test resultes are retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemTestResults: function (systemId, controlAcronyms, assessmentProcedures, ccis, latestOnly, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            common_1.assertParamExists('getSystemTestResults', 'systemId', systemId);
                            localVarPath = "/api/systems/{systemId}/test-results"
                                .replace("{" + "systemId" + "}", encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (controlAcronyms !== undefined) {
                                localVarQueryParameter['controlAcronyms'] = controlAcronyms;
                            }
                            if (assessmentProcedures !== undefined) {
                                localVarQueryParameter['assessmentProcedures'] = assessmentProcedures;
                            }
                            if (ccis !== undefined) {
                                localVarQueryParameter['ccis'] = ccis;
                            }
                            if (latestOnly !== undefined) {
                                localVarQueryParameter['latestOnly'] = latestOnly;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * TestResultsApi - functional programming interface
 * @export
 */
exports.TestResultsApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.TestResultsApiAxiosParamCreator(configuration);
    return {
        /**
         * Adds test results for given `systemId`  **Request Body Required Fields** - `testedBy` - `testDate` - `description` - `complianceStatus` - `assessmentProcedure`
         * @summary Add one or many test results in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Add test results to a system (systemId)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTestResultsBySystemId: function (systemId, requestBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addTestResultsBySystemId(systemId, requestBody, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns system test results information for matching parameters.<br>
         * @summary Get one or many test results in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} [controlAcronyms] **Control Acronym**: Filter query by given system acronym (single value or comma separated).
         * @param {string} [assessmentProcedures] **Assessment Procedure**: Filter query by given Security Control Assessment Procedure (single value or comma separated).
         * @param {string} [ccis] **CCI System**: Filter query by Control Correlation Identifiers (CCIs) (single value or comma separated).
         * @param {boolean} [latestOnly] **Latest Results Only**: Indicates that only the latest test resultes are retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemTestResults: function (systemId, controlAcronyms, assessmentProcedures, ccis, latestOnly, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemTestResults(systemId, controlAcronyms, assessmentProcedures, ccis, latestOnly, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * TestResultsApi - factory interface
 * @export
 */
exports.TestResultsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.TestResultsApiFp(configuration);
    return {
        /**
         * Adds test results for given `systemId`  **Request Body Required Fields** - `testedBy` - `testDate` - `description` - `complianceStatus` - `assessmentProcedure`
         * @summary Add one or many test results in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Add test results to a system (systemId)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTestResultsBySystemId: function (systemId, requestBody, options) {
            return localVarFp.addTestResultsBySystemId(systemId, requestBody, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns system test results information for matching parameters.<br>
         * @summary Get one or many test results in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} [controlAcronyms] **Control Acronym**: Filter query by given system acronym (single value or comma separated).
         * @param {string} [assessmentProcedures] **Assessment Procedure**: Filter query by given Security Control Assessment Procedure (single value or comma separated).
         * @param {string} [ccis] **CCI System**: Filter query by Control Correlation Identifiers (CCIs) (single value or comma separated).
         * @param {boolean} [latestOnly] **Latest Results Only**: Indicates that only the latest test resultes are retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemTestResults: function (systemId, controlAcronyms, assessmentProcedures, ccis, latestOnly, options) {
            return localVarFp.getSystemTestResults(systemId, controlAcronyms, assessmentProcedures, ccis, latestOnly, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * TestResultsApi - object-oriented interface
 * @export
 * @class TestResultsApi
 * @extends {BaseAPI}
 */
var TestResultsApi = /** @class */ (function (_super) {
    __extends(TestResultsApi, _super);
    function TestResultsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Adds test results for given `systemId`  **Request Body Required Fields** - `testedBy` - `testDate` - `description` - `complianceStatus` - `assessmentProcedure`
     * @summary Add one or many test results in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {Array<object>} requestBody Add test results to a system (systemId)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestResultsApi
     */
    TestResultsApi.prototype.addTestResultsBySystemId = function (systemId, requestBody, options) {
        var _this = this;
        return exports.TestResultsApiFp(this.configuration).addTestResultsBySystemId(systemId, requestBody, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns system test results information for matching parameters.<br>
     * @summary Get one or many test results in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {string} [controlAcronyms] **Control Acronym**: Filter query by given system acronym (single value or comma separated).
     * @param {string} [assessmentProcedures] **Assessment Procedure**: Filter query by given Security Control Assessment Procedure (single value or comma separated).
     * @param {string} [ccis] **CCI System**: Filter query by Control Correlation Identifiers (CCIs) (single value or comma separated).
     * @param {boolean} [latestOnly] **Latest Results Only**: Indicates that only the latest test resultes are retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestResultsApi
     */
    TestResultsApi.prototype.getSystemTestResults = function (systemId, controlAcronyms, assessmentProcedures, ccis, latestOnly, options) {
        var _this = this;
        return exports.TestResultsApiFp(this.configuration).getSystemTestResults(systemId, controlAcronyms, assessmentProcedures, ccis, latestOnly, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return TestResultsApi;
}(base_1.BaseAPI));
exports.TestResultsApi = TestResultsApi;
/**
 * ThreatRisksDashboardsApi - axios parameter creator
 * @export
 */
exports.ThreatRisksDashboardsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get VA system threat architecture details dashboard information.
         * @summary VA System Threat Architecture Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemThreatArchitectureDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            common_1.assertParamExists('getVaSystemThreatArchitectureDetails', 'orgId', orgId);
                            localVarPath = "/api/dashboards/va-system-threat-architecture-details";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get VA system threat risk summary dashboard information.
         * @summary VA System Threat Risks Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemThreatRiskSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            common_1.assertParamExists('getVaSystemThreatRiskSummary', 'orgId', orgId);
                            localVarPath = "/api/dashboards/va-system-threat-risks-summary";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get VA system threat source details dashboard information.
         * @summary VA System Threat Sources Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemThreatSourceDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            common_1.assertParamExists('getVaSystemThreatSourceDetails', 'orgId', orgId);
                            localVarPath = "/api/dashboards/va-system-threat-sources-details";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * ThreatRisksDashboardsApi - functional programming interface
 * @export
 */
exports.ThreatRisksDashboardsApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.ThreatRisksDashboardsApiAxiosParamCreator(configuration);
    return {
        /**
         * Get VA system threat architecture details dashboard information.
         * @summary VA System Threat Architecture Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemThreatArchitectureDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getVaSystemThreatArchitectureDetails(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Get VA system threat risk summary dashboard information.
         * @summary VA System Threat Risks Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemThreatRiskSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getVaSystemThreatRiskSummary(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Get VA system threat source details dashboard information.
         * @summary VA System Threat Sources Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemThreatSourceDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getVaSystemThreatSourceDetails(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * ThreatRisksDashboardsApi - factory interface
 * @export
 */
exports.ThreatRisksDashboardsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.ThreatRisksDashboardsApiFp(configuration);
    return {
        /**
         * Get VA system threat architecture details dashboard information.
         * @summary VA System Threat Architecture Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemThreatArchitectureDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getVaSystemThreatArchitectureDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get VA system threat risk summary dashboard information.
         * @summary VA System Threat Risks Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemThreatRiskSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getVaSystemThreatRiskSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get VA system threat source details dashboard information.
         * @summary VA System Threat Sources Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemThreatSourceDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getVaSystemThreatSourceDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * ThreatRisksDashboardsApi - object-oriented interface
 * @export
 * @class ThreatRisksDashboardsApi
 * @extends {BaseAPI}
 */
var ThreatRisksDashboardsApi = /** @class */ (function (_super) {
    __extends(ThreatRisksDashboardsApi, _super);
    function ThreatRisksDashboardsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get VA system threat architecture details dashboard information.
     * @summary VA System Threat Architecture Details
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThreatRisksDashboardsApi
     */
    ThreatRisksDashboardsApi.prototype.getVaSystemThreatArchitectureDetails = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return exports.ThreatRisksDashboardsApiFp(this.configuration).getVaSystemThreatArchitectureDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get VA system threat risk summary dashboard information.
     * @summary VA System Threat Risks Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThreatRisksDashboardsApi
     */
    ThreatRisksDashboardsApi.prototype.getVaSystemThreatRiskSummary = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return exports.ThreatRisksDashboardsApiFp(this.configuration).getVaSystemThreatRiskSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get VA system threat source details dashboard information.
     * @summary VA System Threat Sources Details
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThreatRisksDashboardsApi
     */
    ThreatRisksDashboardsApi.prototype.getVaSystemThreatSourceDetails = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return exports.ThreatRisksDashboardsApiFp(this.configuration).getVaSystemThreatSourceDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ThreatRisksDashboardsApi;
}(base_1.BaseAPI));
exports.ThreatRisksDashboardsApi = ThreatRisksDashboardsApi;
/**
 * UsersDashboardApi - axios parameter creator
 * @export
 */
exports.UsersDashboardApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get user system assignments details dashboard information.
         * @summary User System Assignments Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserSystemAssignmentsDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            common_1.assertParamExists('getUserSystemAssignmentsDetails', 'orgId', orgId);
                            localVarPath = "/api/dashboards/user-system-assignments-details";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * UsersDashboardApi - functional programming interface
 * @export
 */
exports.UsersDashboardApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.UsersDashboardApiAxiosParamCreator(configuration);
    return {
        /**
         * Get user system assignments details dashboard information.
         * @summary User System Assignments Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserSystemAssignmentsDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getUserSystemAssignmentsDetails(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * UsersDashboardApi - factory interface
 * @export
 */
exports.UsersDashboardApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.UsersDashboardApiFp(configuration);
    return {
        /**
         * Get user system assignments details dashboard information.
         * @summary User System Assignments Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserSystemAssignmentsDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getUserSystemAssignmentsDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * UsersDashboardApi - object-oriented interface
 * @export
 * @class UsersDashboardApi
 * @extends {BaseAPI}
 */
var UsersDashboardApi = /** @class */ (function (_super) {
    __extends(UsersDashboardApi, _super);
    function UsersDashboardApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get user system assignments details dashboard information.
     * @summary User System Assignments Details
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersDashboardApi
     */
    UsersDashboardApi.prototype.getUserSystemAssignmentsDetails = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return exports.UsersDashboardApiFp(this.configuration).getUserSystemAssignmentsDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return UsersDashboardApi;
}(base_1.BaseAPI));
exports.UsersDashboardApi = UsersDashboardApi;
/**
 * WorkflowDefinitionsApi - axios parameter creator
 * @export
 */
exports.WorkflowDefinitionsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * View all workflow schemas available on the eMASS instance filtered by  status `includeInactive` and registration type `registrationType`.
         * @summary Get workflow definitions in a site
         * @param {boolean} [includeInactive] **Include Inactive**: If no value is specified, the default returns false to not include outdated workflow definitions.
         * @param {string} [registrationType] **Registration Type**: Filter record by selected registration type (single value or comma delimited values).  *Available values:* assessAndAuthorize, assessOnly, guest, regular, functional, cloudServiceProvider, commonControlProvider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowDefinitions: function (includeInactive, registrationType, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/workflows/definitions";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (includeInactive !== undefined) {
                                localVarQueryParameter['includeInactive'] = includeInactive;
                            }
                            if (registrationType !== undefined) {
                                localVarQueryParameter['registrationType'] = registrationType;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * WorkflowDefinitionsApi - functional programming interface
 * @export
 */
exports.WorkflowDefinitionsApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.WorkflowDefinitionsApiAxiosParamCreator(configuration);
    return {
        /**
         * View all workflow schemas available on the eMASS instance filtered by  status `includeInactive` and registration type `registrationType`.
         * @summary Get workflow definitions in a site
         * @param {boolean} [includeInactive] **Include Inactive**: If no value is specified, the default returns false to not include outdated workflow definitions.
         * @param {string} [registrationType] **Registration Type**: Filter record by selected registration type (single value or comma delimited values).  *Available values:* assessAndAuthorize, assessOnly, guest, regular, functional, cloudServiceProvider, commonControlProvider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowDefinitions: function (includeInactive, registrationType, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getWorkflowDefinitions(includeInactive, registrationType, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * WorkflowDefinitionsApi - factory interface
 * @export
 */
exports.WorkflowDefinitionsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.WorkflowDefinitionsApiFp(configuration);
    return {
        /**
         * View all workflow schemas available on the eMASS instance filtered by  status `includeInactive` and registration type `registrationType`.
         * @summary Get workflow definitions in a site
         * @param {boolean} [includeInactive] **Include Inactive**: If no value is specified, the default returns false to not include outdated workflow definitions.
         * @param {string} [registrationType] **Registration Type**: Filter record by selected registration type (single value or comma delimited values).  *Available values:* assessAndAuthorize, assessOnly, guest, regular, functional, cloudServiceProvider, commonControlProvider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowDefinitions: function (includeInactive, registrationType, options) {
            return localVarFp.getWorkflowDefinitions(includeInactive, registrationType, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * WorkflowDefinitionsApi - object-oriented interface
 * @export
 * @class WorkflowDefinitionsApi
 * @extends {BaseAPI}
 */
var WorkflowDefinitionsApi = /** @class */ (function (_super) {
    __extends(WorkflowDefinitionsApi, _super);
    function WorkflowDefinitionsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * View all workflow schemas available on the eMASS instance filtered by  status `includeInactive` and registration type `registrationType`.
     * @summary Get workflow definitions in a site
     * @param {boolean} [includeInactive] **Include Inactive**: If no value is specified, the default returns false to not include outdated workflow definitions.
     * @param {string} [registrationType] **Registration Type**: Filter record by selected registration type (single value or comma delimited values).  *Available values:* assessAndAuthorize, assessOnly, guest, regular, functional, cloudServiceProvider, commonControlProvider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowDefinitionsApi
     */
    WorkflowDefinitionsApi.prototype.getWorkflowDefinitions = function (includeInactive, registrationType, options) {
        var _this = this;
        return exports.WorkflowDefinitionsApiFp(this.configuration).getWorkflowDefinitions(includeInactive, registrationType, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return WorkflowDefinitionsApi;
}(base_1.BaseAPI));
exports.WorkflowDefinitionsApi = WorkflowDefinitionsApi;
/**
 * WorkflowInstancesApi - axios parameter creator
 * @export
 */
exports.WorkflowInstancesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * View detailed information on all active and historical workflows filtered by provided parameters.
         * @summary Get workflow instances in a site
         * @param {boolean} [includeComments] **Include Comments**: If no value is specified, the default returns true to not include transition comments.  Note: Corresponds to the Comments textbox that is required at most workflow transitions. Does not include other text input fields such as Terms / Conditions for Authorization.
         * @param {boolean} [includeDecommissionSystems] **Include Decommission Systems**: If no value is specified, the default returns false to exclude decommissioned systems.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.  **Note:** Pages contain 1000 workflow instances.
         * @param {string} [sinceDate] **Date**: Filter on authorization/assessment date (Unix date format).  Note: Filters off the lastEditedDate field.  Note: The authorization/assessment decisions on completed workflows  can be edited for up to 30 days after the initial decision is made.
         * @param {GetSystemWorkflowInstancesStatusEnum} [status] **Status**: Filter by status.  If no value is specified, the default returns all to include both active and inactive workflows.  Note: Any workflows at a current stage of Complete or Cancelled are inactive. Ongoing workflows currently at other stages are active.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemWorkflowInstances: function (includeComments, includeDecommissionSystems, pageIndex, sinceDate, status, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/workflows/instances";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (includeComments !== undefined) {
                                localVarQueryParameter['includeComments'] = includeComments;
                            }
                            if (includeDecommissionSystems !== undefined) {
                                localVarQueryParameter['includeDecommissionSystems'] = includeDecommissionSystems;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (sinceDate !== undefined) {
                                localVarQueryParameter['sinceDate'] = sinceDate;
                            }
                            if (status !== undefined) {
                                localVarQueryParameter['status'] = status;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * View detailed historical workflow information for `workflowInstanceId`.
         * @summary Get workflow instance by ID
         * @param {number} workflowInstanceId **Workflow Instance Id**: The unique workflow definition identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemWorkflowInstancesByWorkflowInstanceId: function (workflowInstanceId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'workflowInstanceId' is not null or undefined
                            common_1.assertParamExists('getSystemWorkflowInstancesByWorkflowInstanceId', 'workflowInstanceId', workflowInstanceId);
                            localVarPath = "/api/workflows/instances/{workflowInstanceId}"
                                .replace("{" + "workflowInstanceId" + "}", encodeURIComponent(String(workflowInstanceId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * WorkflowInstancesApi - functional programming interface
 * @export
 */
exports.WorkflowInstancesApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.WorkflowInstancesApiAxiosParamCreator(configuration);
    return {
        /**
         * View detailed information on all active and historical workflows filtered by provided parameters.
         * @summary Get workflow instances in a site
         * @param {boolean} [includeComments] **Include Comments**: If no value is specified, the default returns true to not include transition comments.  Note: Corresponds to the Comments textbox that is required at most workflow transitions. Does not include other text input fields such as Terms / Conditions for Authorization.
         * @param {boolean} [includeDecommissionSystems] **Include Decommission Systems**: If no value is specified, the default returns false to exclude decommissioned systems.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.  **Note:** Pages contain 1000 workflow instances.
         * @param {string} [sinceDate] **Date**: Filter on authorization/assessment date (Unix date format).  Note: Filters off the lastEditedDate field.  Note: The authorization/assessment decisions on completed workflows  can be edited for up to 30 days after the initial decision is made.
         * @param {GetSystemWorkflowInstancesStatusEnum} [status] **Status**: Filter by status.  If no value is specified, the default returns all to include both active and inactive workflows.  Note: Any workflows at a current stage of Complete or Cancelled are inactive. Ongoing workflows currently at other stages are active.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemWorkflowInstances: function (includeComments, includeDecommissionSystems, pageIndex, sinceDate, status, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemWorkflowInstances(includeComments, includeDecommissionSystems, pageIndex, sinceDate, status, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * View detailed historical workflow information for `workflowInstanceId`.
         * @summary Get workflow instance by ID
         * @param {number} workflowInstanceId **Workflow Instance Id**: The unique workflow definition identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemWorkflowInstancesByWorkflowInstanceId: function (workflowInstanceId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemWorkflowInstancesByWorkflowInstanceId(workflowInstanceId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * WorkflowInstancesApi - factory interface
 * @export
 */
exports.WorkflowInstancesApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.WorkflowInstancesApiFp(configuration);
    return {
        /**
         * View detailed information on all active and historical workflows filtered by provided parameters.
         * @summary Get workflow instances in a site
         * @param {boolean} [includeComments] **Include Comments**: If no value is specified, the default returns true to not include transition comments.  Note: Corresponds to the Comments textbox that is required at most workflow transitions. Does not include other text input fields such as Terms / Conditions for Authorization.
         * @param {boolean} [includeDecommissionSystems] **Include Decommission Systems**: If no value is specified, the default returns false to exclude decommissioned systems.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.  **Note:** Pages contain 1000 workflow instances.
         * @param {string} [sinceDate] **Date**: Filter on authorization/assessment date (Unix date format).  Note: Filters off the lastEditedDate field.  Note: The authorization/assessment decisions on completed workflows  can be edited for up to 30 days after the initial decision is made.
         * @param {GetSystemWorkflowInstancesStatusEnum} [status] **Status**: Filter by status.  If no value is specified, the default returns all to include both active and inactive workflows.  Note: Any workflows at a current stage of Complete or Cancelled are inactive. Ongoing workflows currently at other stages are active.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemWorkflowInstances: function (includeComments, includeDecommissionSystems, pageIndex, sinceDate, status, options) {
            return localVarFp.getSystemWorkflowInstances(includeComments, includeDecommissionSystems, pageIndex, sinceDate, status, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * View detailed historical workflow information for `workflowInstanceId`.
         * @summary Get workflow instance by ID
         * @param {number} workflowInstanceId **Workflow Instance Id**: The unique workflow definition identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemWorkflowInstancesByWorkflowInstanceId: function (workflowInstanceId, options) {
            return localVarFp.getSystemWorkflowInstancesByWorkflowInstanceId(workflowInstanceId, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * WorkflowInstancesApi - object-oriented interface
 * @export
 * @class WorkflowInstancesApi
 * @extends {BaseAPI}
 */
var WorkflowInstancesApi = /** @class */ (function (_super) {
    __extends(WorkflowInstancesApi, _super);
    function WorkflowInstancesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * View detailed information on all active and historical workflows filtered by provided parameters.
     * @summary Get workflow instances in a site
     * @param {boolean} [includeComments] **Include Comments**: If no value is specified, the default returns true to not include transition comments.  Note: Corresponds to the Comments textbox that is required at most workflow transitions. Does not include other text input fields such as Terms / Conditions for Authorization.
     * @param {boolean} [includeDecommissionSystems] **Include Decommission Systems**: If no value is specified, the default returns false to exclude decommissioned systems.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.  **Note:** Pages contain 1000 workflow instances.
     * @param {string} [sinceDate] **Date**: Filter on authorization/assessment date (Unix date format).  Note: Filters off the lastEditedDate field.  Note: The authorization/assessment decisions on completed workflows  can be edited for up to 30 days after the initial decision is made.
     * @param {GetSystemWorkflowInstancesStatusEnum} [status] **Status**: Filter by status.  If no value is specified, the default returns all to include both active and inactive workflows.  Note: Any workflows at a current stage of Complete or Cancelled are inactive. Ongoing workflows currently at other stages are active.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowInstancesApi
     */
    WorkflowInstancesApi.prototype.getSystemWorkflowInstances = function (includeComments, includeDecommissionSystems, pageIndex, sinceDate, status, options) {
        var _this = this;
        return exports.WorkflowInstancesApiFp(this.configuration).getSystemWorkflowInstances(includeComments, includeDecommissionSystems, pageIndex, sinceDate, status, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * View detailed historical workflow information for `workflowInstanceId`.
     * @summary Get workflow instance by ID
     * @param {number} workflowInstanceId **Workflow Instance Id**: The unique workflow definition identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowInstancesApi
     */
    WorkflowInstancesApi.prototype.getSystemWorkflowInstancesByWorkflowInstanceId = function (workflowInstanceId, options) {
        var _this = this;
        return exports.WorkflowInstancesApiFp(this.configuration).getSystemWorkflowInstancesByWorkflowInstanceId(workflowInstanceId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return WorkflowInstancesApi;
}(base_1.BaseAPI));
exports.WorkflowInstancesApi = WorkflowInstancesApi;
/**
 * @export
 */
exports.GetSystemWorkflowInstancesStatusEnum = {
    Active: 'active',
    Inactive: 'inactive',
    All: 'all',
    UnknownDefaultOpenApi: '11184809'
};
