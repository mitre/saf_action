"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Enterprise Mission Assurance Support Service (eMASS)
 * The eMASS Representational State Transfer (REST) Application Programming Interface (API) enables users to perform assessments and complete actions associated with system records.  The eMASS API provides an interface for application to communicate eMASS Services. For information on how to register and use the eMASS API reference the [eMASS API Getting Started](eMASSGettingStarted.md).  Additional information about eMASS can be obtain by contacting the National Industrial Security Program (NISP). Points of Contact are:
 *
 * The version of the OpenAPI document: v3.22
 * Contact: disa.global.servicedesk.mbx.ma-ticket-request@mail.mil
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SystemsCloudTypeEnum = exports.SystemsCurrentRmfLifecycleStepEnum = exports.SystemsPrivacyImpactAssessmentStatusEnum = exports.SystemsImpactEnum = exports.SystemsDodConfidentialityEnum = exports.SystemsMacEnum = exports.SystemsAvailabilityEnum = exports.SystemsIntegrityEnum = exports.SystemsConfidentialityEnum = exports.SystemsPrimaryControlSetEnum = exports.SystemsSecurityPlanApprovalStatusEnum = exports.SystemsSystemTypeEnum = exports.SystemsRegistrationTypeEnum = exports.SystemsPolicyEnum = exports.StaticCodeApplicationPostRawSeverityEnum = exports.PoamResponseGetSystemsDataInnerReviewStatusEnum = exports.PoamResponseGetSystemsDataInnerResultingResidualRiskLevelAfterProposedMitigationsEnum = exports.PoamResponseGetSystemsDataInnerStatusEnum = exports.PoamResponseGetPoamsDataResultingResidualRiskLevelAfterProposedMitigationsEnum = exports.PoamResponseGetPoamsDataReviewStatusEnum = exports.PoamResponseGetPoamsDataStatusEnum = exports.PoamRequiredFieldsStatusEnum = exports.PoamReadOnlyFieldsReviewStatusEnum = exports.PoamOptionalFieldsResultingResidualRiskLevelAfterProposedMitigationsEnum = exports.PacPostWorkflowEnum = exports.PacGetWorkflowEnum = exports.MilestonesGetReviewStatusEnum = exports.ControlsResponseGetDataInnerTestMethodEnum = exports.ControlsResponseGetDataInnerResidualRiskLevelEnum = exports.ControlsResponseGetDataInnerImpactEnum = exports.ControlsResponseGetDataInnerLikelihoodEnum = exports.ControlsResponseGetDataInnerRelevanceOfThreatEnum = exports.ControlsResponseGetDataInnerSeverityEnum = exports.ControlsResponseGetDataInnerImplementationStatusEnum = exports.ControlsResponseGetDataInnerSlcmMethodEnum = exports.ControlsResponseGetDataInnerSlcmFrequencyEnum = exports.ControlsResponseGetDataInnerCommonControlProviderEnum = exports.ControlsResponseGetDataInnerControlDesignationEnum = exports.ControlsRequiredFieldsControlDesignationEnum = exports.ControlsOptionalFieldsTestMethodEnum = exports.ControlsOptionalFieldsResidualRiskLevelEnum = exports.ControlsOptionalFieldsImpactEnum = exports.ControlsOptionalFieldsLikelihoodEnum = exports.ControlsOptionalFieldsRelevanceOfThreatEnum = exports.ControlsOptionalFieldsSeverityEnum = exports.ControlsOptionalFieldsImplementationStatusEnum = exports.ControlsConditionalFieldsSlcmMethodEnum = exports.ControlsConditionalFieldsSlcmFrequencyEnum = exports.ControlsConditionalFieldsCommonControlProviderEnum = exports.CmmcGetOperationEnum = void 0;
exports.MilestonesApiFp = exports.MilestonesApiAxiosParamCreator = exports.HardwareBaselineApi = exports.HardwareBaselineApiFactory = exports.HardwareBaselineApiFp = exports.HardwareBaselineApiAxiosParamCreator = exports.AddScanResultsBySystemIdScanTypeEnum = exports.DeviceScanResultsApi = exports.DeviceScanResultsApiFactory = exports.DeviceScanResultsApiFp = exports.DeviceScanResultsApiAxiosParamCreator = exports.ControlsApi = exports.ControlsApiFactory = exports.ControlsApiFp = exports.ControlsApiAxiosParamCreator = exports.ContainerScanResultsApi = exports.ContainerScanResultsApiFactory = exports.ContainerScanResultsApiFp = exports.ContainerScanResultsApiAxiosParamCreator = exports.CoastGuardSystemFISMAMetricsDashboardApi = exports.CoastGuardSystemFISMAMetricsDashboardApiFactory = exports.CoastGuardSystemFISMAMetricsDashboardApiFp = exports.CoastGuardSystemFISMAMetricsDashboardApiAxiosParamCreator = exports.CloudResourceResultsApi = exports.CloudResourceResultsApiFactory = exports.CloudResourceResultsApiFp = exports.CloudResourceResultsApiAxiosParamCreator = exports.CMMCAssessmentsApi = exports.CMMCAssessmentsApiFactory = exports.CMMCAssessmentsApiFp = exports.CMMCAssessmentsApiAxiosParamCreator = exports.CMMCAssessmentDashboardsApi = exports.CMMCAssessmentDashboardsApiFactory = exports.CMMCAssessmentDashboardsApiFp = exports.CMMCAssessmentDashboardsApiAxiosParamCreator = exports.CACApi = exports.CACApiFactory = exports.CACApiFp = exports.CACApiAxiosParamCreator = exports.ArtifactsExportApi = exports.ArtifactsExportApiFactory = exports.ArtifactsExportApiFp = exports.ArtifactsExportApiAxiosParamCreator = exports.ArtifactsApi = exports.ArtifactsApiFactory = exports.ArtifactsApiFp = exports.ArtifactsApiAxiosParamCreator = exports.TestResultsGetComplianceStatusEnum = exports.SystemsMaximumTolerableDowntimeEnum = exports.SystemsAuthorizationToConnectStatusEnum = void 0;
exports.SystemConnectivityCCSDDashboardsApi = exports.SystemConnectivityCCSDDashboardsApiFactory = exports.SystemConnectivityCCSDDashboardsApiFp = exports.SystemConnectivityCCSDDashboardsApiAxiosParamCreator = exports.SystemCONMONIntegrationStatusDashboardApi = exports.SystemCONMONIntegrationStatusDashboardApiFactory = exports.SystemCONMONIntegrationStatusDashboardApiFp = exports.SystemCONMONIntegrationStatusDashboardApiAxiosParamCreator = exports.SystemAssociationsDashboardApi = exports.SystemAssociationsDashboardApiFactory = exports.SystemAssociationsDashboardApiFp = exports.SystemAssociationsDashboardApiAxiosParamCreator = exports.SystemArtifactsDashboardsApi = exports.SystemArtifactsDashboardsApiFactory = exports.SystemArtifactsDashboardsApiFp = exports.SystemArtifactsDashboardsApiAxiosParamCreator = exports.SystemApplicationFindingsDashboardsApi = exports.SystemApplicationFindingsDashboardsApiFactory = exports.SystemApplicationFindingsDashboardsApiFp = exports.SystemApplicationFindingsDashboardsApiAxiosParamCreator = exports.SystemATCIATCDashboardApi = exports.SystemATCIATCDashboardApiFactory = exports.SystemATCIATCDashboardApiFp = exports.SystemATCIATCDashboardApiAxiosParamCreator = exports.StaticCodeScansApi = exports.StaticCodeScansApiFactory = exports.StaticCodeScansApiFp = exports.StaticCodeScansApiAxiosParamCreator = exports.SoftwareBaselineApi = exports.SoftwareBaselineApiFactory = exports.SoftwareBaselineApiFp = exports.SoftwareBaselineApiAxiosParamCreator = exports.RegistrationApi = exports.RegistrationApiFactory = exports.RegistrationApiFp = exports.RegistrationApiAxiosParamCreator = exports.POAMApi = exports.POAMApiFactory = exports.POAMApiFp = exports.POAMApiAxiosParamCreator = exports.PACApi = exports.PACApiFactory = exports.PACApiFp = exports.PACApiAxiosParamCreator = exports.OrganizationMigrationStatusDashboardApi = exports.OrganizationMigrationStatusDashboardApiFactory = exports.OrganizationMigrationStatusDashboardApiFp = exports.OrganizationMigrationStatusDashboardApiAxiosParamCreator = exports.MilestonesApi = exports.MilestonesApiFactory = void 0;
exports.SystemSensorHardwareDashboardsApi = exports.SystemSensorHardwareDashboardsApiFactory = exports.SystemSensorHardwareDashboardsApiFp = exports.SystemSensorHardwareDashboardsApiAxiosParamCreator = exports.SystemSecurityControlsDashboardsApi = exports.SystemSecurityControlsDashboardsApiFactory = exports.SystemSecurityControlsDashboardsApiFp = exports.SystemSecurityControlsDashboardsApiAxiosParamCreator = exports.GetSystemRolesByCategoryIdPolicyEnum = exports.GetSystemRolesByCategoryIdRoleCategoryEnum = exports.SystemRolesApi = exports.SystemRolesApiFactory = exports.SystemRolesApiFp = exports.SystemRolesApiAxiosParamCreator = exports.SystemQuestionnaireDashboardsApi = exports.SystemQuestionnaireDashboardsApiFactory = exports.SystemQuestionnaireDashboardsApiFp = exports.SystemQuestionnaireDashboardsApiAxiosParamCreator = exports.SystemPrivacyDashboardApi = exports.SystemPrivacyDashboardApiFactory = exports.SystemPrivacyDashboardApiFp = exports.SystemPrivacyDashboardApiAxiosParamCreator = exports.SystemPortsProtocolsDashboardsApi = exports.SystemPortsProtocolsDashboardsApiFactory = exports.SystemPortsProtocolsDashboardsApiFp = exports.SystemPortsProtocolsDashboardsApiAxiosParamCreator = exports.SystemPOAMDashboardsApi = exports.SystemPOAMDashboardsApiFactory = exports.SystemPOAMDashboardsApiFp = exports.SystemPOAMDashboardsApiAxiosParamCreator = exports.SystemMigrationStatusDashboardApi = exports.SystemMigrationStatusDashboardApiFactory = exports.SystemMigrationStatusDashboardApiFp = exports.SystemMigrationStatusDashboardApiAxiosParamCreator = exports.SystemHardwareDashboardsApi = exports.SystemHardwareDashboardsApiFactory = exports.SystemHardwareDashboardsApiFp = exports.SystemHardwareDashboardsApiAxiosParamCreator = exports.SystemFISMAMetricsDashboardApi = exports.SystemFISMAMetricsDashboardApiFactory = exports.SystemFISMAMetricsDashboardApiFp = exports.SystemFISMAMetricsDashboardApiAxiosParamCreator = exports.SystemDeviceFindingsDashboardsApi = exports.SystemDeviceFindingsDashboardsApiFactory = exports.SystemDeviceFindingsDashboardsApiFp = exports.SystemDeviceFindingsDashboardsApiAxiosParamCreator = exports.SystemCriticalAssetsDashboardApi = exports.SystemCriticalAssetsDashboardApiFactory = exports.SystemCriticalAssetsDashboardApiFp = exports.SystemCriticalAssetsDashboardApiAxiosParamCreator = void 0;
exports.VASystemDashboardsApi = exports.VASystemDashboardsApiFactory = exports.VASystemDashboardsApiFp = exports.VASystemDashboardsApiAxiosParamCreator = exports.VAOMBFISMADashboardApi = exports.VAOMBFISMADashboardApiFactory = exports.VAOMBFISMADashboardApiFp = exports.VAOMBFISMADashboardApiAxiosParamCreator = exports.UserSystemAssignmentsDashboardApi = exports.UserSystemAssignmentsDashboardApiFactory = exports.UserSystemAssignmentsDashboardApiFp = exports.UserSystemAssignmentsDashboardApiAxiosParamCreator = exports.TestResultsApi = exports.TestResultsApiFactory = exports.TestResultsApiFp = exports.TestResultsApiAxiosParamCreator = exports.TestApi = exports.TestApiFactory = exports.TestApiFp = exports.TestApiAxiosParamCreator = exports.GetSystemsPolicyEnum = exports.GetSystemPolicyEnum = exports.SystemsApi = exports.SystemsApiFactory = exports.SystemsApiFp = exports.SystemsApiAxiosParamCreator = exports.SystemWorkflowsDashboardsApi = exports.SystemWorkflowsDashboardsApiFactory = exports.SystemWorkflowsDashboardsApiFp = exports.SystemWorkflowsDashboardsApiAxiosParamCreator = exports.SystemVulnerabilityDashboardApi = exports.SystemVulnerabilityDashboardApiFactory = exports.SystemVulnerabilityDashboardApiFp = exports.SystemVulnerabilityDashboardApiAxiosParamCreator = exports.SystemTermsConditionsDashboardsApi = exports.SystemTermsConditionsDashboardsApiFactory = exports.SystemTermsConditionsDashboardsApiFp = exports.SystemTermsConditionsDashboardsApiAxiosParamCreator = exports.SystemStatusDashboardApi = exports.SystemStatusDashboardApiFactory = exports.SystemStatusDashboardApiFp = exports.SystemStatusDashboardApiAxiosParamCreator = exports.SystemSoftwareDashboardsApi = exports.SystemSoftwareDashboardsApiFactory = exports.SystemSoftwareDashboardsApiFp = exports.SystemSoftwareDashboardsApiAxiosParamCreator = exports.SystemSensorSoftwareDashboardsApi = exports.SystemSensorSoftwareDashboardsApiFactory = exports.SystemSensorSoftwareDashboardsApiFp = exports.SystemSensorSoftwareDashboardsApiAxiosParamCreator = void 0;
exports.GetSystemWorkflowInstancesStatusEnum = exports.WorkflowInstancesApi = exports.WorkflowInstancesApiFactory = exports.WorkflowInstancesApiFp = exports.WorkflowInstancesApiAxiosParamCreator = exports.WorkflowDefinitionsApi = exports.WorkflowDefinitionsApiFactory = exports.WorkflowDefinitionsApiFp = exports.WorkflowDefinitionsApiAxiosParamCreator = void 0;
var axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("./common");
// @ts-ignore
var base_1 = require("./base");
exports.CmmcGetOperationEnum = {
    Added: 'ADDED',
    Updated: 'UPDATED',
    Deleted: 'DELETED',
    UnknownDefaultOpenApi: '11184809'
};
exports.ControlsConditionalFieldsCommonControlProviderEnum = {
    DoD: 'DoD',
    Component: 'Component',
    Enclave: 'Enclave',
    UnknownDefaultOpenApi: '11184809'
};
exports.ControlsConditionalFieldsSlcmFrequencyEnum = {
    Constantly: 'Constantly',
    Daily: 'Daily',
    Weekly: 'Weekly',
    Monthly: 'Monthly',
    Quarterly: 'Quarterly',
    SemiAnnually: 'Semi-Annually',
    Annually: 'Annually',
    EveryTwoYears: 'Every Two Years',
    EveryThreeYears: 'Every Three Years',
    Undetermined: 'Undetermined',
    UnknownDefaultOpenApi: '11184809'
};
exports.ControlsConditionalFieldsSlcmMethodEnum = {
    Automated: 'Automated',
    SemiAutomated: 'Semi-Automated',
    Manual: 'Manual',
    Undetermined: 'Undetermined',
    UnknownDefaultOpenApi: '11184809'
};
exports.ControlsOptionalFieldsImplementationStatusEnum = {
    Planned: 'Planned',
    Implemented: 'Implemented',
    Inherited: 'Inherited',
    NotApplicable: 'Not Applicable',
    ManuallyInherited: 'Manually Inherited',
    UnknownDefaultOpenApi: '11184809'
};
exports.ControlsOptionalFieldsSeverityEnum = {
    VeryLow: 'Very Low',
    Low: 'Low',
    Moderate: 'Moderate',
    High: 'High',
    VeryHigh: 'Very High',
    UnknownDefaultOpenApi: '11184809'
};
exports.ControlsOptionalFieldsRelevanceOfThreatEnum = {
    VeryLow: 'Very Low',
    Low: 'Low',
    Moderate: 'Moderate',
    High: 'High',
    VeryHigh: 'Very High',
    UnknownDefaultOpenApi: '11184809'
};
exports.ControlsOptionalFieldsLikelihoodEnum = {
    VeryLow: 'Very Low',
    Low: 'Low',
    Moderate: 'Moderate',
    High: 'High',
    VeryHigh: 'Very High',
    UnknownDefaultOpenApi: '11184809'
};
exports.ControlsOptionalFieldsImpactEnum = {
    VeryLow: 'Very Low',
    Low: 'Low',
    Moderate: 'Moderate',
    High: 'High',
    VeryHigh: 'Very High',
    UnknownDefaultOpenApi: '11184809'
};
exports.ControlsOptionalFieldsResidualRiskLevelEnum = {
    VeryLow: 'Very Low',
    Low: 'Low',
    Moderate: 'Moderate',
    High: 'High',
    VeryHigh: 'Very High',
    UnknownDefaultOpenApi: '11184809'
};
exports.ControlsOptionalFieldsTestMethodEnum = {
    Test: 'Test',
    Interview: 'Interview',
    Examine: 'Examine',
    TestInterview: 'Test, Interview',
    TestExamine: 'Test, Examine',
    InterviewExamine: 'Interview, Examine',
    TestInterviewExamine: 'Test, Interview, Examine',
    UnknownDefaultOpenApi: '11184809'
};
exports.ControlsRequiredFieldsControlDesignationEnum = {
    Common: 'Common',
    SystemSpecific: 'System-Specific',
    Hybrid: 'Hybrid',
    UnknownDefaultOpenApi: '11184809'
};
exports.ControlsResponseGetDataInnerControlDesignationEnum = {
    Common: 'Common',
    SystemSpecific: 'System-Specific',
    Hybrid: 'Hybrid',
    UnknownDefaultOpenApi: '11184809'
};
exports.ControlsResponseGetDataInnerCommonControlProviderEnum = {
    DoD: 'DoD',
    Component: 'Component',
    Enclave: 'Enclave',
    UnknownDefaultOpenApi: '11184809'
};
exports.ControlsResponseGetDataInnerSlcmFrequencyEnum = {
    Constantly: 'Constantly',
    Daily: 'Daily',
    Weekly: 'Weekly',
    Monthly: 'Monthly',
    Quarterly: 'Quarterly',
    SemiAnnually: 'Semi-Annually',
    Annually: 'Annually',
    EveryTwoYears: 'Every Two Years',
    EveryThreeYears: 'Every Three Years',
    Undetermined: 'Undetermined',
    UnknownDefaultOpenApi: '11184809'
};
exports.ControlsResponseGetDataInnerSlcmMethodEnum = {
    Automated: 'Automated',
    SemiAutomated: 'Semi-Automated',
    Manual: 'Manual',
    Undetermined: 'Undetermined',
    UnknownDefaultOpenApi: '11184809'
};
exports.ControlsResponseGetDataInnerImplementationStatusEnum = {
    Planned: 'Planned',
    Implemented: 'Implemented',
    Inherited: 'Inherited',
    NotApplicable: 'Not Applicable',
    ManuallyInherited: 'Manually Inherited',
    UnknownDefaultOpenApi: '11184809'
};
exports.ControlsResponseGetDataInnerSeverityEnum = {
    VeryLow: 'Very Low',
    Low: 'Low',
    Moderate: 'Moderate',
    High: 'High',
    VeryHigh: 'Very High',
    UnknownDefaultOpenApi: '11184809'
};
exports.ControlsResponseGetDataInnerRelevanceOfThreatEnum = {
    VeryLow: 'Very Low',
    Low: 'Low',
    Moderate: 'Moderate',
    High: 'High',
    VeryHigh: 'Very High',
    UnknownDefaultOpenApi: '11184809'
};
exports.ControlsResponseGetDataInnerLikelihoodEnum = {
    VeryLow: 'Very Low',
    Low: 'Low',
    Moderate: 'Moderate',
    High: 'High',
    VeryHigh: 'Very High',
    UnknownDefaultOpenApi: '11184809'
};
exports.ControlsResponseGetDataInnerImpactEnum = {
    VeryLow: 'Very Low',
    Low: 'Low',
    Moderate: 'Moderate',
    High: 'High',
    VeryHigh: 'Very High',
    UnknownDefaultOpenApi: '11184809'
};
exports.ControlsResponseGetDataInnerResidualRiskLevelEnum = {
    VeryLow: 'Very Low',
    Low: 'Low',
    Moderate: 'Moderate',
    High: 'High',
    VeryHigh: 'Very High',
    UnknownDefaultOpenApi: '11184809'
};
exports.ControlsResponseGetDataInnerTestMethodEnum = {
    Test: 'Test',
    Interview: 'Interview',
    Examine: 'Examine',
    TestInterview: 'Test, Interview',
    TestExamine: 'Test, Examine',
    InterviewExamine: 'Interview, Examine',
    TestInterviewExamine: 'Test, Interview, Examine',
    UnknownDefaultOpenApi: '11184809'
};
exports.MilestonesGetReviewStatusEnum = {
    NotApproved: 'Not Approved',
    UnderReview: 'Under Review',
    Approved: 'Approved',
    UnknownDefaultOpenApi: '11184809'
};
exports.PacGetWorkflowEnum = {
    AssessAndAuthorize: 'Assess and Authorize',
    AssessOnly: 'Assess Only',
    SecurityPlanApproval: 'Security Plan Approval',
    UnknownDefaultOpenApi: '11184809'
};
exports.PacPostWorkflowEnum = {
    AssessAndAuthorize: 'Assess and Authorize',
    AssessOnly: 'Assess Only',
    SecurityPlanApproval: 'Security Plan Approval',
    UnknownDefaultOpenApi: '11184809'
};
exports.PoamOptionalFieldsResultingResidualRiskLevelAfterProposedMitigationsEnum = {
    VeryLow: 'Very Low',
    Low: 'Low',
    Moderate: 'Moderate',
    High: 'High',
    VeryHigh: 'Very High',
    UnknownDefaultOpenApi: '11184809'
};
exports.PoamReadOnlyFieldsReviewStatusEnum = {
    NotApproved: 'Not Approved',
    UnderReview: 'Under Review',
    Approved: 'Approved',
    UnknownDefaultOpenApi: '11184809'
};
exports.PoamRequiredFieldsStatusEnum = {
    Ongoing: 'Ongoing',
    RiskAccepted: 'Risk Accepted',
    Completed: 'Completed',
    NotApplicable: 'Not Applicable',
    Archived: 'Archived',
    UnknownDefaultOpenApi: '11184809'
};
exports.PoamResponseGetPoamsDataStatusEnum = {
    Ongoing: 'Ongoing',
    RiskAccepted: 'Risk Accepted',
    Completed: 'Completed',
    NotApplicable: 'Not Applicable',
    Archived: 'Archived',
    UnknownDefaultOpenApi: '11184809'
};
exports.PoamResponseGetPoamsDataReviewStatusEnum = {
    NotApproved: 'Not Approved',
    UnderReview: 'Under Review',
    Approved: 'Approved',
    UnknownDefaultOpenApi: '11184809'
};
exports.PoamResponseGetPoamsDataResultingResidualRiskLevelAfterProposedMitigationsEnum = {
    VeryLow: 'Very Low',
    Low: 'Low',
    Moderate: 'Moderate',
    High: 'High',
    VeryHigh: 'Very High',
    UnknownDefaultOpenApi: '11184809'
};
exports.PoamResponseGetSystemsDataInnerStatusEnum = {
    Ongoing: 'Ongoing',
    RiskAccepted: 'Risk Accepted',
    Completed: 'Completed',
    NotApplicable: 'Not Applicable',
    Archived: 'Archived',
    UnknownDefaultOpenApi: '11184809'
};
exports.PoamResponseGetSystemsDataInnerResultingResidualRiskLevelAfterProposedMitigationsEnum = {
    VeryLow: 'Very Low',
    Low: 'Low',
    Moderate: 'Moderate',
    High: 'High',
    VeryHigh: 'Very High',
    UnknownDefaultOpenApi: '11184809'
};
exports.PoamResponseGetSystemsDataInnerReviewStatusEnum = {
    NotApproved: 'Not Approved',
    UnderReview: 'Under Review',
    Approved: 'Approved',
    UnknownDefaultOpenApi: '11184809'
};
exports.StaticCodeApplicationPostRawSeverityEnum = {
    Low: 'Low',
    Medium: 'Medium',
    Moderate: 'Moderate',
    High: 'High',
    Critical: 'Critical',
    UnknownDefaultOpenApi: '11184809'
};
exports.SystemsPolicyEnum = {
    Rmf: 'RMF',
    Diacap: 'DIACAP',
    UnknownDefaultOpenApi: '11184809'
};
exports.SystemsRegistrationTypeEnum = {
    AssessAndAuthorize: 'Assess and Authorize',
    AssessOnly: 'Assess Only',
    Guest: 'Guest',
    Regular: 'Regular',
    Functional: 'Functional',
    CloudServiceProvider: 'Cloud Service Provider',
    AuthorizationToUse: 'Authorization To Use',
    UnknownDefaultOpenApi: '11184809'
};
exports.SystemsSystemTypeEnum = {
    IsMajorApplication: 'IS Major Application',
    IsEnclave: 'IS Enclave',
    PlatformIt: 'Platform IT',
    PlatformItSystem: 'Platform IT System',
    PlatformItInterconnection: 'Platform IT Interconnection',
    AisApplication: 'AIS Application',
    OutsourcedItBasedProcessDoDControlled: 'Outsourced IT-Based Process (DoD-controlled)',
    Enclave: 'Enclave',
    OutsourcedItBasedProcessServiceProviderShared: 'Outsourced IT-Based Process (service provider shared)',
    UnknownDefaultOpenApi: '11184809'
};
exports.SystemsSecurityPlanApprovalStatusEnum = {
    Approved: 'Approved',
    NotYetApproved: 'Not Yet Approved',
    Denied: 'Denied',
    UnknownDefaultOpenApi: '11184809'
};
exports.SystemsPrimaryControlSetEnum = {
    NistSp80053Revision4: 'NIST SP 800-53 Revision 4',
    DoDi85002: 'DoDI 8500.2',
    UnknownDefaultOpenApi: '11184809'
};
exports.SystemsConfidentialityEnum = {
    High: 'High',
    Moderate: 'Moderate',
    Low: 'Low',
    UnknownDefaultOpenApi: '11184809'
};
exports.SystemsIntegrityEnum = {
    High: 'High',
    Moderate: 'Moderate',
    Low: 'Low',
    UnknownDefaultOpenApi: '11184809'
};
exports.SystemsAvailabilityEnum = {
    High: 'High',
    Moderate: 'Moderate',
    Low: 'Low',
    UnknownDefaultOpenApi: '11184809'
};
exports.SystemsMacEnum = {
    I: 'I',
    Ii: 'II',
    Iii: 'III',
    UnknownDefaultOpenApi: '11184809'
};
exports.SystemsDodConfidentialityEnum = {
    Public: 'Public',
    Sensitive: 'Sensitive',
    Classified: 'Classified',
    UnknownDefaultOpenApi: '11184809'
};
exports.SystemsImpactEnum = {
    Low: 'Low',
    Moderate: 'Moderate',
    High: 'High',
    UnknownDefaultOpenApi: '11184809'
};
exports.SystemsPrivacyImpactAssessmentStatusEnum = {
    NotStarted: 'Not Started',
    InProgress: 'In Progress',
    Completed: 'Completed',
    UnknownDefaultOpenApi: '11184809'
};
exports.SystemsCurrentRmfLifecycleStepEnum = {
    _1Categorize: '1 - Categorize',
    _2Select: '2 - Select',
    _3Implement: '3 - Implement',
    _4Assess: '4 - Assess',
    _5Authorize: '5 - Authorize',
    _6Monitor: '6 - Monitor',
    UnknownDefaultOpenApi: '11184809'
};
exports.SystemsCloudTypeEnum = {
    Hybrid: 'Hybrid',
    Private: 'Private',
    Public: 'Public',
    UnknownDefaultOpenApi: '11184809'
};
exports.SystemsAuthorizationToConnectStatusEnum = {
    AuthorityToConnectAtc: 'Authority to Connect (ATC)',
    DenialOfAuthorityToConnectDatc: 'Denial of Authority to Connect (DATC)',
    NotYetConnected: 'Not Yet Connected',
    Decommissioned: 'Decommissioned',
    UnknownDefaultOpenApi: '11184809'
};
exports.SystemsMaximumTolerableDowntimeEnum = {
    Immediate: 'Immediate',
    LessThan2Hours: 'Less than 2 hours',
    LessThan4Hours: 'Less than 4 hours',
    LessThan6Hours: 'Less than 6 hours',
    UnknownDefaultOpenApi: '11184809'
};
exports.TestResultsGetComplianceStatusEnum = {
    Compliant: 'Compliant',
    NonCompliant: 'Non-Compliant',
    NotApplicable: 'Not Applicable',
    UnknownDefaultOpenApi: '11184809'
};
/**
 * ArtifactsApi - axios parameter creator
 * @export
 */
var ArtifactsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * <strong>Information About Adding Artifacts</strong><br>  The body of a request through the Artifacts POST endpoint accepts a single binary file. Two Artifact POST methods are currently accepted: individual and bulk. Filename uniqueness within an eMASS system will be enforced by the API for both methods. <br><br> For POST requests that should result in a single artifact, the request should include the file. <br><br> For POST requests that should result in the creation of many artifacts, the request should include a single file with the extension \".zip\" only and the parameter isBulk should be set to true. This .zip file should contain one or more files corresponding to existing artifacts or new artifacts that will be created upon successful receipt. <br><br> Upon successful receipt of one or many artifacts, if a file is matched via filename to an artifact existing within the application, the file associated with the artifact will be updated. If no artifact is matched via filename to the application, a new artifact will be created with the following default values. Any values not specified below will be null <ul>   <li>isTemplate: false</li>   <li>type: Other</li>   <li>category: Evidence</li> </ul>  To update values other than the file itself, please submit a PUT request.<br>  <strong>Business Rules</strong><br>  Artifact cannot be saved if the fields below exceed the following character limits: <ul>   <li>Filename - 1,000 characters</li>   <li>Name - 100 characters</li>   <li>Description - 10,000 characters</li>   <li>Reference Page Number - 50 characters</li> </ul>  Artifact version cannot be saved if an Artifact with the same file name (filename) already exist in the system.  Artifact cannot be saved if the file size exceeds 30MB.  Artifact cannot be saved if the following fields are missing data: <ul>   <li>Filename (filename)</li>   <li>Type (type)</li>   <li>Category (category)</li> </ul> Artifact cannot be saved if the Last Review Date (`lastReviewedDate`) is set in the future.
         * @summary Add one or many artifacts in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {File} filename The file to upload. Must be a .zip file if isBulk is set to true, otherwise any acceptable artifact file. Max 30MB per artifact.
         * @param {boolean} [isBulk] **Is Bulk**: If no value is specified, the default is false, and an individual artifact file is expected. When set to true, a .zip file is expected which can contain multiple artifact files.
         * @param {boolean} [isTemplate] Is the artifact a template?  Indicates whether an artifact is a template
         * @param {string} [type] The type of artifact. Possible values are:  Procedure, Diagram, Policy, Labor, Document, Image, Other, Scan Result, Auditor Report. May also accept custom artifact type values set by system administrators.
         * @param {string} [category] The category of artifact. Possible values are:  Implementation Guidance, Evidence.  May also accept custom artifact category values set by system administrators.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addArtifactsBySystemId: function (systemId_1, filename_1, isBulk_1, isTemplate_1, type_1, category_1) {
            var args_1 = [];
            for (var _i = 6; _i < arguments.length; _i++) {
                args_1[_i - 6] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([systemId_1, filename_1, isBulk_1, isTemplate_1, type_1, category_1], args_1, true), void 0, function (systemId, filename, isBulk, isTemplate, type, category, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarFormParams, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            (0, common_1.assertParamExists)('addArtifactsBySystemId', 'systemId', systemId);
                            // verify required parameter 'filename' is not null or undefined
                            (0, common_1.assertParamExists)('addArtifactsBySystemId', 'filename', filename);
                            localVarPath = "/api/systems/{systemId}/artifacts"
                                .replace("{".concat("systemId", "}"), encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (isBulk !== undefined) {
                                localVarQueryParameter['isBulk'] = isBulk;
                            }
                            if (isTemplate !== undefined) {
                                localVarFormParams.append('isTemplate', String(isTemplate));
                            }
                            if (type !== undefined) {
                                localVarFormParams.append('type', type);
                            }
                            if (category !== undefined) {
                                localVarFormParams.append('category', category);
                            }
                            if (filename !== undefined) {
                                localVarFormParams.append('filename', filename);
                            }
                            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = localVarFormParams;
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Remove the Artifact(s) matching `systemId` path parameter and request body artifact(s) file name<br><br>
         * @summary Remove one or many artifacts in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<ArtifactsRequestDeleteBodyInner>} artifactsRequestDeleteBodyInner Delete artifact files for the given System Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteArtifact: function (systemId_1, artifactsRequestDeleteBodyInner_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([systemId_1, artifactsRequestDeleteBodyInner_1], args_1, true), void 0, function (systemId, artifactsRequestDeleteBodyInner, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            (0, common_1.assertParamExists)('deleteArtifact', 'systemId', systemId);
                            // verify required parameter 'artifactsRequestDeleteBodyInner' is not null or undefined
                            (0, common_1.assertParamExists)('deleteArtifact', 'artifactsRequestDeleteBodyInner', artifactsRequestDeleteBodyInner);
                            localVarPath = "/api/systems/{systemId}/artifacts"
                                .replace("{".concat("systemId", "}"), encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(artifactsRequestDeleteBodyInner, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Returns selected artifacts matching parameters to include the file name containing the artifacts.
         * @summary Get one or many artifacts in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} [filename] **File Name**: The file name (to include file-extension).
         * @param {string} [controlAcronyms] **Control Acronym**: Filter query by given system acronym (single value or comma separated).
         * @param {string} [assessmentProcedures] **Assessment Procedure**: Filter query by given Security Control Assessment Procedure (single value or comma separated).
         * @param {string} [ccis] **CCI System**: Filter query by Control Correlation Identifiers (CCIs) (single value or comma separated).
         * @param {boolean} [systemOnly] **Systems Only**: Indicates that only system(s) information is retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemArtifacts: function (systemId_1, filename_1, controlAcronyms_1, assessmentProcedures_1, ccis_1, systemOnly_1) {
            var args_1 = [];
            for (var _i = 6; _i < arguments.length; _i++) {
                args_1[_i - 6] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([systemId_1, filename_1, controlAcronyms_1, assessmentProcedures_1, ccis_1, systemOnly_1], args_1, true), void 0, function (systemId, filename, controlAcronyms, assessmentProcedures, ccis, systemOnly, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            (0, common_1.assertParamExists)('getSystemArtifacts', 'systemId', systemId);
                            localVarPath = "/api/systems/{systemId}/artifacts"
                                .replace("{".concat("systemId", "}"), encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (filename !== undefined) {
                                localVarQueryParameter['filename'] = filename;
                            }
                            if (controlAcronyms !== undefined) {
                                localVarQueryParameter['controlAcronyms'] = controlAcronyms;
                            }
                            if (assessmentProcedures !== undefined) {
                                localVarQueryParameter['assessmentProcedures'] = assessmentProcedures;
                            }
                            if (ccis !== undefined) {
                                localVarQueryParameter['ccis'] = ccis;
                            }
                            if (systemOnly !== undefined) {
                                localVarQueryParameter['systemOnly'] = systemOnly;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Updates an artifact for given `systemId` path parameter<br><br> **Request Body Required Fields** - `filename` - `isTemplate` - `type` - `category`  The example request provides all optional fields  <strong>Information About Updating Artifacts</strong><br>  The PUT request will replace all existing data with the field/value combinations included in the request body.  If any fields are not included, the absent fields will become null.  The fields `name` and `isTemplate` are non-nullable fields. If not specified in the PUT command they will default to the following:   - `name=filename`   - `isTemplate=false`  Also, note that one-to-many fields (`controls` and `ccis`) will also be replaced with the values specified in the PUT.  If existing `control or cci` mappings exist in eMASS, the values in the PUT will not append, but rather replace all existing control and cci mappings with the values in the request body.
         * @summary Update one or many artifacts in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<ArtifactsRequiredFields & ArtifactsOptionalFields>} artifactsRequiredFieldsArtifactsOptionalFields See &#x60;information&#x60; above for additional instructions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateArtifactBySystemId: function (systemId_1, artifactsRequiredFieldsArtifactsOptionalFields_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([systemId_1, artifactsRequiredFieldsArtifactsOptionalFields_1], args_1, true), void 0, function (systemId, artifactsRequiredFieldsArtifactsOptionalFields, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            (0, common_1.assertParamExists)('updateArtifactBySystemId', 'systemId', systemId);
                            // verify required parameter 'artifactsRequiredFieldsArtifactsOptionalFields' is not null or undefined
                            (0, common_1.assertParamExists)('updateArtifactBySystemId', 'artifactsRequiredFieldsArtifactsOptionalFields', artifactsRequiredFieldsArtifactsOptionalFields);
                            localVarPath = "/api/systems/{systemId}/artifacts"
                                .replace("{".concat("systemId", "}"), encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(artifactsRequiredFieldsArtifactsOptionalFields, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.ArtifactsApiAxiosParamCreator = ArtifactsApiAxiosParamCreator;
/**
 * ArtifactsApi - functional programming interface
 * @export
 */
var ArtifactsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.ArtifactsApiAxiosParamCreator)(configuration);
    return {
        /**
         * <strong>Information About Adding Artifacts</strong><br>  The body of a request through the Artifacts POST endpoint accepts a single binary file. Two Artifact POST methods are currently accepted: individual and bulk. Filename uniqueness within an eMASS system will be enforced by the API for both methods. <br><br> For POST requests that should result in a single artifact, the request should include the file. <br><br> For POST requests that should result in the creation of many artifacts, the request should include a single file with the extension \".zip\" only and the parameter isBulk should be set to true. This .zip file should contain one or more files corresponding to existing artifacts or new artifacts that will be created upon successful receipt. <br><br> Upon successful receipt of one or many artifacts, if a file is matched via filename to an artifact existing within the application, the file associated with the artifact will be updated. If no artifact is matched via filename to the application, a new artifact will be created with the following default values. Any values not specified below will be null <ul>   <li>isTemplate: false</li>   <li>type: Other</li>   <li>category: Evidence</li> </ul>  To update values other than the file itself, please submit a PUT request.<br>  <strong>Business Rules</strong><br>  Artifact cannot be saved if the fields below exceed the following character limits: <ul>   <li>Filename - 1,000 characters</li>   <li>Name - 100 characters</li>   <li>Description - 10,000 characters</li>   <li>Reference Page Number - 50 characters</li> </ul>  Artifact version cannot be saved if an Artifact with the same file name (filename) already exist in the system.  Artifact cannot be saved if the file size exceeds 30MB.  Artifact cannot be saved if the following fields are missing data: <ul>   <li>Filename (filename)</li>   <li>Type (type)</li>   <li>Category (category)</li> </ul> Artifact cannot be saved if the Last Review Date (`lastReviewedDate`) is set in the future.
         * @summary Add one or many artifacts in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {File} filename The file to upload. Must be a .zip file if isBulk is set to true, otherwise any acceptable artifact file. Max 30MB per artifact.
         * @param {boolean} [isBulk] **Is Bulk**: If no value is specified, the default is false, and an individual artifact file is expected. When set to true, a .zip file is expected which can contain multiple artifact files.
         * @param {boolean} [isTemplate] Is the artifact a template?  Indicates whether an artifact is a template
         * @param {string} [type] The type of artifact. Possible values are:  Procedure, Diagram, Policy, Labor, Document, Image, Other, Scan Result, Auditor Report. May also accept custom artifact type values set by system administrators.
         * @param {string} [category] The category of artifact. Possible values are:  Implementation Guidance, Evidence.  May also accept custom artifact category values set by system administrators.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addArtifactsBySystemId: function (systemId, filename, isBulk, isTemplate, type, category, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addArtifactsBySystemId(systemId, filename, isBulk, isTemplate, type, category, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ArtifactsApi.addArtifactsBySystemId']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Remove the Artifact(s) matching `systemId` path parameter and request body artifact(s) file name<br><br>
         * @summary Remove one or many artifacts in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<ArtifactsRequestDeleteBodyInner>} artifactsRequestDeleteBodyInner Delete artifact files for the given System Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteArtifact: function (systemId, artifactsRequestDeleteBodyInner, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteArtifact(systemId, artifactsRequestDeleteBodyInner, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ArtifactsApi.deleteArtifact']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Returns selected artifacts matching parameters to include the file name containing the artifacts.
         * @summary Get one or many artifacts in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} [filename] **File Name**: The file name (to include file-extension).
         * @param {string} [controlAcronyms] **Control Acronym**: Filter query by given system acronym (single value or comma separated).
         * @param {string} [assessmentProcedures] **Assessment Procedure**: Filter query by given Security Control Assessment Procedure (single value or comma separated).
         * @param {string} [ccis] **CCI System**: Filter query by Control Correlation Identifiers (CCIs) (single value or comma separated).
         * @param {boolean} [systemOnly] **Systems Only**: Indicates that only system(s) information is retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemArtifacts: function (systemId, filename, controlAcronyms, assessmentProcedures, ccis, systemOnly, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemArtifacts(systemId, filename, controlAcronyms, assessmentProcedures, ccis, systemOnly, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ArtifactsApi.getSystemArtifacts']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Updates an artifact for given `systemId` path parameter<br><br> **Request Body Required Fields** - `filename` - `isTemplate` - `type` - `category`  The example request provides all optional fields  <strong>Information About Updating Artifacts</strong><br>  The PUT request will replace all existing data with the field/value combinations included in the request body.  If any fields are not included, the absent fields will become null.  The fields `name` and `isTemplate` are non-nullable fields. If not specified in the PUT command they will default to the following:   - `name=filename`   - `isTemplate=false`  Also, note that one-to-many fields (`controls` and `ccis`) will also be replaced with the values specified in the PUT.  If existing `control or cci` mappings exist in eMASS, the values in the PUT will not append, but rather replace all existing control and cci mappings with the values in the request body.
         * @summary Update one or many artifacts in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<ArtifactsRequiredFields & ArtifactsOptionalFields>} artifactsRequiredFieldsArtifactsOptionalFields See &#x60;information&#x60; above for additional instructions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateArtifactBySystemId: function (systemId, artifactsRequiredFieldsArtifactsOptionalFields, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateArtifactBySystemId(systemId, artifactsRequiredFieldsArtifactsOptionalFields, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ArtifactsApi.updateArtifactBySystemId']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.ArtifactsApiFp = ArtifactsApiFp;
/**
 * ArtifactsApi - factory interface
 * @export
 */
var ArtifactsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.ArtifactsApiFp)(configuration);
    return {
        /**
         * <strong>Information About Adding Artifacts</strong><br>  The body of a request through the Artifacts POST endpoint accepts a single binary file. Two Artifact POST methods are currently accepted: individual and bulk. Filename uniqueness within an eMASS system will be enforced by the API for both methods. <br><br> For POST requests that should result in a single artifact, the request should include the file. <br><br> For POST requests that should result in the creation of many artifacts, the request should include a single file with the extension \".zip\" only and the parameter isBulk should be set to true. This .zip file should contain one or more files corresponding to existing artifacts or new artifacts that will be created upon successful receipt. <br><br> Upon successful receipt of one or many artifacts, if a file is matched via filename to an artifact existing within the application, the file associated with the artifact will be updated. If no artifact is matched via filename to the application, a new artifact will be created with the following default values. Any values not specified below will be null <ul>   <li>isTemplate: false</li>   <li>type: Other</li>   <li>category: Evidence</li> </ul>  To update values other than the file itself, please submit a PUT request.<br>  <strong>Business Rules</strong><br>  Artifact cannot be saved if the fields below exceed the following character limits: <ul>   <li>Filename - 1,000 characters</li>   <li>Name - 100 characters</li>   <li>Description - 10,000 characters</li>   <li>Reference Page Number - 50 characters</li> </ul>  Artifact version cannot be saved if an Artifact with the same file name (filename) already exist in the system.  Artifact cannot be saved if the file size exceeds 30MB.  Artifact cannot be saved if the following fields are missing data: <ul>   <li>Filename (filename)</li>   <li>Type (type)</li>   <li>Category (category)</li> </ul> Artifact cannot be saved if the Last Review Date (`lastReviewedDate`) is set in the future.
         * @summary Add one or many artifacts in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {File} filename The file to upload. Must be a .zip file if isBulk is set to true, otherwise any acceptable artifact file. Max 30MB per artifact.
         * @param {boolean} [isBulk] **Is Bulk**: If no value is specified, the default is false, and an individual artifact file is expected. When set to true, a .zip file is expected which can contain multiple artifact files.
         * @param {boolean} [isTemplate] Is the artifact a template?  Indicates whether an artifact is a template
         * @param {string} [type] The type of artifact. Possible values are:  Procedure, Diagram, Policy, Labor, Document, Image, Other, Scan Result, Auditor Report. May also accept custom artifact type values set by system administrators.
         * @param {string} [category] The category of artifact. Possible values are:  Implementation Guidance, Evidence.  May also accept custom artifact category values set by system administrators.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addArtifactsBySystemId: function (systemId, filename, isBulk, isTemplate, type, category, options) {
            return localVarFp.addArtifactsBySystemId(systemId, filename, isBulk, isTemplate, type, category, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Remove the Artifact(s) matching `systemId` path parameter and request body artifact(s) file name<br><br>
         * @summary Remove one or many artifacts in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<ArtifactsRequestDeleteBodyInner>} artifactsRequestDeleteBodyInner Delete artifact files for the given System Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteArtifact: function (systemId, artifactsRequestDeleteBodyInner, options) {
            return localVarFp.deleteArtifact(systemId, artifactsRequestDeleteBodyInner, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns selected artifacts matching parameters to include the file name containing the artifacts.
         * @summary Get one or many artifacts in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} [filename] **File Name**: The file name (to include file-extension).
         * @param {string} [controlAcronyms] **Control Acronym**: Filter query by given system acronym (single value or comma separated).
         * @param {string} [assessmentProcedures] **Assessment Procedure**: Filter query by given Security Control Assessment Procedure (single value or comma separated).
         * @param {string} [ccis] **CCI System**: Filter query by Control Correlation Identifiers (CCIs) (single value or comma separated).
         * @param {boolean} [systemOnly] **Systems Only**: Indicates that only system(s) information is retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemArtifacts: function (systemId, filename, controlAcronyms, assessmentProcedures, ccis, systemOnly, options) {
            return localVarFp.getSystemArtifacts(systemId, filename, controlAcronyms, assessmentProcedures, ccis, systemOnly, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Updates an artifact for given `systemId` path parameter<br><br> **Request Body Required Fields** - `filename` - `isTemplate` - `type` - `category`  The example request provides all optional fields  <strong>Information About Updating Artifacts</strong><br>  The PUT request will replace all existing data with the field/value combinations included in the request body.  If any fields are not included, the absent fields will become null.  The fields `name` and `isTemplate` are non-nullable fields. If not specified in the PUT command they will default to the following:   - `name=filename`   - `isTemplate=false`  Also, note that one-to-many fields (`controls` and `ccis`) will also be replaced with the values specified in the PUT.  If existing `control or cci` mappings exist in eMASS, the values in the PUT will not append, but rather replace all existing control and cci mappings with the values in the request body.
         * @summary Update one or many artifacts in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<ArtifactsRequiredFields & ArtifactsOptionalFields>} artifactsRequiredFieldsArtifactsOptionalFields See &#x60;information&#x60; above for additional instructions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateArtifactBySystemId: function (systemId, artifactsRequiredFieldsArtifactsOptionalFields, options) {
            return localVarFp.updateArtifactBySystemId(systemId, artifactsRequiredFieldsArtifactsOptionalFields, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.ArtifactsApiFactory = ArtifactsApiFactory;
/**
 * ArtifactsApi - object-oriented interface
 * @export
 * @class ArtifactsApi
 * @extends {BaseAPI}
 */
var ArtifactsApi = /** @class */ (function (_super) {
    __extends(ArtifactsApi, _super);
    function ArtifactsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * <strong>Information About Adding Artifacts</strong><br>  The body of a request through the Artifacts POST endpoint accepts a single binary file. Two Artifact POST methods are currently accepted: individual and bulk. Filename uniqueness within an eMASS system will be enforced by the API for both methods. <br><br> For POST requests that should result in a single artifact, the request should include the file. <br><br> For POST requests that should result in the creation of many artifacts, the request should include a single file with the extension \".zip\" only and the parameter isBulk should be set to true. This .zip file should contain one or more files corresponding to existing artifacts or new artifacts that will be created upon successful receipt. <br><br> Upon successful receipt of one or many artifacts, if a file is matched via filename to an artifact existing within the application, the file associated with the artifact will be updated. If no artifact is matched via filename to the application, a new artifact will be created with the following default values. Any values not specified below will be null <ul>   <li>isTemplate: false</li>   <li>type: Other</li>   <li>category: Evidence</li> </ul>  To update values other than the file itself, please submit a PUT request.<br>  <strong>Business Rules</strong><br>  Artifact cannot be saved if the fields below exceed the following character limits: <ul>   <li>Filename - 1,000 characters</li>   <li>Name - 100 characters</li>   <li>Description - 10,000 characters</li>   <li>Reference Page Number - 50 characters</li> </ul>  Artifact version cannot be saved if an Artifact with the same file name (filename) already exist in the system.  Artifact cannot be saved if the file size exceeds 30MB.  Artifact cannot be saved if the following fields are missing data: <ul>   <li>Filename (filename)</li>   <li>Type (type)</li>   <li>Category (category)</li> </ul> Artifact cannot be saved if the Last Review Date (`lastReviewedDate`) is set in the future.
     * @summary Add one or many artifacts in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {File} filename The file to upload. Must be a .zip file if isBulk is set to true, otherwise any acceptable artifact file. Max 30MB per artifact.
     * @param {boolean} [isBulk] **Is Bulk**: If no value is specified, the default is false, and an individual artifact file is expected. When set to true, a .zip file is expected which can contain multiple artifact files.
     * @param {boolean} [isTemplate] Is the artifact a template?  Indicates whether an artifact is a template
     * @param {string} [type] The type of artifact. Possible values are:  Procedure, Diagram, Policy, Labor, Document, Image, Other, Scan Result, Auditor Report. May also accept custom artifact type values set by system administrators.
     * @param {string} [category] The category of artifact. Possible values are:  Implementation Guidance, Evidence.  May also accept custom artifact category values set by system administrators.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtifactsApi
     */
    ArtifactsApi.prototype.addArtifactsBySystemId = function (systemId, filename, isBulk, isTemplate, type, category, options) {
        var _this = this;
        return (0, exports.ArtifactsApiFp)(this.configuration).addArtifactsBySystemId(systemId, filename, isBulk, isTemplate, type, category, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Remove the Artifact(s) matching `systemId` path parameter and request body artifact(s) file name<br><br>
     * @summary Remove one or many artifacts in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {Array<ArtifactsRequestDeleteBodyInner>} artifactsRequestDeleteBodyInner Delete artifact files for the given System Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtifactsApi
     */
    ArtifactsApi.prototype.deleteArtifact = function (systemId, artifactsRequestDeleteBodyInner, options) {
        var _this = this;
        return (0, exports.ArtifactsApiFp)(this.configuration).deleteArtifact(systemId, artifactsRequestDeleteBodyInner, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns selected artifacts matching parameters to include the file name containing the artifacts.
     * @summary Get one or many artifacts in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {string} [filename] **File Name**: The file name (to include file-extension).
     * @param {string} [controlAcronyms] **Control Acronym**: Filter query by given system acronym (single value or comma separated).
     * @param {string} [assessmentProcedures] **Assessment Procedure**: Filter query by given Security Control Assessment Procedure (single value or comma separated).
     * @param {string} [ccis] **CCI System**: Filter query by Control Correlation Identifiers (CCIs) (single value or comma separated).
     * @param {boolean} [systemOnly] **Systems Only**: Indicates that only system(s) information is retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtifactsApi
     */
    ArtifactsApi.prototype.getSystemArtifacts = function (systemId, filename, controlAcronyms, assessmentProcedures, ccis, systemOnly, options) {
        var _this = this;
        return (0, exports.ArtifactsApiFp)(this.configuration).getSystemArtifacts(systemId, filename, controlAcronyms, assessmentProcedures, ccis, systemOnly, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Updates an artifact for given `systemId` path parameter<br><br> **Request Body Required Fields** - `filename` - `isTemplate` - `type` - `category`  The example request provides all optional fields  <strong>Information About Updating Artifacts</strong><br>  The PUT request will replace all existing data with the field/value combinations included in the request body.  If any fields are not included, the absent fields will become null.  The fields `name` and `isTemplate` are non-nullable fields. If not specified in the PUT command they will default to the following:   - `name=filename`   - `isTemplate=false`  Also, note that one-to-many fields (`controls` and `ccis`) will also be replaced with the values specified in the PUT.  If existing `control or cci` mappings exist in eMASS, the values in the PUT will not append, but rather replace all existing control and cci mappings with the values in the request body.
     * @summary Update one or many artifacts in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {Array<ArtifactsRequiredFields & ArtifactsOptionalFields>} artifactsRequiredFieldsArtifactsOptionalFields See &#x60;information&#x60; above for additional instructions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtifactsApi
     */
    ArtifactsApi.prototype.updateArtifactBySystemId = function (systemId, artifactsRequiredFieldsArtifactsOptionalFields, options) {
        var _this = this;
        return (0, exports.ArtifactsApiFp)(this.configuration).updateArtifactBySystemId(systemId, artifactsRequiredFieldsArtifactsOptionalFields, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ArtifactsApi;
}(base_1.BaseAPI));
exports.ArtifactsApi = ArtifactsApi;
/**
 * ArtifactsExportApi - axios parameter creator
 * @export
 */
var ArtifactsExportApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * <strong>Sample Responce</strong><br>  Binary file associated with given filename.<br>  If `compress` parameter is specified, zip archive of binary file associated with given filename.
         * @summary Get the file of an artifact in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} filename **File Name**: The file name (to include file-extension).
         * @param {boolean} [compress] **Compress File**: Determines if returned file is compressed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemArtifactsExport: function (systemId_1, filename_1, compress_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([systemId_1, filename_1, compress_1], args_1, true), void 0, function (systemId, filename, compress, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            (0, common_1.assertParamExists)('getSystemArtifactsExport', 'systemId', systemId);
                            // verify required parameter 'filename' is not null or undefined
                            (0, common_1.assertParamExists)('getSystemArtifactsExport', 'filename', filename);
                            localVarPath = "/api/systems/{systemId}/artifacts-export"
                                .replace("{".concat("systemId", "}"), encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (filename !== undefined) {
                                localVarQueryParameter['filename'] = filename;
                            }
                            if (compress !== undefined) {
                                localVarQueryParameter['compress'] = compress;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.ArtifactsExportApiAxiosParamCreator = ArtifactsExportApiAxiosParamCreator;
/**
 * ArtifactsExportApi - functional programming interface
 * @export
 */
var ArtifactsExportApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.ArtifactsExportApiAxiosParamCreator)(configuration);
    return {
        /**
         * <strong>Sample Responce</strong><br>  Binary file associated with given filename.<br>  If `compress` parameter is specified, zip archive of binary file associated with given filename.
         * @summary Get the file of an artifact in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} filename **File Name**: The file name (to include file-extension).
         * @param {boolean} [compress] **Compress File**: Determines if returned file is compressed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemArtifactsExport: function (systemId, filename, compress, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemArtifactsExport(systemId, filename, compress, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ArtifactsExportApi.getSystemArtifactsExport']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.ArtifactsExportApiFp = ArtifactsExportApiFp;
/**
 * ArtifactsExportApi - factory interface
 * @export
 */
var ArtifactsExportApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.ArtifactsExportApiFp)(configuration);
    return {
        /**
         * <strong>Sample Responce</strong><br>  Binary file associated with given filename.<br>  If `compress` parameter is specified, zip archive of binary file associated with given filename.
         * @summary Get the file of an artifact in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} filename **File Name**: The file name (to include file-extension).
         * @param {boolean} [compress] **Compress File**: Determines if returned file is compressed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemArtifactsExport: function (systemId, filename, compress, options) {
            return localVarFp.getSystemArtifactsExport(systemId, filename, compress, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.ArtifactsExportApiFactory = ArtifactsExportApiFactory;
/**
 * ArtifactsExportApi - object-oriented interface
 * @export
 * @class ArtifactsExportApi
 * @extends {BaseAPI}
 */
var ArtifactsExportApi = /** @class */ (function (_super) {
    __extends(ArtifactsExportApi, _super);
    function ArtifactsExportApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * <strong>Sample Responce</strong><br>  Binary file associated with given filename.<br>  If `compress` parameter is specified, zip archive of binary file associated with given filename.
     * @summary Get the file of an artifact in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {string} filename **File Name**: The file name (to include file-extension).
     * @param {boolean} [compress] **Compress File**: Determines if returned file is compressed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtifactsExportApi
     */
    ArtifactsExportApi.prototype.getSystemArtifactsExport = function (systemId, filename, compress, options) {
        var _this = this;
        return (0, exports.ArtifactsExportApiFp)(this.configuration).getSystemArtifactsExport(systemId, filename, compress, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ArtifactsExportApi;
}(base_1.BaseAPI));
exports.ArtifactsExportApi = ArtifactsExportApi;
/**
 * CACApi - axios parameter creator
 * @export
 */
var CACApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * **Request Body Required Fields** - `controlAcronym` - `comments`  **NOTES:** - Comments `comments` are not required at the first role of the CAC but are required at the second role of the CAC. Comments cannot exceed 10,000 characters. - POST requests will only yield successful results if the control is currently sitting at the first role of the CAC. If the control is not currently sitting at the first role, then an error will be returned.
         * @summary Submit control to second role of CAC
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Example request body for adding control(s) to second role of CAC
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSystemCac: function (systemId_1, requestBody_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([systemId_1, requestBody_1], args_1, true), void 0, function (systemId, requestBody, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            (0, common_1.assertParamExists)('addSystemCac', 'systemId', systemId);
                            // verify required parameter 'requestBody' is not null or undefined
                            (0, common_1.assertParamExists)('addSystemCac', 'requestBody', requestBody);
                            localVarPath = "/api/systems/{systemId}/approval/cac"
                                .replace("{".concat("systemId", "}"), encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(requestBody, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Returns the location of a system\'s package in the Control Approval Chain (CAC) for matching `systemId` path parameter
         * @summary Get location of one or many controls in CAC
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} [controlAcronyms] **Control Acronym**: Filter query by given system acronym (single value or comma separated).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemCac: function (systemId_1, controlAcronyms_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([systemId_1, controlAcronyms_1], args_1, true), void 0, function (systemId, controlAcronyms, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            (0, common_1.assertParamExists)('getSystemCac', 'systemId', systemId);
                            localVarPath = "/api/systems/{systemId}/approval/cac"
                                .replace("{".concat("systemId", "}"), encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (controlAcronyms !== undefined) {
                                localVarQueryParameter['controlAcronyms'] = controlAcronyms;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.CACApiAxiosParamCreator = CACApiAxiosParamCreator;
/**
 * CACApi - functional programming interface
 * @export
 */
var CACApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.CACApiAxiosParamCreator)(configuration);
    return {
        /**
         * **Request Body Required Fields** - `controlAcronym` - `comments`  **NOTES:** - Comments `comments` are not required at the first role of the CAC but are required at the second role of the CAC. Comments cannot exceed 10,000 characters. - POST requests will only yield successful results if the control is currently sitting at the first role of the CAC. If the control is not currently sitting at the first role, then an error will be returned.
         * @summary Submit control to second role of CAC
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Example request body for adding control(s) to second role of CAC
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSystemCac: function (systemId, requestBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addSystemCac(systemId, requestBody, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['CACApi.addSystemCac']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Returns the location of a system\'s package in the Control Approval Chain (CAC) for matching `systemId` path parameter
         * @summary Get location of one or many controls in CAC
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} [controlAcronyms] **Control Acronym**: Filter query by given system acronym (single value or comma separated).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemCac: function (systemId, controlAcronyms, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemCac(systemId, controlAcronyms, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['CACApi.getSystemCac']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.CACApiFp = CACApiFp;
/**
 * CACApi - factory interface
 * @export
 */
var CACApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.CACApiFp)(configuration);
    return {
        /**
         * **Request Body Required Fields** - `controlAcronym` - `comments`  **NOTES:** - Comments `comments` are not required at the first role of the CAC but are required at the second role of the CAC. Comments cannot exceed 10,000 characters. - POST requests will only yield successful results if the control is currently sitting at the first role of the CAC. If the control is not currently sitting at the first role, then an error will be returned.
         * @summary Submit control to second role of CAC
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Example request body for adding control(s) to second role of CAC
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSystemCac: function (systemId, requestBody, options) {
            return localVarFp.addSystemCac(systemId, requestBody, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns the location of a system\'s package in the Control Approval Chain (CAC) for matching `systemId` path parameter
         * @summary Get location of one or many controls in CAC
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} [controlAcronyms] **Control Acronym**: Filter query by given system acronym (single value or comma separated).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemCac: function (systemId, controlAcronyms, options) {
            return localVarFp.getSystemCac(systemId, controlAcronyms, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.CACApiFactory = CACApiFactory;
/**
 * CACApi - object-oriented interface
 * @export
 * @class CACApi
 * @extends {BaseAPI}
 */
var CACApi = /** @class */ (function (_super) {
    __extends(CACApi, _super);
    function CACApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * **Request Body Required Fields** - `controlAcronym` - `comments`  **NOTES:** - Comments `comments` are not required at the first role of the CAC but are required at the second role of the CAC. Comments cannot exceed 10,000 characters. - POST requests will only yield successful results if the control is currently sitting at the first role of the CAC. If the control is not currently sitting at the first role, then an error will be returned.
     * @summary Submit control to second role of CAC
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {Array<object>} requestBody Example request body for adding control(s) to second role of CAC
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CACApi
     */
    CACApi.prototype.addSystemCac = function (systemId, requestBody, options) {
        var _this = this;
        return (0, exports.CACApiFp)(this.configuration).addSystemCac(systemId, requestBody, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns the location of a system\'s package in the Control Approval Chain (CAC) for matching `systemId` path parameter
     * @summary Get location of one or many controls in CAC
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {string} [controlAcronyms] **Control Acronym**: Filter query by given system acronym (single value or comma separated).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CACApi
     */
    CACApi.prototype.getSystemCac = function (systemId, controlAcronyms, options) {
        var _this = this;
        return (0, exports.CACApiFp)(this.configuration).getSystemCac(systemId, controlAcronyms, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return CACApi;
}(base_1.BaseAPI));
exports.CACApi = CACApi;
/**
 * CMMCAssessmentDashboardsApi - axios parameter creator
 * @export
 */
var CMMCAssessmentDashboardsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get CMMC assessment requirement objectives details dashboard information.
         * @summary CMMC Assessment Requirement Objectives Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCmmcAssessmentRequirementObjectivesDetails: function (orgId_1, excludeinherited_1, pageIndex_1, pageSize_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([orgId_1, excludeinherited_1, pageIndex_1, pageSize_1], args_1, true), void 0, function (orgId, excludeinherited, pageIndex, pageSize, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            (0, common_1.assertParamExists)('getCmmcAssessmentRequirementObjectivesDetails', 'orgId', orgId);
                            localVarPath = "/api/dashboards/cmmc-assessment-requirement-objectives-details";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get CMMC assessment requirements compliance summary dashboard information.
         * @summary CMMC Assessment Requirements Compliance Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCmmcAssessmentRequirementsComplianceSummary: function (orgId_1, excludeinherited_1, pageIndex_1, pageSize_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([orgId_1, excludeinherited_1, pageIndex_1, pageSize_1], args_1, true), void 0, function (orgId, excludeinherited, pageIndex, pageSize, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            (0, common_1.assertParamExists)('getCmmcAssessmentRequirementsComplianceSummary', 'orgId', orgId);
                            localVarPath = "/api/dashboards/cmmc-assessment-requirements-compliance-summary";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get CMMC assessment security requirements details dashboard information.
         * @summary CMMC Assessment Security Requirements Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCmmcAssessmentSecurityRequirementsDetails: function (orgId_1, excludeinherited_1, pageIndex_1, pageSize_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([orgId_1, excludeinherited_1, pageIndex_1, pageSize_1], args_1, true), void 0, function (orgId, excludeinherited, pageIndex, pageSize, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            (0, common_1.assertParamExists)('getCmmcAssessmentSecurityRequirementsDetails', 'orgId', orgId);
                            localVarPath = "/api/dashboards/cmmc-assessment-security-requirements-details";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get CMMC assessment status summary dashboard information.
         * @summary CMMC Assessment Status Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCmmcAssessmentStatusSummary: function (orgId_1, excludeinherited_1, pageIndex_1, pageSize_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([orgId_1, excludeinherited_1, pageIndex_1, pageSize_1], args_1, true), void 0, function (orgId, excludeinherited, pageIndex, pageSize, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            (0, common_1.assertParamExists)('getCmmcAssessmentStatusSummary', 'orgId', orgId);
                            localVarPath = "/api/dashboards/cmmc-assessment-status-summary";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.CMMCAssessmentDashboardsApiAxiosParamCreator = CMMCAssessmentDashboardsApiAxiosParamCreator;
/**
 * CMMCAssessmentDashboardsApi - functional programming interface
 * @export
 */
var CMMCAssessmentDashboardsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.CMMCAssessmentDashboardsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get CMMC assessment requirement objectives details dashboard information.
         * @summary CMMC Assessment Requirement Objectives Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCmmcAssessmentRequirementObjectivesDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getCmmcAssessmentRequirementObjectivesDetails(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['CMMCAssessmentDashboardsApi.getCmmcAssessmentRequirementObjectivesDetails']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get CMMC assessment requirements compliance summary dashboard information.
         * @summary CMMC Assessment Requirements Compliance Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCmmcAssessmentRequirementsComplianceSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getCmmcAssessmentRequirementsComplianceSummary(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['CMMCAssessmentDashboardsApi.getCmmcAssessmentRequirementsComplianceSummary']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get CMMC assessment security requirements details dashboard information.
         * @summary CMMC Assessment Security Requirements Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCmmcAssessmentSecurityRequirementsDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getCmmcAssessmentSecurityRequirementsDetails(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['CMMCAssessmentDashboardsApi.getCmmcAssessmentSecurityRequirementsDetails']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get CMMC assessment status summary dashboard information.
         * @summary CMMC Assessment Status Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCmmcAssessmentStatusSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getCmmcAssessmentStatusSummary(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['CMMCAssessmentDashboardsApi.getCmmcAssessmentStatusSummary']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.CMMCAssessmentDashboardsApiFp = CMMCAssessmentDashboardsApiFp;
/**
 * CMMCAssessmentDashboardsApi - factory interface
 * @export
 */
var CMMCAssessmentDashboardsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.CMMCAssessmentDashboardsApiFp)(configuration);
    return {
        /**
         * Get CMMC assessment requirement objectives details dashboard information.
         * @summary CMMC Assessment Requirement Objectives Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCmmcAssessmentRequirementObjectivesDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getCmmcAssessmentRequirementObjectivesDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get CMMC assessment requirements compliance summary dashboard information.
         * @summary CMMC Assessment Requirements Compliance Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCmmcAssessmentRequirementsComplianceSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getCmmcAssessmentRequirementsComplianceSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get CMMC assessment security requirements details dashboard information.
         * @summary CMMC Assessment Security Requirements Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCmmcAssessmentSecurityRequirementsDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getCmmcAssessmentSecurityRequirementsDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get CMMC assessment status summary dashboard information.
         * @summary CMMC Assessment Status Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCmmcAssessmentStatusSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getCmmcAssessmentStatusSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.CMMCAssessmentDashboardsApiFactory = CMMCAssessmentDashboardsApiFactory;
/**
 * CMMCAssessmentDashboardsApi - object-oriented interface
 * @export
 * @class CMMCAssessmentDashboardsApi
 * @extends {BaseAPI}
 */
var CMMCAssessmentDashboardsApi = /** @class */ (function (_super) {
    __extends(CMMCAssessmentDashboardsApi, _super);
    function CMMCAssessmentDashboardsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get CMMC assessment requirement objectives details dashboard information.
     * @summary CMMC Assessment Requirement Objectives Details
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CMMCAssessmentDashboardsApi
     */
    CMMCAssessmentDashboardsApi.prototype.getCmmcAssessmentRequirementObjectivesDetails = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return (0, exports.CMMCAssessmentDashboardsApiFp)(this.configuration).getCmmcAssessmentRequirementObjectivesDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get CMMC assessment requirements compliance summary dashboard information.
     * @summary CMMC Assessment Requirements Compliance Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CMMCAssessmentDashboardsApi
     */
    CMMCAssessmentDashboardsApi.prototype.getCmmcAssessmentRequirementsComplianceSummary = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return (0, exports.CMMCAssessmentDashboardsApiFp)(this.configuration).getCmmcAssessmentRequirementsComplianceSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get CMMC assessment security requirements details dashboard information.
     * @summary CMMC Assessment Security Requirements Details
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CMMCAssessmentDashboardsApi
     */
    CMMCAssessmentDashboardsApi.prototype.getCmmcAssessmentSecurityRequirementsDetails = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return (0, exports.CMMCAssessmentDashboardsApiFp)(this.configuration).getCmmcAssessmentSecurityRequirementsDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get CMMC assessment status summary dashboard information.
     * @summary CMMC Assessment Status Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CMMCAssessmentDashboardsApi
     */
    CMMCAssessmentDashboardsApi.prototype.getCmmcAssessmentStatusSummary = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return (0, exports.CMMCAssessmentDashboardsApiFp)(this.configuration).getCmmcAssessmentStatusSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return CMMCAssessmentDashboardsApi;
}(base_1.BaseAPI));
exports.CMMCAssessmentDashboardsApi = CMMCAssessmentDashboardsApi;
/**
 * CMMCAssessmentsApi - axios parameter creator
 * @export
 */
var CMMCAssessmentsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get all CMMC assessment after the given date `sinceDate` parameter. It is available to CMMC eMASS only.
         * @summary Get CMMC assessment information
         * @param {string} sinceDate **Date** CMMC date (Unix date format)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCmmcAssessments: function (sinceDate_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([sinceDate_1], args_1, true), void 0, function (sinceDate, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'sinceDate' is not null or undefined
                            (0, common_1.assertParamExists)('getCmmcAssessments', 'sinceDate', sinceDate);
                            localVarPath = "/api/cmmc-assessments";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (sinceDate !== undefined) {
                                localVarQueryParameter['sinceDate'] = sinceDate;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.CMMCAssessmentsApiAxiosParamCreator = CMMCAssessmentsApiAxiosParamCreator;
/**
 * CMMCAssessmentsApi - functional programming interface
 * @export
 */
var CMMCAssessmentsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.CMMCAssessmentsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get all CMMC assessment after the given date `sinceDate` parameter. It is available to CMMC eMASS only.
         * @summary Get CMMC assessment information
         * @param {string} sinceDate **Date** CMMC date (Unix date format)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCmmcAssessments: function (sinceDate, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getCmmcAssessments(sinceDate, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['CMMCAssessmentsApi.getCmmcAssessments']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.CMMCAssessmentsApiFp = CMMCAssessmentsApiFp;
/**
 * CMMCAssessmentsApi - factory interface
 * @export
 */
var CMMCAssessmentsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.CMMCAssessmentsApiFp)(configuration);
    return {
        /**
         * Get all CMMC assessment after the given date `sinceDate` parameter. It is available to CMMC eMASS only.
         * @summary Get CMMC assessment information
         * @param {string} sinceDate **Date** CMMC date (Unix date format)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCmmcAssessments: function (sinceDate, options) {
            return localVarFp.getCmmcAssessments(sinceDate, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.CMMCAssessmentsApiFactory = CMMCAssessmentsApiFactory;
/**
 * CMMCAssessmentsApi - object-oriented interface
 * @export
 * @class CMMCAssessmentsApi
 * @extends {BaseAPI}
 */
var CMMCAssessmentsApi = /** @class */ (function (_super) {
    __extends(CMMCAssessmentsApi, _super);
    function CMMCAssessmentsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get all CMMC assessment after the given date `sinceDate` parameter. It is available to CMMC eMASS only.
     * @summary Get CMMC assessment information
     * @param {string} sinceDate **Date** CMMC date (Unix date format)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CMMCAssessmentsApi
     */
    CMMCAssessmentsApi.prototype.getCmmcAssessments = function (sinceDate, options) {
        var _this = this;
        return (0, exports.CMMCAssessmentsApiFp)(this.configuration).getCmmcAssessments(sinceDate, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return CMMCAssessmentsApi;
}(base_1.BaseAPI));
exports.CMMCAssessmentsApi = CMMCAssessmentsApi;
/**
 * CloudResourceResultsApi - axios parameter creator
 * @export
 */
var CloudResourceResultsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Add cloud resources and their scan results in the assets module for a system `systemId`  **Request Body Required Fields** - `provider` - `resourceId` - `resourceName` - `resourceType` - `complianceResults` (Object Array)   - `cspPolicyDefinitionId`   - `isCompliant`   - `policyDefinitionTitle`  **Example Request Body Required Fields** ``` [   {     \"provider\": \"provide name\",     \"resourceId\": \"resource identification\",     \"resourceName\": \"resource name\",     \"resourceType\": \"resource type\",     \"complianceResults\": [       {         \"cspPolicyDefinitionId\": \"CSP policy definition identification\",         \"policyDefinitionTitle\": \"policy definition title\",         \"isCompliant\": [true or false]       }     ]   } ] ```
         * @summary Add one or many cloud resources and their scan results
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Example request body for adding cloud resources and their scan results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCloudResourcesBySystemId: function (systemId_1, requestBody_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([systemId_1, requestBody_1], args_1, true), void 0, function (systemId, requestBody, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            (0, common_1.assertParamExists)('addCloudResourcesBySystemId', 'systemId', systemId);
                            // verify required parameter 'requestBody' is not null or undefined
                            (0, common_1.assertParamExists)('addCloudResourcesBySystemId', 'requestBody', requestBody);
                            localVarPath = "/api/systems/{systemId}/cloud-resource-results"
                                .replace("{".concat("systemId", "}"), encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(requestBody, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Removes cloud resources and their scan results in the assets module for a system `systemId`
         * @summary Remove one or many cloud resources in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<CloudResourcesDeleteBodyInner>} cloudResourcesDeleteBodyInner Delete the given Cloud Resource Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCloudResources: function (systemId_1, cloudResourcesDeleteBodyInner_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([systemId_1, cloudResourcesDeleteBodyInner_1], args_1, true), void 0, function (systemId, cloudResourcesDeleteBodyInner, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            (0, common_1.assertParamExists)('deleteCloudResources', 'systemId', systemId);
                            // verify required parameter 'cloudResourcesDeleteBodyInner' is not null or undefined
                            (0, common_1.assertParamExists)('deleteCloudResources', 'cloudResourcesDeleteBodyInner', cloudResourcesDeleteBodyInner);
                            localVarPath = "/api/systems/{systemId}/cloud-resource-results"
                                .replace("{".concat("systemId", "}"), encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(cloudResourcesDeleteBodyInner, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.CloudResourceResultsApiAxiosParamCreator = CloudResourceResultsApiAxiosParamCreator;
/**
 * CloudResourceResultsApi - functional programming interface
 * @export
 */
var CloudResourceResultsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.CloudResourceResultsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Add cloud resources and their scan results in the assets module for a system `systemId`  **Request Body Required Fields** - `provider` - `resourceId` - `resourceName` - `resourceType` - `complianceResults` (Object Array)   - `cspPolicyDefinitionId`   - `isCompliant`   - `policyDefinitionTitle`  **Example Request Body Required Fields** ``` [   {     \"provider\": \"provide name\",     \"resourceId\": \"resource identification\",     \"resourceName\": \"resource name\",     \"resourceType\": \"resource type\",     \"complianceResults\": [       {         \"cspPolicyDefinitionId\": \"CSP policy definition identification\",         \"policyDefinitionTitle\": \"policy definition title\",         \"isCompliant\": [true or false]       }     ]   } ] ```
         * @summary Add one or many cloud resources and their scan results
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Example request body for adding cloud resources and their scan results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCloudResourcesBySystemId: function (systemId, requestBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addCloudResourcesBySystemId(systemId, requestBody, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['CloudResourceResultsApi.addCloudResourcesBySystemId']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Removes cloud resources and their scan results in the assets module for a system `systemId`
         * @summary Remove one or many cloud resources in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<CloudResourcesDeleteBodyInner>} cloudResourcesDeleteBodyInner Delete the given Cloud Resource Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCloudResources: function (systemId, cloudResourcesDeleteBodyInner, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteCloudResources(systemId, cloudResourcesDeleteBodyInner, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['CloudResourceResultsApi.deleteCloudResources']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.CloudResourceResultsApiFp = CloudResourceResultsApiFp;
/**
 * CloudResourceResultsApi - factory interface
 * @export
 */
var CloudResourceResultsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.CloudResourceResultsApiFp)(configuration);
    return {
        /**
         * Add cloud resources and their scan results in the assets module for a system `systemId`  **Request Body Required Fields** - `provider` - `resourceId` - `resourceName` - `resourceType` - `complianceResults` (Object Array)   - `cspPolicyDefinitionId`   - `isCompliant`   - `policyDefinitionTitle`  **Example Request Body Required Fields** ``` [   {     \"provider\": \"provide name\",     \"resourceId\": \"resource identification\",     \"resourceName\": \"resource name\",     \"resourceType\": \"resource type\",     \"complianceResults\": [       {         \"cspPolicyDefinitionId\": \"CSP policy definition identification\",         \"policyDefinitionTitle\": \"policy definition title\",         \"isCompliant\": [true or false]       }     ]   } ] ```
         * @summary Add one or many cloud resources and their scan results
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Example request body for adding cloud resources and their scan results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCloudResourcesBySystemId: function (systemId, requestBody, options) {
            return localVarFp.addCloudResourcesBySystemId(systemId, requestBody, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Removes cloud resources and their scan results in the assets module for a system `systemId`
         * @summary Remove one or many cloud resources in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<CloudResourcesDeleteBodyInner>} cloudResourcesDeleteBodyInner Delete the given Cloud Resource Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCloudResources: function (systemId, cloudResourcesDeleteBodyInner, options) {
            return localVarFp.deleteCloudResources(systemId, cloudResourcesDeleteBodyInner, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.CloudResourceResultsApiFactory = CloudResourceResultsApiFactory;
/**
 * CloudResourceResultsApi - object-oriented interface
 * @export
 * @class CloudResourceResultsApi
 * @extends {BaseAPI}
 */
var CloudResourceResultsApi = /** @class */ (function (_super) {
    __extends(CloudResourceResultsApi, _super);
    function CloudResourceResultsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Add cloud resources and their scan results in the assets module for a system `systemId`  **Request Body Required Fields** - `provider` - `resourceId` - `resourceName` - `resourceType` - `complianceResults` (Object Array)   - `cspPolicyDefinitionId`   - `isCompliant`   - `policyDefinitionTitle`  **Example Request Body Required Fields** ``` [   {     \"provider\": \"provide name\",     \"resourceId\": \"resource identification\",     \"resourceName\": \"resource name\",     \"resourceType\": \"resource type\",     \"complianceResults\": [       {         \"cspPolicyDefinitionId\": \"CSP policy definition identification\",         \"policyDefinitionTitle\": \"policy definition title\",         \"isCompliant\": [true or false]       }     ]   } ] ```
     * @summary Add one or many cloud resources and their scan results
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {Array<object>} requestBody Example request body for adding cloud resources and their scan results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudResourceResultsApi
     */
    CloudResourceResultsApi.prototype.addCloudResourcesBySystemId = function (systemId, requestBody, options) {
        var _this = this;
        return (0, exports.CloudResourceResultsApiFp)(this.configuration).addCloudResourcesBySystemId(systemId, requestBody, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Removes cloud resources and their scan results in the assets module for a system `systemId`
     * @summary Remove one or many cloud resources in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {Array<CloudResourcesDeleteBodyInner>} cloudResourcesDeleteBodyInner Delete the given Cloud Resource Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudResourceResultsApi
     */
    CloudResourceResultsApi.prototype.deleteCloudResources = function (systemId, cloudResourcesDeleteBodyInner, options) {
        var _this = this;
        return (0, exports.CloudResourceResultsApiFp)(this.configuration).deleteCloudResources(systemId, cloudResourcesDeleteBodyInner, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return CloudResourceResultsApi;
}(base_1.BaseAPI));
exports.CloudResourceResultsApi = CloudResourceResultsApi;
/**
 * CoastGuardSystemFISMAMetricsDashboardApi - axios parameter creator
 * @export
 */
var CoastGuardSystemFISMAMetricsDashboardApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get Coast Guard system FISMA metrics dashboard information.
         * @summary Coast Guard System FISMA Metrics
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCoastGuardSystemFismaMetrics: function (orgId_1, excludeinherited_1, pageIndex_1, pageSize_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([orgId_1, excludeinherited_1, pageIndex_1, pageSize_1], args_1, true), void 0, function (orgId, excludeinherited, pageIndex, pageSize, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            (0, common_1.assertParamExists)('getCoastGuardSystemFismaMetrics', 'orgId', orgId);
                            localVarPath = "/api/dashboards/coastguard-system-fisma-metrics";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.CoastGuardSystemFISMAMetricsDashboardApiAxiosParamCreator = CoastGuardSystemFISMAMetricsDashboardApiAxiosParamCreator;
/**
 * CoastGuardSystemFISMAMetricsDashboardApi - functional programming interface
 * @export
 */
var CoastGuardSystemFISMAMetricsDashboardApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.CoastGuardSystemFISMAMetricsDashboardApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get Coast Guard system FISMA metrics dashboard information.
         * @summary Coast Guard System FISMA Metrics
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCoastGuardSystemFismaMetrics: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getCoastGuardSystemFismaMetrics(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['CoastGuardSystemFISMAMetricsDashboardApi.getCoastGuardSystemFismaMetrics']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.CoastGuardSystemFISMAMetricsDashboardApiFp = CoastGuardSystemFISMAMetricsDashboardApiFp;
/**
 * CoastGuardSystemFISMAMetricsDashboardApi - factory interface
 * @export
 */
var CoastGuardSystemFISMAMetricsDashboardApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.CoastGuardSystemFISMAMetricsDashboardApiFp)(configuration);
    return {
        /**
         * Get Coast Guard system FISMA metrics dashboard information.
         * @summary Coast Guard System FISMA Metrics
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCoastGuardSystemFismaMetrics: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getCoastGuardSystemFismaMetrics(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.CoastGuardSystemFISMAMetricsDashboardApiFactory = CoastGuardSystemFISMAMetricsDashboardApiFactory;
/**
 * CoastGuardSystemFISMAMetricsDashboardApi - object-oriented interface
 * @export
 * @class CoastGuardSystemFISMAMetricsDashboardApi
 * @extends {BaseAPI}
 */
var CoastGuardSystemFISMAMetricsDashboardApi = /** @class */ (function (_super) {
    __extends(CoastGuardSystemFISMAMetricsDashboardApi, _super);
    function CoastGuardSystemFISMAMetricsDashboardApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get Coast Guard system FISMA metrics dashboard information.
     * @summary Coast Guard System FISMA Metrics
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoastGuardSystemFISMAMetricsDashboardApi
     */
    CoastGuardSystemFISMAMetricsDashboardApi.prototype.getCoastGuardSystemFismaMetrics = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return (0, exports.CoastGuardSystemFISMAMetricsDashboardApiFp)(this.configuration).getCoastGuardSystemFismaMetrics(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return CoastGuardSystemFISMAMetricsDashboardApi;
}(base_1.BaseAPI));
exports.CoastGuardSystemFISMAMetricsDashboardApi = CoastGuardSystemFISMAMetricsDashboardApi;
/**
 * ContainerScanResultsApi - axios parameter creator
 * @export
 */
var ContainerScanResultsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Add containers and their scan results in the assets module for a system `systemId`.  **Request Body Required Fields** - `containerId` - `containerName` - `time` - `benchmarks` (Object Array)   - `benchmark`   - `results` (Object Array)     - `ruleId`     - `status`     - `lastSeen`  **Example Request Body Required Fields** ``` [   {     \"containerId\": \"container identification\",     \"containerName\": \"container name\",     \"time\": Datetime of scan/result (1648217219),     \"benchmarks\": [       {         \"benchmark\": \"RHEL_8_STIG\",         \"results\": [           {             \"ruleId\": \"rule identification\",             \"status\": [Pass,Fail,Other,Not Reviewed,Not Checked,Not Applicable],             \"lastSeen\": Unix date format (1648217219)           }, {             \"ruleId\": \"rule identification\",             \"status\": [Pass,Fail,Other,Not Reviewed,Not Checked,Not Applicable],             \"lastSeen\": Unix date format (1648217219)           }         ]       }     ]   } ] ````
         * @summary Add one or many containers and their scan results
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Example request body for adding containers and their scan results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addContainerSansBySystemId: function (systemId_1, requestBody_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([systemId_1, requestBody_1], args_1, true), void 0, function (systemId, requestBody, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            (0, common_1.assertParamExists)('addContainerSansBySystemId', 'systemId', systemId);
                            // verify required parameter 'requestBody' is not null or undefined
                            (0, common_1.assertParamExists)('addContainerSansBySystemId', 'requestBody', requestBody);
                            localVarPath = "/api/systems/{systemId}/container-scan-results"
                                .replace("{".concat("systemId", "}"), encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(requestBody, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Removes container scan resources and their scan results in the assets module for a system `systemId`
         * @summary Remove one or many containers in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<ContainerResourcesDeleteBodyInner>} containerResourcesDeleteBodyInner Delete the given Container Scan Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteContainerSans: function (systemId_1, containerResourcesDeleteBodyInner_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([systemId_1, containerResourcesDeleteBodyInner_1], args_1, true), void 0, function (systemId, containerResourcesDeleteBodyInner, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            (0, common_1.assertParamExists)('deleteContainerSans', 'systemId', systemId);
                            // verify required parameter 'containerResourcesDeleteBodyInner' is not null or undefined
                            (0, common_1.assertParamExists)('deleteContainerSans', 'containerResourcesDeleteBodyInner', containerResourcesDeleteBodyInner);
                            localVarPath = "/api/systems/{systemId}/container-scan-results"
                                .replace("{".concat("systemId", "}"), encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(containerResourcesDeleteBodyInner, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.ContainerScanResultsApiAxiosParamCreator = ContainerScanResultsApiAxiosParamCreator;
/**
 * ContainerScanResultsApi - functional programming interface
 * @export
 */
var ContainerScanResultsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.ContainerScanResultsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Add containers and their scan results in the assets module for a system `systemId`.  **Request Body Required Fields** - `containerId` - `containerName` - `time` - `benchmarks` (Object Array)   - `benchmark`   - `results` (Object Array)     - `ruleId`     - `status`     - `lastSeen`  **Example Request Body Required Fields** ``` [   {     \"containerId\": \"container identification\",     \"containerName\": \"container name\",     \"time\": Datetime of scan/result (1648217219),     \"benchmarks\": [       {         \"benchmark\": \"RHEL_8_STIG\",         \"results\": [           {             \"ruleId\": \"rule identification\",             \"status\": [Pass,Fail,Other,Not Reviewed,Not Checked,Not Applicable],             \"lastSeen\": Unix date format (1648217219)           }, {             \"ruleId\": \"rule identification\",             \"status\": [Pass,Fail,Other,Not Reviewed,Not Checked,Not Applicable],             \"lastSeen\": Unix date format (1648217219)           }         ]       }     ]   } ] ````
         * @summary Add one or many containers and their scan results
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Example request body for adding containers and their scan results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addContainerSansBySystemId: function (systemId, requestBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addContainerSansBySystemId(systemId, requestBody, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ContainerScanResultsApi.addContainerSansBySystemId']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Removes container scan resources and their scan results in the assets module for a system `systemId`
         * @summary Remove one or many containers in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<ContainerResourcesDeleteBodyInner>} containerResourcesDeleteBodyInner Delete the given Container Scan Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteContainerSans: function (systemId, containerResourcesDeleteBodyInner, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteContainerSans(systemId, containerResourcesDeleteBodyInner, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ContainerScanResultsApi.deleteContainerSans']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.ContainerScanResultsApiFp = ContainerScanResultsApiFp;
/**
 * ContainerScanResultsApi - factory interface
 * @export
 */
var ContainerScanResultsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.ContainerScanResultsApiFp)(configuration);
    return {
        /**
         * Add containers and their scan results in the assets module for a system `systemId`.  **Request Body Required Fields** - `containerId` - `containerName` - `time` - `benchmarks` (Object Array)   - `benchmark`   - `results` (Object Array)     - `ruleId`     - `status`     - `lastSeen`  **Example Request Body Required Fields** ``` [   {     \"containerId\": \"container identification\",     \"containerName\": \"container name\",     \"time\": Datetime of scan/result (1648217219),     \"benchmarks\": [       {         \"benchmark\": \"RHEL_8_STIG\",         \"results\": [           {             \"ruleId\": \"rule identification\",             \"status\": [Pass,Fail,Other,Not Reviewed,Not Checked,Not Applicable],             \"lastSeen\": Unix date format (1648217219)           }, {             \"ruleId\": \"rule identification\",             \"status\": [Pass,Fail,Other,Not Reviewed,Not Checked,Not Applicable],             \"lastSeen\": Unix date format (1648217219)           }         ]       }     ]   } ] ````
         * @summary Add one or many containers and their scan results
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Example request body for adding containers and their scan results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addContainerSansBySystemId: function (systemId, requestBody, options) {
            return localVarFp.addContainerSansBySystemId(systemId, requestBody, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Removes container scan resources and their scan results in the assets module for a system `systemId`
         * @summary Remove one or many containers in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<ContainerResourcesDeleteBodyInner>} containerResourcesDeleteBodyInner Delete the given Container Scan Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteContainerSans: function (systemId, containerResourcesDeleteBodyInner, options) {
            return localVarFp.deleteContainerSans(systemId, containerResourcesDeleteBodyInner, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.ContainerScanResultsApiFactory = ContainerScanResultsApiFactory;
/**
 * ContainerScanResultsApi - object-oriented interface
 * @export
 * @class ContainerScanResultsApi
 * @extends {BaseAPI}
 */
var ContainerScanResultsApi = /** @class */ (function (_super) {
    __extends(ContainerScanResultsApi, _super);
    function ContainerScanResultsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Add containers and their scan results in the assets module for a system `systemId`.  **Request Body Required Fields** - `containerId` - `containerName` - `time` - `benchmarks` (Object Array)   - `benchmark`   - `results` (Object Array)     - `ruleId`     - `status`     - `lastSeen`  **Example Request Body Required Fields** ``` [   {     \"containerId\": \"container identification\",     \"containerName\": \"container name\",     \"time\": Datetime of scan/result (1648217219),     \"benchmarks\": [       {         \"benchmark\": \"RHEL_8_STIG\",         \"results\": [           {             \"ruleId\": \"rule identification\",             \"status\": [Pass,Fail,Other,Not Reviewed,Not Checked,Not Applicable],             \"lastSeen\": Unix date format (1648217219)           }, {             \"ruleId\": \"rule identification\",             \"status\": [Pass,Fail,Other,Not Reviewed,Not Checked,Not Applicable],             \"lastSeen\": Unix date format (1648217219)           }         ]       }     ]   } ] ````
     * @summary Add one or many containers and their scan results
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {Array<object>} requestBody Example request body for adding containers and their scan results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerScanResultsApi
     */
    ContainerScanResultsApi.prototype.addContainerSansBySystemId = function (systemId, requestBody, options) {
        var _this = this;
        return (0, exports.ContainerScanResultsApiFp)(this.configuration).addContainerSansBySystemId(systemId, requestBody, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Removes container scan resources and their scan results in the assets module for a system `systemId`
     * @summary Remove one or many containers in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {Array<ContainerResourcesDeleteBodyInner>} containerResourcesDeleteBodyInner Delete the given Container Scan Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerScanResultsApi
     */
    ContainerScanResultsApi.prototype.deleteContainerSans = function (systemId, containerResourcesDeleteBodyInner, options) {
        var _this = this;
        return (0, exports.ContainerScanResultsApiFp)(this.configuration).deleteContainerSans(systemId, containerResourcesDeleteBodyInner, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ContainerScanResultsApi;
}(base_1.BaseAPI));
exports.ContainerScanResultsApi = ContainerScanResultsApi;
/**
 * ControlsApi - axios parameter creator
 * @export
 */
var ControlsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Returns system control information for matching `systemId` path parameter
         * @summary Get control information in a system for one or many controls
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} [acronyms] **Acronym**: The system acronym(s) being queried (single value or comma delimited values).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemControls: function (systemId_1, acronyms_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([systemId_1, acronyms_1], args_1, true), void 0, function (systemId, acronyms, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            (0, common_1.assertParamExists)('getSystemControls', 'systemId', systemId);
                            localVarPath = "/api/systems/{systemId}/controls"
                                .replace("{".concat("systemId", "}"), encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (acronyms !== undefined) {
                                localVarQueryParameter['acronyms'] = acronyms;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Update a Control for given `systemId`<br>  **Request Body Required Fields** - `acronym` - `responsibleEntities` - `controlDesignation` - `estimatedCompletionDate` - `implementationNarrative`  <br> **Business Rules**  The following **optional fields** (plus the **Request Body Required Fields**) are required based on the Implementation Status (`implementationStatus`) field value:<br>  <table>   <thead>     <tr><th><b>Status</b></th><th><b>Required Fields</b></th></tr>   </thead>   <tbody>     <tr><td><b>Planned</b> or <b>Implemented</b></td><td><code>slcmCriticality, slcmFrequency, slcmMethod, slcmReporting, slcmTracking, slcmComments</code></td></tr>     <tr><td><b>Not Applicable</b></td><td><code>naJustification</code></td></tr>     <tr><td><b>Manually Inherited</b></td><td><code>commonControlProvider, slcmCriticality, slcmFrequency, slcmMethod, slcmReporting, slcmTracking, slcmComments</code></td></tr>   </tbody> </table>   **NOTES:** - Risk Assessment information cannot be updated if a Security Control is `Inherited`. - Risk Assessment information cannot be updated for a DIACAP system record. - Implementation Plan information cannot be saved if the these fields exceed 2,000 character limits:   - `naJustification`,`responsibleEntities`,`implementationNarrative`,`slcmCriticality`   - `slcmFrequency`,`slcmMethod`,`slcmReporting`,`slcmTracking`,`slcmComments` - Implementation Plan or Risk Assessment information cannot be updated if Security Control does not exist in the system record.
         * @summary Update control information in a system for one or many controls
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<ControlsRequiredFields & ControlsConditionalFields & ControlsOptionalFields & ControlsReadOnlyFields>} controlsRequiredFieldsControlsConditionalFieldsControlsOptionalFieldsControlsReadOnlyFields Example request body for updating an existing control for a given system.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateControlBySystemId: function (systemId_1, controlsRequiredFieldsControlsConditionalFieldsControlsOptionalFieldsControlsReadOnlyFields_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([systemId_1, controlsRequiredFieldsControlsConditionalFieldsControlsOptionalFieldsControlsReadOnlyFields_1], args_1, true), void 0, function (systemId, controlsRequiredFieldsControlsConditionalFieldsControlsOptionalFieldsControlsReadOnlyFields, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            (0, common_1.assertParamExists)('updateControlBySystemId', 'systemId', systemId);
                            // verify required parameter 'controlsRequiredFieldsControlsConditionalFieldsControlsOptionalFieldsControlsReadOnlyFields' is not null or undefined
                            (0, common_1.assertParamExists)('updateControlBySystemId', 'controlsRequiredFieldsControlsConditionalFieldsControlsOptionalFieldsControlsReadOnlyFields', controlsRequiredFieldsControlsConditionalFieldsControlsOptionalFieldsControlsReadOnlyFields);
                            localVarPath = "/api/systems/{systemId}/controls"
                                .replace("{".concat("systemId", "}"), encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(controlsRequiredFieldsControlsConditionalFieldsControlsOptionalFieldsControlsReadOnlyFields, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.ControlsApiAxiosParamCreator = ControlsApiAxiosParamCreator;
/**
 * ControlsApi - functional programming interface
 * @export
 */
var ControlsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.ControlsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Returns system control information for matching `systemId` path parameter
         * @summary Get control information in a system for one or many controls
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} [acronyms] **Acronym**: The system acronym(s) being queried (single value or comma delimited values).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemControls: function (systemId, acronyms, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemControls(systemId, acronyms, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ControlsApi.getSystemControls']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Update a Control for given `systemId`<br>  **Request Body Required Fields** - `acronym` - `responsibleEntities` - `controlDesignation` - `estimatedCompletionDate` - `implementationNarrative`  <br> **Business Rules**  The following **optional fields** (plus the **Request Body Required Fields**) are required based on the Implementation Status (`implementationStatus`) field value:<br>  <table>   <thead>     <tr><th><b>Status</b></th><th><b>Required Fields</b></th></tr>   </thead>   <tbody>     <tr><td><b>Planned</b> or <b>Implemented</b></td><td><code>slcmCriticality, slcmFrequency, slcmMethod, slcmReporting, slcmTracking, slcmComments</code></td></tr>     <tr><td><b>Not Applicable</b></td><td><code>naJustification</code></td></tr>     <tr><td><b>Manually Inherited</b></td><td><code>commonControlProvider, slcmCriticality, slcmFrequency, slcmMethod, slcmReporting, slcmTracking, slcmComments</code></td></tr>   </tbody> </table>   **NOTES:** - Risk Assessment information cannot be updated if a Security Control is `Inherited`. - Risk Assessment information cannot be updated for a DIACAP system record. - Implementation Plan information cannot be saved if the these fields exceed 2,000 character limits:   - `naJustification`,`responsibleEntities`,`implementationNarrative`,`slcmCriticality`   - `slcmFrequency`,`slcmMethod`,`slcmReporting`,`slcmTracking`,`slcmComments` - Implementation Plan or Risk Assessment information cannot be updated if Security Control does not exist in the system record.
         * @summary Update control information in a system for one or many controls
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<ControlsRequiredFields & ControlsConditionalFields & ControlsOptionalFields & ControlsReadOnlyFields>} controlsRequiredFieldsControlsConditionalFieldsControlsOptionalFieldsControlsReadOnlyFields Example request body for updating an existing control for a given system.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateControlBySystemId: function (systemId, controlsRequiredFieldsControlsConditionalFieldsControlsOptionalFieldsControlsReadOnlyFields, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateControlBySystemId(systemId, controlsRequiredFieldsControlsConditionalFieldsControlsOptionalFieldsControlsReadOnlyFields, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ControlsApi.updateControlBySystemId']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.ControlsApiFp = ControlsApiFp;
/**
 * ControlsApi - factory interface
 * @export
 */
var ControlsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.ControlsApiFp)(configuration);
    return {
        /**
         * Returns system control information for matching `systemId` path parameter
         * @summary Get control information in a system for one or many controls
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} [acronyms] **Acronym**: The system acronym(s) being queried (single value or comma delimited values).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemControls: function (systemId, acronyms, options) {
            return localVarFp.getSystemControls(systemId, acronyms, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update a Control for given `systemId`<br>  **Request Body Required Fields** - `acronym` - `responsibleEntities` - `controlDesignation` - `estimatedCompletionDate` - `implementationNarrative`  <br> **Business Rules**  The following **optional fields** (plus the **Request Body Required Fields**) are required based on the Implementation Status (`implementationStatus`) field value:<br>  <table>   <thead>     <tr><th><b>Status</b></th><th><b>Required Fields</b></th></tr>   </thead>   <tbody>     <tr><td><b>Planned</b> or <b>Implemented</b></td><td><code>slcmCriticality, slcmFrequency, slcmMethod, slcmReporting, slcmTracking, slcmComments</code></td></tr>     <tr><td><b>Not Applicable</b></td><td><code>naJustification</code></td></tr>     <tr><td><b>Manually Inherited</b></td><td><code>commonControlProvider, slcmCriticality, slcmFrequency, slcmMethod, slcmReporting, slcmTracking, slcmComments</code></td></tr>   </tbody> </table>   **NOTES:** - Risk Assessment information cannot be updated if a Security Control is `Inherited`. - Risk Assessment information cannot be updated for a DIACAP system record. - Implementation Plan information cannot be saved if the these fields exceed 2,000 character limits:   - `naJustification`,`responsibleEntities`,`implementationNarrative`,`slcmCriticality`   - `slcmFrequency`,`slcmMethod`,`slcmReporting`,`slcmTracking`,`slcmComments` - Implementation Plan or Risk Assessment information cannot be updated if Security Control does not exist in the system record.
         * @summary Update control information in a system for one or many controls
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<ControlsRequiredFields & ControlsConditionalFields & ControlsOptionalFields & ControlsReadOnlyFields>} controlsRequiredFieldsControlsConditionalFieldsControlsOptionalFieldsControlsReadOnlyFields Example request body for updating an existing control for a given system.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateControlBySystemId: function (systemId, controlsRequiredFieldsControlsConditionalFieldsControlsOptionalFieldsControlsReadOnlyFields, options) {
            return localVarFp.updateControlBySystemId(systemId, controlsRequiredFieldsControlsConditionalFieldsControlsOptionalFieldsControlsReadOnlyFields, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.ControlsApiFactory = ControlsApiFactory;
/**
 * ControlsApi - object-oriented interface
 * @export
 * @class ControlsApi
 * @extends {BaseAPI}
 */
var ControlsApi = /** @class */ (function (_super) {
    __extends(ControlsApi, _super);
    function ControlsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Returns system control information for matching `systemId` path parameter
     * @summary Get control information in a system for one or many controls
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {string} [acronyms] **Acronym**: The system acronym(s) being queried (single value or comma delimited values).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlsApi
     */
    ControlsApi.prototype.getSystemControls = function (systemId, acronyms, options) {
        var _this = this;
        return (0, exports.ControlsApiFp)(this.configuration).getSystemControls(systemId, acronyms, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update a Control for given `systemId`<br>  **Request Body Required Fields** - `acronym` - `responsibleEntities` - `controlDesignation` - `estimatedCompletionDate` - `implementationNarrative`  <br> **Business Rules**  The following **optional fields** (plus the **Request Body Required Fields**) are required based on the Implementation Status (`implementationStatus`) field value:<br>  <table>   <thead>     <tr><th><b>Status</b></th><th><b>Required Fields</b></th></tr>   </thead>   <tbody>     <tr><td><b>Planned</b> or <b>Implemented</b></td><td><code>slcmCriticality, slcmFrequency, slcmMethod, slcmReporting, slcmTracking, slcmComments</code></td></tr>     <tr><td><b>Not Applicable</b></td><td><code>naJustification</code></td></tr>     <tr><td><b>Manually Inherited</b></td><td><code>commonControlProvider, slcmCriticality, slcmFrequency, slcmMethod, slcmReporting, slcmTracking, slcmComments</code></td></tr>   </tbody> </table>   **NOTES:** - Risk Assessment information cannot be updated if a Security Control is `Inherited`. - Risk Assessment information cannot be updated for a DIACAP system record. - Implementation Plan information cannot be saved if the these fields exceed 2,000 character limits:   - `naJustification`,`responsibleEntities`,`implementationNarrative`,`slcmCriticality`   - `slcmFrequency`,`slcmMethod`,`slcmReporting`,`slcmTracking`,`slcmComments` - Implementation Plan or Risk Assessment information cannot be updated if Security Control does not exist in the system record.
     * @summary Update control information in a system for one or many controls
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {Array<ControlsRequiredFields & ControlsConditionalFields & ControlsOptionalFields & ControlsReadOnlyFields>} controlsRequiredFieldsControlsConditionalFieldsControlsOptionalFieldsControlsReadOnlyFields Example request body for updating an existing control for a given system.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlsApi
     */
    ControlsApi.prototype.updateControlBySystemId = function (systemId, controlsRequiredFieldsControlsConditionalFieldsControlsOptionalFieldsControlsReadOnlyFields, options) {
        var _this = this;
        return (0, exports.ControlsApiFp)(this.configuration).updateControlBySystemId(systemId, controlsRequiredFieldsControlsConditionalFieldsControlsOptionalFieldsControlsReadOnlyFields, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ControlsApi;
}(base_1.BaseAPI));
exports.ControlsApi = ControlsApi;
/**
 * DeviceScanResultsApi - axios parameter creator
 * @export
 */
var DeviceScanResultsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *  **Request Body Required Field** - `scanType`  Scan Type Allow Values:  <ul>   <li>acasAsrArf (.zip)</li>   <li>acasNessus</li>   <li>disaStigViewerCklCklb (.ckl or .cklb)</li>   <li>disaStigViewerCmrs</li>   <li>policyAuditor (.zip)</li>          <li>scapComplianceChecker</li> </ul>   <strong>Business Rules</strong><br>  The body of a request through the Device Scan Results POST endpoint accepts a single binary file. Specific file extensions are expected depending upon the scanType parameter. For example, .ckl or .cklb files are accepted when using scanType is set to disaStigViewerCklCklb.  When set to acasAsrArf or policyAuditor, a .zip file is expected which should contain a single scan result (for example, a single pair of .asr and .arf files). Single files are expected for all other scan types as this endpoint requires files to be uploaded consecutively as opposed to in bulk.  Current scan types that are supported: <ul>   <li>ACAS: ASR/ARF</li>   <li>ACAS: NESSUS</li>   <li>DISA STIG Viewer: CKL/CKLB</li>   <li>DISA STIG Viewer: CMRS</li>   <li>Policy Auditor</li>          <li>SCAP Compliance Checker</li> </ul>
         * @summary Add device scans in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {AddScanResultsBySystemIdScanTypeEnum} scanType **Scan Type**: The file scan type to upload
         * @param {File} filename The file to upload. Can be a single file or a .zip file.
         * @param {boolean} [isBaseline] **Is Baseline**: Indicates that the imported file represents a baseline scan that includes all findings and results. Importing as a baseline scan, which assumes a common set of scan policies are used when conducting a scan, will replace a device\&#39;s findings for a specific Benchmark. Applicable to ASR/ARF scans only.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addScanResultsBySystemId: function (systemId_1, scanType_1, filename_1, isBaseline_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([systemId_1, scanType_1, filename_1, isBaseline_1], args_1, true), void 0, function (systemId, scanType, filename, isBaseline, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarFormParams, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            (0, common_1.assertParamExists)('addScanResultsBySystemId', 'systemId', systemId);
                            // verify required parameter 'scanType' is not null or undefined
                            (0, common_1.assertParamExists)('addScanResultsBySystemId', 'scanType', scanType);
                            // verify required parameter 'filename' is not null or undefined
                            (0, common_1.assertParamExists)('addScanResultsBySystemId', 'filename', filename);
                            localVarPath = "/api/systems/{systemId}/device-scan-results"
                                .replace("{".concat("systemId", "}"), encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (scanType !== undefined) {
                                localVarQueryParameter['scanType'] = scanType;
                            }
                            if (isBaseline !== undefined) {
                                localVarQueryParameter['isBaseline'] = isBaseline;
                            }
                            if (filename !== undefined) {
                                localVarFormParams.append('filename', filename);
                            }
                            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = localVarFormParams;
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.DeviceScanResultsApiAxiosParamCreator = DeviceScanResultsApiAxiosParamCreator;
/**
 * DeviceScanResultsApi - functional programming interface
 * @export
 */
var DeviceScanResultsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.DeviceScanResultsApiAxiosParamCreator)(configuration);
    return {
        /**
         *  **Request Body Required Field** - `scanType`  Scan Type Allow Values:  <ul>   <li>acasAsrArf (.zip)</li>   <li>acasNessus</li>   <li>disaStigViewerCklCklb (.ckl or .cklb)</li>   <li>disaStigViewerCmrs</li>   <li>policyAuditor (.zip)</li>          <li>scapComplianceChecker</li> </ul>   <strong>Business Rules</strong><br>  The body of a request through the Device Scan Results POST endpoint accepts a single binary file. Specific file extensions are expected depending upon the scanType parameter. For example, .ckl or .cklb files are accepted when using scanType is set to disaStigViewerCklCklb.  When set to acasAsrArf or policyAuditor, a .zip file is expected which should contain a single scan result (for example, a single pair of .asr and .arf files). Single files are expected for all other scan types as this endpoint requires files to be uploaded consecutively as opposed to in bulk.  Current scan types that are supported: <ul>   <li>ACAS: ASR/ARF</li>   <li>ACAS: NESSUS</li>   <li>DISA STIG Viewer: CKL/CKLB</li>   <li>DISA STIG Viewer: CMRS</li>   <li>Policy Auditor</li>          <li>SCAP Compliance Checker</li> </ul>
         * @summary Add device scans in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {AddScanResultsBySystemIdScanTypeEnum} scanType **Scan Type**: The file scan type to upload
         * @param {File} filename The file to upload. Can be a single file or a .zip file.
         * @param {boolean} [isBaseline] **Is Baseline**: Indicates that the imported file represents a baseline scan that includes all findings and results. Importing as a baseline scan, which assumes a common set of scan policies are used when conducting a scan, will replace a device\&#39;s findings for a specific Benchmark. Applicable to ASR/ARF scans only.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addScanResultsBySystemId: function (systemId, scanType, filename, isBaseline, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addScanResultsBySystemId(systemId, scanType, filename, isBaseline, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['DeviceScanResultsApi.addScanResultsBySystemId']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.DeviceScanResultsApiFp = DeviceScanResultsApiFp;
/**
 * DeviceScanResultsApi - factory interface
 * @export
 */
var DeviceScanResultsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.DeviceScanResultsApiFp)(configuration);
    return {
        /**
         *  **Request Body Required Field** - `scanType`  Scan Type Allow Values:  <ul>   <li>acasAsrArf (.zip)</li>   <li>acasNessus</li>   <li>disaStigViewerCklCklb (.ckl or .cklb)</li>   <li>disaStigViewerCmrs</li>   <li>policyAuditor (.zip)</li>          <li>scapComplianceChecker</li> </ul>   <strong>Business Rules</strong><br>  The body of a request through the Device Scan Results POST endpoint accepts a single binary file. Specific file extensions are expected depending upon the scanType parameter. For example, .ckl or .cklb files are accepted when using scanType is set to disaStigViewerCklCklb.  When set to acasAsrArf or policyAuditor, a .zip file is expected which should contain a single scan result (for example, a single pair of .asr and .arf files). Single files are expected for all other scan types as this endpoint requires files to be uploaded consecutively as opposed to in bulk.  Current scan types that are supported: <ul>   <li>ACAS: ASR/ARF</li>   <li>ACAS: NESSUS</li>   <li>DISA STIG Viewer: CKL/CKLB</li>   <li>DISA STIG Viewer: CMRS</li>   <li>Policy Auditor</li>          <li>SCAP Compliance Checker</li> </ul>
         * @summary Add device scans in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {AddScanResultsBySystemIdScanTypeEnum} scanType **Scan Type**: The file scan type to upload
         * @param {File} filename The file to upload. Can be a single file or a .zip file.
         * @param {boolean} [isBaseline] **Is Baseline**: Indicates that the imported file represents a baseline scan that includes all findings and results. Importing as a baseline scan, which assumes a common set of scan policies are used when conducting a scan, will replace a device\&#39;s findings for a specific Benchmark. Applicable to ASR/ARF scans only.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addScanResultsBySystemId: function (systemId, scanType, filename, isBaseline, options) {
            return localVarFp.addScanResultsBySystemId(systemId, scanType, filename, isBaseline, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.DeviceScanResultsApiFactory = DeviceScanResultsApiFactory;
/**
 * DeviceScanResultsApi - object-oriented interface
 * @export
 * @class DeviceScanResultsApi
 * @extends {BaseAPI}
 */
var DeviceScanResultsApi = /** @class */ (function (_super) {
    __extends(DeviceScanResultsApi, _super);
    function DeviceScanResultsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *  **Request Body Required Field** - `scanType`  Scan Type Allow Values:  <ul>   <li>acasAsrArf (.zip)</li>   <li>acasNessus</li>   <li>disaStigViewerCklCklb (.ckl or .cklb)</li>   <li>disaStigViewerCmrs</li>   <li>policyAuditor (.zip)</li>          <li>scapComplianceChecker</li> </ul>   <strong>Business Rules</strong><br>  The body of a request through the Device Scan Results POST endpoint accepts a single binary file. Specific file extensions are expected depending upon the scanType parameter. For example, .ckl or .cklb files are accepted when using scanType is set to disaStigViewerCklCklb.  When set to acasAsrArf or policyAuditor, a .zip file is expected which should contain a single scan result (for example, a single pair of .asr and .arf files). Single files are expected for all other scan types as this endpoint requires files to be uploaded consecutively as opposed to in bulk.  Current scan types that are supported: <ul>   <li>ACAS: ASR/ARF</li>   <li>ACAS: NESSUS</li>   <li>DISA STIG Viewer: CKL/CKLB</li>   <li>DISA STIG Viewer: CMRS</li>   <li>Policy Auditor</li>          <li>SCAP Compliance Checker</li> </ul>
     * @summary Add device scans in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {AddScanResultsBySystemIdScanTypeEnum} scanType **Scan Type**: The file scan type to upload
     * @param {File} filename The file to upload. Can be a single file or a .zip file.
     * @param {boolean} [isBaseline] **Is Baseline**: Indicates that the imported file represents a baseline scan that includes all findings and results. Importing as a baseline scan, which assumes a common set of scan policies are used when conducting a scan, will replace a device\&#39;s findings for a specific Benchmark. Applicable to ASR/ARF scans only.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceScanResultsApi
     */
    DeviceScanResultsApi.prototype.addScanResultsBySystemId = function (systemId, scanType, filename, isBaseline, options) {
        var _this = this;
        return (0, exports.DeviceScanResultsApiFp)(this.configuration).addScanResultsBySystemId(systemId, scanType, filename, isBaseline, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return DeviceScanResultsApi;
}(base_1.BaseAPI));
exports.DeviceScanResultsApi = DeviceScanResultsApi;
/**
 * @export
 */
exports.AddScanResultsBySystemIdScanTypeEnum = {
    AcasAsrArf: 'acasAsrArf',
    AcasNessus: 'acasNessus',
    DisaStigViewerCklCklb: 'disaStigViewerCklCklb',
    DisaStigViewerCmrs: 'disaStigViewerCmrs',
    PolicyAuditor: 'policyAuditor',
    ScapComplianceChecker: 'scapComplianceChecker',
    UnknownDefaultOpenApi: '11184809'
};
/**
 * HardwareBaselineApi - axios parameter creator
 * @export
 */
var HardwareBaselineApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Adds assets to the Hardware Baseline for given `systemId`  **Request Body Required Fields** - `assetName`
         * @summary Add one or many hardware assets in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<HwBaselineRequiredFields & HwBaselineConditionalFields & HwBaselineOptionalFields>} hwBaselineRequiredFieldsHwBaselineConditionalFieldsHwBaselineOptionalFields Example request body for adding hardware baseline assets to an existing System (systemId)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addHwBaselineAssets: function (systemId_1, hwBaselineRequiredFieldsHwBaselineConditionalFieldsHwBaselineOptionalFields_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([systemId_1, hwBaselineRequiredFieldsHwBaselineConditionalFieldsHwBaselineOptionalFields_1], args_1, true), void 0, function (systemId, hwBaselineRequiredFieldsHwBaselineConditionalFieldsHwBaselineOptionalFields, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            (0, common_1.assertParamExists)('addHwBaselineAssets', 'systemId', systemId);
                            // verify required parameter 'hwBaselineRequiredFieldsHwBaselineConditionalFieldsHwBaselineOptionalFields' is not null or undefined
                            (0, common_1.assertParamExists)('addHwBaselineAssets', 'hwBaselineRequiredFieldsHwBaselineConditionalFieldsHwBaselineOptionalFields', hwBaselineRequiredFieldsHwBaselineConditionalFieldsHwBaselineOptionalFields);
                            localVarPath = "/api/systems/{systemId}/hw-baseline"
                                .replace("{".concat("systemId", "}"), encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(hwBaselineRequiredFieldsHwBaselineConditionalFieldsHwBaselineOptionalFields, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Remove (delete) one or multiple assets from a system Hardware Baseline
         * @summary Delete one or many hardware assets in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<HwBaselineRequestDeleteBodyInner>} hwBaselineRequestDeleteBodyInner Example request body for deleting one or many Hardware Baseline assets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteHwBaselineAssets: function (systemId_1, hwBaselineRequestDeleteBodyInner_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([systemId_1, hwBaselineRequestDeleteBodyInner_1], args_1, true), void 0, function (systemId, hwBaselineRequestDeleteBodyInner, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            (0, common_1.assertParamExists)('deleteHwBaselineAssets', 'systemId', systemId);
                            // verify required parameter 'hwBaselineRequestDeleteBodyInner' is not null or undefined
                            (0, common_1.assertParamExists)('deleteHwBaselineAssets', 'hwBaselineRequestDeleteBodyInner', hwBaselineRequestDeleteBodyInner);
                            localVarPath = "/api/systems/{systemId}/hw-baseline"
                                .replace("{".concat("systemId", "}"), encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(hwBaselineRequestDeleteBodyInner, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Returns the hardware baseline for a system matching the `systemId` path parameter
         * @summary Get hardware baseline for a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemHwBaseline: function (systemId_1, pageIndex_1, pageSize_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([systemId_1, pageIndex_1, pageSize_1], args_1, true), void 0, function (systemId, pageIndex, pageSize, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            (0, common_1.assertParamExists)('getSystemHwBaseline', 'systemId', systemId);
                            localVarPath = "/api/systems/{systemId}/hw-baseline"
                                .replace("{".concat("systemId", "}"), encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Updates assets in the Hardware Baseline for given `systemId`  **Request Body Required Fields** - `assetName` - `hardwareId`
         * @summary Update one or many hardware assets in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<HwBaselineReadOnlyFields & HwBaselineRequiredFields & HwBaselineOptionalFields & HwBaselineConditionalFields>} hwBaselineReadOnlyFieldsHwBaselineRequiredFieldsHwBaselineOptionalFieldsHwBaselineConditionalFields Example request body for updating hardware baseline assets to an existing System (systemId)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateHwBaselineAssets: function (systemId_1, hwBaselineReadOnlyFieldsHwBaselineRequiredFieldsHwBaselineOptionalFieldsHwBaselineConditionalFields_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([systemId_1, hwBaselineReadOnlyFieldsHwBaselineRequiredFieldsHwBaselineOptionalFieldsHwBaselineConditionalFields_1], args_1, true), void 0, function (systemId, hwBaselineReadOnlyFieldsHwBaselineRequiredFieldsHwBaselineOptionalFieldsHwBaselineConditionalFields, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            (0, common_1.assertParamExists)('updateHwBaselineAssets', 'systemId', systemId);
                            // verify required parameter 'hwBaselineReadOnlyFieldsHwBaselineRequiredFieldsHwBaselineOptionalFieldsHwBaselineConditionalFields' is not null or undefined
                            (0, common_1.assertParamExists)('updateHwBaselineAssets', 'hwBaselineReadOnlyFieldsHwBaselineRequiredFieldsHwBaselineOptionalFieldsHwBaselineConditionalFields', hwBaselineReadOnlyFieldsHwBaselineRequiredFieldsHwBaselineOptionalFieldsHwBaselineConditionalFields);
                            localVarPath = "/api/systems/{systemId}/hw-baseline"
                                .replace("{".concat("systemId", "}"), encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(hwBaselineReadOnlyFieldsHwBaselineRequiredFieldsHwBaselineOptionalFieldsHwBaselineConditionalFields, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.HardwareBaselineApiAxiosParamCreator = HardwareBaselineApiAxiosParamCreator;
/**
 * HardwareBaselineApi - functional programming interface
 * @export
 */
var HardwareBaselineApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.HardwareBaselineApiAxiosParamCreator)(configuration);
    return {
        /**
         * Adds assets to the Hardware Baseline for given `systemId`  **Request Body Required Fields** - `assetName`
         * @summary Add one or many hardware assets in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<HwBaselineRequiredFields & HwBaselineConditionalFields & HwBaselineOptionalFields>} hwBaselineRequiredFieldsHwBaselineConditionalFieldsHwBaselineOptionalFields Example request body for adding hardware baseline assets to an existing System (systemId)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addHwBaselineAssets: function (systemId, hwBaselineRequiredFieldsHwBaselineConditionalFieldsHwBaselineOptionalFields, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addHwBaselineAssets(systemId, hwBaselineRequiredFieldsHwBaselineConditionalFieldsHwBaselineOptionalFields, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['HardwareBaselineApi.addHwBaselineAssets']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Remove (delete) one or multiple assets from a system Hardware Baseline
         * @summary Delete one or many hardware assets in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<HwBaselineRequestDeleteBodyInner>} hwBaselineRequestDeleteBodyInner Example request body for deleting one or many Hardware Baseline assets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteHwBaselineAssets: function (systemId, hwBaselineRequestDeleteBodyInner, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteHwBaselineAssets(systemId, hwBaselineRequestDeleteBodyInner, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['HardwareBaselineApi.deleteHwBaselineAssets']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Returns the hardware baseline for a system matching the `systemId` path parameter
         * @summary Get hardware baseline for a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemHwBaseline: function (systemId, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemHwBaseline(systemId, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['HardwareBaselineApi.getSystemHwBaseline']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Updates assets in the Hardware Baseline for given `systemId`  **Request Body Required Fields** - `assetName` - `hardwareId`
         * @summary Update one or many hardware assets in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<HwBaselineReadOnlyFields & HwBaselineRequiredFields & HwBaselineOptionalFields & HwBaselineConditionalFields>} hwBaselineReadOnlyFieldsHwBaselineRequiredFieldsHwBaselineOptionalFieldsHwBaselineConditionalFields Example request body for updating hardware baseline assets to an existing System (systemId)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateHwBaselineAssets: function (systemId, hwBaselineReadOnlyFieldsHwBaselineRequiredFieldsHwBaselineOptionalFieldsHwBaselineConditionalFields, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateHwBaselineAssets(systemId, hwBaselineReadOnlyFieldsHwBaselineRequiredFieldsHwBaselineOptionalFieldsHwBaselineConditionalFields, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['HardwareBaselineApi.updateHwBaselineAssets']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.HardwareBaselineApiFp = HardwareBaselineApiFp;
/**
 * HardwareBaselineApi - factory interface
 * @export
 */
var HardwareBaselineApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.HardwareBaselineApiFp)(configuration);
    return {
        /**
         * Adds assets to the Hardware Baseline for given `systemId`  **Request Body Required Fields** - `assetName`
         * @summary Add one or many hardware assets in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<HwBaselineRequiredFields & HwBaselineConditionalFields & HwBaselineOptionalFields>} hwBaselineRequiredFieldsHwBaselineConditionalFieldsHwBaselineOptionalFields Example request body for adding hardware baseline assets to an existing System (systemId)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addHwBaselineAssets: function (systemId, hwBaselineRequiredFieldsHwBaselineConditionalFieldsHwBaselineOptionalFields, options) {
            return localVarFp.addHwBaselineAssets(systemId, hwBaselineRequiredFieldsHwBaselineConditionalFieldsHwBaselineOptionalFields, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Remove (delete) one or multiple assets from a system Hardware Baseline
         * @summary Delete one or many hardware assets in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<HwBaselineRequestDeleteBodyInner>} hwBaselineRequestDeleteBodyInner Example request body for deleting one or many Hardware Baseline assets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteHwBaselineAssets: function (systemId, hwBaselineRequestDeleteBodyInner, options) {
            return localVarFp.deleteHwBaselineAssets(systemId, hwBaselineRequestDeleteBodyInner, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns the hardware baseline for a system matching the `systemId` path parameter
         * @summary Get hardware baseline for a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemHwBaseline: function (systemId, pageIndex, pageSize, options) {
            return localVarFp.getSystemHwBaseline(systemId, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Updates assets in the Hardware Baseline for given `systemId`  **Request Body Required Fields** - `assetName` - `hardwareId`
         * @summary Update one or many hardware assets in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<HwBaselineReadOnlyFields & HwBaselineRequiredFields & HwBaselineOptionalFields & HwBaselineConditionalFields>} hwBaselineReadOnlyFieldsHwBaselineRequiredFieldsHwBaselineOptionalFieldsHwBaselineConditionalFields Example request body for updating hardware baseline assets to an existing System (systemId)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateHwBaselineAssets: function (systemId, hwBaselineReadOnlyFieldsHwBaselineRequiredFieldsHwBaselineOptionalFieldsHwBaselineConditionalFields, options) {
            return localVarFp.updateHwBaselineAssets(systemId, hwBaselineReadOnlyFieldsHwBaselineRequiredFieldsHwBaselineOptionalFieldsHwBaselineConditionalFields, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.HardwareBaselineApiFactory = HardwareBaselineApiFactory;
/**
 * HardwareBaselineApi - object-oriented interface
 * @export
 * @class HardwareBaselineApi
 * @extends {BaseAPI}
 */
var HardwareBaselineApi = /** @class */ (function (_super) {
    __extends(HardwareBaselineApi, _super);
    function HardwareBaselineApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Adds assets to the Hardware Baseline for given `systemId`  **Request Body Required Fields** - `assetName`
     * @summary Add one or many hardware assets in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {Array<HwBaselineRequiredFields & HwBaselineConditionalFields & HwBaselineOptionalFields>} hwBaselineRequiredFieldsHwBaselineConditionalFieldsHwBaselineOptionalFields Example request body for adding hardware baseline assets to an existing System (systemId)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HardwareBaselineApi
     */
    HardwareBaselineApi.prototype.addHwBaselineAssets = function (systemId, hwBaselineRequiredFieldsHwBaselineConditionalFieldsHwBaselineOptionalFields, options) {
        var _this = this;
        return (0, exports.HardwareBaselineApiFp)(this.configuration).addHwBaselineAssets(systemId, hwBaselineRequiredFieldsHwBaselineConditionalFieldsHwBaselineOptionalFields, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Remove (delete) one or multiple assets from a system Hardware Baseline
     * @summary Delete one or many hardware assets in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {Array<HwBaselineRequestDeleteBodyInner>} hwBaselineRequestDeleteBodyInner Example request body for deleting one or many Hardware Baseline assets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HardwareBaselineApi
     */
    HardwareBaselineApi.prototype.deleteHwBaselineAssets = function (systemId, hwBaselineRequestDeleteBodyInner, options) {
        var _this = this;
        return (0, exports.HardwareBaselineApiFp)(this.configuration).deleteHwBaselineAssets(systemId, hwBaselineRequestDeleteBodyInner, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns the hardware baseline for a system matching the `systemId` path parameter
     * @summary Get hardware baseline for a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HardwareBaselineApi
     */
    HardwareBaselineApi.prototype.getSystemHwBaseline = function (systemId, pageIndex, pageSize, options) {
        var _this = this;
        return (0, exports.HardwareBaselineApiFp)(this.configuration).getSystemHwBaseline(systemId, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Updates assets in the Hardware Baseline for given `systemId`  **Request Body Required Fields** - `assetName` - `hardwareId`
     * @summary Update one or many hardware assets in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {Array<HwBaselineReadOnlyFields & HwBaselineRequiredFields & HwBaselineOptionalFields & HwBaselineConditionalFields>} hwBaselineReadOnlyFieldsHwBaselineRequiredFieldsHwBaselineOptionalFieldsHwBaselineConditionalFields Example request body for updating hardware baseline assets to an existing System (systemId)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HardwareBaselineApi
     */
    HardwareBaselineApi.prototype.updateHwBaselineAssets = function (systemId, hwBaselineReadOnlyFieldsHwBaselineRequiredFieldsHwBaselineOptionalFieldsHwBaselineConditionalFields, options) {
        var _this = this;
        return (0, exports.HardwareBaselineApiFp)(this.configuration).updateHwBaselineAssets(systemId, hwBaselineReadOnlyFieldsHwBaselineRequiredFieldsHwBaselineOptionalFieldsHwBaselineConditionalFields, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return HardwareBaselineApi;
}(base_1.BaseAPI));
exports.HardwareBaselineApi = HardwareBaselineApi;
/**
 * MilestonesApi - axios parameter creator
 * @export
 */
var MilestonesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Adds a milestone for given `systemId` and `poamId` path parameters  **Request Body Required Fields** - `description` - `scheduledCompletionDate`
         * @summary Add milestones to one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {Array<object>} requestBody Example request body for adding milestones to an existing System (systemId) POA&amp;M (poamId)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMilestoneBySystemIdAndPoamId: function (systemId_1, poamId_1, requestBody_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([systemId_1, poamId_1, requestBody_1], args_1, true), void 0, function (systemId, poamId, requestBody, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            (0, common_1.assertParamExists)('addMilestoneBySystemIdAndPoamId', 'systemId', systemId);
                            // verify required parameter 'poamId' is not null or undefined
                            (0, common_1.assertParamExists)('addMilestoneBySystemIdAndPoamId', 'poamId', poamId);
                            // verify required parameter 'requestBody' is not null or undefined
                            (0, common_1.assertParamExists)('addMilestoneBySystemIdAndPoamId', 'requestBody', requestBody);
                            localVarPath = "/api/systems/{systemId}/poams/{poamId}/milestones"
                                .replace("{".concat("systemId", "}"), encodeURIComponent(String(systemId)))
                                .replace("{".concat("poamId", "}"), encodeURIComponent(String(poamId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(requestBody, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Remove the POA&M matching `systemId` and `poamId` for path parameters and `milstoneId` provide in the Request Body  **NOTE**<br> To delete a milestone the record must be inactive by having the field isActive set to false (`isActive=false`).
         * @summary Remove milestones in a system for one or many POA&M items
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {Array<MilestonesRequestDeleteBodyInner>} milestonesRequestDeleteBodyInner Delete the given Milestone Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMilestone: function (systemId_1, poamId_1, milestonesRequestDeleteBodyInner_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([systemId_1, poamId_1, milestonesRequestDeleteBodyInner_1], args_1, true), void 0, function (systemId, poamId, milestonesRequestDeleteBodyInner, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            (0, common_1.assertParamExists)('deleteMilestone', 'systemId', systemId);
                            // verify required parameter 'poamId' is not null or undefined
                            (0, common_1.assertParamExists)('deleteMilestone', 'poamId', poamId);
                            // verify required parameter 'milestonesRequestDeleteBodyInner' is not null or undefined
                            (0, common_1.assertParamExists)('deleteMilestone', 'milestonesRequestDeleteBodyInner', milestonesRequestDeleteBodyInner);
                            localVarPath = "/api/systems/{systemId}/poams/{poamId}/milestones"
                                .replace("{".concat("systemId", "}"), encodeURIComponent(String(systemId)))
                                .replace("{".concat("poamId", "}"), encodeURIComponent(String(poamId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(milestonesRequestDeleteBodyInner, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Returns system containing milestones for matching parameters.
         * @summary Get milestones in one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {string} [scheduledCompletionDateStart] **Date Started**: Filter query by the scheduled completion start date (Unix date format).
         * @param {string} [scheduledCompletionDateEnd] **Date Ended**: Filter query by the scheduled completion start date (Unix date format).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemMilestonesByPoamId: function (systemId_1, poamId_1, scheduledCompletionDateStart_1, scheduledCompletionDateEnd_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([systemId_1, poamId_1, scheduledCompletionDateStart_1, scheduledCompletionDateEnd_1], args_1, true), void 0, function (systemId, poamId, scheduledCompletionDateStart, scheduledCompletionDateEnd, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            (0, common_1.assertParamExists)('getSystemMilestonesByPoamId', 'systemId', systemId);
                            // verify required parameter 'poamId' is not null or undefined
                            (0, common_1.assertParamExists)('getSystemMilestonesByPoamId', 'poamId', poamId);
                            localVarPath = "/api/systems/{systemId}/poams/{poamId}/milestones"
                                .replace("{".concat("systemId", "}"), encodeURIComponent(String(systemId)))
                                .replace("{".concat("poamId", "}"), encodeURIComponent(String(poamId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (scheduledCompletionDateStart !== undefined) {
                                localVarQueryParameter['scheduledCompletionDateStart'] = scheduledCompletionDateStart;
                            }
                            if (scheduledCompletionDateEnd !== undefined) {
                                localVarQueryParameter['scheduledCompletionDateEnd'] = scheduledCompletionDateEnd;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Returns systems containing milestones for matching parameters.
         * @summary Get milestone by ID in POA&M item in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {number} milestoneId **Milestone Id**: The unique milestone record identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemMilestonesByPoamIdAndMilestoneId: function (systemId_1, poamId_1, milestoneId_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([systemId_1, poamId_1, milestoneId_1], args_1, true), void 0, function (systemId, poamId, milestoneId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            (0, common_1.assertParamExists)('getSystemMilestonesByPoamIdAndMilestoneId', 'systemId', systemId);
                            // verify required parameter 'poamId' is not null or undefined
                            (0, common_1.assertParamExists)('getSystemMilestonesByPoamIdAndMilestoneId', 'poamId', poamId);
                            // verify required parameter 'milestoneId' is not null or undefined
                            (0, common_1.assertParamExists)('getSystemMilestonesByPoamIdAndMilestoneId', 'milestoneId', milestoneId);
                            localVarPath = "/api/systems/{systemId}/poams/{poamId}/milestones/{milestoneId}"
                                .replace("{".concat("systemId", "}"), encodeURIComponent(String(systemId)))
                                .replace("{".concat("poamId", "}"), encodeURIComponent(String(poamId)))
                                .replace("{".concat("milestoneId", "}"), encodeURIComponent(String(milestoneId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Updates a milestone for given `systemId` and `poamId` path parameters  **Request Body Required Fields** - `milestoneId` - `description` - `scheduledCompletionDate`
         * @summary Update one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {Array<object>} requestBody Example request body for updating milestones (milestoneId) of an existing System (systemId) POA&amp;M (poamId)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMilestoneBySystemIdAndPoamId: function (systemId_1, poamId_1, requestBody_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([systemId_1, poamId_1, requestBody_1], args_1, true), void 0, function (systemId, poamId, requestBody, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            (0, common_1.assertParamExists)('updateMilestoneBySystemIdAndPoamId', 'systemId', systemId);
                            // verify required parameter 'poamId' is not null or undefined
                            (0, common_1.assertParamExists)('updateMilestoneBySystemIdAndPoamId', 'poamId', poamId);
                            // verify required parameter 'requestBody' is not null or undefined
                            (0, common_1.assertParamExists)('updateMilestoneBySystemIdAndPoamId', 'requestBody', requestBody);
                            localVarPath = "/api/systems/{systemId}/poams/{poamId}/milestones"
                                .replace("{".concat("systemId", "}"), encodeURIComponent(String(systemId)))
                                .replace("{".concat("poamId", "}"), encodeURIComponent(String(poamId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(requestBody, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.MilestonesApiAxiosParamCreator = MilestonesApiAxiosParamCreator;
/**
 * MilestonesApi - functional programming interface
 * @export
 */
var MilestonesApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.MilestonesApiAxiosParamCreator)(configuration);
    return {
        /**
         * Adds a milestone for given `systemId` and `poamId` path parameters  **Request Body Required Fields** - `description` - `scheduledCompletionDate`
         * @summary Add milestones to one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {Array<object>} requestBody Example request body for adding milestones to an existing System (systemId) POA&amp;M (poamId)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMilestoneBySystemIdAndPoamId: function (systemId, poamId, requestBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addMilestoneBySystemIdAndPoamId(systemId, poamId, requestBody, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['MilestonesApi.addMilestoneBySystemIdAndPoamId']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Remove the POA&M matching `systemId` and `poamId` for path parameters and `milstoneId` provide in the Request Body  **NOTE**<br> To delete a milestone the record must be inactive by having the field isActive set to false (`isActive=false`).
         * @summary Remove milestones in a system for one or many POA&M items
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {Array<MilestonesRequestDeleteBodyInner>} milestonesRequestDeleteBodyInner Delete the given Milestone Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMilestone: function (systemId, poamId, milestonesRequestDeleteBodyInner, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteMilestone(systemId, poamId, milestonesRequestDeleteBodyInner, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['MilestonesApi.deleteMilestone']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Returns system containing milestones for matching parameters.
         * @summary Get milestones in one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {string} [scheduledCompletionDateStart] **Date Started**: Filter query by the scheduled completion start date (Unix date format).
         * @param {string} [scheduledCompletionDateEnd] **Date Ended**: Filter query by the scheduled completion start date (Unix date format).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemMilestonesByPoamId: function (systemId, poamId, scheduledCompletionDateStart, scheduledCompletionDateEnd, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemMilestonesByPoamId(systemId, poamId, scheduledCompletionDateStart, scheduledCompletionDateEnd, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['MilestonesApi.getSystemMilestonesByPoamId']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Returns systems containing milestones for matching parameters.
         * @summary Get milestone by ID in POA&M item in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {number} milestoneId **Milestone Id**: The unique milestone record identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemMilestonesByPoamIdAndMilestoneId: function (systemId, poamId, milestoneId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemMilestonesByPoamIdAndMilestoneId(systemId, poamId, milestoneId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['MilestonesApi.getSystemMilestonesByPoamIdAndMilestoneId']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Updates a milestone for given `systemId` and `poamId` path parameters  **Request Body Required Fields** - `milestoneId` - `description` - `scheduledCompletionDate`
         * @summary Update one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {Array<object>} requestBody Example request body for updating milestones (milestoneId) of an existing System (systemId) POA&amp;M (poamId)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMilestoneBySystemIdAndPoamId: function (systemId, poamId, requestBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateMilestoneBySystemIdAndPoamId(systemId, poamId, requestBody, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['MilestonesApi.updateMilestoneBySystemIdAndPoamId']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.MilestonesApiFp = MilestonesApiFp;
/**
 * MilestonesApi - factory interface
 * @export
 */
var MilestonesApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.MilestonesApiFp)(configuration);
    return {
        /**
         * Adds a milestone for given `systemId` and `poamId` path parameters  **Request Body Required Fields** - `description` - `scheduledCompletionDate`
         * @summary Add milestones to one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {Array<object>} requestBody Example request body for adding milestones to an existing System (systemId) POA&amp;M (poamId)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMilestoneBySystemIdAndPoamId: function (systemId, poamId, requestBody, options) {
            return localVarFp.addMilestoneBySystemIdAndPoamId(systemId, poamId, requestBody, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Remove the POA&M matching `systemId` and `poamId` for path parameters and `milstoneId` provide in the Request Body  **NOTE**<br> To delete a milestone the record must be inactive by having the field isActive set to false (`isActive=false`).
         * @summary Remove milestones in a system for one or many POA&M items
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {Array<MilestonesRequestDeleteBodyInner>} milestonesRequestDeleteBodyInner Delete the given Milestone Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMilestone: function (systemId, poamId, milestonesRequestDeleteBodyInner, options) {
            return localVarFp.deleteMilestone(systemId, poamId, milestonesRequestDeleteBodyInner, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns system containing milestones for matching parameters.
         * @summary Get milestones in one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {string} [scheduledCompletionDateStart] **Date Started**: Filter query by the scheduled completion start date (Unix date format).
         * @param {string} [scheduledCompletionDateEnd] **Date Ended**: Filter query by the scheduled completion start date (Unix date format).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemMilestonesByPoamId: function (systemId, poamId, scheduledCompletionDateStart, scheduledCompletionDateEnd, options) {
            return localVarFp.getSystemMilestonesByPoamId(systemId, poamId, scheduledCompletionDateStart, scheduledCompletionDateEnd, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns systems containing milestones for matching parameters.
         * @summary Get milestone by ID in POA&M item in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {number} milestoneId **Milestone Id**: The unique milestone record identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemMilestonesByPoamIdAndMilestoneId: function (systemId, poamId, milestoneId, options) {
            return localVarFp.getSystemMilestonesByPoamIdAndMilestoneId(systemId, poamId, milestoneId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Updates a milestone for given `systemId` and `poamId` path parameters  **Request Body Required Fields** - `milestoneId` - `description` - `scheduledCompletionDate`
         * @summary Update one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {Array<object>} requestBody Example request body for updating milestones (milestoneId) of an existing System (systemId) POA&amp;M (poamId)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMilestoneBySystemIdAndPoamId: function (systemId, poamId, requestBody, options) {
            return localVarFp.updateMilestoneBySystemIdAndPoamId(systemId, poamId, requestBody, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.MilestonesApiFactory = MilestonesApiFactory;
/**
 * MilestonesApi - object-oriented interface
 * @export
 * @class MilestonesApi
 * @extends {BaseAPI}
 */
var MilestonesApi = /** @class */ (function (_super) {
    __extends(MilestonesApi, _super);
    function MilestonesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Adds a milestone for given `systemId` and `poamId` path parameters  **Request Body Required Fields** - `description` - `scheduledCompletionDate`
     * @summary Add milestones to one or many POA&M items in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
     * @param {Array<object>} requestBody Example request body for adding milestones to an existing System (systemId) POA&amp;M (poamId)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MilestonesApi
     */
    MilestonesApi.prototype.addMilestoneBySystemIdAndPoamId = function (systemId, poamId, requestBody, options) {
        var _this = this;
        return (0, exports.MilestonesApiFp)(this.configuration).addMilestoneBySystemIdAndPoamId(systemId, poamId, requestBody, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Remove the POA&M matching `systemId` and `poamId` for path parameters and `milstoneId` provide in the Request Body  **NOTE**<br> To delete a milestone the record must be inactive by having the field isActive set to false (`isActive=false`).
     * @summary Remove milestones in a system for one or many POA&M items
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
     * @param {Array<MilestonesRequestDeleteBodyInner>} milestonesRequestDeleteBodyInner Delete the given Milestone Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MilestonesApi
     */
    MilestonesApi.prototype.deleteMilestone = function (systemId, poamId, milestonesRequestDeleteBodyInner, options) {
        var _this = this;
        return (0, exports.MilestonesApiFp)(this.configuration).deleteMilestone(systemId, poamId, milestonesRequestDeleteBodyInner, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns system containing milestones for matching parameters.
     * @summary Get milestones in one or many POA&M items in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
     * @param {string} [scheduledCompletionDateStart] **Date Started**: Filter query by the scheduled completion start date (Unix date format).
     * @param {string} [scheduledCompletionDateEnd] **Date Ended**: Filter query by the scheduled completion start date (Unix date format).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MilestonesApi
     */
    MilestonesApi.prototype.getSystemMilestonesByPoamId = function (systemId, poamId, scheduledCompletionDateStart, scheduledCompletionDateEnd, options) {
        var _this = this;
        return (0, exports.MilestonesApiFp)(this.configuration).getSystemMilestonesByPoamId(systemId, poamId, scheduledCompletionDateStart, scheduledCompletionDateEnd, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns systems containing milestones for matching parameters.
     * @summary Get milestone by ID in POA&M item in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
     * @param {number} milestoneId **Milestone Id**: The unique milestone record identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MilestonesApi
     */
    MilestonesApi.prototype.getSystemMilestonesByPoamIdAndMilestoneId = function (systemId, poamId, milestoneId, options) {
        var _this = this;
        return (0, exports.MilestonesApiFp)(this.configuration).getSystemMilestonesByPoamIdAndMilestoneId(systemId, poamId, milestoneId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Updates a milestone for given `systemId` and `poamId` path parameters  **Request Body Required Fields** - `milestoneId` - `description` - `scheduledCompletionDate`
     * @summary Update one or many POA&M items in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
     * @param {Array<object>} requestBody Example request body for updating milestones (milestoneId) of an existing System (systemId) POA&amp;M (poamId)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MilestonesApi
     */
    MilestonesApi.prototype.updateMilestoneBySystemIdAndPoamId = function (systemId, poamId, requestBody, options) {
        var _this = this;
        return (0, exports.MilestonesApiFp)(this.configuration).updateMilestoneBySystemIdAndPoamId(systemId, poamId, requestBody, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return MilestonesApi;
}(base_1.BaseAPI));
exports.MilestonesApi = MilestonesApi;
/**
 * OrganizationMigrationStatusDashboardApi - axios parameter creator
 * @export
 */
var OrganizationMigrationStatusDashboardApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get organization migration status summary dashboard information.
         * @summary Organization Migration Status Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationMigrationStatusSummary: function (orgId_1, excludeinherited_1, pageIndex_1, pageSize_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([orgId_1, excludeinherited_1, pageIndex_1, pageSize_1], args_1, true), void 0, function (orgId, excludeinherited, pageIndex, pageSize, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            (0, common_1.assertParamExists)('getOrganizationMigrationStatusSummary', 'orgId', orgId);
                            localVarPath = "/api/dashboards/organization-migration-status-summary";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.OrganizationMigrationStatusDashboardApiAxiosParamCreator = OrganizationMigrationStatusDashboardApiAxiosParamCreator;
/**
 * OrganizationMigrationStatusDashboardApi - functional programming interface
 * @export
 */
var OrganizationMigrationStatusDashboardApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.OrganizationMigrationStatusDashboardApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get organization migration status summary dashboard information.
         * @summary Organization Migration Status Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationMigrationStatusSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getOrganizationMigrationStatusSummary(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['OrganizationMigrationStatusDashboardApi.getOrganizationMigrationStatusSummary']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.OrganizationMigrationStatusDashboardApiFp = OrganizationMigrationStatusDashboardApiFp;
/**
 * OrganizationMigrationStatusDashboardApi - factory interface
 * @export
 */
var OrganizationMigrationStatusDashboardApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.OrganizationMigrationStatusDashboardApiFp)(configuration);
    return {
        /**
         * Get organization migration status summary dashboard information.
         * @summary Organization Migration Status Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationMigrationStatusSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getOrganizationMigrationStatusSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.OrganizationMigrationStatusDashboardApiFactory = OrganizationMigrationStatusDashboardApiFactory;
/**
 * OrganizationMigrationStatusDashboardApi - object-oriented interface
 * @export
 * @class OrganizationMigrationStatusDashboardApi
 * @extends {BaseAPI}
 */
var OrganizationMigrationStatusDashboardApi = /** @class */ (function (_super) {
    __extends(OrganizationMigrationStatusDashboardApi, _super);
    function OrganizationMigrationStatusDashboardApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get organization migration status summary dashboard information.
     * @summary Organization Migration Status Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationMigrationStatusDashboardApi
     */
    OrganizationMigrationStatusDashboardApi.prototype.getOrganizationMigrationStatusSummary = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return (0, exports.OrganizationMigrationStatusDashboardApiFp)(this.configuration).getOrganizationMigrationStatusSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return OrganizationMigrationStatusDashboardApi;
}(base_1.BaseAPI));
exports.OrganizationMigrationStatusDashboardApi = OrganizationMigrationStatusDashboardApi;
/**
 * PACApi - axios parameter creator
 * @export
 */
var PACApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Adds a Package Approval Chain (PAC) for given `systemId` path parameter  **Request Body Required Fields** - `workflow` - `name` - `comments`
         * @summary Initiate system workflow for review
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Example request body for adding system package to PAC for review
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSystemPac: function (systemId_1, requestBody_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([systemId_1, requestBody_1], args_1, true), void 0, function (systemId, requestBody, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            (0, common_1.assertParamExists)('addSystemPac', 'systemId', systemId);
                            // verify required parameter 'requestBody' is not null or undefined
                            (0, common_1.assertParamExists)('addSystemPac', 'requestBody', requestBody);
                            localVarPath = "/api/systems/{systemId}/approval/pac"
                                .replace("{".concat("systemId", "}"), encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(requestBody, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Returns the location of a system\'s package in the Package Approval Chain (PAC) for matching `systemId` path parameter  **NOTES:** - If the indicated system has any active workflows, the response will include information   such as the workflow type and the current stage of each workflow. - If there are no active workflows, then a null data member will be returned.
         * @summary Get status of active workflows in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPac: function (systemId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([systemId_1], args_1, true), void 0, function (systemId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            (0, common_1.assertParamExists)('getSystemPac', 'systemId', systemId);
                            localVarPath = "/api/systems/{systemId}/approval/pac"
                                .replace("{".concat("systemId", "}"), encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.PACApiAxiosParamCreator = PACApiAxiosParamCreator;
/**
 * PACApi - functional programming interface
 * @export
 */
var PACApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.PACApiAxiosParamCreator)(configuration);
    return {
        /**
         * Adds a Package Approval Chain (PAC) for given `systemId` path parameter  **Request Body Required Fields** - `workflow` - `name` - `comments`
         * @summary Initiate system workflow for review
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Example request body for adding system package to PAC for review
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSystemPac: function (systemId, requestBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addSystemPac(systemId, requestBody, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PACApi.addSystemPac']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Returns the location of a system\'s package in the Package Approval Chain (PAC) for matching `systemId` path parameter  **NOTES:** - If the indicated system has any active workflows, the response will include information   such as the workflow type and the current stage of each workflow. - If there are no active workflows, then a null data member will be returned.
         * @summary Get status of active workflows in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPac: function (systemId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemPac(systemId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PACApi.getSystemPac']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.PACApiFp = PACApiFp;
/**
 * PACApi - factory interface
 * @export
 */
var PACApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.PACApiFp)(configuration);
    return {
        /**
         * Adds a Package Approval Chain (PAC) for given `systemId` path parameter  **Request Body Required Fields** - `workflow` - `name` - `comments`
         * @summary Initiate system workflow for review
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Example request body for adding system package to PAC for review
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSystemPac: function (systemId, requestBody, options) {
            return localVarFp.addSystemPac(systemId, requestBody, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns the location of a system\'s package in the Package Approval Chain (PAC) for matching `systemId` path parameter  **NOTES:** - If the indicated system has any active workflows, the response will include information   such as the workflow type and the current stage of each workflow. - If there are no active workflows, then a null data member will be returned.
         * @summary Get status of active workflows in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPac: function (systemId, options) {
            return localVarFp.getSystemPac(systemId, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.PACApiFactory = PACApiFactory;
/**
 * PACApi - object-oriented interface
 * @export
 * @class PACApi
 * @extends {BaseAPI}
 */
var PACApi = /** @class */ (function (_super) {
    __extends(PACApi, _super);
    function PACApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Adds a Package Approval Chain (PAC) for given `systemId` path parameter  **Request Body Required Fields** - `workflow` - `name` - `comments`
     * @summary Initiate system workflow for review
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {Array<object>} requestBody Example request body for adding system package to PAC for review
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PACApi
     */
    PACApi.prototype.addSystemPac = function (systemId, requestBody, options) {
        var _this = this;
        return (0, exports.PACApiFp)(this.configuration).addSystemPac(systemId, requestBody, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns the location of a system\'s package in the Package Approval Chain (PAC) for matching `systemId` path parameter  **NOTES:** - If the indicated system has any active workflows, the response will include information   such as the workflow type and the current stage of each workflow. - If there are no active workflows, then a null data member will be returned.
     * @summary Get status of active workflows in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PACApi
     */
    PACApi.prototype.getSystemPac = function (systemId, options) {
        var _this = this;
        return (0, exports.PACApiFp)(this.configuration).getSystemPac(systemId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return PACApi;
}(base_1.BaseAPI));
exports.PACApi = PACApi;
/**
 * POAMApi - axios parameter creator
 * @export
 */
var POAMApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Add a POA&M for given `systemId`  **Request Body Required Fields** <table>   <thead>     <tr><th><b>Field</b></th><th><b>Require/Condition</b></th></tr>   </thead>   <tbody>     <tr><td><code>status</code></td><td>Always (every POST)</td></tr>     <tr><td><code>vulnerabilityDescription</code></td><td>Always (every POST)</td></tr>     <tr><td><code>sourceIdentifyingVulnerability</code></td><td>Always (every POST)</td></tr>     <tr><td><code>pocOrganization</code></td><td>Always (every POST)</td></tr>     <tr><td><code>resources</code></td><td>Always (every POST)</td></tr>     <tr><td><code>identifiedInCFOAuditOrOtherReview</code></td><td>Required for VA. Optional for Army and USCG.</td></tr>     <tr><td><code>scheduledCompletionDate</code></td><td>Required for ongoing and completed POA&M items</td></tr>     <tr><td><code>pocFirstName</code></td><td>Only if Last Name, Email, or Phone Number have data</td></tr>     <tr><td><code>pocLastName</code></td><td>Only if First Name, Email, or Phone Number have data</td></tr>     <tr><td><code>pocEmail</code></td><td>Only if First Name, Last Name, or Phone Number have data</td></tr>     <tr><td><code>pocPhoneNumber</code></td><td>Only if First Name, Last Name, or Email have data</td></tr>     <tr><td><code>completionDate</code></td><td>For completed POA&M Item only</td></tr>     <tr><td><code>comments</code></td><td>For completed or Risk Accepted POA&M Items only</td></tr>   </tbody> </table>  **NOTE**: Certain eMASS instances also require the Risk Analysis fields to be populated:   - `severity`   - `relevanceOfThreat`   - `likelihood`   - `impact`   - `residualRiskLevel`   - `mitigations`  </br> **Business Rules**  The following rules apply to the Review Status `status` field value: <table>   <thead><tr><th><b>Value</b></th><th><b>Rule</b></th></tr></thead>   <tbody>     <tr><td><b>Not Approved</b></td><td>POA&M cannot be saved if Milestone Scheduled Completion Date exceeds POA&M Item Scheduled Completion Date</td></tr>     <tr><td><b>Approved</b></td><td>POA&M can only be saved if Milestone Scheduled Completion Date exceeds POA&M Item Scheduled Completion Date</td></tr>     <tr><td></td><td>Are required to have a Severity Value assigned</td></tr>     <tr><td><b>Completed</b> or <b>Ongoing</b></td><td>Cannot be saved without Milestones</td></tr>     <tr><td><b>Risk Accepted</b></td><td>POA&M Item cannot be saved with a Scheduled Completion Date <code>scheduledCompletionDate</code> or have Milestones</td></tr>     <tr><td><b>Approved</b> or <b>Completed</b> or <b>Ongoing</b></td><td>Cannot update Scheduled Completion Date</td></tr>  </tbody> </table>  **Additional Rules** - POA&M Item cannot be saved if associated Security Control or AP is inherited. - Completed POA&M Item cannot be saved if Completion Date (`completionDate`) is in the future. - POA&M Items cannot be updated if they are included in an active package. - Archived POA&M Items cannot be updated. - POA&M Items with a status of \"Not Applicable\" will be updated through test result creation. - If the Security Control or Assessment Procedure does not exist in the system, the POA&M Item maybe imported at the System Level.   **Fields Characters Limitation** - POA&M Item cannot be saved if the Point of Contact (POC) fields exceed 100 characters:   - `pocOrganization` `pocFirstName`, `pocLastName`, `pocEmail`, `pocPhoneNumber` - POA&M Item cannot be saved if Resources (`resource`) field exceeds 250 characters - POA&M Item cannot be saved if the following fields exceeds 2,000 characters:   - `mitigations`, `sourceIdentifyingVulnerability`, `comments`   - Milestones Field: `description` - POA&M Items cannot be saved if Milestone Description (`description`) exceeds 2,000 characters.
         * @summary Add one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<PoamRequiredFields & PoamConditionalFields & PoamOptionalFields & MilestonesRequiredPost>} poamRequiredFieldsPoamConditionalFieldsPoamOptionalFieldsMilestonesRequiredPost Example request body to add POA&amp;M(s) to a system (systemId)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPoamBySystemId: function (systemId_1, poamRequiredFieldsPoamConditionalFieldsPoamOptionalFieldsMilestonesRequiredPost_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([systemId_1, poamRequiredFieldsPoamConditionalFieldsPoamOptionalFieldsMilestonesRequiredPost_1], args_1, true), void 0, function (systemId, poamRequiredFieldsPoamConditionalFieldsPoamOptionalFieldsMilestonesRequiredPost, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            (0, common_1.assertParamExists)('addPoamBySystemId', 'systemId', systemId);
                            // verify required parameter 'poamRequiredFieldsPoamConditionalFieldsPoamOptionalFieldsMilestonesRequiredPost' is not null or undefined
                            (0, common_1.assertParamExists)('addPoamBySystemId', 'poamRequiredFieldsPoamConditionalFieldsPoamOptionalFieldsMilestonesRequiredPost', poamRequiredFieldsPoamConditionalFieldsPoamOptionalFieldsMilestonesRequiredPost);
                            localVarPath = "/api/systems/{systemId}/poams"
                                .replace("{".concat("systemId", "}"), encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(poamRequiredFieldsPoamConditionalFieldsPoamOptionalFieldsMilestonesRequiredPost, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Remove the POA&M matching `systemId` path parameter and `poamId` Request Body<br>
         * @summary Remove one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<PoamRequestDeleteBodyInner>} poamRequestDeleteBodyInner Delete the given POA&amp;M Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePoam: function (systemId_1, poamRequestDeleteBodyInner_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([systemId_1, poamRequestDeleteBodyInner_1], args_1, true), void 0, function (systemId, poamRequestDeleteBodyInner, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            (0, common_1.assertParamExists)('deletePoam', 'systemId', systemId);
                            // verify required parameter 'poamRequestDeleteBodyInner' is not null or undefined
                            (0, common_1.assertParamExists)('deletePoam', 'poamRequestDeleteBodyInner', poamRequestDeleteBodyInner);
                            localVarPath = "/api/systems/{systemId}/poams"
                                .replace("{".concat("systemId", "}"), encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(poamRequestDeleteBodyInner, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Returns system(s) containing POA&M items for matching parameters.
         * @summary Get one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} [scheduledCompletionDateStart] **Date Started**: Filter query by the scheduled completion start date (Unix date format).
         * @param {string} [scheduledCompletionDateEnd] **Date Ended**: Filter query by the scheduled completion start date (Unix date format).
         * @param {string} [controlAcronyms] **Control Acronym**: Filter query by given system acronym (single value or comma separated).
         * @param {string} [assessmentProcedures] **Assessment Procedure**: Filter query by given Security Control Assessment Procedure (single value or comma separated).
         * @param {string} [ccis] **CCI System**: Filter query by Control Correlation Identifiers (CCIs) (single value or comma separated).
         * @param {boolean} [systemOnly] **Systems Only**: Indicates that only system(s) information is retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPoams: function (systemId_1, scheduledCompletionDateStart_1, scheduledCompletionDateEnd_1, controlAcronyms_1, assessmentProcedures_1, ccis_1, systemOnly_1) {
            var args_1 = [];
            for (var _i = 7; _i < arguments.length; _i++) {
                args_1[_i - 7] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([systemId_1, scheduledCompletionDateStart_1, scheduledCompletionDateEnd_1, controlAcronyms_1, assessmentProcedures_1, ccis_1, systemOnly_1], args_1, true), void 0, function (systemId, scheduledCompletionDateStart, scheduledCompletionDateEnd, controlAcronyms, assessmentProcedures, ccis, systemOnly, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            (0, common_1.assertParamExists)('getSystemPoams', 'systemId', systemId);
                            localVarPath = "/api/systems/{systemId}/poams"
                                .replace("{".concat("systemId", "}"), encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (scheduledCompletionDateStart !== undefined) {
                                localVarQueryParameter['scheduledCompletionDateStart'] = scheduledCompletionDateStart;
                            }
                            if (scheduledCompletionDateEnd !== undefined) {
                                localVarQueryParameter['scheduledCompletionDateEnd'] = scheduledCompletionDateEnd;
                            }
                            if (controlAcronyms !== undefined) {
                                localVarQueryParameter['controlAcronyms'] = controlAcronyms;
                            }
                            if (assessmentProcedures !== undefined) {
                                localVarQueryParameter['assessmentProcedures'] = assessmentProcedures;
                            }
                            if (ccis !== undefined) {
                                localVarQueryParameter['ccis'] = ccis;
                            }
                            if (systemOnly !== undefined) {
                                localVarQueryParameter['systemOnly'] = systemOnly;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Returns system(s) containing POA&M items for matching parameters.
         * @summary Get POA&M item by ID in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPoamsByPoamId: function (systemId_1, poamId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([systemId_1, poamId_1], args_1, true), void 0, function (systemId, poamId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            (0, common_1.assertParamExists)('getSystemPoamsByPoamId', 'systemId', systemId);
                            // verify required parameter 'poamId' is not null or undefined
                            (0, common_1.assertParamExists)('getSystemPoamsByPoamId', 'poamId', poamId);
                            localVarPath = "/api/systems/{systemId}/poams/{poamId}"
                                .replace("{".concat("systemId", "}"), encodeURIComponent(String(systemId)))
                                .replace("{".concat("poamId", "}"), encodeURIComponent(String(poamId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Update a POA&M for given `systemId`<br>  **Request Body Required Fields** <table>   <thead>     <tr><th><b>Field</b></th><th><b>Require/Condition</b></th></tr>   </thead>   <tbody>     <tr><td><code>poamId</code></td><td>Always (every PUT)</td></tr>     <tr><td><code>displayPoamId</code></td><td>Always (every PUT)</td></tr>     <tr><td><code>status</code></td><td>Always (every PUT)</td></tr>     <tr><td><code>vulnerabilityDescription</code></td><td>Always (every PUT)</td></tr>     <tr><td><code>sourceIdentifyingVulnerability</code></td><td>Always (every PUT)</td></tr>     <tr><td><code>pocOrganization</code></td><td>Always (every PUT)</td></tr>     <tr><td><code>resources</code></td><td>Always (every PUT)</td></tr>     <tr><td><code>identifiedInCFOAuditOrOtherReview</code></td><td>Required for VA. Optional for Army and USCG.</td></tr>     <tr><td><code>scheduledCompletionDate</code></td><td>Required for ongoing and completed POA&M items</td></tr>     <tr><td><code>pocFirstName</code></td><td>Only if Last Name, Email, or Phone Number have data</td></tr>     <tr><td><code>pocLastName</code></td><td>Only if First Name, Email, or Phone Number have data</td></tr>     <tr><td><code>pocEmail</code></td><td>Only if First Name, Last Name, or Phone Number have data</td></tr>     <tr><td><code>pocPhoneNumber</code></td><td>Only if First Name, Last Name, or Email have data</td></tr>     <tr><td><code>completionDate</code></td><td>For completed POA&M Item only</td></tr>     <tr><td><code>comments</code></td><td>For completed or Risk Accepted POA&M Items only</td></tr>   </tbody> </table>  **NOTES**: - Certain eMASS instances also require the Risk Analysis fields to be populated:   - `severity`   - `relevanceOfThreat`   - `likelihood`   - `impact`   - `residualRiskLevel`   - `mitigations` - To prevent uploading duplicate/undesired milestones through the POA&M PUT include an `isActive` field for the milestone and set it to equal to false `(isActive=false)`. </br>  **Business Rules:** See business rules for the POST endpoint
         * @summary Update one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<PoamIds & PoamRequiredFields & PoamConditionalFields & PoamOptionalFields & MilestonesRequiredPut>} poamIdsPoamRequiredFieldsPoamConditionalFieldsPoamOptionalFieldsMilestonesRequiredPut Example request body for updating a POA&amp;M for a system (systemId)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePoamBySystemId: function (systemId_1, poamIdsPoamRequiredFieldsPoamConditionalFieldsPoamOptionalFieldsMilestonesRequiredPut_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([systemId_1, poamIdsPoamRequiredFieldsPoamConditionalFieldsPoamOptionalFieldsMilestonesRequiredPut_1], args_1, true), void 0, function (systemId, poamIdsPoamRequiredFieldsPoamConditionalFieldsPoamOptionalFieldsMilestonesRequiredPut, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            (0, common_1.assertParamExists)('updatePoamBySystemId', 'systemId', systemId);
                            // verify required parameter 'poamIdsPoamRequiredFieldsPoamConditionalFieldsPoamOptionalFieldsMilestonesRequiredPut' is not null or undefined
                            (0, common_1.assertParamExists)('updatePoamBySystemId', 'poamIdsPoamRequiredFieldsPoamConditionalFieldsPoamOptionalFieldsMilestonesRequiredPut', poamIdsPoamRequiredFieldsPoamConditionalFieldsPoamOptionalFieldsMilestonesRequiredPut);
                            localVarPath = "/api/systems/{systemId}/poams"
                                .replace("{".concat("systemId", "}"), encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(poamIdsPoamRequiredFieldsPoamConditionalFieldsPoamOptionalFieldsMilestonesRequiredPut, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.POAMApiAxiosParamCreator = POAMApiAxiosParamCreator;
/**
 * POAMApi - functional programming interface
 * @export
 */
var POAMApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.POAMApiAxiosParamCreator)(configuration);
    return {
        /**
         * Add a POA&M for given `systemId`  **Request Body Required Fields** <table>   <thead>     <tr><th><b>Field</b></th><th><b>Require/Condition</b></th></tr>   </thead>   <tbody>     <tr><td><code>status</code></td><td>Always (every POST)</td></tr>     <tr><td><code>vulnerabilityDescription</code></td><td>Always (every POST)</td></tr>     <tr><td><code>sourceIdentifyingVulnerability</code></td><td>Always (every POST)</td></tr>     <tr><td><code>pocOrganization</code></td><td>Always (every POST)</td></tr>     <tr><td><code>resources</code></td><td>Always (every POST)</td></tr>     <tr><td><code>identifiedInCFOAuditOrOtherReview</code></td><td>Required for VA. Optional for Army and USCG.</td></tr>     <tr><td><code>scheduledCompletionDate</code></td><td>Required for ongoing and completed POA&M items</td></tr>     <tr><td><code>pocFirstName</code></td><td>Only if Last Name, Email, or Phone Number have data</td></tr>     <tr><td><code>pocLastName</code></td><td>Only if First Name, Email, or Phone Number have data</td></tr>     <tr><td><code>pocEmail</code></td><td>Only if First Name, Last Name, or Phone Number have data</td></tr>     <tr><td><code>pocPhoneNumber</code></td><td>Only if First Name, Last Name, or Email have data</td></tr>     <tr><td><code>completionDate</code></td><td>For completed POA&M Item only</td></tr>     <tr><td><code>comments</code></td><td>For completed or Risk Accepted POA&M Items only</td></tr>   </tbody> </table>  **NOTE**: Certain eMASS instances also require the Risk Analysis fields to be populated:   - `severity`   - `relevanceOfThreat`   - `likelihood`   - `impact`   - `residualRiskLevel`   - `mitigations`  </br> **Business Rules**  The following rules apply to the Review Status `status` field value: <table>   <thead><tr><th><b>Value</b></th><th><b>Rule</b></th></tr></thead>   <tbody>     <tr><td><b>Not Approved</b></td><td>POA&M cannot be saved if Milestone Scheduled Completion Date exceeds POA&M Item Scheduled Completion Date</td></tr>     <tr><td><b>Approved</b></td><td>POA&M can only be saved if Milestone Scheduled Completion Date exceeds POA&M Item Scheduled Completion Date</td></tr>     <tr><td></td><td>Are required to have a Severity Value assigned</td></tr>     <tr><td><b>Completed</b> or <b>Ongoing</b></td><td>Cannot be saved without Milestones</td></tr>     <tr><td><b>Risk Accepted</b></td><td>POA&M Item cannot be saved with a Scheduled Completion Date <code>scheduledCompletionDate</code> or have Milestones</td></tr>     <tr><td><b>Approved</b> or <b>Completed</b> or <b>Ongoing</b></td><td>Cannot update Scheduled Completion Date</td></tr>  </tbody> </table>  **Additional Rules** - POA&M Item cannot be saved if associated Security Control or AP is inherited. - Completed POA&M Item cannot be saved if Completion Date (`completionDate`) is in the future. - POA&M Items cannot be updated if they are included in an active package. - Archived POA&M Items cannot be updated. - POA&M Items with a status of \"Not Applicable\" will be updated through test result creation. - If the Security Control or Assessment Procedure does not exist in the system, the POA&M Item maybe imported at the System Level.   **Fields Characters Limitation** - POA&M Item cannot be saved if the Point of Contact (POC) fields exceed 100 characters:   - `pocOrganization` `pocFirstName`, `pocLastName`, `pocEmail`, `pocPhoneNumber` - POA&M Item cannot be saved if Resources (`resource`) field exceeds 250 characters - POA&M Item cannot be saved if the following fields exceeds 2,000 characters:   - `mitigations`, `sourceIdentifyingVulnerability`, `comments`   - Milestones Field: `description` - POA&M Items cannot be saved if Milestone Description (`description`) exceeds 2,000 characters.
         * @summary Add one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<PoamRequiredFields & PoamConditionalFields & PoamOptionalFields & MilestonesRequiredPost>} poamRequiredFieldsPoamConditionalFieldsPoamOptionalFieldsMilestonesRequiredPost Example request body to add POA&amp;M(s) to a system (systemId)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPoamBySystemId: function (systemId, poamRequiredFieldsPoamConditionalFieldsPoamOptionalFieldsMilestonesRequiredPost, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addPoamBySystemId(systemId, poamRequiredFieldsPoamConditionalFieldsPoamOptionalFieldsMilestonesRequiredPost, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['POAMApi.addPoamBySystemId']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Remove the POA&M matching `systemId` path parameter and `poamId` Request Body<br>
         * @summary Remove one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<PoamRequestDeleteBodyInner>} poamRequestDeleteBodyInner Delete the given POA&amp;M Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePoam: function (systemId, poamRequestDeleteBodyInner, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deletePoam(systemId, poamRequestDeleteBodyInner, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['POAMApi.deletePoam']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Returns system(s) containing POA&M items for matching parameters.
         * @summary Get one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} [scheduledCompletionDateStart] **Date Started**: Filter query by the scheduled completion start date (Unix date format).
         * @param {string} [scheduledCompletionDateEnd] **Date Ended**: Filter query by the scheduled completion start date (Unix date format).
         * @param {string} [controlAcronyms] **Control Acronym**: Filter query by given system acronym (single value or comma separated).
         * @param {string} [assessmentProcedures] **Assessment Procedure**: Filter query by given Security Control Assessment Procedure (single value or comma separated).
         * @param {string} [ccis] **CCI System**: Filter query by Control Correlation Identifiers (CCIs) (single value or comma separated).
         * @param {boolean} [systemOnly] **Systems Only**: Indicates that only system(s) information is retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPoams: function (systemId, scheduledCompletionDateStart, scheduledCompletionDateEnd, controlAcronyms, assessmentProcedures, ccis, systemOnly, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemPoams(systemId, scheduledCompletionDateStart, scheduledCompletionDateEnd, controlAcronyms, assessmentProcedures, ccis, systemOnly, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['POAMApi.getSystemPoams']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Returns system(s) containing POA&M items for matching parameters.
         * @summary Get POA&M item by ID in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPoamsByPoamId: function (systemId, poamId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemPoamsByPoamId(systemId, poamId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['POAMApi.getSystemPoamsByPoamId']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Update a POA&M for given `systemId`<br>  **Request Body Required Fields** <table>   <thead>     <tr><th><b>Field</b></th><th><b>Require/Condition</b></th></tr>   </thead>   <tbody>     <tr><td><code>poamId</code></td><td>Always (every PUT)</td></tr>     <tr><td><code>displayPoamId</code></td><td>Always (every PUT)</td></tr>     <tr><td><code>status</code></td><td>Always (every PUT)</td></tr>     <tr><td><code>vulnerabilityDescription</code></td><td>Always (every PUT)</td></tr>     <tr><td><code>sourceIdentifyingVulnerability</code></td><td>Always (every PUT)</td></tr>     <tr><td><code>pocOrganization</code></td><td>Always (every PUT)</td></tr>     <tr><td><code>resources</code></td><td>Always (every PUT)</td></tr>     <tr><td><code>identifiedInCFOAuditOrOtherReview</code></td><td>Required for VA. Optional for Army and USCG.</td></tr>     <tr><td><code>scheduledCompletionDate</code></td><td>Required for ongoing and completed POA&M items</td></tr>     <tr><td><code>pocFirstName</code></td><td>Only if Last Name, Email, or Phone Number have data</td></tr>     <tr><td><code>pocLastName</code></td><td>Only if First Name, Email, or Phone Number have data</td></tr>     <tr><td><code>pocEmail</code></td><td>Only if First Name, Last Name, or Phone Number have data</td></tr>     <tr><td><code>pocPhoneNumber</code></td><td>Only if First Name, Last Name, or Email have data</td></tr>     <tr><td><code>completionDate</code></td><td>For completed POA&M Item only</td></tr>     <tr><td><code>comments</code></td><td>For completed or Risk Accepted POA&M Items only</td></tr>   </tbody> </table>  **NOTES**: - Certain eMASS instances also require the Risk Analysis fields to be populated:   - `severity`   - `relevanceOfThreat`   - `likelihood`   - `impact`   - `residualRiskLevel`   - `mitigations` - To prevent uploading duplicate/undesired milestones through the POA&M PUT include an `isActive` field for the milestone and set it to equal to false `(isActive=false)`. </br>  **Business Rules:** See business rules for the POST endpoint
         * @summary Update one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<PoamIds & PoamRequiredFields & PoamConditionalFields & PoamOptionalFields & MilestonesRequiredPut>} poamIdsPoamRequiredFieldsPoamConditionalFieldsPoamOptionalFieldsMilestonesRequiredPut Example request body for updating a POA&amp;M for a system (systemId)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePoamBySystemId: function (systemId, poamIdsPoamRequiredFieldsPoamConditionalFieldsPoamOptionalFieldsMilestonesRequiredPut, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updatePoamBySystemId(systemId, poamIdsPoamRequiredFieldsPoamConditionalFieldsPoamOptionalFieldsMilestonesRequiredPut, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['POAMApi.updatePoamBySystemId']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.POAMApiFp = POAMApiFp;
/**
 * POAMApi - factory interface
 * @export
 */
var POAMApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.POAMApiFp)(configuration);
    return {
        /**
         * Add a POA&M for given `systemId`  **Request Body Required Fields** <table>   <thead>     <tr><th><b>Field</b></th><th><b>Require/Condition</b></th></tr>   </thead>   <tbody>     <tr><td><code>status</code></td><td>Always (every POST)</td></tr>     <tr><td><code>vulnerabilityDescription</code></td><td>Always (every POST)</td></tr>     <tr><td><code>sourceIdentifyingVulnerability</code></td><td>Always (every POST)</td></tr>     <tr><td><code>pocOrganization</code></td><td>Always (every POST)</td></tr>     <tr><td><code>resources</code></td><td>Always (every POST)</td></tr>     <tr><td><code>identifiedInCFOAuditOrOtherReview</code></td><td>Required for VA. Optional for Army and USCG.</td></tr>     <tr><td><code>scheduledCompletionDate</code></td><td>Required for ongoing and completed POA&M items</td></tr>     <tr><td><code>pocFirstName</code></td><td>Only if Last Name, Email, or Phone Number have data</td></tr>     <tr><td><code>pocLastName</code></td><td>Only if First Name, Email, or Phone Number have data</td></tr>     <tr><td><code>pocEmail</code></td><td>Only if First Name, Last Name, or Phone Number have data</td></tr>     <tr><td><code>pocPhoneNumber</code></td><td>Only if First Name, Last Name, or Email have data</td></tr>     <tr><td><code>completionDate</code></td><td>For completed POA&M Item only</td></tr>     <tr><td><code>comments</code></td><td>For completed or Risk Accepted POA&M Items only</td></tr>   </tbody> </table>  **NOTE**: Certain eMASS instances also require the Risk Analysis fields to be populated:   - `severity`   - `relevanceOfThreat`   - `likelihood`   - `impact`   - `residualRiskLevel`   - `mitigations`  </br> **Business Rules**  The following rules apply to the Review Status `status` field value: <table>   <thead><tr><th><b>Value</b></th><th><b>Rule</b></th></tr></thead>   <tbody>     <tr><td><b>Not Approved</b></td><td>POA&M cannot be saved if Milestone Scheduled Completion Date exceeds POA&M Item Scheduled Completion Date</td></tr>     <tr><td><b>Approved</b></td><td>POA&M can only be saved if Milestone Scheduled Completion Date exceeds POA&M Item Scheduled Completion Date</td></tr>     <tr><td></td><td>Are required to have a Severity Value assigned</td></tr>     <tr><td><b>Completed</b> or <b>Ongoing</b></td><td>Cannot be saved without Milestones</td></tr>     <tr><td><b>Risk Accepted</b></td><td>POA&M Item cannot be saved with a Scheduled Completion Date <code>scheduledCompletionDate</code> or have Milestones</td></tr>     <tr><td><b>Approved</b> or <b>Completed</b> or <b>Ongoing</b></td><td>Cannot update Scheduled Completion Date</td></tr>  </tbody> </table>  **Additional Rules** - POA&M Item cannot be saved if associated Security Control or AP is inherited. - Completed POA&M Item cannot be saved if Completion Date (`completionDate`) is in the future. - POA&M Items cannot be updated if they are included in an active package. - Archived POA&M Items cannot be updated. - POA&M Items with a status of \"Not Applicable\" will be updated through test result creation. - If the Security Control or Assessment Procedure does not exist in the system, the POA&M Item maybe imported at the System Level.   **Fields Characters Limitation** - POA&M Item cannot be saved if the Point of Contact (POC) fields exceed 100 characters:   - `pocOrganization` `pocFirstName`, `pocLastName`, `pocEmail`, `pocPhoneNumber` - POA&M Item cannot be saved if Resources (`resource`) field exceeds 250 characters - POA&M Item cannot be saved if the following fields exceeds 2,000 characters:   - `mitigations`, `sourceIdentifyingVulnerability`, `comments`   - Milestones Field: `description` - POA&M Items cannot be saved if Milestone Description (`description`) exceeds 2,000 characters.
         * @summary Add one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<PoamRequiredFields & PoamConditionalFields & PoamOptionalFields & MilestonesRequiredPost>} poamRequiredFieldsPoamConditionalFieldsPoamOptionalFieldsMilestonesRequiredPost Example request body to add POA&amp;M(s) to a system (systemId)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPoamBySystemId: function (systemId, poamRequiredFieldsPoamConditionalFieldsPoamOptionalFieldsMilestonesRequiredPost, options) {
            return localVarFp.addPoamBySystemId(systemId, poamRequiredFieldsPoamConditionalFieldsPoamOptionalFieldsMilestonesRequiredPost, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Remove the POA&M matching `systemId` path parameter and `poamId` Request Body<br>
         * @summary Remove one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<PoamRequestDeleteBodyInner>} poamRequestDeleteBodyInner Delete the given POA&amp;M Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePoam: function (systemId, poamRequestDeleteBodyInner, options) {
            return localVarFp.deletePoam(systemId, poamRequestDeleteBodyInner, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns system(s) containing POA&M items for matching parameters.
         * @summary Get one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} [scheduledCompletionDateStart] **Date Started**: Filter query by the scheduled completion start date (Unix date format).
         * @param {string} [scheduledCompletionDateEnd] **Date Ended**: Filter query by the scheduled completion start date (Unix date format).
         * @param {string} [controlAcronyms] **Control Acronym**: Filter query by given system acronym (single value or comma separated).
         * @param {string} [assessmentProcedures] **Assessment Procedure**: Filter query by given Security Control Assessment Procedure (single value or comma separated).
         * @param {string} [ccis] **CCI System**: Filter query by Control Correlation Identifiers (CCIs) (single value or comma separated).
         * @param {boolean} [systemOnly] **Systems Only**: Indicates that only system(s) information is retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPoams: function (systemId, scheduledCompletionDateStart, scheduledCompletionDateEnd, controlAcronyms, assessmentProcedures, ccis, systemOnly, options) {
            return localVarFp.getSystemPoams(systemId, scheduledCompletionDateStart, scheduledCompletionDateEnd, controlAcronyms, assessmentProcedures, ccis, systemOnly, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns system(s) containing POA&M items for matching parameters.
         * @summary Get POA&M item by ID in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPoamsByPoamId: function (systemId, poamId, options) {
            return localVarFp.getSystemPoamsByPoamId(systemId, poamId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update a POA&M for given `systemId`<br>  **Request Body Required Fields** <table>   <thead>     <tr><th><b>Field</b></th><th><b>Require/Condition</b></th></tr>   </thead>   <tbody>     <tr><td><code>poamId</code></td><td>Always (every PUT)</td></tr>     <tr><td><code>displayPoamId</code></td><td>Always (every PUT)</td></tr>     <tr><td><code>status</code></td><td>Always (every PUT)</td></tr>     <tr><td><code>vulnerabilityDescription</code></td><td>Always (every PUT)</td></tr>     <tr><td><code>sourceIdentifyingVulnerability</code></td><td>Always (every PUT)</td></tr>     <tr><td><code>pocOrganization</code></td><td>Always (every PUT)</td></tr>     <tr><td><code>resources</code></td><td>Always (every PUT)</td></tr>     <tr><td><code>identifiedInCFOAuditOrOtherReview</code></td><td>Required for VA. Optional for Army and USCG.</td></tr>     <tr><td><code>scheduledCompletionDate</code></td><td>Required for ongoing and completed POA&M items</td></tr>     <tr><td><code>pocFirstName</code></td><td>Only if Last Name, Email, or Phone Number have data</td></tr>     <tr><td><code>pocLastName</code></td><td>Only if First Name, Email, or Phone Number have data</td></tr>     <tr><td><code>pocEmail</code></td><td>Only if First Name, Last Name, or Phone Number have data</td></tr>     <tr><td><code>pocPhoneNumber</code></td><td>Only if First Name, Last Name, or Email have data</td></tr>     <tr><td><code>completionDate</code></td><td>For completed POA&M Item only</td></tr>     <tr><td><code>comments</code></td><td>For completed or Risk Accepted POA&M Items only</td></tr>   </tbody> </table>  **NOTES**: - Certain eMASS instances also require the Risk Analysis fields to be populated:   - `severity`   - `relevanceOfThreat`   - `likelihood`   - `impact`   - `residualRiskLevel`   - `mitigations` - To prevent uploading duplicate/undesired milestones through the POA&M PUT include an `isActive` field for the milestone and set it to equal to false `(isActive=false)`. </br>  **Business Rules:** See business rules for the POST endpoint
         * @summary Update one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<PoamIds & PoamRequiredFields & PoamConditionalFields & PoamOptionalFields & MilestonesRequiredPut>} poamIdsPoamRequiredFieldsPoamConditionalFieldsPoamOptionalFieldsMilestonesRequiredPut Example request body for updating a POA&amp;M for a system (systemId)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePoamBySystemId: function (systemId, poamIdsPoamRequiredFieldsPoamConditionalFieldsPoamOptionalFieldsMilestonesRequiredPut, options) {
            return localVarFp.updatePoamBySystemId(systemId, poamIdsPoamRequiredFieldsPoamConditionalFieldsPoamOptionalFieldsMilestonesRequiredPut, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.POAMApiFactory = POAMApiFactory;
/**
 * POAMApi - object-oriented interface
 * @export
 * @class POAMApi
 * @extends {BaseAPI}
 */
var POAMApi = /** @class */ (function (_super) {
    __extends(POAMApi, _super);
    function POAMApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Add a POA&M for given `systemId`  **Request Body Required Fields** <table>   <thead>     <tr><th><b>Field</b></th><th><b>Require/Condition</b></th></tr>   </thead>   <tbody>     <tr><td><code>status</code></td><td>Always (every POST)</td></tr>     <tr><td><code>vulnerabilityDescription</code></td><td>Always (every POST)</td></tr>     <tr><td><code>sourceIdentifyingVulnerability</code></td><td>Always (every POST)</td></tr>     <tr><td><code>pocOrganization</code></td><td>Always (every POST)</td></tr>     <tr><td><code>resources</code></td><td>Always (every POST)</td></tr>     <tr><td><code>identifiedInCFOAuditOrOtherReview</code></td><td>Required for VA. Optional for Army and USCG.</td></tr>     <tr><td><code>scheduledCompletionDate</code></td><td>Required for ongoing and completed POA&M items</td></tr>     <tr><td><code>pocFirstName</code></td><td>Only if Last Name, Email, or Phone Number have data</td></tr>     <tr><td><code>pocLastName</code></td><td>Only if First Name, Email, or Phone Number have data</td></tr>     <tr><td><code>pocEmail</code></td><td>Only if First Name, Last Name, or Phone Number have data</td></tr>     <tr><td><code>pocPhoneNumber</code></td><td>Only if First Name, Last Name, or Email have data</td></tr>     <tr><td><code>completionDate</code></td><td>For completed POA&M Item only</td></tr>     <tr><td><code>comments</code></td><td>For completed or Risk Accepted POA&M Items only</td></tr>   </tbody> </table>  **NOTE**: Certain eMASS instances also require the Risk Analysis fields to be populated:   - `severity`   - `relevanceOfThreat`   - `likelihood`   - `impact`   - `residualRiskLevel`   - `mitigations`  </br> **Business Rules**  The following rules apply to the Review Status `status` field value: <table>   <thead><tr><th><b>Value</b></th><th><b>Rule</b></th></tr></thead>   <tbody>     <tr><td><b>Not Approved</b></td><td>POA&M cannot be saved if Milestone Scheduled Completion Date exceeds POA&M Item Scheduled Completion Date</td></tr>     <tr><td><b>Approved</b></td><td>POA&M can only be saved if Milestone Scheduled Completion Date exceeds POA&M Item Scheduled Completion Date</td></tr>     <tr><td></td><td>Are required to have a Severity Value assigned</td></tr>     <tr><td><b>Completed</b> or <b>Ongoing</b></td><td>Cannot be saved without Milestones</td></tr>     <tr><td><b>Risk Accepted</b></td><td>POA&M Item cannot be saved with a Scheduled Completion Date <code>scheduledCompletionDate</code> or have Milestones</td></tr>     <tr><td><b>Approved</b> or <b>Completed</b> or <b>Ongoing</b></td><td>Cannot update Scheduled Completion Date</td></tr>  </tbody> </table>  **Additional Rules** - POA&M Item cannot be saved if associated Security Control or AP is inherited. - Completed POA&M Item cannot be saved if Completion Date (`completionDate`) is in the future. - POA&M Items cannot be updated if they are included in an active package. - Archived POA&M Items cannot be updated. - POA&M Items with a status of \"Not Applicable\" will be updated through test result creation. - If the Security Control or Assessment Procedure does not exist in the system, the POA&M Item maybe imported at the System Level.   **Fields Characters Limitation** - POA&M Item cannot be saved if the Point of Contact (POC) fields exceed 100 characters:   - `pocOrganization` `pocFirstName`, `pocLastName`, `pocEmail`, `pocPhoneNumber` - POA&M Item cannot be saved if Resources (`resource`) field exceeds 250 characters - POA&M Item cannot be saved if the following fields exceeds 2,000 characters:   - `mitigations`, `sourceIdentifyingVulnerability`, `comments`   - Milestones Field: `description` - POA&M Items cannot be saved if Milestone Description (`description`) exceeds 2,000 characters.
     * @summary Add one or many POA&M items in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {Array<PoamRequiredFields & PoamConditionalFields & PoamOptionalFields & MilestonesRequiredPost>} poamRequiredFieldsPoamConditionalFieldsPoamOptionalFieldsMilestonesRequiredPost Example request body to add POA&amp;M(s) to a system (systemId)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POAMApi
     */
    POAMApi.prototype.addPoamBySystemId = function (systemId, poamRequiredFieldsPoamConditionalFieldsPoamOptionalFieldsMilestonesRequiredPost, options) {
        var _this = this;
        return (0, exports.POAMApiFp)(this.configuration).addPoamBySystemId(systemId, poamRequiredFieldsPoamConditionalFieldsPoamOptionalFieldsMilestonesRequiredPost, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Remove the POA&M matching `systemId` path parameter and `poamId` Request Body<br>
     * @summary Remove one or many POA&M items in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {Array<PoamRequestDeleteBodyInner>} poamRequestDeleteBodyInner Delete the given POA&amp;M Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POAMApi
     */
    POAMApi.prototype.deletePoam = function (systemId, poamRequestDeleteBodyInner, options) {
        var _this = this;
        return (0, exports.POAMApiFp)(this.configuration).deletePoam(systemId, poamRequestDeleteBodyInner, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns system(s) containing POA&M items for matching parameters.
     * @summary Get one or many POA&M items in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {string} [scheduledCompletionDateStart] **Date Started**: Filter query by the scheduled completion start date (Unix date format).
     * @param {string} [scheduledCompletionDateEnd] **Date Ended**: Filter query by the scheduled completion start date (Unix date format).
     * @param {string} [controlAcronyms] **Control Acronym**: Filter query by given system acronym (single value or comma separated).
     * @param {string} [assessmentProcedures] **Assessment Procedure**: Filter query by given Security Control Assessment Procedure (single value or comma separated).
     * @param {string} [ccis] **CCI System**: Filter query by Control Correlation Identifiers (CCIs) (single value or comma separated).
     * @param {boolean} [systemOnly] **Systems Only**: Indicates that only system(s) information is retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POAMApi
     */
    POAMApi.prototype.getSystemPoams = function (systemId, scheduledCompletionDateStart, scheduledCompletionDateEnd, controlAcronyms, assessmentProcedures, ccis, systemOnly, options) {
        var _this = this;
        return (0, exports.POAMApiFp)(this.configuration).getSystemPoams(systemId, scheduledCompletionDateStart, scheduledCompletionDateEnd, controlAcronyms, assessmentProcedures, ccis, systemOnly, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns system(s) containing POA&M items for matching parameters.
     * @summary Get POA&M item by ID in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POAMApi
     */
    POAMApi.prototype.getSystemPoamsByPoamId = function (systemId, poamId, options) {
        var _this = this;
        return (0, exports.POAMApiFp)(this.configuration).getSystemPoamsByPoamId(systemId, poamId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update a POA&M for given `systemId`<br>  **Request Body Required Fields** <table>   <thead>     <tr><th><b>Field</b></th><th><b>Require/Condition</b></th></tr>   </thead>   <tbody>     <tr><td><code>poamId</code></td><td>Always (every PUT)</td></tr>     <tr><td><code>displayPoamId</code></td><td>Always (every PUT)</td></tr>     <tr><td><code>status</code></td><td>Always (every PUT)</td></tr>     <tr><td><code>vulnerabilityDescription</code></td><td>Always (every PUT)</td></tr>     <tr><td><code>sourceIdentifyingVulnerability</code></td><td>Always (every PUT)</td></tr>     <tr><td><code>pocOrganization</code></td><td>Always (every PUT)</td></tr>     <tr><td><code>resources</code></td><td>Always (every PUT)</td></tr>     <tr><td><code>identifiedInCFOAuditOrOtherReview</code></td><td>Required for VA. Optional for Army and USCG.</td></tr>     <tr><td><code>scheduledCompletionDate</code></td><td>Required for ongoing and completed POA&M items</td></tr>     <tr><td><code>pocFirstName</code></td><td>Only if Last Name, Email, or Phone Number have data</td></tr>     <tr><td><code>pocLastName</code></td><td>Only if First Name, Email, or Phone Number have data</td></tr>     <tr><td><code>pocEmail</code></td><td>Only if First Name, Last Name, or Phone Number have data</td></tr>     <tr><td><code>pocPhoneNumber</code></td><td>Only if First Name, Last Name, or Email have data</td></tr>     <tr><td><code>completionDate</code></td><td>For completed POA&M Item only</td></tr>     <tr><td><code>comments</code></td><td>For completed or Risk Accepted POA&M Items only</td></tr>   </tbody> </table>  **NOTES**: - Certain eMASS instances also require the Risk Analysis fields to be populated:   - `severity`   - `relevanceOfThreat`   - `likelihood`   - `impact`   - `residualRiskLevel`   - `mitigations` - To prevent uploading duplicate/undesired milestones through the POA&M PUT include an `isActive` field for the milestone and set it to equal to false `(isActive=false)`. </br>  **Business Rules:** See business rules for the POST endpoint
     * @summary Update one or many POA&M items in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {Array<PoamIds & PoamRequiredFields & PoamConditionalFields & PoamOptionalFields & MilestonesRequiredPut>} poamIdsPoamRequiredFieldsPoamConditionalFieldsPoamOptionalFieldsMilestonesRequiredPut Example request body for updating a POA&amp;M for a system (systemId)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POAMApi
     */
    POAMApi.prototype.updatePoamBySystemId = function (systemId, poamIdsPoamRequiredFieldsPoamConditionalFieldsPoamOptionalFieldsMilestonesRequiredPut, options) {
        var _this = this;
        return (0, exports.POAMApiFp)(this.configuration).updatePoamBySystemId(systemId, poamIdsPoamRequiredFieldsPoamConditionalFieldsPoamOptionalFieldsMilestonesRequiredPut, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return POAMApi;
}(base_1.BaseAPI));
exports.POAMApi = POAMApi;
/**
 * RegistrationApi - axios parameter creator
 * @export
 */
var RegistrationApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Returns the API Key (api-key) that must be provided in the request header for all endpoint calls.
         * @summary Register user certificate and obtain an API key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUser: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/api-key";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.RegistrationApiAxiosParamCreator = RegistrationApiAxiosParamCreator;
/**
 * RegistrationApi - functional programming interface
 * @export
 */
var RegistrationApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.RegistrationApiAxiosParamCreator)(configuration);
    return {
        /**
         * Returns the API Key (api-key) that must be provided in the request header for all endpoint calls.
         * @summary Register user certificate and obtain an API key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUser: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.registerUser(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['RegistrationApi.registerUser']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.RegistrationApiFp = RegistrationApiFp;
/**
 * RegistrationApi - factory interface
 * @export
 */
var RegistrationApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.RegistrationApiFp)(configuration);
    return {
        /**
         * Returns the API Key (api-key) that must be provided in the request header for all endpoint calls.
         * @summary Register user certificate and obtain an API key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUser: function (options) {
            return localVarFp.registerUser(options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.RegistrationApiFactory = RegistrationApiFactory;
/**
 * RegistrationApi - object-oriented interface
 * @export
 * @class RegistrationApi
 * @extends {BaseAPI}
 */
var RegistrationApi = /** @class */ (function (_super) {
    __extends(RegistrationApi, _super);
    function RegistrationApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Returns the API Key (api-key) that must be provided in the request header for all endpoint calls.
     * @summary Register user certificate and obtain an API key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistrationApi
     */
    RegistrationApi.prototype.registerUser = function (options) {
        var _this = this;
        return (0, exports.RegistrationApiFp)(this.configuration).registerUser(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return RegistrationApi;
}(base_1.BaseAPI));
exports.RegistrationApi = RegistrationApi;
/**
 * SoftwareBaselineApi - axios parameter creator
 * @export
 */
var SoftwareBaselineApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Adds assets to the Software Baseline for given `systemId`  **Request Body Required Fields** - `softwareVendor` - `softwareName` - `version`
         * @summary Add one or many software assets in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<SwBaselineRequiredFields & SwBaselineConditionalFields & SwBaselineOptionalFields>} swBaselineRequiredFieldsSwBaselineConditionalFieldsSwBaselineOptionalFields Example request body for adding software baseline assets to an existing System (systemId)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSwBaselineAssets: function (systemId_1, swBaselineRequiredFieldsSwBaselineConditionalFieldsSwBaselineOptionalFields_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([systemId_1, swBaselineRequiredFieldsSwBaselineConditionalFieldsSwBaselineOptionalFields_1], args_1, true), void 0, function (systemId, swBaselineRequiredFieldsSwBaselineConditionalFieldsSwBaselineOptionalFields, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            (0, common_1.assertParamExists)('addSwBaselineAssets', 'systemId', systemId);
                            // verify required parameter 'swBaselineRequiredFieldsSwBaselineConditionalFieldsSwBaselineOptionalFields' is not null or undefined
                            (0, common_1.assertParamExists)('addSwBaselineAssets', 'swBaselineRequiredFieldsSwBaselineConditionalFieldsSwBaselineOptionalFields', swBaselineRequiredFieldsSwBaselineConditionalFieldsSwBaselineOptionalFields);
                            localVarPath = "/api/systems/{systemId}/sw-baseline"
                                .replace("{".concat("systemId", "}"), encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(swBaselineRequiredFieldsSwBaselineConditionalFieldsSwBaselineOptionalFields, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Remove (delete) one or multiple assets from a system Software Baseline
         * @summary Delete one or many software assets in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<SwBaselineRequestDeleteBodyInner>} swBaselineRequestDeleteBodyInner Example request body for deleting one or many Software Baseline assets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSwBaselineAssets: function (systemId_1, swBaselineRequestDeleteBodyInner_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([systemId_1, swBaselineRequestDeleteBodyInner_1], args_1, true), void 0, function (systemId, swBaselineRequestDeleteBodyInner, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            (0, common_1.assertParamExists)('deleteSwBaselineAssets', 'systemId', systemId);
                            // verify required parameter 'swBaselineRequestDeleteBodyInner' is not null or undefined
                            (0, common_1.assertParamExists)('deleteSwBaselineAssets', 'swBaselineRequestDeleteBodyInner', swBaselineRequestDeleteBodyInner);
                            localVarPath = "/api/systems/{systemId}/sw-baseline"
                                .replace("{".concat("systemId", "}"), encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(swBaselineRequestDeleteBodyInner, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Returns the software baseline for a system matching the `systemId` path parameter
         * @summary Get software baseline for a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSwBaseline: function (systemId_1, pageIndex_1, pageSize_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([systemId_1, pageIndex_1, pageSize_1], args_1, true), void 0, function (systemId, pageIndex, pageSize, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            (0, common_1.assertParamExists)('getSystemSwBaseline', 'systemId', systemId);
                            localVarPath = "/api/systems/{systemId}/sw-baseline"
                                .replace("{".concat("systemId", "}"), encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Updates assets in the Software Baseline for given `systemId`  **Request Body Required Fields** - `softwareId` - `softwareVendor` - `softwareName` - `version`
         * @summary Update one or many software assets in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<SwBaselineReadOnlyFields & SwBaselineRequiredFields & SwBaselineConditionalFields & SwBaselineOptionalFields>} swBaselineReadOnlyFieldsSwBaselineRequiredFieldsSwBaselineConditionalFieldsSwBaselineOptionalFields Example request body for updating software baseline assets to an existing System (systemId)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSwBaselineAssets: function (systemId_1, swBaselineReadOnlyFieldsSwBaselineRequiredFieldsSwBaselineConditionalFieldsSwBaselineOptionalFields_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([systemId_1, swBaselineReadOnlyFieldsSwBaselineRequiredFieldsSwBaselineConditionalFieldsSwBaselineOptionalFields_1], args_1, true), void 0, function (systemId, swBaselineReadOnlyFieldsSwBaselineRequiredFieldsSwBaselineConditionalFieldsSwBaselineOptionalFields, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            (0, common_1.assertParamExists)('updateSwBaselineAssets', 'systemId', systemId);
                            // verify required parameter 'swBaselineReadOnlyFieldsSwBaselineRequiredFieldsSwBaselineConditionalFieldsSwBaselineOptionalFields' is not null or undefined
                            (0, common_1.assertParamExists)('updateSwBaselineAssets', 'swBaselineReadOnlyFieldsSwBaselineRequiredFieldsSwBaselineConditionalFieldsSwBaselineOptionalFields', swBaselineReadOnlyFieldsSwBaselineRequiredFieldsSwBaselineConditionalFieldsSwBaselineOptionalFields);
                            localVarPath = "/api/systems/{systemId}/sw-baseline"
                                .replace("{".concat("systemId", "}"), encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(swBaselineReadOnlyFieldsSwBaselineRequiredFieldsSwBaselineConditionalFieldsSwBaselineOptionalFields, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.SoftwareBaselineApiAxiosParamCreator = SoftwareBaselineApiAxiosParamCreator;
/**
 * SoftwareBaselineApi - functional programming interface
 * @export
 */
var SoftwareBaselineApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.SoftwareBaselineApiAxiosParamCreator)(configuration);
    return {
        /**
         * Adds assets to the Software Baseline for given `systemId`  **Request Body Required Fields** - `softwareVendor` - `softwareName` - `version`
         * @summary Add one or many software assets in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<SwBaselineRequiredFields & SwBaselineConditionalFields & SwBaselineOptionalFields>} swBaselineRequiredFieldsSwBaselineConditionalFieldsSwBaselineOptionalFields Example request body for adding software baseline assets to an existing System (systemId)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSwBaselineAssets: function (systemId, swBaselineRequiredFieldsSwBaselineConditionalFieldsSwBaselineOptionalFields, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addSwBaselineAssets(systemId, swBaselineRequiredFieldsSwBaselineConditionalFieldsSwBaselineOptionalFields, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SoftwareBaselineApi.addSwBaselineAssets']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Remove (delete) one or multiple assets from a system Software Baseline
         * @summary Delete one or many software assets in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<SwBaselineRequestDeleteBodyInner>} swBaselineRequestDeleteBodyInner Example request body for deleting one or many Software Baseline assets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSwBaselineAssets: function (systemId, swBaselineRequestDeleteBodyInner, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteSwBaselineAssets(systemId, swBaselineRequestDeleteBodyInner, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SoftwareBaselineApi.deleteSwBaselineAssets']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Returns the software baseline for a system matching the `systemId` path parameter
         * @summary Get software baseline for a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSwBaseline: function (systemId, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemSwBaseline(systemId, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SoftwareBaselineApi.getSystemSwBaseline']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Updates assets in the Software Baseline for given `systemId`  **Request Body Required Fields** - `softwareId` - `softwareVendor` - `softwareName` - `version`
         * @summary Update one or many software assets in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<SwBaselineReadOnlyFields & SwBaselineRequiredFields & SwBaselineConditionalFields & SwBaselineOptionalFields>} swBaselineReadOnlyFieldsSwBaselineRequiredFieldsSwBaselineConditionalFieldsSwBaselineOptionalFields Example request body for updating software baseline assets to an existing System (systemId)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSwBaselineAssets: function (systemId, swBaselineReadOnlyFieldsSwBaselineRequiredFieldsSwBaselineConditionalFieldsSwBaselineOptionalFields, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateSwBaselineAssets(systemId, swBaselineReadOnlyFieldsSwBaselineRequiredFieldsSwBaselineConditionalFieldsSwBaselineOptionalFields, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SoftwareBaselineApi.updateSwBaselineAssets']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.SoftwareBaselineApiFp = SoftwareBaselineApiFp;
/**
 * SoftwareBaselineApi - factory interface
 * @export
 */
var SoftwareBaselineApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.SoftwareBaselineApiFp)(configuration);
    return {
        /**
         * Adds assets to the Software Baseline for given `systemId`  **Request Body Required Fields** - `softwareVendor` - `softwareName` - `version`
         * @summary Add one or many software assets in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<SwBaselineRequiredFields & SwBaselineConditionalFields & SwBaselineOptionalFields>} swBaselineRequiredFieldsSwBaselineConditionalFieldsSwBaselineOptionalFields Example request body for adding software baseline assets to an existing System (systemId)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSwBaselineAssets: function (systemId, swBaselineRequiredFieldsSwBaselineConditionalFieldsSwBaselineOptionalFields, options) {
            return localVarFp.addSwBaselineAssets(systemId, swBaselineRequiredFieldsSwBaselineConditionalFieldsSwBaselineOptionalFields, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Remove (delete) one or multiple assets from a system Software Baseline
         * @summary Delete one or many software assets in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<SwBaselineRequestDeleteBodyInner>} swBaselineRequestDeleteBodyInner Example request body for deleting one or many Software Baseline assets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSwBaselineAssets: function (systemId, swBaselineRequestDeleteBodyInner, options) {
            return localVarFp.deleteSwBaselineAssets(systemId, swBaselineRequestDeleteBodyInner, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns the software baseline for a system matching the `systemId` path parameter
         * @summary Get software baseline for a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSwBaseline: function (systemId, pageIndex, pageSize, options) {
            return localVarFp.getSystemSwBaseline(systemId, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Updates assets in the Software Baseline for given `systemId`  **Request Body Required Fields** - `softwareId` - `softwareVendor` - `softwareName` - `version`
         * @summary Update one or many software assets in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<SwBaselineReadOnlyFields & SwBaselineRequiredFields & SwBaselineConditionalFields & SwBaselineOptionalFields>} swBaselineReadOnlyFieldsSwBaselineRequiredFieldsSwBaselineConditionalFieldsSwBaselineOptionalFields Example request body for updating software baseline assets to an existing System (systemId)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSwBaselineAssets: function (systemId, swBaselineReadOnlyFieldsSwBaselineRequiredFieldsSwBaselineConditionalFieldsSwBaselineOptionalFields, options) {
            return localVarFp.updateSwBaselineAssets(systemId, swBaselineReadOnlyFieldsSwBaselineRequiredFieldsSwBaselineConditionalFieldsSwBaselineOptionalFields, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.SoftwareBaselineApiFactory = SoftwareBaselineApiFactory;
/**
 * SoftwareBaselineApi - object-oriented interface
 * @export
 * @class SoftwareBaselineApi
 * @extends {BaseAPI}
 */
var SoftwareBaselineApi = /** @class */ (function (_super) {
    __extends(SoftwareBaselineApi, _super);
    function SoftwareBaselineApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Adds assets to the Software Baseline for given `systemId`  **Request Body Required Fields** - `softwareVendor` - `softwareName` - `version`
     * @summary Add one or many software assets in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {Array<SwBaselineRequiredFields & SwBaselineConditionalFields & SwBaselineOptionalFields>} swBaselineRequiredFieldsSwBaselineConditionalFieldsSwBaselineOptionalFields Example request body for adding software baseline assets to an existing System (systemId)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SoftwareBaselineApi
     */
    SoftwareBaselineApi.prototype.addSwBaselineAssets = function (systemId, swBaselineRequiredFieldsSwBaselineConditionalFieldsSwBaselineOptionalFields, options) {
        var _this = this;
        return (0, exports.SoftwareBaselineApiFp)(this.configuration).addSwBaselineAssets(systemId, swBaselineRequiredFieldsSwBaselineConditionalFieldsSwBaselineOptionalFields, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Remove (delete) one or multiple assets from a system Software Baseline
     * @summary Delete one or many software assets in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {Array<SwBaselineRequestDeleteBodyInner>} swBaselineRequestDeleteBodyInner Example request body for deleting one or many Software Baseline assets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SoftwareBaselineApi
     */
    SoftwareBaselineApi.prototype.deleteSwBaselineAssets = function (systemId, swBaselineRequestDeleteBodyInner, options) {
        var _this = this;
        return (0, exports.SoftwareBaselineApiFp)(this.configuration).deleteSwBaselineAssets(systemId, swBaselineRequestDeleteBodyInner, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns the software baseline for a system matching the `systemId` path parameter
     * @summary Get software baseline for a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SoftwareBaselineApi
     */
    SoftwareBaselineApi.prototype.getSystemSwBaseline = function (systemId, pageIndex, pageSize, options) {
        var _this = this;
        return (0, exports.SoftwareBaselineApiFp)(this.configuration).getSystemSwBaseline(systemId, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Updates assets in the Software Baseline for given `systemId`  **Request Body Required Fields** - `softwareId` - `softwareVendor` - `softwareName` - `version`
     * @summary Update one or many software assets in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {Array<SwBaselineReadOnlyFields & SwBaselineRequiredFields & SwBaselineConditionalFields & SwBaselineOptionalFields>} swBaselineReadOnlyFieldsSwBaselineRequiredFieldsSwBaselineConditionalFieldsSwBaselineOptionalFields Example request body for updating software baseline assets to an existing System (systemId)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SoftwareBaselineApi
     */
    SoftwareBaselineApi.prototype.updateSwBaselineAssets = function (systemId, swBaselineReadOnlyFieldsSwBaselineRequiredFieldsSwBaselineConditionalFieldsSwBaselineOptionalFields, options) {
        var _this = this;
        return (0, exports.SoftwareBaselineApiFp)(this.configuration).updateSwBaselineAssets(systemId, swBaselineReadOnlyFieldsSwBaselineRequiredFieldsSwBaselineConditionalFieldsSwBaselineOptionalFields, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SoftwareBaselineApi;
}(base_1.BaseAPI));
exports.SoftwareBaselineApi = SoftwareBaselineApi;
/**
 * StaticCodeScansApi - axios parameter creator
 * @export
 */
var StaticCodeScansApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Upload or clear application scan findings into a system\'s `systemId` assets module.  **Request Body Required Fields** - `application` (Object)   - `applicationName`   - `version` - `applicationFindings` (Object Array)   - `codeCheckName`   - `count`   - `scanDate`   - `cweId`  **NOTE:** To clear an application\'s findings, use only the field `clearFindings` as the Request body and set it to true. Example: ``` [   {     \"application\": {       \"applicationName\": \"application name\",       \"version\": \"application version\"     },     \"applicationFindings\": [       { \"clearFindings\": true }     ]   } ] ```
         * @summary Upload static code scans or Clear static code scans
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {StaticCodeRequestPostBody} staticCodeRequestPostBody Example request body for adding static code scans or Clear static code scans
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addStaticCodeScansBySystemId: function (systemId_1, staticCodeRequestPostBody_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([systemId_1, staticCodeRequestPostBody_1], args_1, true), void 0, function (systemId, staticCodeRequestPostBody, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            (0, common_1.assertParamExists)('addStaticCodeScansBySystemId', 'systemId', systemId);
                            // verify required parameter 'staticCodeRequestPostBody' is not null or undefined
                            (0, common_1.assertParamExists)('addStaticCodeScansBySystemId', 'staticCodeRequestPostBody', staticCodeRequestPostBody);
                            localVarPath = "/api/systems/{systemId}/static-code-scans"
                                .replace("{".concat("systemId", "}"), encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(staticCodeRequestPostBody, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.StaticCodeScansApiAxiosParamCreator = StaticCodeScansApiAxiosParamCreator;
/**
 * StaticCodeScansApi - functional programming interface
 * @export
 */
var StaticCodeScansApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.StaticCodeScansApiAxiosParamCreator)(configuration);
    return {
        /**
         * Upload or clear application scan findings into a system\'s `systemId` assets module.  **Request Body Required Fields** - `application` (Object)   - `applicationName`   - `version` - `applicationFindings` (Object Array)   - `codeCheckName`   - `count`   - `scanDate`   - `cweId`  **NOTE:** To clear an application\'s findings, use only the field `clearFindings` as the Request body and set it to true. Example: ``` [   {     \"application\": {       \"applicationName\": \"application name\",       \"version\": \"application version\"     },     \"applicationFindings\": [       { \"clearFindings\": true }     ]   } ] ```
         * @summary Upload static code scans or Clear static code scans
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {StaticCodeRequestPostBody} staticCodeRequestPostBody Example request body for adding static code scans or Clear static code scans
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addStaticCodeScansBySystemId: function (systemId, staticCodeRequestPostBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addStaticCodeScansBySystemId(systemId, staticCodeRequestPostBody, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['StaticCodeScansApi.addStaticCodeScansBySystemId']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.StaticCodeScansApiFp = StaticCodeScansApiFp;
/**
 * StaticCodeScansApi - factory interface
 * @export
 */
var StaticCodeScansApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.StaticCodeScansApiFp)(configuration);
    return {
        /**
         * Upload or clear application scan findings into a system\'s `systemId` assets module.  **Request Body Required Fields** - `application` (Object)   - `applicationName`   - `version` - `applicationFindings` (Object Array)   - `codeCheckName`   - `count`   - `scanDate`   - `cweId`  **NOTE:** To clear an application\'s findings, use only the field `clearFindings` as the Request body and set it to true. Example: ``` [   {     \"application\": {       \"applicationName\": \"application name\",       \"version\": \"application version\"     },     \"applicationFindings\": [       { \"clearFindings\": true }     ]   } ] ```
         * @summary Upload static code scans or Clear static code scans
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {StaticCodeRequestPostBody} staticCodeRequestPostBody Example request body for adding static code scans or Clear static code scans
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addStaticCodeScansBySystemId: function (systemId, staticCodeRequestPostBody, options) {
            return localVarFp.addStaticCodeScansBySystemId(systemId, staticCodeRequestPostBody, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.StaticCodeScansApiFactory = StaticCodeScansApiFactory;
/**
 * StaticCodeScansApi - object-oriented interface
 * @export
 * @class StaticCodeScansApi
 * @extends {BaseAPI}
 */
var StaticCodeScansApi = /** @class */ (function (_super) {
    __extends(StaticCodeScansApi, _super);
    function StaticCodeScansApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Upload or clear application scan findings into a system\'s `systemId` assets module.  **Request Body Required Fields** - `application` (Object)   - `applicationName`   - `version` - `applicationFindings` (Object Array)   - `codeCheckName`   - `count`   - `scanDate`   - `cweId`  **NOTE:** To clear an application\'s findings, use only the field `clearFindings` as the Request body and set it to true. Example: ``` [   {     \"application\": {       \"applicationName\": \"application name\",       \"version\": \"application version\"     },     \"applicationFindings\": [       { \"clearFindings\": true }     ]   } ] ```
     * @summary Upload static code scans or Clear static code scans
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {StaticCodeRequestPostBody} staticCodeRequestPostBody Example request body for adding static code scans or Clear static code scans
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaticCodeScansApi
     */
    StaticCodeScansApi.prototype.addStaticCodeScansBySystemId = function (systemId, staticCodeRequestPostBody, options) {
        var _this = this;
        return (0, exports.StaticCodeScansApiFp)(this.configuration).addStaticCodeScansBySystemId(systemId, staticCodeRequestPostBody, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return StaticCodeScansApi;
}(base_1.BaseAPI));
exports.StaticCodeScansApi = StaticCodeScansApi;
/**
 * SystemATCIATCDashboardApi - axios parameter creator
 * @export
 */
var SystemATCIATCDashboardApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get systems ATC/IATC details dashboard information.
         * @summary System ATC/IATC Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemAtcIatcDetails: function (orgId_1, excludeinherited_1, pageIndex_1, pageSize_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([orgId_1, excludeinherited_1, pageIndex_1, pageSize_1], args_1, true), void 0, function (orgId, excludeinherited, pageIndex, pageSize, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            (0, common_1.assertParamExists)('getSystemAtcIatcDetails', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-atc-iatc-details";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.SystemATCIATCDashboardApiAxiosParamCreator = SystemATCIATCDashboardApiAxiosParamCreator;
/**
 * SystemATCIATCDashboardApi - functional programming interface
 * @export
 */
var SystemATCIATCDashboardApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.SystemATCIATCDashboardApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get systems ATC/IATC details dashboard information.
         * @summary System ATC/IATC Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemAtcIatcDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemAtcIatcDetails(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SystemATCIATCDashboardApi.getSystemAtcIatcDetails']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.SystemATCIATCDashboardApiFp = SystemATCIATCDashboardApiFp;
/**
 * SystemATCIATCDashboardApi - factory interface
 * @export
 */
var SystemATCIATCDashboardApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.SystemATCIATCDashboardApiFp)(configuration);
    return {
        /**
         * Get systems ATC/IATC details dashboard information.
         * @summary System ATC/IATC Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemAtcIatcDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getSystemAtcIatcDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.SystemATCIATCDashboardApiFactory = SystemATCIATCDashboardApiFactory;
/**
 * SystemATCIATCDashboardApi - object-oriented interface
 * @export
 * @class SystemATCIATCDashboardApi
 * @extends {BaseAPI}
 */
var SystemATCIATCDashboardApi = /** @class */ (function (_super) {
    __extends(SystemATCIATCDashboardApi, _super);
    function SystemATCIATCDashboardApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get systems ATC/IATC details dashboard information.
     * @summary System ATC/IATC Details
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemATCIATCDashboardApi
     */
    SystemATCIATCDashboardApi.prototype.getSystemAtcIatcDetails = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return (0, exports.SystemATCIATCDashboardApiFp)(this.configuration).getSystemAtcIatcDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SystemATCIATCDashboardApi;
}(base_1.BaseAPI));
exports.SystemATCIATCDashboardApi = SystemATCIATCDashboardApi;
/**
 * SystemApplicationFindingsDashboardsApi - axios parameter creator
 * @export
 */
var SystemApplicationFindingsDashboardsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get system application findings details dashboard information.
         * @summary System Application Findings Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemApplicationFindingsDetails: function (orgId_1, excludeinherited_1, pageIndex_1, pageSize_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([orgId_1, excludeinherited_1, pageIndex_1, pageSize_1], args_1, true), void 0, function (orgId, excludeinherited, pageIndex, pageSize, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            (0, common_1.assertParamExists)('getSystemApplicationFindingsDetails', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-application-findings-details";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get system application findings summary dashboard information.
         * @summary System Application Findings Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemApplicationFindingsSummary: function (orgId_1, excludeinherited_1, pageIndex_1, pageSize_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([orgId_1, excludeinherited_1, pageIndex_1, pageSize_1], args_1, true), void 0, function (orgId, excludeinherited, pageIndex, pageSize, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            (0, common_1.assertParamExists)('getSystemApplicationFindingsSummary', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-application-findings-summary";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.SystemApplicationFindingsDashboardsApiAxiosParamCreator = SystemApplicationFindingsDashboardsApiAxiosParamCreator;
/**
 * SystemApplicationFindingsDashboardsApi - functional programming interface
 * @export
 */
var SystemApplicationFindingsDashboardsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.SystemApplicationFindingsDashboardsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get system application findings details dashboard information.
         * @summary System Application Findings Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemApplicationFindingsDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemApplicationFindingsDetails(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SystemApplicationFindingsDashboardsApi.getSystemApplicationFindingsDetails']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get system application findings summary dashboard information.
         * @summary System Application Findings Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemApplicationFindingsSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemApplicationFindingsSummary(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SystemApplicationFindingsDashboardsApi.getSystemApplicationFindingsSummary']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.SystemApplicationFindingsDashboardsApiFp = SystemApplicationFindingsDashboardsApiFp;
/**
 * SystemApplicationFindingsDashboardsApi - factory interface
 * @export
 */
var SystemApplicationFindingsDashboardsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.SystemApplicationFindingsDashboardsApiFp)(configuration);
    return {
        /**
         * Get system application findings details dashboard information.
         * @summary System Application Findings Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemApplicationFindingsDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getSystemApplicationFindingsDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get system application findings summary dashboard information.
         * @summary System Application Findings Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemApplicationFindingsSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getSystemApplicationFindingsSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.SystemApplicationFindingsDashboardsApiFactory = SystemApplicationFindingsDashboardsApiFactory;
/**
 * SystemApplicationFindingsDashboardsApi - object-oriented interface
 * @export
 * @class SystemApplicationFindingsDashboardsApi
 * @extends {BaseAPI}
 */
var SystemApplicationFindingsDashboardsApi = /** @class */ (function (_super) {
    __extends(SystemApplicationFindingsDashboardsApi, _super);
    function SystemApplicationFindingsDashboardsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get system application findings details dashboard information.
     * @summary System Application Findings Details
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApplicationFindingsDashboardsApi
     */
    SystemApplicationFindingsDashboardsApi.prototype.getSystemApplicationFindingsDetails = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return (0, exports.SystemApplicationFindingsDashboardsApiFp)(this.configuration).getSystemApplicationFindingsDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get system application findings summary dashboard information.
     * @summary System Application Findings Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApplicationFindingsDashboardsApi
     */
    SystemApplicationFindingsDashboardsApi.prototype.getSystemApplicationFindingsSummary = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return (0, exports.SystemApplicationFindingsDashboardsApiFp)(this.configuration).getSystemApplicationFindingsSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SystemApplicationFindingsDashboardsApi;
}(base_1.BaseAPI));
exports.SystemApplicationFindingsDashboardsApi = SystemApplicationFindingsDashboardsApi;
/**
 * SystemArtifactsDashboardsApi - axios parameter creator
 * @export
 */
var SystemArtifactsDashboardsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get system Artifacts details information.
         * @summary System Artifacts Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemArtifactsDetails: function (orgId_1, excludeinherited_1, pageIndex_1, pageSize_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([orgId_1, excludeinherited_1, pageIndex_1, pageSize_1], args_1, true), void 0, function (orgId, excludeinherited, pageIndex, pageSize, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            (0, common_1.assertParamExists)('getSystemArtifactsDetails', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-artifacts-details";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get system Artifacts summary information.
         * @summary System Artifacts Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemArtifactsSummary: function (orgId_1, excludeinherited_1, pageIndex_1, pageSize_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([orgId_1, excludeinherited_1, pageIndex_1, pageSize_1], args_1, true), void 0, function (orgId, excludeinherited, pageIndex, pageSize, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            (0, common_1.assertParamExists)('getSystemArtifactsSummary', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-artifacts-summary";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.SystemArtifactsDashboardsApiAxiosParamCreator = SystemArtifactsDashboardsApiAxiosParamCreator;
/**
 * SystemArtifactsDashboardsApi - functional programming interface
 * @export
 */
var SystemArtifactsDashboardsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.SystemArtifactsDashboardsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get system Artifacts details information.
         * @summary System Artifacts Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemArtifactsDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemArtifactsDetails(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SystemArtifactsDashboardsApi.getSystemArtifactsDetails']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get system Artifacts summary information.
         * @summary System Artifacts Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemArtifactsSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemArtifactsSummary(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SystemArtifactsDashboardsApi.getSystemArtifactsSummary']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.SystemArtifactsDashboardsApiFp = SystemArtifactsDashboardsApiFp;
/**
 * SystemArtifactsDashboardsApi - factory interface
 * @export
 */
var SystemArtifactsDashboardsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.SystemArtifactsDashboardsApiFp)(configuration);
    return {
        /**
         * Get system Artifacts details information.
         * @summary System Artifacts Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemArtifactsDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getSystemArtifactsDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get system Artifacts summary information.
         * @summary System Artifacts Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemArtifactsSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getSystemArtifactsSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.SystemArtifactsDashboardsApiFactory = SystemArtifactsDashboardsApiFactory;
/**
 * SystemArtifactsDashboardsApi - object-oriented interface
 * @export
 * @class SystemArtifactsDashboardsApi
 * @extends {BaseAPI}
 */
var SystemArtifactsDashboardsApi = /** @class */ (function (_super) {
    __extends(SystemArtifactsDashboardsApi, _super);
    function SystemArtifactsDashboardsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get system Artifacts details information.
     * @summary System Artifacts Details
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemArtifactsDashboardsApi
     */
    SystemArtifactsDashboardsApi.prototype.getSystemArtifactsDetails = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return (0, exports.SystemArtifactsDashboardsApiFp)(this.configuration).getSystemArtifactsDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get system Artifacts summary information.
     * @summary System Artifacts Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemArtifactsDashboardsApi
     */
    SystemArtifactsDashboardsApi.prototype.getSystemArtifactsSummary = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return (0, exports.SystemArtifactsDashboardsApiFp)(this.configuration).getSystemArtifactsSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SystemArtifactsDashboardsApi;
}(base_1.BaseAPI));
exports.SystemArtifactsDashboardsApi = SystemArtifactsDashboardsApi;
/**
 * SystemAssociationsDashboardApi - axios parameter creator
 * @export
 */
var SystemAssociationsDashboardApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get system associations details dashboard information.
         * @summary System Associations Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemAssociationsDetails: function (orgId_1, excludeinherited_1, pageIndex_1, pageSize_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([orgId_1, excludeinherited_1, pageIndex_1, pageSize_1], args_1, true), void 0, function (orgId, excludeinherited, pageIndex, pageSize, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            (0, common_1.assertParamExists)('getSystemAssociationsDetails', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-associations-details";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.SystemAssociationsDashboardApiAxiosParamCreator = SystemAssociationsDashboardApiAxiosParamCreator;
/**
 * SystemAssociationsDashboardApi - functional programming interface
 * @export
 */
var SystemAssociationsDashboardApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.SystemAssociationsDashboardApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get system associations details dashboard information.
         * @summary System Associations Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemAssociationsDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemAssociationsDetails(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SystemAssociationsDashboardApi.getSystemAssociationsDetails']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.SystemAssociationsDashboardApiFp = SystemAssociationsDashboardApiFp;
/**
 * SystemAssociationsDashboardApi - factory interface
 * @export
 */
var SystemAssociationsDashboardApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.SystemAssociationsDashboardApiFp)(configuration);
    return {
        /**
         * Get system associations details dashboard information.
         * @summary System Associations Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemAssociationsDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getSystemAssociationsDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.SystemAssociationsDashboardApiFactory = SystemAssociationsDashboardApiFactory;
/**
 * SystemAssociationsDashboardApi - object-oriented interface
 * @export
 * @class SystemAssociationsDashboardApi
 * @extends {BaseAPI}
 */
var SystemAssociationsDashboardApi = /** @class */ (function (_super) {
    __extends(SystemAssociationsDashboardApi, _super);
    function SystemAssociationsDashboardApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get system associations details dashboard information.
     * @summary System Associations Details
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemAssociationsDashboardApi
     */
    SystemAssociationsDashboardApi.prototype.getSystemAssociationsDetails = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return (0, exports.SystemAssociationsDashboardApiFp)(this.configuration).getSystemAssociationsDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SystemAssociationsDashboardApi;
}(base_1.BaseAPI));
exports.SystemAssociationsDashboardApi = SystemAssociationsDashboardApi;
/**
 * SystemCONMONIntegrationStatusDashboardApi - axios parameter creator
 * @export
 */
var SystemCONMONIntegrationStatusDashboardApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get system CONMON integration status dashboard information.
         * @summary System CONMON Integration Status
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemCommonIntegrationStatusSummary: function (orgId_1, excludeinherited_1, pageIndex_1, pageSize_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([orgId_1, excludeinherited_1, pageIndex_1, pageSize_1], args_1, true), void 0, function (orgId, excludeinherited, pageIndex, pageSize, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            (0, common_1.assertParamExists)('getSystemCommonIntegrationStatusSummary', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-conmon-integration-status-summary";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.SystemCONMONIntegrationStatusDashboardApiAxiosParamCreator = SystemCONMONIntegrationStatusDashboardApiAxiosParamCreator;
/**
 * SystemCONMONIntegrationStatusDashboardApi - functional programming interface
 * @export
 */
var SystemCONMONIntegrationStatusDashboardApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.SystemCONMONIntegrationStatusDashboardApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get system CONMON integration status dashboard information.
         * @summary System CONMON Integration Status
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemCommonIntegrationStatusSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemCommonIntegrationStatusSummary(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SystemCONMONIntegrationStatusDashboardApi.getSystemCommonIntegrationStatusSummary']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.SystemCONMONIntegrationStatusDashboardApiFp = SystemCONMONIntegrationStatusDashboardApiFp;
/**
 * SystemCONMONIntegrationStatusDashboardApi - factory interface
 * @export
 */
var SystemCONMONIntegrationStatusDashboardApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.SystemCONMONIntegrationStatusDashboardApiFp)(configuration);
    return {
        /**
         * Get system CONMON integration status dashboard information.
         * @summary System CONMON Integration Status
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemCommonIntegrationStatusSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getSystemCommonIntegrationStatusSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.SystemCONMONIntegrationStatusDashboardApiFactory = SystemCONMONIntegrationStatusDashboardApiFactory;
/**
 * SystemCONMONIntegrationStatusDashboardApi - object-oriented interface
 * @export
 * @class SystemCONMONIntegrationStatusDashboardApi
 * @extends {BaseAPI}
 */
var SystemCONMONIntegrationStatusDashboardApi = /** @class */ (function (_super) {
    __extends(SystemCONMONIntegrationStatusDashboardApi, _super);
    function SystemCONMONIntegrationStatusDashboardApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get system CONMON integration status dashboard information.
     * @summary System CONMON Integration Status
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemCONMONIntegrationStatusDashboardApi
     */
    SystemCONMONIntegrationStatusDashboardApi.prototype.getSystemCommonIntegrationStatusSummary = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return (0, exports.SystemCONMONIntegrationStatusDashboardApiFp)(this.configuration).getSystemCommonIntegrationStatusSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SystemCONMONIntegrationStatusDashboardApi;
}(base_1.BaseAPI));
exports.SystemCONMONIntegrationStatusDashboardApi = SystemCONMONIntegrationStatusDashboardApi;
/**
 * SystemConnectivityCCSDDashboardsApi - axios parameter creator
 * @export
 */
var SystemConnectivityCCSDDashboardsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get systems connectivity/CCSD details dashboard information.
         * @summary System Connectivity/CCSD Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemConnectivityCcsdDetails: function (orgId_1, excludeinherited_1, pageIndex_1, pageSize_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([orgId_1, excludeinherited_1, pageIndex_1, pageSize_1], args_1, true), void 0, function (orgId, excludeinherited, pageIndex, pageSize, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            (0, common_1.assertParamExists)('getSystemConnectivityCcsdDetails', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-connectivity-ccsd-details";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get systems connectivity/CCSD summary dashboard information.
         * @summary System Connectivity/CCSD Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemConnectivityCcsdSummary: function (orgId_1, excludeinherited_1, pageIndex_1, pageSize_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([orgId_1, excludeinherited_1, pageIndex_1, pageSize_1], args_1, true), void 0, function (orgId, excludeinherited, pageIndex, pageSize, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            (0, common_1.assertParamExists)('getSystemConnectivityCcsdSummary', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-connectivity-ccsd-summary";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.SystemConnectivityCCSDDashboardsApiAxiosParamCreator = SystemConnectivityCCSDDashboardsApiAxiosParamCreator;
/**
 * SystemConnectivityCCSDDashboardsApi - functional programming interface
 * @export
 */
var SystemConnectivityCCSDDashboardsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.SystemConnectivityCCSDDashboardsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get systems connectivity/CCSD details dashboard information.
         * @summary System Connectivity/CCSD Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemConnectivityCcsdDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemConnectivityCcsdDetails(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SystemConnectivityCCSDDashboardsApi.getSystemConnectivityCcsdDetails']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get systems connectivity/CCSD summary dashboard information.
         * @summary System Connectivity/CCSD Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemConnectivityCcsdSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemConnectivityCcsdSummary(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SystemConnectivityCCSDDashboardsApi.getSystemConnectivityCcsdSummary']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.SystemConnectivityCCSDDashboardsApiFp = SystemConnectivityCCSDDashboardsApiFp;
/**
 * SystemConnectivityCCSDDashboardsApi - factory interface
 * @export
 */
var SystemConnectivityCCSDDashboardsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.SystemConnectivityCCSDDashboardsApiFp)(configuration);
    return {
        /**
         * Get systems connectivity/CCSD details dashboard information.
         * @summary System Connectivity/CCSD Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemConnectivityCcsdDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getSystemConnectivityCcsdDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get systems connectivity/CCSD summary dashboard information.
         * @summary System Connectivity/CCSD Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemConnectivityCcsdSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getSystemConnectivityCcsdSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.SystemConnectivityCCSDDashboardsApiFactory = SystemConnectivityCCSDDashboardsApiFactory;
/**
 * SystemConnectivityCCSDDashboardsApi - object-oriented interface
 * @export
 * @class SystemConnectivityCCSDDashboardsApi
 * @extends {BaseAPI}
 */
var SystemConnectivityCCSDDashboardsApi = /** @class */ (function (_super) {
    __extends(SystemConnectivityCCSDDashboardsApi, _super);
    function SystemConnectivityCCSDDashboardsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get systems connectivity/CCSD details dashboard information.
     * @summary System Connectivity/CCSD Details
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemConnectivityCCSDDashboardsApi
     */
    SystemConnectivityCCSDDashboardsApi.prototype.getSystemConnectivityCcsdDetails = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return (0, exports.SystemConnectivityCCSDDashboardsApiFp)(this.configuration).getSystemConnectivityCcsdDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get systems connectivity/CCSD summary dashboard information.
     * @summary System Connectivity/CCSD Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemConnectivityCCSDDashboardsApi
     */
    SystemConnectivityCCSDDashboardsApi.prototype.getSystemConnectivityCcsdSummary = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return (0, exports.SystemConnectivityCCSDDashboardsApiFp)(this.configuration).getSystemConnectivityCcsdSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SystemConnectivityCCSDDashboardsApi;
}(base_1.BaseAPI));
exports.SystemConnectivityCCSDDashboardsApi = SystemConnectivityCCSDDashboardsApi;
/**
 * SystemCriticalAssetsDashboardApi - axios parameter creator
 * @export
 */
var SystemCriticalAssetsDashboardApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get system critical assets summary dashboard information.
         * @summary System Critical Assets Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemCriticalAssetsSummary: function (orgId_1, excludeinherited_1, pageIndex_1, pageSize_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([orgId_1, excludeinherited_1, pageIndex_1, pageSize_1], args_1, true), void 0, function (orgId, excludeinherited, pageIndex, pageSize, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            (0, common_1.assertParamExists)('getSystemCriticalAssetsSummary', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-critical-assets-summary";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.SystemCriticalAssetsDashboardApiAxiosParamCreator = SystemCriticalAssetsDashboardApiAxiosParamCreator;
/**
 * SystemCriticalAssetsDashboardApi - functional programming interface
 * @export
 */
var SystemCriticalAssetsDashboardApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.SystemCriticalAssetsDashboardApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get system critical assets summary dashboard information.
         * @summary System Critical Assets Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemCriticalAssetsSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemCriticalAssetsSummary(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SystemCriticalAssetsDashboardApi.getSystemCriticalAssetsSummary']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.SystemCriticalAssetsDashboardApiFp = SystemCriticalAssetsDashboardApiFp;
/**
 * SystemCriticalAssetsDashboardApi - factory interface
 * @export
 */
var SystemCriticalAssetsDashboardApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.SystemCriticalAssetsDashboardApiFp)(configuration);
    return {
        /**
         * Get system critical assets summary dashboard information.
         * @summary System Critical Assets Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemCriticalAssetsSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getSystemCriticalAssetsSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.SystemCriticalAssetsDashboardApiFactory = SystemCriticalAssetsDashboardApiFactory;
/**
 * SystemCriticalAssetsDashboardApi - object-oriented interface
 * @export
 * @class SystemCriticalAssetsDashboardApi
 * @extends {BaseAPI}
 */
var SystemCriticalAssetsDashboardApi = /** @class */ (function (_super) {
    __extends(SystemCriticalAssetsDashboardApi, _super);
    function SystemCriticalAssetsDashboardApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get system critical assets summary dashboard information.
     * @summary System Critical Assets Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemCriticalAssetsDashboardApi
     */
    SystemCriticalAssetsDashboardApi.prototype.getSystemCriticalAssetsSummary = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return (0, exports.SystemCriticalAssetsDashboardApiFp)(this.configuration).getSystemCriticalAssetsSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SystemCriticalAssetsDashboardApi;
}(base_1.BaseAPI));
exports.SystemCriticalAssetsDashboardApi = SystemCriticalAssetsDashboardApi;
/**
 * SystemDeviceFindingsDashboardsApi - axios parameter creator
 * @export
 */
var SystemDeviceFindingsDashboardsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get ssystem device findings details dashboard information.
         * @summary System Device Findings Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemDeviceFindingsDetails: function (orgId_1, excludeinherited_1, pageIndex_1, pageSize_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([orgId_1, excludeinherited_1, pageIndex_1, pageSize_1], args_1, true), void 0, function (orgId, excludeinherited, pageIndex, pageSize, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            (0, common_1.assertParamExists)('getSystemDeviceFindingsDetails', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-device-findings-details";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get system device findings summary dashboard information.
         * @summary System Device Findings Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemDeviceFindingsSummary: function (orgId_1, excludeinherited_1, pageIndex_1, pageSize_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([orgId_1, excludeinherited_1, pageIndex_1, pageSize_1], args_1, true), void 0, function (orgId, excludeinherited, pageIndex, pageSize, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            (0, common_1.assertParamExists)('getSystemDeviceFindingsSummary', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-device-findings-summary";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.SystemDeviceFindingsDashboardsApiAxiosParamCreator = SystemDeviceFindingsDashboardsApiAxiosParamCreator;
/**
 * SystemDeviceFindingsDashboardsApi - functional programming interface
 * @export
 */
var SystemDeviceFindingsDashboardsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.SystemDeviceFindingsDashboardsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get ssystem device findings details dashboard information.
         * @summary System Device Findings Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemDeviceFindingsDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemDeviceFindingsDetails(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SystemDeviceFindingsDashboardsApi.getSystemDeviceFindingsDetails']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get system device findings summary dashboard information.
         * @summary System Device Findings Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemDeviceFindingsSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemDeviceFindingsSummary(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SystemDeviceFindingsDashboardsApi.getSystemDeviceFindingsSummary']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.SystemDeviceFindingsDashboardsApiFp = SystemDeviceFindingsDashboardsApiFp;
/**
 * SystemDeviceFindingsDashboardsApi - factory interface
 * @export
 */
var SystemDeviceFindingsDashboardsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.SystemDeviceFindingsDashboardsApiFp)(configuration);
    return {
        /**
         * Get ssystem device findings details dashboard information.
         * @summary System Device Findings Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemDeviceFindingsDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getSystemDeviceFindingsDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get system device findings summary dashboard information.
         * @summary System Device Findings Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemDeviceFindingsSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getSystemDeviceFindingsSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.SystemDeviceFindingsDashboardsApiFactory = SystemDeviceFindingsDashboardsApiFactory;
/**
 * SystemDeviceFindingsDashboardsApi - object-oriented interface
 * @export
 * @class SystemDeviceFindingsDashboardsApi
 * @extends {BaseAPI}
 */
var SystemDeviceFindingsDashboardsApi = /** @class */ (function (_super) {
    __extends(SystemDeviceFindingsDashboardsApi, _super);
    function SystemDeviceFindingsDashboardsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get ssystem device findings details dashboard information.
     * @summary System Device Findings Details
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemDeviceFindingsDashboardsApi
     */
    SystemDeviceFindingsDashboardsApi.prototype.getSystemDeviceFindingsDetails = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return (0, exports.SystemDeviceFindingsDashboardsApiFp)(this.configuration).getSystemDeviceFindingsDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get system device findings summary dashboard information.
     * @summary System Device Findings Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemDeviceFindingsDashboardsApi
     */
    SystemDeviceFindingsDashboardsApi.prototype.getSystemDeviceFindingsSummary = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return (0, exports.SystemDeviceFindingsDashboardsApiFp)(this.configuration).getSystemDeviceFindingsSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SystemDeviceFindingsDashboardsApi;
}(base_1.BaseAPI));
exports.SystemDeviceFindingsDashboardsApi = SystemDeviceFindingsDashboardsApi;
/**
 * SystemFISMAMetricsDashboardApi - axios parameter creator
 * @export
 */
var SystemFISMAMetricsDashboardApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get system FISMA metrics dashboard information.
         * @summary System FISMA Metrics
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemFismaMetrics: function (orgId_1, excludeinherited_1, pageIndex_1, pageSize_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([orgId_1, excludeinherited_1, pageIndex_1, pageSize_1], args_1, true), void 0, function (orgId, excludeinherited, pageIndex, pageSize, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            (0, common_1.assertParamExists)('getSystemFismaMetrics', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-fisma-metrics";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.SystemFISMAMetricsDashboardApiAxiosParamCreator = SystemFISMAMetricsDashboardApiAxiosParamCreator;
/**
 * SystemFISMAMetricsDashboardApi - functional programming interface
 * @export
 */
var SystemFISMAMetricsDashboardApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.SystemFISMAMetricsDashboardApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get system FISMA metrics dashboard information.
         * @summary System FISMA Metrics
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemFismaMetrics: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemFismaMetrics(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SystemFISMAMetricsDashboardApi.getSystemFismaMetrics']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.SystemFISMAMetricsDashboardApiFp = SystemFISMAMetricsDashboardApiFp;
/**
 * SystemFISMAMetricsDashboardApi - factory interface
 * @export
 */
var SystemFISMAMetricsDashboardApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.SystemFISMAMetricsDashboardApiFp)(configuration);
    return {
        /**
         * Get system FISMA metrics dashboard information.
         * @summary System FISMA Metrics
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemFismaMetrics: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getSystemFismaMetrics(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.SystemFISMAMetricsDashboardApiFactory = SystemFISMAMetricsDashboardApiFactory;
/**
 * SystemFISMAMetricsDashboardApi - object-oriented interface
 * @export
 * @class SystemFISMAMetricsDashboardApi
 * @extends {BaseAPI}
 */
var SystemFISMAMetricsDashboardApi = /** @class */ (function (_super) {
    __extends(SystemFISMAMetricsDashboardApi, _super);
    function SystemFISMAMetricsDashboardApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get system FISMA metrics dashboard information.
     * @summary System FISMA Metrics
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemFISMAMetricsDashboardApi
     */
    SystemFISMAMetricsDashboardApi.prototype.getSystemFismaMetrics = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return (0, exports.SystemFISMAMetricsDashboardApiFp)(this.configuration).getSystemFismaMetrics(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SystemFISMAMetricsDashboardApi;
}(base_1.BaseAPI));
exports.SystemFISMAMetricsDashboardApi = SystemFISMAMetricsDashboardApi;
/**
 * SystemHardwareDashboardsApi - axios parameter creator
 * @export
 */
var SystemHardwareDashboardsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get system hardware details dashboard information.
         * @summary System Hardware Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemHardwareDetails: function (orgId_1, excludeinherited_1, pageIndex_1, pageSize_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([orgId_1, excludeinherited_1, pageIndex_1, pageSize_1], args_1, true), void 0, function (orgId, excludeinherited, pageIndex, pageSize, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            (0, common_1.assertParamExists)('getSystemHardwareDetails', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-hardware-details";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get system hardware summary dashboard information.
         * @summary System Hardware Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemHardwareSummary: function (orgId_1, excludeinherited_1, pageIndex_1, pageSize_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([orgId_1, excludeinherited_1, pageIndex_1, pageSize_1], args_1, true), void 0, function (orgId, excludeinherited, pageIndex, pageSize, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            (0, common_1.assertParamExists)('getSystemHardwareSummary', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-hardware-summary";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.SystemHardwareDashboardsApiAxiosParamCreator = SystemHardwareDashboardsApiAxiosParamCreator;
/**
 * SystemHardwareDashboardsApi - functional programming interface
 * @export
 */
var SystemHardwareDashboardsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.SystemHardwareDashboardsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get system hardware details dashboard information.
         * @summary System Hardware Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemHardwareDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemHardwareDetails(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SystemHardwareDashboardsApi.getSystemHardwareDetails']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get system hardware summary dashboard information.
         * @summary System Hardware Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemHardwareSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemHardwareSummary(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SystemHardwareDashboardsApi.getSystemHardwareSummary']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.SystemHardwareDashboardsApiFp = SystemHardwareDashboardsApiFp;
/**
 * SystemHardwareDashboardsApi - factory interface
 * @export
 */
var SystemHardwareDashboardsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.SystemHardwareDashboardsApiFp)(configuration);
    return {
        /**
         * Get system hardware details dashboard information.
         * @summary System Hardware Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemHardwareDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getSystemHardwareDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get system hardware summary dashboard information.
         * @summary System Hardware Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemHardwareSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getSystemHardwareSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.SystemHardwareDashboardsApiFactory = SystemHardwareDashboardsApiFactory;
/**
 * SystemHardwareDashboardsApi - object-oriented interface
 * @export
 * @class SystemHardwareDashboardsApi
 * @extends {BaseAPI}
 */
var SystemHardwareDashboardsApi = /** @class */ (function (_super) {
    __extends(SystemHardwareDashboardsApi, _super);
    function SystemHardwareDashboardsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get system hardware details dashboard information.
     * @summary System Hardware Details
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemHardwareDashboardsApi
     */
    SystemHardwareDashboardsApi.prototype.getSystemHardwareDetails = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return (0, exports.SystemHardwareDashboardsApiFp)(this.configuration).getSystemHardwareDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get system hardware summary dashboard information.
     * @summary System Hardware Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemHardwareDashboardsApi
     */
    SystemHardwareDashboardsApi.prototype.getSystemHardwareSummary = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return (0, exports.SystemHardwareDashboardsApiFp)(this.configuration).getSystemHardwareSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SystemHardwareDashboardsApi;
}(base_1.BaseAPI));
exports.SystemHardwareDashboardsApi = SystemHardwareDashboardsApi;
/**
 * SystemMigrationStatusDashboardApi - axios parameter creator
 * @export
 */
var SystemMigrationStatusDashboardApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get system migration status summary dashboard information.
         * @summary System Migration Status Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemMigrationStatusSummary: function (orgId_1, excludeinherited_1, pageIndex_1, pageSize_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([orgId_1, excludeinherited_1, pageIndex_1, pageSize_1], args_1, true), void 0, function (orgId, excludeinherited, pageIndex, pageSize, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            (0, common_1.assertParamExists)('getSystemMigrationStatusSummary', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-migration-status-summary";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.SystemMigrationStatusDashboardApiAxiosParamCreator = SystemMigrationStatusDashboardApiAxiosParamCreator;
/**
 * SystemMigrationStatusDashboardApi - functional programming interface
 * @export
 */
var SystemMigrationStatusDashboardApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.SystemMigrationStatusDashboardApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get system migration status summary dashboard information.
         * @summary System Migration Status Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemMigrationStatusSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemMigrationStatusSummary(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SystemMigrationStatusDashboardApi.getSystemMigrationStatusSummary']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.SystemMigrationStatusDashboardApiFp = SystemMigrationStatusDashboardApiFp;
/**
 * SystemMigrationStatusDashboardApi - factory interface
 * @export
 */
var SystemMigrationStatusDashboardApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.SystemMigrationStatusDashboardApiFp)(configuration);
    return {
        /**
         * Get system migration status summary dashboard information.
         * @summary System Migration Status Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemMigrationStatusSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getSystemMigrationStatusSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.SystemMigrationStatusDashboardApiFactory = SystemMigrationStatusDashboardApiFactory;
/**
 * SystemMigrationStatusDashboardApi - object-oriented interface
 * @export
 * @class SystemMigrationStatusDashboardApi
 * @extends {BaseAPI}
 */
var SystemMigrationStatusDashboardApi = /** @class */ (function (_super) {
    __extends(SystemMigrationStatusDashboardApi, _super);
    function SystemMigrationStatusDashboardApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get system migration status summary dashboard information.
     * @summary System Migration Status Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemMigrationStatusDashboardApi
     */
    SystemMigrationStatusDashboardApi.prototype.getSystemMigrationStatusSummary = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return (0, exports.SystemMigrationStatusDashboardApiFp)(this.configuration).getSystemMigrationStatusSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SystemMigrationStatusDashboardApi;
}(base_1.BaseAPI));
exports.SystemMigrationStatusDashboardApi = SystemMigrationStatusDashboardApi;
/**
 * SystemPOAMDashboardsApi - axios parameter creator
 * @export
 */
var SystemPOAMDashboardsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get system POA&Ms details dashboard information.
         * @summary System POA&M Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPoamDetails: function (orgId_1, excludeinherited_1, pageIndex_1, pageSize_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([orgId_1, excludeinherited_1, pageIndex_1, pageSize_1], args_1, true), void 0, function (orgId, excludeinherited, pageIndex, pageSize, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            (0, common_1.assertParamExists)('getSystemPoamDetails', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-poam-details";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get systems POA&Ms summary dashboard information.
         * @summary System POA&M Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPoamSummary: function (orgId_1, excludeinherited_1, pageIndex_1, pageSize_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([orgId_1, excludeinherited_1, pageIndex_1, pageSize_1], args_1, true), void 0, function (orgId, excludeinherited, pageIndex, pageSize, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            (0, common_1.assertParamExists)('getSystemPoamSummary', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-poam-summary";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.SystemPOAMDashboardsApiAxiosParamCreator = SystemPOAMDashboardsApiAxiosParamCreator;
/**
 * SystemPOAMDashboardsApi - functional programming interface
 * @export
 */
var SystemPOAMDashboardsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.SystemPOAMDashboardsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get system POA&Ms details dashboard information.
         * @summary System POA&M Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPoamDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemPoamDetails(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SystemPOAMDashboardsApi.getSystemPoamDetails']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get systems POA&Ms summary dashboard information.
         * @summary System POA&M Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPoamSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemPoamSummary(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SystemPOAMDashboardsApi.getSystemPoamSummary']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.SystemPOAMDashboardsApiFp = SystemPOAMDashboardsApiFp;
/**
 * SystemPOAMDashboardsApi - factory interface
 * @export
 */
var SystemPOAMDashboardsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.SystemPOAMDashboardsApiFp)(configuration);
    return {
        /**
         * Get system POA&Ms details dashboard information.
         * @summary System POA&M Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPoamDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getSystemPoamDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get systems POA&Ms summary dashboard information.
         * @summary System POA&M Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPoamSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getSystemPoamSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.SystemPOAMDashboardsApiFactory = SystemPOAMDashboardsApiFactory;
/**
 * SystemPOAMDashboardsApi - object-oriented interface
 * @export
 * @class SystemPOAMDashboardsApi
 * @extends {BaseAPI}
 */
var SystemPOAMDashboardsApi = /** @class */ (function (_super) {
    __extends(SystemPOAMDashboardsApi, _super);
    function SystemPOAMDashboardsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get system POA&Ms details dashboard information.
     * @summary System POA&M Details
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemPOAMDashboardsApi
     */
    SystemPOAMDashboardsApi.prototype.getSystemPoamDetails = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return (0, exports.SystemPOAMDashboardsApiFp)(this.configuration).getSystemPoamDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get systems POA&Ms summary dashboard information.
     * @summary System POA&M Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemPOAMDashboardsApi
     */
    SystemPOAMDashboardsApi.prototype.getSystemPoamSummary = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return (0, exports.SystemPOAMDashboardsApiFp)(this.configuration).getSystemPoamSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SystemPOAMDashboardsApi;
}(base_1.BaseAPI));
exports.SystemPOAMDashboardsApi = SystemPOAMDashboardsApi;
/**
 * SystemPortsProtocolsDashboardsApi - axios parameter creator
 * @export
 */
var SystemPortsProtocolsDashboardsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get system ports and protocols details dashboard information.
         * @summary System Ports/Protocols Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPortsProtocolsDetails: function (orgId_1, excludeinherited_1, pageIndex_1, pageSize_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([orgId_1, excludeinherited_1, pageIndex_1, pageSize_1], args_1, true), void 0, function (orgId, excludeinherited, pageIndex, pageSize, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            (0, common_1.assertParamExists)('getSystemPortsProtocolsDetails', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-ports-protocols-details";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get system ports and protocols summary dashboard information.
         * @summary System Ports/Protocols Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPortsProtocolsSummary: function (orgId_1, excludeinherited_1, pageIndex_1, pageSize_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([orgId_1, excludeinherited_1, pageIndex_1, pageSize_1], args_1, true), void 0, function (orgId, excludeinherited, pageIndex, pageSize, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            (0, common_1.assertParamExists)('getSystemPortsProtocolsSummary', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-ports-protocols-summary";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.SystemPortsProtocolsDashboardsApiAxiosParamCreator = SystemPortsProtocolsDashboardsApiAxiosParamCreator;
/**
 * SystemPortsProtocolsDashboardsApi - functional programming interface
 * @export
 */
var SystemPortsProtocolsDashboardsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.SystemPortsProtocolsDashboardsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get system ports and protocols details dashboard information.
         * @summary System Ports/Protocols Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPortsProtocolsDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemPortsProtocolsDetails(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SystemPortsProtocolsDashboardsApi.getSystemPortsProtocolsDetails']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get system ports and protocols summary dashboard information.
         * @summary System Ports/Protocols Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPortsProtocolsSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemPortsProtocolsSummary(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SystemPortsProtocolsDashboardsApi.getSystemPortsProtocolsSummary']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.SystemPortsProtocolsDashboardsApiFp = SystemPortsProtocolsDashboardsApiFp;
/**
 * SystemPortsProtocolsDashboardsApi - factory interface
 * @export
 */
var SystemPortsProtocolsDashboardsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.SystemPortsProtocolsDashboardsApiFp)(configuration);
    return {
        /**
         * Get system ports and protocols details dashboard information.
         * @summary System Ports/Protocols Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPortsProtocolsDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getSystemPortsProtocolsDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get system ports and protocols summary dashboard information.
         * @summary System Ports/Protocols Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPortsProtocolsSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getSystemPortsProtocolsSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.SystemPortsProtocolsDashboardsApiFactory = SystemPortsProtocolsDashboardsApiFactory;
/**
 * SystemPortsProtocolsDashboardsApi - object-oriented interface
 * @export
 * @class SystemPortsProtocolsDashboardsApi
 * @extends {BaseAPI}
 */
var SystemPortsProtocolsDashboardsApi = /** @class */ (function (_super) {
    __extends(SystemPortsProtocolsDashboardsApi, _super);
    function SystemPortsProtocolsDashboardsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get system ports and protocols details dashboard information.
     * @summary System Ports/Protocols Details
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemPortsProtocolsDashboardsApi
     */
    SystemPortsProtocolsDashboardsApi.prototype.getSystemPortsProtocolsDetails = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return (0, exports.SystemPortsProtocolsDashboardsApiFp)(this.configuration).getSystemPortsProtocolsDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get system ports and protocols summary dashboard information.
     * @summary System Ports/Protocols Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemPortsProtocolsDashboardsApi
     */
    SystemPortsProtocolsDashboardsApi.prototype.getSystemPortsProtocolsSummary = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return (0, exports.SystemPortsProtocolsDashboardsApiFp)(this.configuration).getSystemPortsProtocolsSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SystemPortsProtocolsDashboardsApi;
}(base_1.BaseAPI));
exports.SystemPortsProtocolsDashboardsApi = SystemPortsProtocolsDashboardsApi;
/**
 * SystemPrivacyDashboardApi - axios parameter creator
 * @export
 */
var SystemPrivacyDashboardApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get user system privacy summary dashboard information.
         * @summary System Privacy Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPrivacySummary: function (orgId_1, excludeinherited_1, pageIndex_1, pageSize_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([orgId_1, excludeinherited_1, pageIndex_1, pageSize_1], args_1, true), void 0, function (orgId, excludeinherited, pageIndex, pageSize, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            (0, common_1.assertParamExists)('getSystemPrivacySummary', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-privacy-summary";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.SystemPrivacyDashboardApiAxiosParamCreator = SystemPrivacyDashboardApiAxiosParamCreator;
/**
 * SystemPrivacyDashboardApi - functional programming interface
 * @export
 */
var SystemPrivacyDashboardApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.SystemPrivacyDashboardApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get user system privacy summary dashboard information.
         * @summary System Privacy Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPrivacySummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemPrivacySummary(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SystemPrivacyDashboardApi.getSystemPrivacySummary']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.SystemPrivacyDashboardApiFp = SystemPrivacyDashboardApiFp;
/**
 * SystemPrivacyDashboardApi - factory interface
 * @export
 */
var SystemPrivacyDashboardApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.SystemPrivacyDashboardApiFp)(configuration);
    return {
        /**
         * Get user system privacy summary dashboard information.
         * @summary System Privacy Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPrivacySummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getSystemPrivacySummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.SystemPrivacyDashboardApiFactory = SystemPrivacyDashboardApiFactory;
/**
 * SystemPrivacyDashboardApi - object-oriented interface
 * @export
 * @class SystemPrivacyDashboardApi
 * @extends {BaseAPI}
 */
var SystemPrivacyDashboardApi = /** @class */ (function (_super) {
    __extends(SystemPrivacyDashboardApi, _super);
    function SystemPrivacyDashboardApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get user system privacy summary dashboard information.
     * @summary System Privacy Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemPrivacyDashboardApi
     */
    SystemPrivacyDashboardApi.prototype.getSystemPrivacySummary = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return (0, exports.SystemPrivacyDashboardApiFp)(this.configuration).getSystemPrivacySummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SystemPrivacyDashboardApi;
}(base_1.BaseAPI));
exports.SystemPrivacyDashboardApi = SystemPrivacyDashboardApi;
/**
 * SystemQuestionnaireDashboardsApi - axios parameter creator
 * @export
 */
var SystemQuestionnaireDashboardsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get systems questionnaire details dashboard information.
         * @summary System Questionnaire Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemQuestionnaireDetails: function (orgId_1, excludeinherited_1, pageIndex_1, pageSize_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([orgId_1, excludeinherited_1, pageIndex_1, pageSize_1], args_1, true), void 0, function (orgId, excludeinherited, pageIndex, pageSize, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            (0, common_1.assertParamExists)('getSystemQuestionnaireDetails', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-questionnaire-details";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get systems questionnaire summary dashboard information.
         * @summary System Questionnaire Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemQuestionnaireSummary: function (orgId_1, excludeinherited_1, pageIndex_1, pageSize_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([orgId_1, excludeinherited_1, pageIndex_1, pageSize_1], args_1, true), void 0, function (orgId, excludeinherited, pageIndex, pageSize, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            (0, common_1.assertParamExists)('getSystemQuestionnaireSummary', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-questionnaire-summary";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.SystemQuestionnaireDashboardsApiAxiosParamCreator = SystemQuestionnaireDashboardsApiAxiosParamCreator;
/**
 * SystemQuestionnaireDashboardsApi - functional programming interface
 * @export
 */
var SystemQuestionnaireDashboardsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.SystemQuestionnaireDashboardsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get systems questionnaire details dashboard information.
         * @summary System Questionnaire Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemQuestionnaireDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemQuestionnaireDetails(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SystemQuestionnaireDashboardsApi.getSystemQuestionnaireDetails']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get systems questionnaire summary dashboard information.
         * @summary System Questionnaire Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemQuestionnaireSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemQuestionnaireSummary(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SystemQuestionnaireDashboardsApi.getSystemQuestionnaireSummary']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.SystemQuestionnaireDashboardsApiFp = SystemQuestionnaireDashboardsApiFp;
/**
 * SystemQuestionnaireDashboardsApi - factory interface
 * @export
 */
var SystemQuestionnaireDashboardsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.SystemQuestionnaireDashboardsApiFp)(configuration);
    return {
        /**
         * Get systems questionnaire details dashboard information.
         * @summary System Questionnaire Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemQuestionnaireDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getSystemQuestionnaireDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get systems questionnaire summary dashboard information.
         * @summary System Questionnaire Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemQuestionnaireSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getSystemQuestionnaireSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.SystemQuestionnaireDashboardsApiFactory = SystemQuestionnaireDashboardsApiFactory;
/**
 * SystemQuestionnaireDashboardsApi - object-oriented interface
 * @export
 * @class SystemQuestionnaireDashboardsApi
 * @extends {BaseAPI}
 */
var SystemQuestionnaireDashboardsApi = /** @class */ (function (_super) {
    __extends(SystemQuestionnaireDashboardsApi, _super);
    function SystemQuestionnaireDashboardsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get systems questionnaire details dashboard information.
     * @summary System Questionnaire Details
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemQuestionnaireDashboardsApi
     */
    SystemQuestionnaireDashboardsApi.prototype.getSystemQuestionnaireDetails = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return (0, exports.SystemQuestionnaireDashboardsApiFp)(this.configuration).getSystemQuestionnaireDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get systems questionnaire summary dashboard information.
     * @summary System Questionnaire Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemQuestionnaireDashboardsApi
     */
    SystemQuestionnaireDashboardsApi.prototype.getSystemQuestionnaireSummary = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return (0, exports.SystemQuestionnaireDashboardsApiFp)(this.configuration).getSystemQuestionnaireSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SystemQuestionnaireDashboardsApi;
}(base_1.BaseAPI));
exports.SystemQuestionnaireDashboardsApi = SystemQuestionnaireDashboardsApi;
/**
 * SystemRolesApi - axios parameter creator
 * @export
 */
var SystemRolesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Returns all available roles
         * @summary Get available roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemRoles: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/system-roles";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Returns the role(s) data matching parameters.
         * @summary Get system roles
         * @param {GetSystemRolesByCategoryIdRoleCategoryEnum} roleCategory **Role Category**: The system role category been queried
         * @param {string} role **Role**: Accepts single value from options available at base system-roles endpoint e.g., SCA.
         * @param {GetSystemRolesByCategoryIdPolicyEnum} [policy] **System Policy**: Filter query by system policy. If no value is specified, the default returns RMF policy information for dual-policy systems.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemRolesByCategoryId: function (roleCategory_1, role_1, policy_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([roleCategory_1, role_1, policy_1], args_1, true), void 0, function (roleCategory, role, policy, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'roleCategory' is not null or undefined
                            (0, common_1.assertParamExists)('getSystemRolesByCategoryId', 'roleCategory', roleCategory);
                            // verify required parameter 'role' is not null or undefined
                            (0, common_1.assertParamExists)('getSystemRolesByCategoryId', 'role', role);
                            localVarPath = "/api/system-roles/{roleCategory}"
                                .replace("{".concat("roleCategory", "}"), encodeURIComponent(String(roleCategory)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (role !== undefined) {
                                localVarQueryParameter['role'] = role;
                            }
                            if (policy !== undefined) {
                                localVarQueryParameter['policy'] = policy;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.SystemRolesApiAxiosParamCreator = SystemRolesApiAxiosParamCreator;
/**
 * SystemRolesApi - functional programming interface
 * @export
 */
var SystemRolesApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.SystemRolesApiAxiosParamCreator)(configuration);
    return {
        /**
         * Returns all available roles
         * @summary Get available roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemRoles: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemRoles(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SystemRolesApi.getSystemRoles']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Returns the role(s) data matching parameters.
         * @summary Get system roles
         * @param {GetSystemRolesByCategoryIdRoleCategoryEnum} roleCategory **Role Category**: The system role category been queried
         * @param {string} role **Role**: Accepts single value from options available at base system-roles endpoint e.g., SCA.
         * @param {GetSystemRolesByCategoryIdPolicyEnum} [policy] **System Policy**: Filter query by system policy. If no value is specified, the default returns RMF policy information for dual-policy systems.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemRolesByCategoryId: function (roleCategory, role, policy, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemRolesByCategoryId(roleCategory, role, policy, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SystemRolesApi.getSystemRolesByCategoryId']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.SystemRolesApiFp = SystemRolesApiFp;
/**
 * SystemRolesApi - factory interface
 * @export
 */
var SystemRolesApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.SystemRolesApiFp)(configuration);
    return {
        /**
         * Returns all available roles
         * @summary Get available roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemRoles: function (options) {
            return localVarFp.getSystemRoles(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns the role(s) data matching parameters.
         * @summary Get system roles
         * @param {GetSystemRolesByCategoryIdRoleCategoryEnum} roleCategory **Role Category**: The system role category been queried
         * @param {string} role **Role**: Accepts single value from options available at base system-roles endpoint e.g., SCA.
         * @param {GetSystemRolesByCategoryIdPolicyEnum} [policy] **System Policy**: Filter query by system policy. If no value is specified, the default returns RMF policy information for dual-policy systems.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemRolesByCategoryId: function (roleCategory, role, policy, options) {
            return localVarFp.getSystemRolesByCategoryId(roleCategory, role, policy, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.SystemRolesApiFactory = SystemRolesApiFactory;
/**
 * SystemRolesApi - object-oriented interface
 * @export
 * @class SystemRolesApi
 * @extends {BaseAPI}
 */
var SystemRolesApi = /** @class */ (function (_super) {
    __extends(SystemRolesApi, _super);
    function SystemRolesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Returns all available roles
     * @summary Get available roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemRolesApi
     */
    SystemRolesApi.prototype.getSystemRoles = function (options) {
        var _this = this;
        return (0, exports.SystemRolesApiFp)(this.configuration).getSystemRoles(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns the role(s) data matching parameters.
     * @summary Get system roles
     * @param {GetSystemRolesByCategoryIdRoleCategoryEnum} roleCategory **Role Category**: The system role category been queried
     * @param {string} role **Role**: Accepts single value from options available at base system-roles endpoint e.g., SCA.
     * @param {GetSystemRolesByCategoryIdPolicyEnum} [policy] **System Policy**: Filter query by system policy. If no value is specified, the default returns RMF policy information for dual-policy systems.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemRolesApi
     */
    SystemRolesApi.prototype.getSystemRolesByCategoryId = function (roleCategory, role, policy, options) {
        var _this = this;
        return (0, exports.SystemRolesApiFp)(this.configuration).getSystemRolesByCategoryId(roleCategory, role, policy, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SystemRolesApi;
}(base_1.BaseAPI));
exports.SystemRolesApi = SystemRolesApi;
/**
 * @export
 */
exports.GetSystemRolesByCategoryIdRoleCategoryEnum = {
    Cac: 'CAC',
    Pac: 'PAC',
    Other: 'Other',
    UnknownDefaultOpenApi: '11184809'
};
/**
 * @export
 */
exports.GetSystemRolesByCategoryIdPolicyEnum = {
    Diacap: 'diacap',
    Rmf: 'rmf',
    Reporting: 'reporting',
    UnknownDefaultOpenApi: '11184809'
};
/**
 * SystemSecurityControlsDashboardsApi - axios parameter creator
 * @export
 */
var SystemSecurityControlsDashboardsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get systems assessment procedures details dashboard information.
         * @summary System Assessment Procedures Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemAssessmentProceduresDetails: function (orgId_1, excludeinherited_1, pageIndex_1, pageSize_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([orgId_1, excludeinherited_1, pageIndex_1, pageSize_1], args_1, true), void 0, function (orgId, excludeinherited, pageIndex, pageSize, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            (0, common_1.assertParamExists)('getSystemAssessmentProceduresDetails', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-assessment-procedures-details";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get systems control compliance summary dashboard information.
         * @summary System Control Compliance Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemControlComplianceSummary: function (orgId_1, excludeinherited_1, pageIndex_1, pageSize_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([orgId_1, excludeinherited_1, pageIndex_1, pageSize_1], args_1, true), void 0, function (orgId, excludeinherited, pageIndex, pageSize, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            (0, common_1.assertParamExists)('getSystemControlComplianceSummary', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-control-compliance-summary";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get systems security control details dashboard information.
         * @summary System Control Compliance Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSecurityControlDetails: function (orgId_1, excludeinherited_1, pageIndex_1, pageSize_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([orgId_1, excludeinherited_1, pageIndex_1, pageSize_1], args_1, true), void 0, function (orgId, excludeinherited, pageIndex, pageSize, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            (0, common_1.assertParamExists)('getSystemSecurityControlDetails', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-security-controls-details";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.SystemSecurityControlsDashboardsApiAxiosParamCreator = SystemSecurityControlsDashboardsApiAxiosParamCreator;
/**
 * SystemSecurityControlsDashboardsApi - functional programming interface
 * @export
 */
var SystemSecurityControlsDashboardsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.SystemSecurityControlsDashboardsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get systems assessment procedures details dashboard information.
         * @summary System Assessment Procedures Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemAssessmentProceduresDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemAssessmentProceduresDetails(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SystemSecurityControlsDashboardsApi.getSystemAssessmentProceduresDetails']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get systems control compliance summary dashboard information.
         * @summary System Control Compliance Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemControlComplianceSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemControlComplianceSummary(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SystemSecurityControlsDashboardsApi.getSystemControlComplianceSummary']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get systems security control details dashboard information.
         * @summary System Control Compliance Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSecurityControlDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemSecurityControlDetails(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SystemSecurityControlsDashboardsApi.getSystemSecurityControlDetails']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.SystemSecurityControlsDashboardsApiFp = SystemSecurityControlsDashboardsApiFp;
/**
 * SystemSecurityControlsDashboardsApi - factory interface
 * @export
 */
var SystemSecurityControlsDashboardsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.SystemSecurityControlsDashboardsApiFp)(configuration);
    return {
        /**
         * Get systems assessment procedures details dashboard information.
         * @summary System Assessment Procedures Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemAssessmentProceduresDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getSystemAssessmentProceduresDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get systems control compliance summary dashboard information.
         * @summary System Control Compliance Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemControlComplianceSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getSystemControlComplianceSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get systems security control details dashboard information.
         * @summary System Control Compliance Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSecurityControlDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getSystemSecurityControlDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.SystemSecurityControlsDashboardsApiFactory = SystemSecurityControlsDashboardsApiFactory;
/**
 * SystemSecurityControlsDashboardsApi - object-oriented interface
 * @export
 * @class SystemSecurityControlsDashboardsApi
 * @extends {BaseAPI}
 */
var SystemSecurityControlsDashboardsApi = /** @class */ (function (_super) {
    __extends(SystemSecurityControlsDashboardsApi, _super);
    function SystemSecurityControlsDashboardsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get systems assessment procedures details dashboard information.
     * @summary System Assessment Procedures Details
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSecurityControlsDashboardsApi
     */
    SystemSecurityControlsDashboardsApi.prototype.getSystemAssessmentProceduresDetails = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return (0, exports.SystemSecurityControlsDashboardsApiFp)(this.configuration).getSystemAssessmentProceduresDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get systems control compliance summary dashboard information.
     * @summary System Control Compliance Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSecurityControlsDashboardsApi
     */
    SystemSecurityControlsDashboardsApi.prototype.getSystemControlComplianceSummary = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return (0, exports.SystemSecurityControlsDashboardsApiFp)(this.configuration).getSystemControlComplianceSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get systems security control details dashboard information.
     * @summary System Control Compliance Details
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSecurityControlsDashboardsApi
     */
    SystemSecurityControlsDashboardsApi.prototype.getSystemSecurityControlDetails = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return (0, exports.SystemSecurityControlsDashboardsApiFp)(this.configuration).getSystemSecurityControlDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SystemSecurityControlsDashboardsApi;
}(base_1.BaseAPI));
exports.SystemSecurityControlsDashboardsApi = SystemSecurityControlsDashboardsApi;
/**
 * SystemSensorHardwareDashboardsApi - axios parameter creator
 * @export
 */
var SystemSensorHardwareDashboardsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get system sensor hardware details dashboard information.
         * @summary System Sensor Hardware Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSensorHardwareDetails: function (orgId_1, excludeinherited_1, pageIndex_1, pageSize_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([orgId_1, excludeinherited_1, pageIndex_1, pageSize_1], args_1, true), void 0, function (orgId, excludeinherited, pageIndex, pageSize, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            (0, common_1.assertParamExists)('getSystemSensorHardwareDetails', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-sensor-hardware-details";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get system sensor hardware summary dashboard information.
         * @summary System Sensor Hardware Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSensorHardwareSummary: function (orgId_1, excludeinherited_1, pageIndex_1, pageSize_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([orgId_1, excludeinherited_1, pageIndex_1, pageSize_1], args_1, true), void 0, function (orgId, excludeinherited, pageIndex, pageSize, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            (0, common_1.assertParamExists)('getSystemSensorHardwareSummary', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-sensor-hardware-summary";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.SystemSensorHardwareDashboardsApiAxiosParamCreator = SystemSensorHardwareDashboardsApiAxiosParamCreator;
/**
 * SystemSensorHardwareDashboardsApi - functional programming interface
 * @export
 */
var SystemSensorHardwareDashboardsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.SystemSensorHardwareDashboardsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get system sensor hardware details dashboard information.
         * @summary System Sensor Hardware Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSensorHardwareDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemSensorHardwareDetails(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SystemSensorHardwareDashboardsApi.getSystemSensorHardwareDetails']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get system sensor hardware summary dashboard information.
         * @summary System Sensor Hardware Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSensorHardwareSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemSensorHardwareSummary(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SystemSensorHardwareDashboardsApi.getSystemSensorHardwareSummary']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.SystemSensorHardwareDashboardsApiFp = SystemSensorHardwareDashboardsApiFp;
/**
 * SystemSensorHardwareDashboardsApi - factory interface
 * @export
 */
var SystemSensorHardwareDashboardsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.SystemSensorHardwareDashboardsApiFp)(configuration);
    return {
        /**
         * Get system sensor hardware details dashboard information.
         * @summary System Sensor Hardware Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSensorHardwareDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getSystemSensorHardwareDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get system sensor hardware summary dashboard information.
         * @summary System Sensor Hardware Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSensorHardwareSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getSystemSensorHardwareSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.SystemSensorHardwareDashboardsApiFactory = SystemSensorHardwareDashboardsApiFactory;
/**
 * SystemSensorHardwareDashboardsApi - object-oriented interface
 * @export
 * @class SystemSensorHardwareDashboardsApi
 * @extends {BaseAPI}
 */
var SystemSensorHardwareDashboardsApi = /** @class */ (function (_super) {
    __extends(SystemSensorHardwareDashboardsApi, _super);
    function SystemSensorHardwareDashboardsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get system sensor hardware details dashboard information.
     * @summary System Sensor Hardware Details
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSensorHardwareDashboardsApi
     */
    SystemSensorHardwareDashboardsApi.prototype.getSystemSensorHardwareDetails = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return (0, exports.SystemSensorHardwareDashboardsApiFp)(this.configuration).getSystemSensorHardwareDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get system sensor hardware summary dashboard information.
     * @summary System Sensor Hardware Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSensorHardwareDashboardsApi
     */
    SystemSensorHardwareDashboardsApi.prototype.getSystemSensorHardwareSummary = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return (0, exports.SystemSensorHardwareDashboardsApiFp)(this.configuration).getSystemSensorHardwareSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SystemSensorHardwareDashboardsApi;
}(base_1.BaseAPI));
exports.SystemSensorHardwareDashboardsApi = SystemSensorHardwareDashboardsApi;
/**
 * SystemSensorSoftwareDashboardsApi - axios parameter creator
 * @export
 */
var SystemSensorSoftwareDashboardsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get system sensor hardsoftwareware count dashboard information.
         * @summary System Sensor Software Counts
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSensorSoftwareCounts: function (orgId_1, excludeinherited_1, pageIndex_1, pageSize_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([orgId_1, excludeinherited_1, pageIndex_1, pageSize_1], args_1, true), void 0, function (orgId, excludeinherited, pageIndex, pageSize, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            (0, common_1.assertParamExists)('getSystemSensorSoftwareCounts', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-sensor-software-counts";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get system sensor hardsoftwareware details dashboard information.
         * @summary System Sensor Software Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSensorSoftwareDetails: function (orgId_1, excludeinherited_1, pageIndex_1, pageSize_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([orgId_1, excludeinherited_1, pageIndex_1, pageSize_1], args_1, true), void 0, function (orgId, excludeinherited, pageIndex, pageSize, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            (0, common_1.assertParamExists)('getSystemSensorSoftwareDetails', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-sensor-software-details";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get system sensor software summary dashboard information.
         * @summary System Sensor Software Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSensorSoftwareSummary: function (orgId_1, excludeinherited_1, pageIndex_1, pageSize_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([orgId_1, excludeinherited_1, pageIndex_1, pageSize_1], args_1, true), void 0, function (orgId, excludeinherited, pageIndex, pageSize, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            (0, common_1.assertParamExists)('getSystemSensorSoftwareSummary', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-sensor-software-summary";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.SystemSensorSoftwareDashboardsApiAxiosParamCreator = SystemSensorSoftwareDashboardsApiAxiosParamCreator;
/**
 * SystemSensorSoftwareDashboardsApi - functional programming interface
 * @export
 */
var SystemSensorSoftwareDashboardsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.SystemSensorSoftwareDashboardsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get system sensor hardsoftwareware count dashboard information.
         * @summary System Sensor Software Counts
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSensorSoftwareCounts: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemSensorSoftwareCounts(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SystemSensorSoftwareDashboardsApi.getSystemSensorSoftwareCounts']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get system sensor hardsoftwareware details dashboard information.
         * @summary System Sensor Software Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSensorSoftwareDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemSensorSoftwareDetails(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SystemSensorSoftwareDashboardsApi.getSystemSensorSoftwareDetails']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get system sensor software summary dashboard information.
         * @summary System Sensor Software Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSensorSoftwareSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemSensorSoftwareSummary(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SystemSensorSoftwareDashboardsApi.getSystemSensorSoftwareSummary']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.SystemSensorSoftwareDashboardsApiFp = SystemSensorSoftwareDashboardsApiFp;
/**
 * SystemSensorSoftwareDashboardsApi - factory interface
 * @export
 */
var SystemSensorSoftwareDashboardsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.SystemSensorSoftwareDashboardsApiFp)(configuration);
    return {
        /**
         * Get system sensor hardsoftwareware count dashboard information.
         * @summary System Sensor Software Counts
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSensorSoftwareCounts: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getSystemSensorSoftwareCounts(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get system sensor hardsoftwareware details dashboard information.
         * @summary System Sensor Software Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSensorSoftwareDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getSystemSensorSoftwareDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get system sensor software summary dashboard information.
         * @summary System Sensor Software Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSensorSoftwareSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getSystemSensorSoftwareSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.SystemSensorSoftwareDashboardsApiFactory = SystemSensorSoftwareDashboardsApiFactory;
/**
 * SystemSensorSoftwareDashboardsApi - object-oriented interface
 * @export
 * @class SystemSensorSoftwareDashboardsApi
 * @extends {BaseAPI}
 */
var SystemSensorSoftwareDashboardsApi = /** @class */ (function (_super) {
    __extends(SystemSensorSoftwareDashboardsApi, _super);
    function SystemSensorSoftwareDashboardsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get system sensor hardsoftwareware count dashboard information.
     * @summary System Sensor Software Counts
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSensorSoftwareDashboardsApi
     */
    SystemSensorSoftwareDashboardsApi.prototype.getSystemSensorSoftwareCounts = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return (0, exports.SystemSensorSoftwareDashboardsApiFp)(this.configuration).getSystemSensorSoftwareCounts(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get system sensor hardsoftwareware details dashboard information.
     * @summary System Sensor Software Details
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSensorSoftwareDashboardsApi
     */
    SystemSensorSoftwareDashboardsApi.prototype.getSystemSensorSoftwareDetails = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return (0, exports.SystemSensorSoftwareDashboardsApiFp)(this.configuration).getSystemSensorSoftwareDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get system sensor software summary dashboard information.
     * @summary System Sensor Software Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSensorSoftwareDashboardsApi
     */
    SystemSensorSoftwareDashboardsApi.prototype.getSystemSensorSoftwareSummary = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return (0, exports.SystemSensorSoftwareDashboardsApiFp)(this.configuration).getSystemSensorSoftwareSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SystemSensorSoftwareDashboardsApi;
}(base_1.BaseAPI));
exports.SystemSensorSoftwareDashboardsApi = SystemSensorSoftwareDashboardsApi;
/**
 * SystemSoftwareDashboardsApi - axios parameter creator
 * @export
 */
var SystemSoftwareDashboardsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get system software details dashboard information.
         * @summary System Software Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSoftwareDetails: function (orgId_1, excludeinherited_1, pageIndex_1, pageSize_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([orgId_1, excludeinherited_1, pageIndex_1, pageSize_1], args_1, true), void 0, function (orgId, excludeinherited, pageIndex, pageSize, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            (0, common_1.assertParamExists)('getSystemSoftwareDetails', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-software-details";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get system software summary dashboard information.
         * @summary System Software Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSoftwareSummary: function (orgId_1, excludeinherited_1, pageIndex_1, pageSize_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([orgId_1, excludeinherited_1, pageIndex_1, pageSize_1], args_1, true), void 0, function (orgId, excludeinherited, pageIndex, pageSize, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            (0, common_1.assertParamExists)('getSystemSoftwareSummary', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-software-summary";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.SystemSoftwareDashboardsApiAxiosParamCreator = SystemSoftwareDashboardsApiAxiosParamCreator;
/**
 * SystemSoftwareDashboardsApi - functional programming interface
 * @export
 */
var SystemSoftwareDashboardsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.SystemSoftwareDashboardsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get system software details dashboard information.
         * @summary System Software Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSoftwareDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemSoftwareDetails(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SystemSoftwareDashboardsApi.getSystemSoftwareDetails']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get system software summary dashboard information.
         * @summary System Software Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSoftwareSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemSoftwareSummary(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SystemSoftwareDashboardsApi.getSystemSoftwareSummary']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.SystemSoftwareDashboardsApiFp = SystemSoftwareDashboardsApiFp;
/**
 * SystemSoftwareDashboardsApi - factory interface
 * @export
 */
var SystemSoftwareDashboardsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.SystemSoftwareDashboardsApiFp)(configuration);
    return {
        /**
         * Get system software details dashboard information.
         * @summary System Software Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSoftwareDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getSystemSoftwareDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get system software summary dashboard information.
         * @summary System Software Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSoftwareSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getSystemSoftwareSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.SystemSoftwareDashboardsApiFactory = SystemSoftwareDashboardsApiFactory;
/**
 * SystemSoftwareDashboardsApi - object-oriented interface
 * @export
 * @class SystemSoftwareDashboardsApi
 * @extends {BaseAPI}
 */
var SystemSoftwareDashboardsApi = /** @class */ (function (_super) {
    __extends(SystemSoftwareDashboardsApi, _super);
    function SystemSoftwareDashboardsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get system software details dashboard information.
     * @summary System Software Details
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSoftwareDashboardsApi
     */
    SystemSoftwareDashboardsApi.prototype.getSystemSoftwareDetails = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return (0, exports.SystemSoftwareDashboardsApiFp)(this.configuration).getSystemSoftwareDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get system software summary dashboard information.
     * @summary System Software Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemSoftwareDashboardsApi
     */
    SystemSoftwareDashboardsApi.prototype.getSystemSoftwareSummary = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return (0, exports.SystemSoftwareDashboardsApiFp)(this.configuration).getSystemSoftwareSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SystemSoftwareDashboardsApi;
}(base_1.BaseAPI));
exports.SystemSoftwareDashboardsApi = SystemSoftwareDashboardsApi;
/**
 * SystemStatusDashboardApi - axios parameter creator
 * @export
 */
var SystemStatusDashboardApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get systems status detail dashboard information.
         * @summary System Status Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemStatusDetails: function (orgId_1, excludeinherited_1, pageIndex_1, pageSize_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([orgId_1, excludeinherited_1, pageIndex_1, pageSize_1], args_1, true), void 0, function (orgId, excludeinherited, pageIndex, pageSize, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            (0, common_1.assertParamExists)('getSystemStatusDetails', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-status-details";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.SystemStatusDashboardApiAxiosParamCreator = SystemStatusDashboardApiAxiosParamCreator;
/**
 * SystemStatusDashboardApi - functional programming interface
 * @export
 */
var SystemStatusDashboardApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.SystemStatusDashboardApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get systems status detail dashboard information.
         * @summary System Status Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemStatusDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemStatusDetails(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SystemStatusDashboardApi.getSystemStatusDetails']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.SystemStatusDashboardApiFp = SystemStatusDashboardApiFp;
/**
 * SystemStatusDashboardApi - factory interface
 * @export
 */
var SystemStatusDashboardApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.SystemStatusDashboardApiFp)(configuration);
    return {
        /**
         * Get systems status detail dashboard information.
         * @summary System Status Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemStatusDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getSystemStatusDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.SystemStatusDashboardApiFactory = SystemStatusDashboardApiFactory;
/**
 * SystemStatusDashboardApi - object-oriented interface
 * @export
 * @class SystemStatusDashboardApi
 * @extends {BaseAPI}
 */
var SystemStatusDashboardApi = /** @class */ (function (_super) {
    __extends(SystemStatusDashboardApi, _super);
    function SystemStatusDashboardApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get systems status detail dashboard information.
     * @summary System Status Details
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemStatusDashboardApi
     */
    SystemStatusDashboardApi.prototype.getSystemStatusDetails = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return (0, exports.SystemStatusDashboardApiFp)(this.configuration).getSystemStatusDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SystemStatusDashboardApi;
}(base_1.BaseAPI));
exports.SystemStatusDashboardApi = SystemStatusDashboardApi;
/**
 * SystemTermsConditionsDashboardsApi - axios parameter creator
 * @export
 */
var SystemTermsConditionsDashboardsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get systems terms conditions details dashboard information.
         * @summary System Terms Conditions Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemTermsConditionsDetails: function (orgId_1, excludeinherited_1, pageIndex_1, pageSize_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([orgId_1, excludeinherited_1, pageIndex_1, pageSize_1], args_1, true), void 0, function (orgId, excludeinherited, pageIndex, pageSize, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            (0, common_1.assertParamExists)('getSystemTermsConditionsDetails', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-terms-conditions-details";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get systems terms conditions summary dashboard information.
         * @summary System Terms Conditions Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemTermsConditionsSummary: function (orgId_1, excludeinherited_1, pageIndex_1, pageSize_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([orgId_1, excludeinherited_1, pageIndex_1, pageSize_1], args_1, true), void 0, function (orgId, excludeinherited, pageIndex, pageSize, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            (0, common_1.assertParamExists)('getSystemTermsConditionsSummary', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-terms-conditions-summary";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.SystemTermsConditionsDashboardsApiAxiosParamCreator = SystemTermsConditionsDashboardsApiAxiosParamCreator;
/**
 * SystemTermsConditionsDashboardsApi - functional programming interface
 * @export
 */
var SystemTermsConditionsDashboardsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.SystemTermsConditionsDashboardsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get systems terms conditions details dashboard information.
         * @summary System Terms Conditions Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemTermsConditionsDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemTermsConditionsDetails(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SystemTermsConditionsDashboardsApi.getSystemTermsConditionsDetails']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get systems terms conditions summary dashboard information.
         * @summary System Terms Conditions Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemTermsConditionsSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemTermsConditionsSummary(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SystemTermsConditionsDashboardsApi.getSystemTermsConditionsSummary']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.SystemTermsConditionsDashboardsApiFp = SystemTermsConditionsDashboardsApiFp;
/**
 * SystemTermsConditionsDashboardsApi - factory interface
 * @export
 */
var SystemTermsConditionsDashboardsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.SystemTermsConditionsDashboardsApiFp)(configuration);
    return {
        /**
         * Get systems terms conditions details dashboard information.
         * @summary System Terms Conditions Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemTermsConditionsDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getSystemTermsConditionsDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get systems terms conditions summary dashboard information.
         * @summary System Terms Conditions Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemTermsConditionsSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getSystemTermsConditionsSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.SystemTermsConditionsDashboardsApiFactory = SystemTermsConditionsDashboardsApiFactory;
/**
 * SystemTermsConditionsDashboardsApi - object-oriented interface
 * @export
 * @class SystemTermsConditionsDashboardsApi
 * @extends {BaseAPI}
 */
var SystemTermsConditionsDashboardsApi = /** @class */ (function (_super) {
    __extends(SystemTermsConditionsDashboardsApi, _super);
    function SystemTermsConditionsDashboardsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get systems terms conditions details dashboard information.
     * @summary System Terms Conditions Details
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemTermsConditionsDashboardsApi
     */
    SystemTermsConditionsDashboardsApi.prototype.getSystemTermsConditionsDetails = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return (0, exports.SystemTermsConditionsDashboardsApiFp)(this.configuration).getSystemTermsConditionsDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get systems terms conditions summary dashboard information.
     * @summary System Terms Conditions Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemTermsConditionsDashboardsApi
     */
    SystemTermsConditionsDashboardsApi.prototype.getSystemTermsConditionsSummary = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return (0, exports.SystemTermsConditionsDashboardsApiFp)(this.configuration).getSystemTermsConditionsSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SystemTermsConditionsDashboardsApi;
}(base_1.BaseAPI));
exports.SystemTermsConditionsDashboardsApi = SystemTermsConditionsDashboardsApi;
/**
 * SystemVulnerabilityDashboardApi - axios parameter creator
 * @export
 */
var SystemVulnerabilityDashboardApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get system vulnerability summary dashboard information.
         * @summary System Vulnerability Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemVulnerabilitySummary: function (orgId_1, excludeinherited_1, pageIndex_1, pageSize_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([orgId_1, excludeinherited_1, pageIndex_1, pageSize_1], args_1, true), void 0, function (orgId, excludeinherited, pageIndex, pageSize, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            (0, common_1.assertParamExists)('getSystemVulnerabilitySummary', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-vulnerability-summary";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.SystemVulnerabilityDashboardApiAxiosParamCreator = SystemVulnerabilityDashboardApiAxiosParamCreator;
/**
 * SystemVulnerabilityDashboardApi - functional programming interface
 * @export
 */
var SystemVulnerabilityDashboardApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.SystemVulnerabilityDashboardApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get system vulnerability summary dashboard information.
         * @summary System Vulnerability Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemVulnerabilitySummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemVulnerabilitySummary(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SystemVulnerabilityDashboardApi.getSystemVulnerabilitySummary']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.SystemVulnerabilityDashboardApiFp = SystemVulnerabilityDashboardApiFp;
/**
 * SystemVulnerabilityDashboardApi - factory interface
 * @export
 */
var SystemVulnerabilityDashboardApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.SystemVulnerabilityDashboardApiFp)(configuration);
    return {
        /**
         * Get system vulnerability summary dashboard information.
         * @summary System Vulnerability Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemVulnerabilitySummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getSystemVulnerabilitySummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.SystemVulnerabilityDashboardApiFactory = SystemVulnerabilityDashboardApiFactory;
/**
 * SystemVulnerabilityDashboardApi - object-oriented interface
 * @export
 * @class SystemVulnerabilityDashboardApi
 * @extends {BaseAPI}
 */
var SystemVulnerabilityDashboardApi = /** @class */ (function (_super) {
    __extends(SystemVulnerabilityDashboardApi, _super);
    function SystemVulnerabilityDashboardApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get system vulnerability summary dashboard information.
     * @summary System Vulnerability Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemVulnerabilityDashboardApi
     */
    SystemVulnerabilityDashboardApi.prototype.getSystemVulnerabilitySummary = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return (0, exports.SystemVulnerabilityDashboardApiFp)(this.configuration).getSystemVulnerabilitySummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SystemVulnerabilityDashboardApi;
}(base_1.BaseAPI));
exports.SystemVulnerabilityDashboardApi = SystemVulnerabilityDashboardApi;
/**
 * SystemWorkflowsDashboardsApi - axios parameter creator
 * @export
 */
var SystemWorkflowsDashboardsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get systems workflow history details dashboard information.
         * @summary System Workflows History Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemWorkflowsHistoryDetails: function (orgId_1, excludeinherited_1, pageIndex_1, pageSize_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([orgId_1, excludeinherited_1, pageIndex_1, pageSize_1], args_1, true), void 0, function (orgId, excludeinherited, pageIndex, pageSize, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            (0, common_1.assertParamExists)('getSystemWorkflowsHistoryDetails', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-workflows-history-details";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get systems workflow history stage details dashboard information.
         * @summary System Workflows History Stage Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemWorkflowsHistoryStageDetails: function (orgId_1, excludeinherited_1, pageIndex_1, pageSize_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([orgId_1, excludeinherited_1, pageIndex_1, pageSize_1], args_1, true), void 0, function (orgId, excludeinherited, pageIndex, pageSize, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            (0, common_1.assertParamExists)('getSystemWorkflowsHistoryStageDetails', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-workflows-history-stage-details";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get systems workflow history summary dashboard information.
         * @summary System Workflows History Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemWorkflowsHistorySummary: function (orgId_1, excludeinherited_1, pageIndex_1, pageSize_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([orgId_1, excludeinherited_1, pageIndex_1, pageSize_1], args_1, true), void 0, function (orgId, excludeinherited, pageIndex, pageSize, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            (0, common_1.assertParamExists)('getSystemWorkflowsHistorySummary', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-workflows-history-summary";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.SystemWorkflowsDashboardsApiAxiosParamCreator = SystemWorkflowsDashboardsApiAxiosParamCreator;
/**
 * SystemWorkflowsDashboardsApi - functional programming interface
 * @export
 */
var SystemWorkflowsDashboardsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.SystemWorkflowsDashboardsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get systems workflow history details dashboard information.
         * @summary System Workflows History Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemWorkflowsHistoryDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemWorkflowsHistoryDetails(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SystemWorkflowsDashboardsApi.getSystemWorkflowsHistoryDetails']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get systems workflow history stage details dashboard information.
         * @summary System Workflows History Stage Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemWorkflowsHistoryStageDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemWorkflowsHistoryStageDetails(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SystemWorkflowsDashboardsApi.getSystemWorkflowsHistoryStageDetails']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get systems workflow history summary dashboard information.
         * @summary System Workflows History Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemWorkflowsHistorySummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemWorkflowsHistorySummary(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SystemWorkflowsDashboardsApi.getSystemWorkflowsHistorySummary']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.SystemWorkflowsDashboardsApiFp = SystemWorkflowsDashboardsApiFp;
/**
 * SystemWorkflowsDashboardsApi - factory interface
 * @export
 */
var SystemWorkflowsDashboardsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.SystemWorkflowsDashboardsApiFp)(configuration);
    return {
        /**
         * Get systems workflow history details dashboard information.
         * @summary System Workflows History Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemWorkflowsHistoryDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getSystemWorkflowsHistoryDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get systems workflow history stage details dashboard information.
         * @summary System Workflows History Stage Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemWorkflowsHistoryStageDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getSystemWorkflowsHistoryStageDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get systems workflow history summary dashboard information.
         * @summary System Workflows History Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemWorkflowsHistorySummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getSystemWorkflowsHistorySummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.SystemWorkflowsDashboardsApiFactory = SystemWorkflowsDashboardsApiFactory;
/**
 * SystemWorkflowsDashboardsApi - object-oriented interface
 * @export
 * @class SystemWorkflowsDashboardsApi
 * @extends {BaseAPI}
 */
var SystemWorkflowsDashboardsApi = /** @class */ (function (_super) {
    __extends(SystemWorkflowsDashboardsApi, _super);
    function SystemWorkflowsDashboardsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get systems workflow history details dashboard information.
     * @summary System Workflows History Details
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemWorkflowsDashboardsApi
     */
    SystemWorkflowsDashboardsApi.prototype.getSystemWorkflowsHistoryDetails = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return (0, exports.SystemWorkflowsDashboardsApiFp)(this.configuration).getSystemWorkflowsHistoryDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get systems workflow history stage details dashboard information.
     * @summary System Workflows History Stage Details
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemWorkflowsDashboardsApi
     */
    SystemWorkflowsDashboardsApi.prototype.getSystemWorkflowsHistoryStageDetails = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return (0, exports.SystemWorkflowsDashboardsApiFp)(this.configuration).getSystemWorkflowsHistoryStageDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get systems workflow history summary dashboard information.
     * @summary System Workflows History Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemWorkflowsDashboardsApi
     */
    SystemWorkflowsDashboardsApi.prototype.getSystemWorkflowsHistorySummary = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return (0, exports.SystemWorkflowsDashboardsApiFp)(this.configuration).getSystemWorkflowsHistorySummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SystemWorkflowsDashboardsApi;
}(base_1.BaseAPI));
exports.SystemWorkflowsDashboardsApi = SystemWorkflowsDashboardsApi;
/**
 * SystemsApi - axios parameter creator
 * @export
 */
var SystemsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Returns the system matching provided parameters
         * @summary Get system information for a specific system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {GetSystemPolicyEnum} [policy] **System Policy**: Filter query by system policy. If no value is specified, the default returns RMF policy information for dual-policy systems.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystem: function (systemId_1, policy_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([systemId_1, policy_1], args_1, true), void 0, function (systemId, policy, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            (0, common_1.assertParamExists)('getSystem', 'systemId', systemId);
                            localVarPath = "/api/systems/{systemId}"
                                .replace("{".concat("systemId", "}"), encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (policy !== undefined) {
                                localVarQueryParameter['policy'] = policy;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Returns all system(s) that match the query parameters
         * @summary Get system information
         * @param {string} [coamsId] **COAMS ID**: Filter query by Cyber Operational Attributes Management System (COAMS).
         * @param {string} [ditprId] **DITPR ID**: Filter query by DoD Information Technology (IT) Portfolio Repository (DITPR).
         * @param {boolean} [includeDecommissioned] **Include Decommissioned Systems**: Indicates if decommissioned systems are retrieved. If no value is specified, the default returns true to include decommissioned systems.
         * @param {boolean} [includeDitprMetrics] **Include DITPR**: Indicates if DITPR metrics are retrieved. This query string parameter cannot be used in conjunction with the following parameters:   - ditprId   - coamsId  If no value is specified, the default returns false to not include DITPR Metrics.
         * @param {GetSystemsPolicyEnum} [policy] **System Policy**: Filter query by system policy. If no value is specified, the default returns RMF policy information for dual-policy systems.
         * @param {string} [registrationType] **Registration Type**: Filter record by selected registration type (single value or comma delimited values).  **Valid Options Are:** assessAndAuthorize, assessOnly, guest, regular, functional, cloudServiceProvider, commonControlProvider, authorizationToUse, reciprocityAcceptanc
         * @param {boolean} [reportsForScorecard] **DoD Cyber Hygiene Scorecard**: Used to filter results to only return systems that report to the DoD Cyber Hygiene Scorecard.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystems: function (coamsId_1, ditprId_1, includeDecommissioned_1, includeDitprMetrics_1, policy_1, registrationType_1, reportsForScorecard_1) {
            var args_1 = [];
            for (var _i = 7; _i < arguments.length; _i++) {
                args_1[_i - 7] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([coamsId_1, ditprId_1, includeDecommissioned_1, includeDitprMetrics_1, policy_1, registrationType_1, reportsForScorecard_1], args_1, true), void 0, function (coamsId, ditprId, includeDecommissioned, includeDitprMetrics, policy, registrationType, reportsForScorecard, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/systems";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (coamsId !== undefined) {
                                localVarQueryParameter['coamsId'] = coamsId;
                            }
                            if (ditprId !== undefined) {
                                localVarQueryParameter['ditprId'] = ditprId;
                            }
                            if (includeDecommissioned !== undefined) {
                                localVarQueryParameter['includeDecommissioned'] = includeDecommissioned;
                            }
                            if (includeDitprMetrics !== undefined) {
                                localVarQueryParameter['includeDitprMetrics'] = includeDitprMetrics;
                            }
                            if (policy !== undefined) {
                                localVarQueryParameter['policy'] = policy;
                            }
                            if (registrationType !== undefined) {
                                localVarQueryParameter['registrationType'] = registrationType;
                            }
                            if (reportsForScorecard !== undefined) {
                                localVarQueryParameter['reportsForScorecard'] = reportsForScorecard;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.SystemsApiAxiosParamCreator = SystemsApiAxiosParamCreator;
/**
 * SystemsApi - functional programming interface
 * @export
 */
var SystemsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.SystemsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Returns the system matching provided parameters
         * @summary Get system information for a specific system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {GetSystemPolicyEnum} [policy] **System Policy**: Filter query by system policy. If no value is specified, the default returns RMF policy information for dual-policy systems.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystem: function (systemId, policy, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystem(systemId, policy, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SystemsApi.getSystem']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Returns all system(s) that match the query parameters
         * @summary Get system information
         * @param {string} [coamsId] **COAMS ID**: Filter query by Cyber Operational Attributes Management System (COAMS).
         * @param {string} [ditprId] **DITPR ID**: Filter query by DoD Information Technology (IT) Portfolio Repository (DITPR).
         * @param {boolean} [includeDecommissioned] **Include Decommissioned Systems**: Indicates if decommissioned systems are retrieved. If no value is specified, the default returns true to include decommissioned systems.
         * @param {boolean} [includeDitprMetrics] **Include DITPR**: Indicates if DITPR metrics are retrieved. This query string parameter cannot be used in conjunction with the following parameters:   - ditprId   - coamsId  If no value is specified, the default returns false to not include DITPR Metrics.
         * @param {GetSystemsPolicyEnum} [policy] **System Policy**: Filter query by system policy. If no value is specified, the default returns RMF policy information for dual-policy systems.
         * @param {string} [registrationType] **Registration Type**: Filter record by selected registration type (single value or comma delimited values).  **Valid Options Are:** assessAndAuthorize, assessOnly, guest, regular, functional, cloudServiceProvider, commonControlProvider, authorizationToUse, reciprocityAcceptanc
         * @param {boolean} [reportsForScorecard] **DoD Cyber Hygiene Scorecard**: Used to filter results to only return systems that report to the DoD Cyber Hygiene Scorecard.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystems: function (coamsId, ditprId, includeDecommissioned, includeDitprMetrics, policy, registrationType, reportsForScorecard, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystems(coamsId, ditprId, includeDecommissioned, includeDitprMetrics, policy, registrationType, reportsForScorecard, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SystemsApi.getSystems']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.SystemsApiFp = SystemsApiFp;
/**
 * SystemsApi - factory interface
 * @export
 */
var SystemsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.SystemsApiFp)(configuration);
    return {
        /**
         * Returns the system matching provided parameters
         * @summary Get system information for a specific system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {GetSystemPolicyEnum} [policy] **System Policy**: Filter query by system policy. If no value is specified, the default returns RMF policy information for dual-policy systems.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystem: function (systemId, policy, options) {
            return localVarFp.getSystem(systemId, policy, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns all system(s) that match the query parameters
         * @summary Get system information
         * @param {string} [coamsId] **COAMS ID**: Filter query by Cyber Operational Attributes Management System (COAMS).
         * @param {string} [ditprId] **DITPR ID**: Filter query by DoD Information Technology (IT) Portfolio Repository (DITPR).
         * @param {boolean} [includeDecommissioned] **Include Decommissioned Systems**: Indicates if decommissioned systems are retrieved. If no value is specified, the default returns true to include decommissioned systems.
         * @param {boolean} [includeDitprMetrics] **Include DITPR**: Indicates if DITPR metrics are retrieved. This query string parameter cannot be used in conjunction with the following parameters:   - ditprId   - coamsId  If no value is specified, the default returns false to not include DITPR Metrics.
         * @param {GetSystemsPolicyEnum} [policy] **System Policy**: Filter query by system policy. If no value is specified, the default returns RMF policy information for dual-policy systems.
         * @param {string} [registrationType] **Registration Type**: Filter record by selected registration type (single value or comma delimited values).  **Valid Options Are:** assessAndAuthorize, assessOnly, guest, regular, functional, cloudServiceProvider, commonControlProvider, authorizationToUse, reciprocityAcceptanc
         * @param {boolean} [reportsForScorecard] **DoD Cyber Hygiene Scorecard**: Used to filter results to only return systems that report to the DoD Cyber Hygiene Scorecard.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystems: function (coamsId, ditprId, includeDecommissioned, includeDitprMetrics, policy, registrationType, reportsForScorecard, options) {
            return localVarFp.getSystems(coamsId, ditprId, includeDecommissioned, includeDitprMetrics, policy, registrationType, reportsForScorecard, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.SystemsApiFactory = SystemsApiFactory;
/**
 * SystemsApi - object-oriented interface
 * @export
 * @class SystemsApi
 * @extends {BaseAPI}
 */
var SystemsApi = /** @class */ (function (_super) {
    __extends(SystemsApi, _super);
    function SystemsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Returns the system matching provided parameters
     * @summary Get system information for a specific system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {GetSystemPolicyEnum} [policy] **System Policy**: Filter query by system policy. If no value is specified, the default returns RMF policy information for dual-policy systems.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemsApi
     */
    SystemsApi.prototype.getSystem = function (systemId, policy, options) {
        var _this = this;
        return (0, exports.SystemsApiFp)(this.configuration).getSystem(systemId, policy, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns all system(s) that match the query parameters
     * @summary Get system information
     * @param {string} [coamsId] **COAMS ID**: Filter query by Cyber Operational Attributes Management System (COAMS).
     * @param {string} [ditprId] **DITPR ID**: Filter query by DoD Information Technology (IT) Portfolio Repository (DITPR).
     * @param {boolean} [includeDecommissioned] **Include Decommissioned Systems**: Indicates if decommissioned systems are retrieved. If no value is specified, the default returns true to include decommissioned systems.
     * @param {boolean} [includeDitprMetrics] **Include DITPR**: Indicates if DITPR metrics are retrieved. This query string parameter cannot be used in conjunction with the following parameters:   - ditprId   - coamsId  If no value is specified, the default returns false to not include DITPR Metrics.
     * @param {GetSystemsPolicyEnum} [policy] **System Policy**: Filter query by system policy. If no value is specified, the default returns RMF policy information for dual-policy systems.
     * @param {string} [registrationType] **Registration Type**: Filter record by selected registration type (single value or comma delimited values).  **Valid Options Are:** assessAndAuthorize, assessOnly, guest, regular, functional, cloudServiceProvider, commonControlProvider, authorizationToUse, reciprocityAcceptanc
     * @param {boolean} [reportsForScorecard] **DoD Cyber Hygiene Scorecard**: Used to filter results to only return systems that report to the DoD Cyber Hygiene Scorecard.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemsApi
     */
    SystemsApi.prototype.getSystems = function (coamsId, ditprId, includeDecommissioned, includeDitprMetrics, policy, registrationType, reportsForScorecard, options) {
        var _this = this;
        return (0, exports.SystemsApiFp)(this.configuration).getSystems(coamsId, ditprId, includeDecommissioned, includeDitprMetrics, policy, registrationType, reportsForScorecard, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SystemsApi;
}(base_1.BaseAPI));
exports.SystemsApi = SystemsApi;
/**
 * @export
 */
exports.GetSystemPolicyEnum = {
    Diacap: 'diacap',
    Rmf: 'rmf',
    Reporting: 'reporting',
    UnknownDefaultOpenApi: '11184809'
};
/**
 * @export
 */
exports.GetSystemsPolicyEnum = {
    Diacap: 'diacap',
    Rmf: 'rmf',
    Reporting: 'reporting',
    UnknownDefaultOpenApi: '11184809'
};
/**
 * TestApi - axios parameter creator
 * @export
 */
var TestApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Tests the endpoint connection
         * @summary Test connection to the API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testConnection: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.TestApiAxiosParamCreator = TestApiAxiosParamCreator;
/**
 * TestApi - functional programming interface
 * @export
 */
var TestApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.TestApiAxiosParamCreator)(configuration);
    return {
        /**
         * Tests the endpoint connection
         * @summary Test connection to the API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testConnection: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.testConnection(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TestApi.testConnection']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.TestApiFp = TestApiFp;
/**
 * TestApi - factory interface
 * @export
 */
var TestApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.TestApiFp)(configuration);
    return {
        /**
         * Tests the endpoint connection
         * @summary Test connection to the API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testConnection: function (options) {
            return localVarFp.testConnection(options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.TestApiFactory = TestApiFactory;
/**
 * TestApi - object-oriented interface
 * @export
 * @class TestApi
 * @extends {BaseAPI}
 */
var TestApi = /** @class */ (function (_super) {
    __extends(TestApi, _super);
    function TestApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Tests the endpoint connection
     * @summary Test connection to the API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApi
     */
    TestApi.prototype.testConnection = function (options) {
        var _this = this;
        return (0, exports.TestApiFp)(this.configuration).testConnection(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return TestApi;
}(base_1.BaseAPI));
exports.TestApi = TestApi;
/**
 * TestResultsApi - axios parameter creator
 * @export
 */
var TestResultsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Adds test results for given `systemId`  **Request Body Required Fields** - `testedBy` - `testDate` - `description` - `complianceStatus` - `assessmentProcedure`
         * @summary Add one or many test results in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Example request body to add test results to a system (systemId)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTestResultsBySystemId: function (systemId_1, requestBody_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([systemId_1, requestBody_1], args_1, true), void 0, function (systemId, requestBody, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            (0, common_1.assertParamExists)('addTestResultsBySystemId', 'systemId', systemId);
                            // verify required parameter 'requestBody' is not null or undefined
                            (0, common_1.assertParamExists)('addTestResultsBySystemId', 'requestBody', requestBody);
                            localVarPath = "/api/systems/{systemId}/test-results"
                                .replace("{".concat("systemId", "}"), encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(requestBody, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Returns system test results information for matching parameters.<br>
         * @summary Get one or many test results in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} [controlAcronyms] **Control Acronym**: Filter query by given system acronym (single value or comma separated).
         * @param {string} [assessmentProcedures] **Assessment Procedure**: Filter query by given Security Control Assessment Procedure (single value or comma separated).
         * @param {string} [ccis] **CCI System**: Filter query by Control Correlation Identifiers (CCIs) (single value or comma separated).
         * @param {boolean} [latestOnly] **Latest Results Only**: Indicates that only the latest test resultes are retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemTestResults: function (systemId_1, controlAcronyms_1, assessmentProcedures_1, ccis_1, latestOnly_1) {
            var args_1 = [];
            for (var _i = 5; _i < arguments.length; _i++) {
                args_1[_i - 5] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([systemId_1, controlAcronyms_1, assessmentProcedures_1, ccis_1, latestOnly_1], args_1, true), void 0, function (systemId, controlAcronyms, assessmentProcedures, ccis, latestOnly, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            (0, common_1.assertParamExists)('getSystemTestResults', 'systemId', systemId);
                            localVarPath = "/api/systems/{systemId}/test-results"
                                .replace("{".concat("systemId", "}"), encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (controlAcronyms !== undefined) {
                                localVarQueryParameter['controlAcronyms'] = controlAcronyms;
                            }
                            if (assessmentProcedures !== undefined) {
                                localVarQueryParameter['assessmentProcedures'] = assessmentProcedures;
                            }
                            if (ccis !== undefined) {
                                localVarQueryParameter['ccis'] = ccis;
                            }
                            if (latestOnly !== undefined) {
                                localVarQueryParameter['latestOnly'] = latestOnly;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.TestResultsApiAxiosParamCreator = TestResultsApiAxiosParamCreator;
/**
 * TestResultsApi - functional programming interface
 * @export
 */
var TestResultsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.TestResultsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Adds test results for given `systemId`  **Request Body Required Fields** - `testedBy` - `testDate` - `description` - `complianceStatus` - `assessmentProcedure`
         * @summary Add one or many test results in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Example request body to add test results to a system (systemId)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTestResultsBySystemId: function (systemId, requestBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addTestResultsBySystemId(systemId, requestBody, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TestResultsApi.addTestResultsBySystemId']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Returns system test results information for matching parameters.<br>
         * @summary Get one or many test results in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} [controlAcronyms] **Control Acronym**: Filter query by given system acronym (single value or comma separated).
         * @param {string} [assessmentProcedures] **Assessment Procedure**: Filter query by given Security Control Assessment Procedure (single value or comma separated).
         * @param {string} [ccis] **CCI System**: Filter query by Control Correlation Identifiers (CCIs) (single value or comma separated).
         * @param {boolean} [latestOnly] **Latest Results Only**: Indicates that only the latest test resultes are retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemTestResults: function (systemId, controlAcronyms, assessmentProcedures, ccis, latestOnly, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemTestResults(systemId, controlAcronyms, assessmentProcedures, ccis, latestOnly, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['TestResultsApi.getSystemTestResults']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.TestResultsApiFp = TestResultsApiFp;
/**
 * TestResultsApi - factory interface
 * @export
 */
var TestResultsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.TestResultsApiFp)(configuration);
    return {
        /**
         * Adds test results for given `systemId`  **Request Body Required Fields** - `testedBy` - `testDate` - `description` - `complianceStatus` - `assessmentProcedure`
         * @summary Add one or many test results in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Example request body to add test results to a system (systemId)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTestResultsBySystemId: function (systemId, requestBody, options) {
            return localVarFp.addTestResultsBySystemId(systemId, requestBody, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns system test results information for matching parameters.<br>
         * @summary Get one or many test results in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} [controlAcronyms] **Control Acronym**: Filter query by given system acronym (single value or comma separated).
         * @param {string} [assessmentProcedures] **Assessment Procedure**: Filter query by given Security Control Assessment Procedure (single value or comma separated).
         * @param {string} [ccis] **CCI System**: Filter query by Control Correlation Identifiers (CCIs) (single value or comma separated).
         * @param {boolean} [latestOnly] **Latest Results Only**: Indicates that only the latest test resultes are retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemTestResults: function (systemId, controlAcronyms, assessmentProcedures, ccis, latestOnly, options) {
            return localVarFp.getSystemTestResults(systemId, controlAcronyms, assessmentProcedures, ccis, latestOnly, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.TestResultsApiFactory = TestResultsApiFactory;
/**
 * TestResultsApi - object-oriented interface
 * @export
 * @class TestResultsApi
 * @extends {BaseAPI}
 */
var TestResultsApi = /** @class */ (function (_super) {
    __extends(TestResultsApi, _super);
    function TestResultsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Adds test results for given `systemId`  **Request Body Required Fields** - `testedBy` - `testDate` - `description` - `complianceStatus` - `assessmentProcedure`
     * @summary Add one or many test results in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {Array<object>} requestBody Example request body to add test results to a system (systemId)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestResultsApi
     */
    TestResultsApi.prototype.addTestResultsBySystemId = function (systemId, requestBody, options) {
        var _this = this;
        return (0, exports.TestResultsApiFp)(this.configuration).addTestResultsBySystemId(systemId, requestBody, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns system test results information for matching parameters.<br>
     * @summary Get one or many test results in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {string} [controlAcronyms] **Control Acronym**: Filter query by given system acronym (single value or comma separated).
     * @param {string} [assessmentProcedures] **Assessment Procedure**: Filter query by given Security Control Assessment Procedure (single value or comma separated).
     * @param {string} [ccis] **CCI System**: Filter query by Control Correlation Identifiers (CCIs) (single value or comma separated).
     * @param {boolean} [latestOnly] **Latest Results Only**: Indicates that only the latest test resultes are retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestResultsApi
     */
    TestResultsApi.prototype.getSystemTestResults = function (systemId, controlAcronyms, assessmentProcedures, ccis, latestOnly, options) {
        var _this = this;
        return (0, exports.TestResultsApiFp)(this.configuration).getSystemTestResults(systemId, controlAcronyms, assessmentProcedures, ccis, latestOnly, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return TestResultsApi;
}(base_1.BaseAPI));
exports.TestResultsApi = TestResultsApi;
/**
 * UserSystemAssignmentsDashboardApi - axios parameter creator
 * @export
 */
var UserSystemAssignmentsDashboardApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get user system assignments details dashboard information.
         * @summary User System Assignments Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserSystemAssignmentsDetails: function (orgId_1, excludeinherited_1, pageIndex_1, pageSize_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([orgId_1, excludeinherited_1, pageIndex_1, pageSize_1], args_1, true), void 0, function (orgId, excludeinherited, pageIndex, pageSize, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            (0, common_1.assertParamExists)('getUserSystemAssignmentsDetails', 'orgId', orgId);
                            localVarPath = "/api/dashboards/user-system-assignments-details";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.UserSystemAssignmentsDashboardApiAxiosParamCreator = UserSystemAssignmentsDashboardApiAxiosParamCreator;
/**
 * UserSystemAssignmentsDashboardApi - functional programming interface
 * @export
 */
var UserSystemAssignmentsDashboardApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.UserSystemAssignmentsDashboardApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get user system assignments details dashboard information.
         * @summary User System Assignments Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserSystemAssignmentsDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getUserSystemAssignmentsDetails(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['UserSystemAssignmentsDashboardApi.getUserSystemAssignmentsDetails']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.UserSystemAssignmentsDashboardApiFp = UserSystemAssignmentsDashboardApiFp;
/**
 * UserSystemAssignmentsDashboardApi - factory interface
 * @export
 */
var UserSystemAssignmentsDashboardApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.UserSystemAssignmentsDashboardApiFp)(configuration);
    return {
        /**
         * Get user system assignments details dashboard information.
         * @summary User System Assignments Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserSystemAssignmentsDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getUserSystemAssignmentsDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.UserSystemAssignmentsDashboardApiFactory = UserSystemAssignmentsDashboardApiFactory;
/**
 * UserSystemAssignmentsDashboardApi - object-oriented interface
 * @export
 * @class UserSystemAssignmentsDashboardApi
 * @extends {BaseAPI}
 */
var UserSystemAssignmentsDashboardApi = /** @class */ (function (_super) {
    __extends(UserSystemAssignmentsDashboardApi, _super);
    function UserSystemAssignmentsDashboardApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get user system assignments details dashboard information.
     * @summary User System Assignments Details
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserSystemAssignmentsDashboardApi
     */
    UserSystemAssignmentsDashboardApi.prototype.getUserSystemAssignmentsDetails = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return (0, exports.UserSystemAssignmentsDashboardApiFp)(this.configuration).getUserSystemAssignmentsDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return UserSystemAssignmentsDashboardApi;
}(base_1.BaseAPI));
exports.UserSystemAssignmentsDashboardApi = UserSystemAssignmentsDashboardApi;
/**
 * VAOMBFISMADashboardApi - axios parameter creator
 * @export
 */
var VAOMBFISMADashboardApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get VA OMB-FISMA SAOP summary dashboard information.
         * @summary VA OMB FISMA SAOP Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaOmbFsmaSaopSummary: function (orgId_1, excludeinherited_1, pageIndex_1, pageSize_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([orgId_1, excludeinherited_1, pageIndex_1, pageSize_1], args_1, true), void 0, function (orgId, excludeinherited, pageIndex, pageSize, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            (0, common_1.assertParamExists)('getVaOmbFsmaSaopSummary', 'orgId', orgId);
                            localVarPath = "/api/dashboards/va-omb-fisma-saop-summary";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.VAOMBFISMADashboardApiAxiosParamCreator = VAOMBFISMADashboardApiAxiosParamCreator;
/**
 * VAOMBFISMADashboardApi - functional programming interface
 * @export
 */
var VAOMBFISMADashboardApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.VAOMBFISMADashboardApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get VA OMB-FISMA SAOP summary dashboard information.
         * @summary VA OMB FISMA SAOP Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaOmbFsmaSaopSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getVaOmbFsmaSaopSummary(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['VAOMBFISMADashboardApi.getVaOmbFsmaSaopSummary']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.VAOMBFISMADashboardApiFp = VAOMBFISMADashboardApiFp;
/**
 * VAOMBFISMADashboardApi - factory interface
 * @export
 */
var VAOMBFISMADashboardApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.VAOMBFISMADashboardApiFp)(configuration);
    return {
        /**
         * Get VA OMB-FISMA SAOP summary dashboard information.
         * @summary VA OMB FISMA SAOP Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaOmbFsmaSaopSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getVaOmbFsmaSaopSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.VAOMBFISMADashboardApiFactory = VAOMBFISMADashboardApiFactory;
/**
 * VAOMBFISMADashboardApi - object-oriented interface
 * @export
 * @class VAOMBFISMADashboardApi
 * @extends {BaseAPI}
 */
var VAOMBFISMADashboardApi = /** @class */ (function (_super) {
    __extends(VAOMBFISMADashboardApi, _super);
    function VAOMBFISMADashboardApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get VA OMB-FISMA SAOP summary dashboard information.
     * @summary VA OMB FISMA SAOP Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VAOMBFISMADashboardApi
     */
    VAOMBFISMADashboardApi.prototype.getVaOmbFsmaSaopSummary = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return (0, exports.VAOMBFISMADashboardApiFp)(this.configuration).getVaOmbFsmaSaopSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return VAOMBFISMADashboardApi;
}(base_1.BaseAPI));
exports.VAOMBFISMADashboardApi = VAOMBFISMADashboardApi;
/**
 * VASystemDashboardsApi - axios parameter creator
 * @export
 */
var VASystemDashboardsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get VA system A2.0 summary dashboard information.
         * @summary VA System A2.0 Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemA2Summary: function (orgId_1, excludeinherited_1, pageIndex_1, pageSize_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([orgId_1, excludeinherited_1, pageIndex_1, pageSize_1], args_1, true), void 0, function (orgId, excludeinherited, pageIndex, pageSize, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            (0, common_1.assertParamExists)('getVaSystemA2Summary', 'orgId', orgId);
                            localVarPath = "/api/dashboards/va-system-a2-summary";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get VA system A&A summary dashboard information.
         * @summary VA System A&A Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemAaSummary: function (orgId_1, excludeinherited_1, pageIndex_1, pageSize_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([orgId_1, excludeinherited_1, pageIndex_1, pageSize_1], args_1, true), void 0, function (orgId, excludeinherited, pageIndex, pageSize, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            (0, common_1.assertParamExists)('getVaSystemAaSummary', 'orgId', orgId);
                            localVarPath = "/api/dashboards/va-system-aa-summary";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get VA system FISMA inventory crypto summary dashboard information.
         * @summary VA System FISMA Inventory Crypto Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemFismaInvetoryCryptoSummary: function (orgId_1, excludeinherited_1, pageIndex_1, pageSize_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([orgId_1, excludeinherited_1, pageIndex_1, pageSize_1], args_1, true), void 0, function (orgId, excludeinherited, pageIndex, pageSize, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            (0, common_1.assertParamExists)('getVaSystemFismaInvetoryCryptoSummary', 'orgId', orgId);
                            localVarPath = "/api/dashboards/va-system-fisma-inventory-crypto-summary";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get VA system FISMA inventory summary dashboard information.
         * @summary VA System FISMA Inventory Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemFismaInvetorySummary: function (orgId_1, excludeinherited_1, pageIndex_1, pageSize_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([orgId_1, excludeinherited_1, pageIndex_1, pageSize_1], args_1, true), void 0, function (orgId, excludeinherited, pageIndex, pageSize, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            (0, common_1.assertParamExists)('getVaSystemFismaInvetorySummary', 'orgId', orgId);
                            localVarPath = "/api/dashboards/va-system-fisma-inventory-summary";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get VA system ICAMP Tableau POAM details dashboard information.
         * @summary VA System ICAMP Tableau POAM Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemIcampTableauPoamDetails: function (orgId_1, excludeinherited_1, pageIndex_1, pageSize_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([orgId_1, excludeinherited_1, pageIndex_1, pageSize_1], args_1, true), void 0, function (orgId, excludeinherited, pageIndex, pageSize, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            (0, common_1.assertParamExists)('getVaSystemIcampTableauPoamDetails', 'orgId', orgId);
                            localVarPath = "/api/dashboards/va-system-icamp-tableau-poam-details";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get VA system P.L. 109 reporting summary dashboard information.
         * @summary VA System P.L. 109 Reporting Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemPl109ReportingSummary: function (orgId_1, excludeinherited_1, pageIndex_1, pageSize_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([orgId_1, excludeinherited_1, pageIndex_1, pageSize_1], args_1, true), void 0, function (orgId, excludeinherited, pageIndex, pageSize, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            (0, common_1.assertParamExists)('getVaSystemPl109ReportingSummary', 'orgId', orgId);
                            localVarPath = "/api/dashboards/va-system-pl-109-reporting-summary";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get VA system threat architecture details dashboard information.
         * @summary VA System Threat Architecture Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemThreatArchitectureDetails: function (orgId_1, excludeinherited_1, pageIndex_1, pageSize_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([orgId_1, excludeinherited_1, pageIndex_1, pageSize_1], args_1, true), void 0, function (orgId, excludeinherited, pageIndex, pageSize, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            (0, common_1.assertParamExists)('getVaSystemThreatArchitectureDetails', 'orgId', orgId);
                            localVarPath = "/api/dashboards/va-system-threat-architecture-details";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get VA system threat risk summary dashboard information.
         * @summary VA System Threat Risks Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemThreatRiskSummary: function (orgId_1, excludeinherited_1, pageIndex_1, pageSize_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([orgId_1, excludeinherited_1, pageIndex_1, pageSize_1], args_1, true), void 0, function (orgId, excludeinherited, pageIndex, pageSize, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            (0, common_1.assertParamExists)('getVaSystemThreatRiskSummary', 'orgId', orgId);
                            localVarPath = "/api/dashboards/va-system-threat-risks-summary";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get VA system threat source details dashboard information.
         * @summary VA System Threat Sources Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemThreatSourceDetails: function (orgId_1, excludeinherited_1, pageIndex_1, pageSize_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([orgId_1, excludeinherited_1, pageIndex_1, pageSize_1], args_1, true), void 0, function (orgId, excludeinherited, pageIndex, pageSize, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            (0, common_1.assertParamExists)('getVaSystemThreatSourceDetails', 'orgId', orgId);
                            localVarPath = "/api/dashboards/va-system-threat-sources-details";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (excludeinherited !== undefined) {
                                localVarQueryParameter['excludeinherited'] = excludeinherited;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.VASystemDashboardsApiAxiosParamCreator = VASystemDashboardsApiAxiosParamCreator;
/**
 * VASystemDashboardsApi - functional programming interface
 * @export
 */
var VASystemDashboardsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.VASystemDashboardsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get VA system A2.0 summary dashboard information.
         * @summary VA System A2.0 Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemA2Summary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getVaSystemA2Summary(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['VASystemDashboardsApi.getVaSystemA2Summary']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get VA system A&A summary dashboard information.
         * @summary VA System A&A Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemAaSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getVaSystemAaSummary(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['VASystemDashboardsApi.getVaSystemAaSummary']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get VA system FISMA inventory crypto summary dashboard information.
         * @summary VA System FISMA Inventory Crypto Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemFismaInvetoryCryptoSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getVaSystemFismaInvetoryCryptoSummary(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['VASystemDashboardsApi.getVaSystemFismaInvetoryCryptoSummary']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get VA system FISMA inventory summary dashboard information.
         * @summary VA System FISMA Inventory Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemFismaInvetorySummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getVaSystemFismaInvetorySummary(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['VASystemDashboardsApi.getVaSystemFismaInvetorySummary']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get VA system ICAMP Tableau POAM details dashboard information.
         * @summary VA System ICAMP Tableau POAM Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemIcampTableauPoamDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getVaSystemIcampTableauPoamDetails(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['VASystemDashboardsApi.getVaSystemIcampTableauPoamDetails']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get VA system P.L. 109 reporting summary dashboard information.
         * @summary VA System P.L. 109 Reporting Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemPl109ReportingSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getVaSystemPl109ReportingSummary(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['VASystemDashboardsApi.getVaSystemPl109ReportingSummary']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get VA system threat architecture details dashboard information.
         * @summary VA System Threat Architecture Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemThreatArchitectureDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getVaSystemThreatArchitectureDetails(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['VASystemDashboardsApi.getVaSystemThreatArchitectureDetails']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get VA system threat risk summary dashboard information.
         * @summary VA System Threat Risks Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemThreatRiskSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getVaSystemThreatRiskSummary(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['VASystemDashboardsApi.getVaSystemThreatRiskSummary']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get VA system threat source details dashboard information.
         * @summary VA System Threat Sources Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemThreatSourceDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getVaSystemThreatSourceDetails(orgId, excludeinherited, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['VASystemDashboardsApi.getVaSystemThreatSourceDetails']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.VASystemDashboardsApiFp = VASystemDashboardsApiFp;
/**
 * VASystemDashboardsApi - factory interface
 * @export
 */
var VASystemDashboardsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.VASystemDashboardsApiFp)(configuration);
    return {
        /**
         * Get VA system A2.0 summary dashboard information.
         * @summary VA System A2.0 Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemA2Summary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getVaSystemA2Summary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get VA system A&A summary dashboard information.
         * @summary VA System A&A Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemAaSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getVaSystemAaSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get VA system FISMA inventory crypto summary dashboard information.
         * @summary VA System FISMA Inventory Crypto Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemFismaInvetoryCryptoSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getVaSystemFismaInvetoryCryptoSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get VA system FISMA inventory summary dashboard information.
         * @summary VA System FISMA Inventory Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemFismaInvetorySummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getVaSystemFismaInvetorySummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get VA system ICAMP Tableau POAM details dashboard information.
         * @summary VA System ICAMP Tableau POAM Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemIcampTableauPoamDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getVaSystemIcampTableauPoamDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get VA system P.L. 109 reporting summary dashboard information.
         * @summary VA System P.L. 109 Reporting Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemPl109ReportingSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getVaSystemPl109ReportingSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get VA system threat architecture details dashboard information.
         * @summary VA System Threat Architecture Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemThreatArchitectureDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getVaSystemThreatArchitectureDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get VA system threat risk summary dashboard information.
         * @summary VA System Threat Risks Summary
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemThreatRiskSummary: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getVaSystemThreatRiskSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get VA system threat source details dashboard information.
         * @summary VA System Threat Sources Details
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemThreatSourceDetails: function (orgId, excludeinherited, pageIndex, pageSize, options) {
            return localVarFp.getVaSystemThreatSourceDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.VASystemDashboardsApiFactory = VASystemDashboardsApiFactory;
/**
 * VASystemDashboardsApi - object-oriented interface
 * @export
 * @class VASystemDashboardsApi
 * @extends {BaseAPI}
 */
var VASystemDashboardsApi = /** @class */ (function (_super) {
    __extends(VASystemDashboardsApi, _super);
    function VASystemDashboardsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get VA system A2.0 summary dashboard information.
     * @summary VA System A2.0 Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VASystemDashboardsApi
     */
    VASystemDashboardsApi.prototype.getVaSystemA2Summary = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return (0, exports.VASystemDashboardsApiFp)(this.configuration).getVaSystemA2Summary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get VA system A&A summary dashboard information.
     * @summary VA System A&A Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VASystemDashboardsApi
     */
    VASystemDashboardsApi.prototype.getVaSystemAaSummary = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return (0, exports.VASystemDashboardsApiFp)(this.configuration).getVaSystemAaSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get VA system FISMA inventory crypto summary dashboard information.
     * @summary VA System FISMA Inventory Crypto Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VASystemDashboardsApi
     */
    VASystemDashboardsApi.prototype.getVaSystemFismaInvetoryCryptoSummary = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return (0, exports.VASystemDashboardsApiFp)(this.configuration).getVaSystemFismaInvetoryCryptoSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get VA system FISMA inventory summary dashboard information.
     * @summary VA System FISMA Inventory Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VASystemDashboardsApi
     */
    VASystemDashboardsApi.prototype.getVaSystemFismaInvetorySummary = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return (0, exports.VASystemDashboardsApiFp)(this.configuration).getVaSystemFismaInvetorySummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get VA system ICAMP Tableau POAM details dashboard information.
     * @summary VA System ICAMP Tableau POAM Details
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VASystemDashboardsApi
     */
    VASystemDashboardsApi.prototype.getVaSystemIcampTableauPoamDetails = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return (0, exports.VASystemDashboardsApiFp)(this.configuration).getVaSystemIcampTableauPoamDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get VA system P.L. 109 reporting summary dashboard information.
     * @summary VA System P.L. 109 Reporting Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VASystemDashboardsApi
     */
    VASystemDashboardsApi.prototype.getVaSystemPl109ReportingSummary = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return (0, exports.VASystemDashboardsApiFp)(this.configuration).getVaSystemPl109ReportingSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get VA system threat architecture details dashboard information.
     * @summary VA System Threat Architecture Details
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VASystemDashboardsApi
     */
    VASystemDashboardsApi.prototype.getVaSystemThreatArchitectureDetails = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return (0, exports.VASystemDashboardsApiFp)(this.configuration).getVaSystemThreatArchitectureDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get VA system threat risk summary dashboard information.
     * @summary VA System Threat Risks Summary
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VASystemDashboardsApi
     */
    VASystemDashboardsApi.prototype.getVaSystemThreatRiskSummary = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return (0, exports.VASystemDashboardsApiFp)(this.configuration).getVaSystemThreatRiskSummary(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get VA system threat source details dashboard information.
     * @summary VA System Threat Sources Details
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {boolean} [excludeinherited] **Exclude Inherited**: If no value is specified, the default returns false to include inherited data.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VASystemDashboardsApi
     */
    VASystemDashboardsApi.prototype.getVaSystemThreatSourceDetails = function (orgId, excludeinherited, pageIndex, pageSize, options) {
        var _this = this;
        return (0, exports.VASystemDashboardsApiFp)(this.configuration).getVaSystemThreatSourceDetails(orgId, excludeinherited, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return VASystemDashboardsApi;
}(base_1.BaseAPI));
exports.VASystemDashboardsApi = VASystemDashboardsApi;
/**
 * WorkflowDefinitionsApi - axios parameter creator
 * @export
 */
var WorkflowDefinitionsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * View all workflow schemas available on the eMASS instance filtered by status `includeInactive` and registration type `registrationType`.
         * @summary Get workflow definitions in a site
         * @param {boolean} [includeInactive] **Include Inactive**: If no value is specified, the default returns false to not include outdated workflow definitions.
         * @param {string} [registrationType] **Registration Type**: Filter record by selected registration type (single value or comma delimited values).  **Valid Options Are:** assessAndAuthorize, assessOnly, guest, regular, functional, cloudServiceProvider, commonControlProvider, authorizationToUse, reciprocityAcceptanc
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowDefinitions: function (includeInactive_1, registrationType_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([includeInactive_1, registrationType_1], args_1, true), void 0, function (includeInactive, registrationType, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/workflows/definitions";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (includeInactive !== undefined) {
                                localVarQueryParameter['includeInactive'] = includeInactive;
                            }
                            if (registrationType !== undefined) {
                                localVarQueryParameter['registrationType'] = registrationType;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.WorkflowDefinitionsApiAxiosParamCreator = WorkflowDefinitionsApiAxiosParamCreator;
/**
 * WorkflowDefinitionsApi - functional programming interface
 * @export
 */
var WorkflowDefinitionsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.WorkflowDefinitionsApiAxiosParamCreator)(configuration);
    return {
        /**
         * View all workflow schemas available on the eMASS instance filtered by status `includeInactive` and registration type `registrationType`.
         * @summary Get workflow definitions in a site
         * @param {boolean} [includeInactive] **Include Inactive**: If no value is specified, the default returns false to not include outdated workflow definitions.
         * @param {string} [registrationType] **Registration Type**: Filter record by selected registration type (single value or comma delimited values).  **Valid Options Are:** assessAndAuthorize, assessOnly, guest, regular, functional, cloudServiceProvider, commonControlProvider, authorizationToUse, reciprocityAcceptanc
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowDefinitions: function (includeInactive, registrationType, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getWorkflowDefinitions(includeInactive, registrationType, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['WorkflowDefinitionsApi.getWorkflowDefinitions']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.WorkflowDefinitionsApiFp = WorkflowDefinitionsApiFp;
/**
 * WorkflowDefinitionsApi - factory interface
 * @export
 */
var WorkflowDefinitionsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.WorkflowDefinitionsApiFp)(configuration);
    return {
        /**
         * View all workflow schemas available on the eMASS instance filtered by status `includeInactive` and registration type `registrationType`.
         * @summary Get workflow definitions in a site
         * @param {boolean} [includeInactive] **Include Inactive**: If no value is specified, the default returns false to not include outdated workflow definitions.
         * @param {string} [registrationType] **Registration Type**: Filter record by selected registration type (single value or comma delimited values).  **Valid Options Are:** assessAndAuthorize, assessOnly, guest, regular, functional, cloudServiceProvider, commonControlProvider, authorizationToUse, reciprocityAcceptanc
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowDefinitions: function (includeInactive, registrationType, options) {
            return localVarFp.getWorkflowDefinitions(includeInactive, registrationType, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.WorkflowDefinitionsApiFactory = WorkflowDefinitionsApiFactory;
/**
 * WorkflowDefinitionsApi - object-oriented interface
 * @export
 * @class WorkflowDefinitionsApi
 * @extends {BaseAPI}
 */
var WorkflowDefinitionsApi = /** @class */ (function (_super) {
    __extends(WorkflowDefinitionsApi, _super);
    function WorkflowDefinitionsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * View all workflow schemas available on the eMASS instance filtered by status `includeInactive` and registration type `registrationType`.
     * @summary Get workflow definitions in a site
     * @param {boolean} [includeInactive] **Include Inactive**: If no value is specified, the default returns false to not include outdated workflow definitions.
     * @param {string} [registrationType] **Registration Type**: Filter record by selected registration type (single value or comma delimited values).  **Valid Options Are:** assessAndAuthorize, assessOnly, guest, regular, functional, cloudServiceProvider, commonControlProvider, authorizationToUse, reciprocityAcceptanc
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowDefinitionsApi
     */
    WorkflowDefinitionsApi.prototype.getWorkflowDefinitions = function (includeInactive, registrationType, options) {
        var _this = this;
        return (0, exports.WorkflowDefinitionsApiFp)(this.configuration).getWorkflowDefinitions(includeInactive, registrationType, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return WorkflowDefinitionsApi;
}(base_1.BaseAPI));
exports.WorkflowDefinitionsApi = WorkflowDefinitionsApi;
/**
 * WorkflowInstancesApi - axios parameter creator
 * @export
 */
var WorkflowInstancesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * View detailed information on all active and historical workflows filtered by provided parameters.
         * @summary Get workflow instances in a site
         * @param {boolean} [includeComments] **Include Comments**: If no value is specified, the default returns true to not include transition comments. Note: Corresponds to the Comments textbox that is required at most workflow transitions. Does not include other text input fields such as Terms / Conditions for Authorization.
         * @param {boolean} [includeDecommissionSystems] **Include Decommission Systems**: If no value is specified, the default returns false to exclude decommissioned systems.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. **Note:** Pages contain 1000 workflow instances.
         * @param {string} [sinceDate] **Date**: Filter on authorization/assessment date (Unix date format). Note: Filters off the lastEditedDate field. Note: The authorization/assessment decisions on completed workflows can be edited for up to 30 days after the initial decision is made.
         * @param {GetSystemWorkflowInstancesStatusEnum} [status] **Status**: Filter by status. If no value is specified, the default returns all to include both active and inactive workflows. Note: Any workflows at a current stage of Complete or Cancelled are inactive. Ongoing workflows currently at other stages are active.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemWorkflowInstances: function (includeComments_1, includeDecommissionSystems_1, pageIndex_1, sinceDate_1, status_1) {
            var args_1 = [];
            for (var _i = 5; _i < arguments.length; _i++) {
                args_1[_i - 5] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([includeComments_1, includeDecommissionSystems_1, pageIndex_1, sinceDate_1, status_1], args_1, true), void 0, function (includeComments, includeDecommissionSystems, pageIndex, sinceDate, status, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/workflows/instances";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (includeComments !== undefined) {
                                localVarQueryParameter['includeComments'] = includeComments;
                            }
                            if (includeDecommissionSystems !== undefined) {
                                localVarQueryParameter['includeDecommissionSystems'] = includeDecommissionSystems;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (sinceDate !== undefined) {
                                localVarQueryParameter['sinceDate'] = sinceDate;
                            }
                            if (status !== undefined) {
                                localVarQueryParameter['status'] = status;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * View detailed historical workflow information for `workflowInstanceId`.
         * @summary Get workflow instance by ID
         * @param {number} workflowInstanceId **Workflow Instance Id**: The unique workflow definition identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemWorkflowInstancesByWorkflowInstanceId: function (workflowInstanceId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([workflowInstanceId_1], args_1, true), void 0, function (workflowInstanceId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'workflowInstanceId' is not null or undefined
                            (0, common_1.assertParamExists)('getSystemWorkflowInstancesByWorkflowInstanceId', 'workflowInstanceId', workflowInstanceId);
                            localVarPath = "/api/workflows/instances/{workflowInstanceId}"
                                .replace("{".concat("workflowInstanceId", "}"), encodeURIComponent(String(workflowInstanceId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.WorkflowInstancesApiAxiosParamCreator = WorkflowInstancesApiAxiosParamCreator;
/**
 * WorkflowInstancesApi - functional programming interface
 * @export
 */
var WorkflowInstancesApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.WorkflowInstancesApiAxiosParamCreator)(configuration);
    return {
        /**
         * View detailed information on all active and historical workflows filtered by provided parameters.
         * @summary Get workflow instances in a site
         * @param {boolean} [includeComments] **Include Comments**: If no value is specified, the default returns true to not include transition comments. Note: Corresponds to the Comments textbox that is required at most workflow transitions. Does not include other text input fields such as Terms / Conditions for Authorization.
         * @param {boolean} [includeDecommissionSystems] **Include Decommission Systems**: If no value is specified, the default returns false to exclude decommissioned systems.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. **Note:** Pages contain 1000 workflow instances.
         * @param {string} [sinceDate] **Date**: Filter on authorization/assessment date (Unix date format). Note: Filters off the lastEditedDate field. Note: The authorization/assessment decisions on completed workflows can be edited for up to 30 days after the initial decision is made.
         * @param {GetSystemWorkflowInstancesStatusEnum} [status] **Status**: Filter by status. If no value is specified, the default returns all to include both active and inactive workflows. Note: Any workflows at a current stage of Complete or Cancelled are inactive. Ongoing workflows currently at other stages are active.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemWorkflowInstances: function (includeComments, includeDecommissionSystems, pageIndex, sinceDate, status, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemWorkflowInstances(includeComments, includeDecommissionSystems, pageIndex, sinceDate, status, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['WorkflowInstancesApi.getSystemWorkflowInstances']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * View detailed historical workflow information for `workflowInstanceId`.
         * @summary Get workflow instance by ID
         * @param {number} workflowInstanceId **Workflow Instance Id**: The unique workflow definition identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemWorkflowInstancesByWorkflowInstanceId: function (workflowInstanceId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemWorkflowInstancesByWorkflowInstanceId(workflowInstanceId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['WorkflowInstancesApi.getSystemWorkflowInstancesByWorkflowInstanceId']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.WorkflowInstancesApiFp = WorkflowInstancesApiFp;
/**
 * WorkflowInstancesApi - factory interface
 * @export
 */
var WorkflowInstancesApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.WorkflowInstancesApiFp)(configuration);
    return {
        /**
         * View detailed information on all active and historical workflows filtered by provided parameters.
         * @summary Get workflow instances in a site
         * @param {boolean} [includeComments] **Include Comments**: If no value is specified, the default returns true to not include transition comments. Note: Corresponds to the Comments textbox that is required at most workflow transitions. Does not include other text input fields such as Terms / Conditions for Authorization.
         * @param {boolean} [includeDecommissionSystems] **Include Decommission Systems**: If no value is specified, the default returns false to exclude decommissioned systems.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. **Note:** Pages contain 1000 workflow instances.
         * @param {string} [sinceDate] **Date**: Filter on authorization/assessment date (Unix date format). Note: Filters off the lastEditedDate field. Note: The authorization/assessment decisions on completed workflows can be edited for up to 30 days after the initial decision is made.
         * @param {GetSystemWorkflowInstancesStatusEnum} [status] **Status**: Filter by status. If no value is specified, the default returns all to include both active and inactive workflows. Note: Any workflows at a current stage of Complete or Cancelled are inactive. Ongoing workflows currently at other stages are active.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemWorkflowInstances: function (includeComments, includeDecommissionSystems, pageIndex, sinceDate, status, options) {
            return localVarFp.getSystemWorkflowInstances(includeComments, includeDecommissionSystems, pageIndex, sinceDate, status, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * View detailed historical workflow information for `workflowInstanceId`.
         * @summary Get workflow instance by ID
         * @param {number} workflowInstanceId **Workflow Instance Id**: The unique workflow definition identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemWorkflowInstancesByWorkflowInstanceId: function (workflowInstanceId, options) {
            return localVarFp.getSystemWorkflowInstancesByWorkflowInstanceId(workflowInstanceId, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.WorkflowInstancesApiFactory = WorkflowInstancesApiFactory;
/**
 * WorkflowInstancesApi - object-oriented interface
 * @export
 * @class WorkflowInstancesApi
 * @extends {BaseAPI}
 */
var WorkflowInstancesApi = /** @class */ (function (_super) {
    __extends(WorkflowInstancesApi, _super);
    function WorkflowInstancesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * View detailed information on all active and historical workflows filtered by provided parameters.
     * @summary Get workflow instances in a site
     * @param {boolean} [includeComments] **Include Comments**: If no value is specified, the default returns true to not include transition comments. Note: Corresponds to the Comments textbox that is required at most workflow transitions. Does not include other text input fields such as Terms / Conditions for Authorization.
     * @param {boolean} [includeDecommissionSystems] **Include Decommission Systems**: If no value is specified, the default returns false to exclude decommissioned systems.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0. **Note:** Pages contain 1000 workflow instances.
     * @param {string} [sinceDate] **Date**: Filter on authorization/assessment date (Unix date format). Note: Filters off the lastEditedDate field. Note: The authorization/assessment decisions on completed workflows can be edited for up to 30 days after the initial decision is made.
     * @param {GetSystemWorkflowInstancesStatusEnum} [status] **Status**: Filter by status. If no value is specified, the default returns all to include both active and inactive workflows. Note: Any workflows at a current stage of Complete or Cancelled are inactive. Ongoing workflows currently at other stages are active.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowInstancesApi
     */
    WorkflowInstancesApi.prototype.getSystemWorkflowInstances = function (includeComments, includeDecommissionSystems, pageIndex, sinceDate, status, options) {
        var _this = this;
        return (0, exports.WorkflowInstancesApiFp)(this.configuration).getSystemWorkflowInstances(includeComments, includeDecommissionSystems, pageIndex, sinceDate, status, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * View detailed historical workflow information for `workflowInstanceId`.
     * @summary Get workflow instance by ID
     * @param {number} workflowInstanceId **Workflow Instance Id**: The unique workflow definition identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowInstancesApi
     */
    WorkflowInstancesApi.prototype.getSystemWorkflowInstancesByWorkflowInstanceId = function (workflowInstanceId, options) {
        var _this = this;
        return (0, exports.WorkflowInstancesApiFp)(this.configuration).getSystemWorkflowInstancesByWorkflowInstanceId(workflowInstanceId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return WorkflowInstancesApi;
}(base_1.BaseAPI));
exports.WorkflowInstancesApi = WorkflowInstancesApi;
/**
 * @export
 */
exports.GetSystemWorkflowInstancesStatusEnum = {
    Active: 'active',
    Inactive: 'inactive',
    All: 'all',
    UnknownDefaultOpenApi: '11184809'
};
