"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Enterprise Mission Assurance Support Service (eMASS)
 * The Enterprise Mission Assurance Support Service (eMASS) Representational State Transfer (REST) Application Programming Interface (API) enables users to perform assessments and complete actions associated with system records.   <strong>Register External Application (that use the eMASS API)</strong></br> New users will need to [register](https://nisp.emass.apps.mil/Content/Help/jobaids/eMASS_OT_NewUser_Job_Aid.pdf) an API key with the eMASS development team prior to accessing the site for the first time. The eMASS REST API  requires a client certificate (SSL/TLS, DoD PKI only). Use the `Registration` endpoint to register the client certificate.</br></br>  Every call to the eMASS REST API will require the use of the agreed upon public key certificate and API key.  The API key must be provided in the request header for all endpoint calls (api-key). If the service receives an untrusted certificate or API key, a 401 error response code will be returned along with an error message.</br></br>  <strong>Available Request Headers</strong></br> <table>   <tr>     <th align=left>key</th>     <th align=left>Example Value</th>     <th align=left>Description</th>   </tr>   <tr>     <td>`api-key`</td>     <td>api-key-provided-by-emass</td>     <td>This API key must be provided in the request header for all endpoint calls</td>   </tr>   <tr>     <td>`user-uid`</td>     <td>USER.UID.KEY</td>     <td>This User unique identifier key must be provided in the request header for all PUT, POST, and DELETE endpoint calls</td>   </tr>   <tr>     <td></td><td></td>     <td>       Note: For DoD users this is the DoD ID Number (EIDIPI) on their DoD CAC     </td>   </tr> </table>  </br><strong>Approve API Client for Actionable Requests</strong></br> Users are required to log-in to eMASS and grant permissions for a client to update data within eMASS on their behalf. This is only required for actionable requests (PUT, POST, DELETE). The Registration Endpoint and all GET requests can be accessed without completing this process with the correct permissions. Please note that leaving a field parameter blank (for PUT/POST requests) has the potential to clear information in the active eMASS records.  To establish an account with eMASS and/or acquire an api-key/user-uid, contact one of the listed POC:
 *
 * The version of the OpenAPI document: v3.4
 * Contact: disa.meade.id.mbx.emass-tier-iii-support@mail.mil
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkflowInstancesApi = exports.WorkflowInstancesApiFactory = exports.WorkflowInstancesApiFp = exports.WorkflowInstancesApiAxiosParamCreator = exports.WorkflowDefinitionsApi = exports.WorkflowDefinitionsApiFactory = exports.WorkflowDefinitionsApiFp = exports.WorkflowDefinitionsApiAxiosParamCreator = exports.TestResultsApi = exports.TestResultsApiFactory = exports.TestResultsApiFp = exports.TestResultsApiAxiosParamCreator = exports.TestApi = exports.TestApiFactory = exports.TestApiFp = exports.TestApiAxiosParamCreator = exports.SystemsApi = exports.SystemsApiFactory = exports.SystemsApiFp = exports.SystemsApiAxiosParamCreator = exports.SystemRolesApi = exports.SystemRolesApiFactory = exports.SystemRolesApiFp = exports.SystemRolesApiAxiosParamCreator = exports.StaticCodeScansApi = exports.StaticCodeScansApiFactory = exports.StaticCodeScansApiFp = exports.StaticCodeScansApiAxiosParamCreator = exports.RegistrationApi = exports.RegistrationApiFactory = exports.RegistrationApiFp = exports.RegistrationApiAxiosParamCreator = exports.POAMApi = exports.POAMApiFactory = exports.POAMApiFp = exports.POAMApiAxiosParamCreator = exports.PACApi = exports.PACApiFactory = exports.PACApiFp = exports.PACApiAxiosParamCreator = exports.MilestonesApi = exports.MilestonesApiFactory = exports.MilestonesApiFp = exports.MilestonesApiAxiosParamCreator = exports.DashboardsApi = exports.DashboardsApiFactory = exports.DashboardsApiFp = exports.DashboardsApiAxiosParamCreator = exports.ControlsApi = exports.ControlsApiFactory = exports.ControlsApiFp = exports.ControlsApiAxiosParamCreator = exports.ContainersApi = exports.ContainersApiFactory = exports.ContainersApiFp = exports.ContainersApiAxiosParamCreator = exports.CloudResourcesApi = exports.CloudResourcesApiFactory = exports.CloudResourcesApiFp = exports.CloudResourcesApiAxiosParamCreator = exports.CMMCAssessmentsApi = exports.CMMCAssessmentsApiFactory = exports.CMMCAssessmentsApiFp = exports.CMMCAssessmentsApiAxiosParamCreator = exports.CACApi = exports.CACApiFactory = exports.CACApiFp = exports.CACApiAxiosParamCreator = exports.ArtifactsExportApi = exports.ArtifactsExportApiFactory = exports.ArtifactsExportApiFp = exports.ArtifactsExportApiAxiosParamCreator = exports.ArtifactsApi = exports.ArtifactsApiFactory = exports.ArtifactsApiFp = exports.ArtifactsApiAxiosParamCreator = exports.TestResultsGetComplianceStatusEnum = exports.SystemsCurrentRmfLifecycleStepEnum = exports.SystemsPiaStatusEnum = exports.SystemsImpactEnum = exports.SystemsDodConfidentialityEnum = exports.SystemsMacEnum = exports.SystemsAvailabilityEnum = exports.SystemsIntegrityEnum = exports.SystemsConfidentialityEnum = exports.SystemsPrimaryControlSetEnum = exports.SystemsGoverningMissionAreaEnum = exports.SystemsGeographicalAssociationEnum = exports.SystemsMissionCriticalityEnum = exports.SystemsSecurityPlanApprovalStatusEnum = exports.SystemsAuthorizationStatusEnum = exports.SystemsSystemTypeEnum = exports.SystemsRegistrationTypeEnum = exports.SystemsPolicyEnum = exports.StaticCodeApplicationRawSeverityEnum = exports.PoamGetResidualRiskLevelEnum = exports.PoamGetImpactEnum = exports.PoamGetLikelihoodEnum = exports.PoamGetRelevanceOfThreatEnum = exports.PoamGetRawSeverityEnum = exports.PoamGetSeverityEnum = exports.PoamGetReviewStatusEnum = exports.PoamGetStatusEnum = exports.PacPostWorkflowEnum = exports.PacGetWorkflowEnum = exports.MilestonesGetReviewStatusEnum = exports.ControlsGetTestMethodEnum = exports.ControlsGetResidualRiskLevelEnum = exports.ControlsGetImpactEnum = exports.ControlsGetLikelihoodEnum = exports.ControlsGetRelevanceOfThreatEnum = exports.ControlsGetSeverityEnum = exports.ControlsGetSlcmMethodEnum = exports.ControlsGetSlcmFrequencyEnum = exports.ControlsGetControlDesignationEnum = exports.ControlsGetCommonControlProviderEnum = exports.ControlsGetImplementationStatusEnum = exports.ControlsGetModifiedByOverlaysEnum = exports.CmmcGetOperationEnum = exports.ArtifactsGetCategoryEnum = exports.ArtifactsGetTypeEnum = void 0;
var axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("./common");
// @ts-ignore
var base_1 = require("./base");
exports.ArtifactsGetTypeEnum = {
    Procedure: 'Procedure',
    Diagram: 'Diagram',
    Policy: 'Policy',
    Labor: 'Labor',
    Document: 'Document',
    Image: 'Image',
    Other: 'Other',
    ScanResult: 'Scan Result',
    AuditorReport: 'Auditor Report',
    UnknownDefaultOpenApi: '11184809'
};
exports.ArtifactsGetCategoryEnum = {
    ImplementationGuidance: 'Implementation Guidance',
    Evidence: 'Evidence',
    UnknownDefaultOpenApi: '11184809'
};
exports.CmmcGetOperationEnum = {
    Added: 'ADDED',
    Updated: 'UPDATED',
    Deleted: 'DELETED',
    UnknownDefaultOpenApi: '11184809'
};
exports.ControlsGetModifiedByOverlaysEnum = {
    Privacy: 'Privacy',
    Requirements: 'Requirements',
    Concurrency: 'Concurrency',
    UnknownDefaultOpenApi: '11184809'
};
exports.ControlsGetImplementationStatusEnum = {
    Planned: 'Planned',
    Implemented: 'Implemented',
    Inherited: 'Inherited',
    NotApplicable: 'Not Applicable',
    ManuallyInherited: 'Manually Inherited',
    UnknownDefaultOpenApi: '11184809'
};
exports.ControlsGetCommonControlProviderEnum = {
    DoD: 'DoD',
    Component: 'Component',
    Enclave: 'Enclave',
    UnknownDefaultOpenApi: '11184809'
};
exports.ControlsGetControlDesignationEnum = {
    Common: 'Common',
    SystemSpecific: 'System-Specific',
    Hybrid: 'Hybrid',
    UnknownDefaultOpenApi: '11184809'
};
exports.ControlsGetSlcmFrequencyEnum = {
    Constantly: 'Constantly',
    Daily: 'Daily',
    Weekly: 'Weekly',
    Monthly: 'Monthly',
    Quarterly: 'Quarterly',
    SemiAnnually: 'Semi-Annually',
    Annually: 'Annually',
    EveryTwoYears: 'Every Two Years',
    EveryThreeYears: 'Every Three Years',
    Undetermined: 'Undetermined',
    UnknownDefaultOpenApi: '11184809'
};
exports.ControlsGetSlcmMethodEnum = {
    Automated: 'Automated',
    SemiAutomated: 'Semi-Automated',
    Manual: 'Manual',
    Undetermined: 'Undetermined',
    UnknownDefaultOpenApi: '11184809'
};
exports.ControlsGetSeverityEnum = {
    VeryLow: 'Very Low',
    Low: 'Low',
    Moderate: 'Moderate',
    High: 'High',
    VeryHigh: 'Very High',
    UnknownDefaultOpenApi: '11184809'
};
exports.ControlsGetRelevanceOfThreatEnum = {
    VeryLow: 'Very Low',
    Low: 'Low',
    Moderate: 'Moderate',
    High: 'High',
    VeryHigh: 'Very High',
    UnknownDefaultOpenApi: '11184809'
};
exports.ControlsGetLikelihoodEnum = {
    VeryLow: 'Very Low',
    Low: 'Low',
    Moderate: 'Moderate',
    High: 'High',
    VeryHigh: 'Very High',
    UnknownDefaultOpenApi: '11184809'
};
exports.ControlsGetImpactEnum = {
    VeryLow: 'Very Low',
    Low: 'Low',
    Moderate: 'Moderate',
    High: 'High',
    VeryHigh: 'Very High',
    UnknownDefaultOpenApi: '11184809'
};
exports.ControlsGetResidualRiskLevelEnum = {
    VeryLow: 'Very Low',
    Low: 'Low',
    Moderate: 'Moderate',
    High: 'High',
    VeryHigh: 'Very High',
    UnknownDefaultOpenApi: '11184809'
};
exports.ControlsGetTestMethodEnum = {
    Test: 'Test',
    Interview: 'Interview',
    Examine: 'Examine',
    TestInterview: 'Test, Interview',
    TestExamine: 'Test, Examine',
    InterviewExamine: 'Interview, Examine',
    TestInterviewExamine: 'Test, Interview, Examine',
    UnknownDefaultOpenApi: '11184809'
};
exports.MilestonesGetReviewStatusEnum = {
    NotApproved: 'Not Approved',
    UnderReview: 'Under Review',
    Approved: 'Approved',
    UnknownDefaultOpenApi: '11184809'
};
exports.PacGetWorkflowEnum = {
    AssessAndAuthorize: 'Assess and Authorize',
    AssessOnly: 'Assess Only',
    SecurityPlanApproval: 'Security Plan Approval',
    UnknownDefaultOpenApi: '11184809'
};
exports.PacPostWorkflowEnum = {
    AssessAndAuthorize: 'Assess and Authorize',
    AssessOnly: 'Assess Only',
    SecurityPlanApproval: 'Security Plan Approval',
    UnknownDefaultOpenApi: '11184809'
};
exports.PoamGetStatusEnum = {
    Ongoing: 'Ongoing',
    RiskAccepted: 'Risk Accepted',
    Completed: 'Completed',
    NotApplicable: 'Not Applicable',
    Archived: 'Archived',
    UnknownDefaultOpenApi: '11184809'
};
exports.PoamGetReviewStatusEnum = {
    NotApproved: 'Not Approved',
    UnderReview: 'Under Review',
    Approved: 'Approved',
    UnknownDefaultOpenApi: '11184809'
};
exports.PoamGetSeverityEnum = {
    VeryLow: 'Very Low',
    Low: 'Low',
    Moderate: 'Moderate',
    High: 'High',
    VeryHigh: 'Very High',
    UnknownDefaultOpenApi: '11184809'
};
exports.PoamGetRawSeverityEnum = {
    I: 'I',
    Ii: 'II',
    Iii: 'III',
    UnknownDefaultOpenApi: '11184809'
};
exports.PoamGetRelevanceOfThreatEnum = {
    VeryLow: 'Very Low',
    Low: 'Low',
    Moderate: 'Moderate',
    High: 'High',
    VeryHigh: 'Very High',
    UnknownDefaultOpenApi: '11184809'
};
exports.PoamGetLikelihoodEnum = {
    VeryLow: 'Very Low',
    Low: 'Low',
    Moderate: 'Moderate',
    High: 'High',
    VeryHigh: 'Very High',
    UnknownDefaultOpenApi: '11184809'
};
exports.PoamGetImpactEnum = {
    VeryLow: 'Very Low',
    Low: 'Low',
    Moderate: 'Moderate',
    High: 'High',
    VeryHigh: 'Very High',
    UnknownDefaultOpenApi: '11184809'
};
exports.PoamGetResidualRiskLevelEnum = {
    VeryLow: 'Very Low',
    Low: 'Low',
    Moderate: 'Moderate',
    High: 'High',
    VeryHigh: 'Very High',
    UnknownDefaultOpenApi: '11184809'
};
exports.StaticCodeApplicationRawSeverityEnum = {
    Low: 'Low',
    Medium: 'Medium',
    Moderate: 'Moderate',
    High: 'High',
    Critical: 'Critical',
    UnknownDefaultOpenApi: '11184809'
};
exports.SystemsPolicyEnum = {
    Rmf: 'RMF',
    Diacap: 'DIACAP',
    UnknownDefaultOpenApi: '11184809'
};
exports.SystemsRegistrationTypeEnum = {
    AssessAndAuthorize: 'Assess and Authorize',
    AssessOnly: 'Assess Only',
    Guest: 'Guest',
    Regular: 'Regular',
    Functional: 'Functional',
    CloudServiceProvider: 'Cloud Service Provider',
    CommonControlProvider: 'Common Control Provider',
    UnknownDefaultOpenApi: '11184809'
};
exports.SystemsSystemTypeEnum = {
    IsMajorApplication: 'IS Major Application',
    IsEnclave: 'IS Enclave',
    PlatformIt: 'Platform IT',
    PlatformItSystem: 'Platform IT System',
    PlatformItInterconnection: 'Platform IT Interconnection',
    AisApplication: 'AIS Application',
    OutsourcedItBasedProcessDoDControlled: 'Outsourced IT-Based Process (DoD-controlled)',
    Enclave: 'Enclave',
    OutsourcedItBasedProcessServiceProviderShared: 'Outsourced IT-Based Process (service provider shared)',
    UnknownDefaultOpenApi: '11184809'
};
exports.SystemsAuthorizationStatusEnum = {
    AuthorityToOperateAto: 'Authority to Operate (ATO)',
    AuthorizationToOperateAto: 'Authorization to Operate (ATO)',
    AuthorityToOperateWithConditionsAtoWConditions: 'Authority to Operate with Conditions (ATO w/Conditions)',
    InterimAuthorityToTestIatt: 'Interim Authority to Test (IATT)',
    InterimAuthorityToOperateIato: 'Interim Authority to Operate (IATO)',
    DeniedAuthorityToOperateDato: 'Denied Authority to Operate (DATO)',
    DenialOfAuthorizationToOperateDato: 'Denial of Authorization to Operate (DATO)',
    NotYetAuthorized: 'Not Yet Authorized',
    Decommissioned: 'Decommissioned',
    Unaccredited: 'Unaccredited',
    UnknownDefaultOpenApi: '11184809'
};
exports.SystemsSecurityPlanApprovalStatusEnum = {
    Approved: 'Approved',
    NotYetApproved: 'Not Yet Approved',
    Denied: 'Denied',
    UnknownDefaultOpenApi: '11184809'
};
exports.SystemsMissionCriticalityEnum = {
    CriticalMc: 'Mission Critical (MC)',
    EssentialMe: 'Mission Essential (ME)',
    SupportMs: 'Mission Support (MS)',
    UnknownDefaultOpenApi: '11184809'
};
exports.SystemsGeographicalAssociationEnum = {
    VaOperatedIs: 'VA Operated IS',
    NonVaOperatedIs: 'non-VA Operated IS',
    UnknownDefaultOpenApi: '11184809'
};
exports.SystemsGoverningMissionAreaEnum = {
    BusinessMaBma: 'Business MA (BMA)',
    DoDPortionOfTheIntelligenceMaDima: 'DoD portion of the Intelligence MA (DIMA)',
    EnterpriseInformationEnvironmentMaEiema: 'Enterprise Information Environment MA (EIEMA)',
    WarfightingMaWma: 'Warfighting MA (WMA)',
    UnknownDefaultOpenApi: '11184809'
};
exports.SystemsPrimaryControlSetEnum = {
    NistSp80053Revision4: 'NIST SP 800-53 Revision 4',
    DoDi85002: 'DoDI 8500.2',
    UnknownDefaultOpenApi: '11184809'
};
exports.SystemsConfidentialityEnum = {
    High: 'High',
    Moderate: 'Moderate',
    Low: 'Low',
    UnknownDefaultOpenApi: '11184809'
};
exports.SystemsIntegrityEnum = {
    High: 'High',
    Moderate: 'Moderate',
    Low: 'Low',
    UnknownDefaultOpenApi: '11184809'
};
exports.SystemsAvailabilityEnum = {
    High: 'High',
    Moderate: 'Moderate',
    Low: 'Low',
    UnknownDefaultOpenApi: '11184809'
};
exports.SystemsMacEnum = {
    I: 'I',
    Ii: 'II',
    Iii: 'III',
    UnknownDefaultOpenApi: '11184809'
};
exports.SystemsDodConfidentialityEnum = {
    Public: 'Public',
    Sensitive: 'Sensitive',
    Classified: 'Classified',
    UnknownDefaultOpenApi: '11184809'
};
exports.SystemsImpactEnum = {
    Low: 'Low',
    Moderate: 'Moderate',
    High: 'High',
    UnknownDefaultOpenApi: '11184809'
};
exports.SystemsPiaStatusEnum = {
    NotStarted: 'Not Started',
    InProgress: 'In Progress',
    Completed: 'Completed',
    UnknownDefaultOpenApi: '11184809'
};
exports.SystemsCurrentRmfLifecycleStepEnum = {
    _1Categorize: '1 - Categorize',
    _2Select: '2 - Select',
    _3Implement: '3 - Implement',
    _4Assess: '4 - Assess',
    _5Authorize: '5 - Authorize',
    _6Monitor: '6 - Monitor',
    UnknownDefaultOpenApi: '11184809'
};
exports.TestResultsGetComplianceStatusEnum = {
    Compliant: 'Compliant',
    NonCompliant: 'Non-Compliant',
    NotApplicable: 'Not Applicable',
    UnknownDefaultOpenApi: '11184809'
};
/**
 * ArtifactsApi - axios parameter creator
 * @export
 */
exports.ArtifactsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * <strong>Information</strong><br> The request body of a POST request through the Artifact Endpoint accepts a single binary file with file extension \".zip\" only. This accepted .zip file should contain one or more files corresponding to existing artifacts or new artifacts that will be created upon successful receipt. Filename uniqueness throughout eMASS will be enforced by the API.<br><br> Upon successful receipt of a file, if a file within the .zip is matched via filename to an artifact existing within the application, the file associated with the artifact will be updated. If no artifact is matched via filename to the application, a new artifact will be created with the following default values. Any values not specified below will be blank. <ul>   <li>isTemplate: false</li>   <li>type: other</li>   <li>category: evidence</li> </ul> To update values other than the file itself, please submit a PUT request.<br>  <strong>Zip file information</strong><br> Upload a zip file contain one or more files corresponding to existing artifacts or new artifacts that will be created upon successful receipt.<br><br> <strong>Business Rules</strong><br> Artifact cannot be saved if the file does not have the following file extensions:      .docx,.doc,.txt,.rtf,.xfdl,.xml,.mht,.mh,tml,.html,.htm,.pdf,.mdb,.accdb,.ppt,     .pptx,.xls,.xlsx,.csv,.log,.jpeg,.jpg,.tiff,.bmp,.tif,.png,.gif,.zip,.rar,.msg,     .vsd,.vsw,.vdx,.z{#},.ckl,.avi,.vsdx  Artifact version cannot be saved if an Artifact with the same file name already exist in the system.  Artifact cannot be saved if the file size exceeds 30MB.
         * @summary Add one or many artifacts in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {File} zipper
         * @param {boolean} [isTemplate]
         * @param {string} [type]
         * @param {string} [category]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addArtifactsBySystemId: function (systemId, zipper, isTemplate, type, category, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarFormParams, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            common_1.assertParamExists('addArtifactsBySystemId', 'systemId', systemId);
                            // verify required parameter 'zipper' is not null or undefined
                            common_1.assertParamExists('addArtifactsBySystemId', 'zipper', zipper);
                            localVarPath = "/api/systems/{systemId}/artifacts"
                                .replace("{" + "systemId" + "}", encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (isTemplate !== undefined) {
                                localVarFormParams.append('isTemplate', isTemplate);
                            }
                            if (type !== undefined) {
                                localVarFormParams.append('type', type);
                            }
                            if (category !== undefined) {
                                localVarFormParams.append('category', category);
                            }
                            if (zipper !== undefined) {
                                localVarFormParams.append('Zipper', zipper);
                            }
                            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = localVarFormParams;
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Remove the Artifact(s) matching `systemId` path parameter and request body artifact(s) file name<br><br> <b>Note:</b> Multiple files can be deleted by providing multiple file names at the CL (comma delimited)  Example: --files file1.txt, file2.txt
         * @summary Remove one or many artifacts in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<ArtifactsRequestDeleteBodyInner>} artifactsRequestDeleteBodyInner Delete artifact files for the given System Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteArtifact: function (systemId, artifactsRequestDeleteBodyInner, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            common_1.assertParamExists('deleteArtifact', 'systemId', systemId);
                            // verify required parameter 'artifactsRequestDeleteBodyInner' is not null or undefined
                            common_1.assertParamExists('deleteArtifact', 'artifactsRequestDeleteBodyInner', artifactsRequestDeleteBodyInner);
                            localVarPath = "/api/systems/{systemId}/artifacts"
                                .replace("{" + "systemId" + "}", encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(artifactsRequestDeleteBodyInner, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Returns selected artifacts matching parameters to include the file name containing the artifacts.
         * @summary Get one or many artifacts in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} [filename] **File Name**: The file name (to include file-extension).
         * @param {string} [controlAcronyms] **System Acronym**: Filter query by given system acronym (single or comma separated).
         * @param {string} [ccis] **CCI System**: Filter query by Control Correlation Identifiers (CCIs) (single or comma separated).
         * @param {boolean} [systemOnly] **Systems Only**: Indicates that only system(s) information is retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemArtifacts: function (systemId, filename, controlAcronyms, ccis, systemOnly, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            common_1.assertParamExists('getSystemArtifacts', 'systemId', systemId);
                            localVarPath = "/api/systems/{systemId}/artifacts"
                                .replace("{" + "systemId" + "}", encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (filename !== undefined) {
                                localVarQueryParameter['filename'] = filename;
                            }
                            if (controlAcronyms !== undefined) {
                                localVarQueryParameter['controlAcronyms'] = controlAcronyms;
                            }
                            if (ccis !== undefined) {
                                localVarQueryParameter['ccis'] = ccis;
                            }
                            if (systemOnly !== undefined) {
                                localVarQueryParameter['systemOnly'] = systemOnly;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Updates an artifact for given `systemId` path parameter<br><br>  **Request Body Required Fields** - `filename` - `isTemplate` - `type` - `category`
         * @summary Update one or many artifacts in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody See &#x60;information&#x60; above for additional instructions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateArtifactBySystemId: function (systemId, requestBody, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            common_1.assertParamExists('updateArtifactBySystemId', 'systemId', systemId);
                            // verify required parameter 'requestBody' is not null or undefined
                            common_1.assertParamExists('updateArtifactBySystemId', 'requestBody', requestBody);
                            localVarPath = "/api/systems/{systemId}/artifacts"
                                .replace("{" + "systemId" + "}", encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * ArtifactsApi - functional programming interface
 * @export
 */
exports.ArtifactsApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.ArtifactsApiAxiosParamCreator(configuration);
    return {
        /**
         * <strong>Information</strong><br> The request body of a POST request through the Artifact Endpoint accepts a single binary file with file extension \".zip\" only. This accepted .zip file should contain one or more files corresponding to existing artifacts or new artifacts that will be created upon successful receipt. Filename uniqueness throughout eMASS will be enforced by the API.<br><br> Upon successful receipt of a file, if a file within the .zip is matched via filename to an artifact existing within the application, the file associated with the artifact will be updated. If no artifact is matched via filename to the application, a new artifact will be created with the following default values. Any values not specified below will be blank. <ul>   <li>isTemplate: false</li>   <li>type: other</li>   <li>category: evidence</li> </ul> To update values other than the file itself, please submit a PUT request.<br>  <strong>Zip file information</strong><br> Upload a zip file contain one or more files corresponding to existing artifacts or new artifacts that will be created upon successful receipt.<br><br> <strong>Business Rules</strong><br> Artifact cannot be saved if the file does not have the following file extensions:      .docx,.doc,.txt,.rtf,.xfdl,.xml,.mht,.mh,tml,.html,.htm,.pdf,.mdb,.accdb,.ppt,     .pptx,.xls,.xlsx,.csv,.log,.jpeg,.jpg,.tiff,.bmp,.tif,.png,.gif,.zip,.rar,.msg,     .vsd,.vsw,.vdx,.z{#},.ckl,.avi,.vsdx  Artifact version cannot be saved if an Artifact with the same file name already exist in the system.  Artifact cannot be saved if the file size exceeds 30MB.
         * @summary Add one or many artifacts in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {File} zipper
         * @param {boolean} [isTemplate]
         * @param {string} [type]
         * @param {string} [category]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addArtifactsBySystemId: function (systemId, zipper, isTemplate, type, category, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addArtifactsBySystemId(systemId, zipper, isTemplate, type, category, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Remove the Artifact(s) matching `systemId` path parameter and request body artifact(s) file name<br><br> <b>Note:</b> Multiple files can be deleted by providing multiple file names at the CL (comma delimited)  Example: --files file1.txt, file2.txt
         * @summary Remove one or many artifacts in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<ArtifactsRequestDeleteBodyInner>} artifactsRequestDeleteBodyInner Delete artifact files for the given System Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteArtifact: function (systemId, artifactsRequestDeleteBodyInner, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteArtifact(systemId, artifactsRequestDeleteBodyInner, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns selected artifacts matching parameters to include the file name containing the artifacts.
         * @summary Get one or many artifacts in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} [filename] **File Name**: The file name (to include file-extension).
         * @param {string} [controlAcronyms] **System Acronym**: Filter query by given system acronym (single or comma separated).
         * @param {string} [ccis] **CCI System**: Filter query by Control Correlation Identifiers (CCIs) (single or comma separated).
         * @param {boolean} [systemOnly] **Systems Only**: Indicates that only system(s) information is retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemArtifacts: function (systemId, filename, controlAcronyms, ccis, systemOnly, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemArtifacts(systemId, filename, controlAcronyms, ccis, systemOnly, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Updates an artifact for given `systemId` path parameter<br><br>  **Request Body Required Fields** - `filename` - `isTemplate` - `type` - `category`
         * @summary Update one or many artifacts in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody See &#x60;information&#x60; above for additional instructions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateArtifactBySystemId: function (systemId, requestBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateArtifactBySystemId(systemId, requestBody, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * ArtifactsApi - factory interface
 * @export
 */
exports.ArtifactsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.ArtifactsApiFp(configuration);
    return {
        /**
         * <strong>Information</strong><br> The request body of a POST request through the Artifact Endpoint accepts a single binary file with file extension \".zip\" only. This accepted .zip file should contain one or more files corresponding to existing artifacts or new artifacts that will be created upon successful receipt. Filename uniqueness throughout eMASS will be enforced by the API.<br><br> Upon successful receipt of a file, if a file within the .zip is matched via filename to an artifact existing within the application, the file associated with the artifact will be updated. If no artifact is matched via filename to the application, a new artifact will be created with the following default values. Any values not specified below will be blank. <ul>   <li>isTemplate: false</li>   <li>type: other</li>   <li>category: evidence</li> </ul> To update values other than the file itself, please submit a PUT request.<br>  <strong>Zip file information</strong><br> Upload a zip file contain one or more files corresponding to existing artifacts or new artifacts that will be created upon successful receipt.<br><br> <strong>Business Rules</strong><br> Artifact cannot be saved if the file does not have the following file extensions:      .docx,.doc,.txt,.rtf,.xfdl,.xml,.mht,.mh,tml,.html,.htm,.pdf,.mdb,.accdb,.ppt,     .pptx,.xls,.xlsx,.csv,.log,.jpeg,.jpg,.tiff,.bmp,.tif,.png,.gif,.zip,.rar,.msg,     .vsd,.vsw,.vdx,.z{#},.ckl,.avi,.vsdx  Artifact version cannot be saved if an Artifact with the same file name already exist in the system.  Artifact cannot be saved if the file size exceeds 30MB.
         * @summary Add one or many artifacts in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {File} zipper
         * @param {boolean} [isTemplate]
         * @param {string} [type]
         * @param {string} [category]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addArtifactsBySystemId: function (systemId, zipper, isTemplate, type, category, options) {
            return localVarFp.addArtifactsBySystemId(systemId, zipper, isTemplate, type, category, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Remove the Artifact(s) matching `systemId` path parameter and request body artifact(s) file name<br><br> <b>Note:</b> Multiple files can be deleted by providing multiple file names at the CL (comma delimited)  Example: --files file1.txt, file2.txt
         * @summary Remove one or many artifacts in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<ArtifactsRequestDeleteBodyInner>} artifactsRequestDeleteBodyInner Delete artifact files for the given System Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteArtifact: function (systemId, artifactsRequestDeleteBodyInner, options) {
            return localVarFp.deleteArtifact(systemId, artifactsRequestDeleteBodyInner, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns selected artifacts matching parameters to include the file name containing the artifacts.
         * @summary Get one or many artifacts in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} [filename] **File Name**: The file name (to include file-extension).
         * @param {string} [controlAcronyms] **System Acronym**: Filter query by given system acronym (single or comma separated).
         * @param {string} [ccis] **CCI System**: Filter query by Control Correlation Identifiers (CCIs) (single or comma separated).
         * @param {boolean} [systemOnly] **Systems Only**: Indicates that only system(s) information is retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemArtifacts: function (systemId, filename, controlAcronyms, ccis, systemOnly, options) {
            return localVarFp.getSystemArtifacts(systemId, filename, controlAcronyms, ccis, systemOnly, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Updates an artifact for given `systemId` path parameter<br><br>  **Request Body Required Fields** - `filename` - `isTemplate` - `type` - `category`
         * @summary Update one or many artifacts in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody See &#x60;information&#x60; above for additional instructions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateArtifactBySystemId: function (systemId, requestBody, options) {
            return localVarFp.updateArtifactBySystemId(systemId, requestBody, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * ArtifactsApi - object-oriented interface
 * @export
 * @class ArtifactsApi
 * @extends {BaseAPI}
 */
var ArtifactsApi = /** @class */ (function (_super) {
    __extends(ArtifactsApi, _super);
    function ArtifactsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * <strong>Information</strong><br> The request body of a POST request through the Artifact Endpoint accepts a single binary file with file extension \".zip\" only. This accepted .zip file should contain one or more files corresponding to existing artifacts or new artifacts that will be created upon successful receipt. Filename uniqueness throughout eMASS will be enforced by the API.<br><br> Upon successful receipt of a file, if a file within the .zip is matched via filename to an artifact existing within the application, the file associated with the artifact will be updated. If no artifact is matched via filename to the application, a new artifact will be created with the following default values. Any values not specified below will be blank. <ul>   <li>isTemplate: false</li>   <li>type: other</li>   <li>category: evidence</li> </ul> To update values other than the file itself, please submit a PUT request.<br>  <strong>Zip file information</strong><br> Upload a zip file contain one or more files corresponding to existing artifacts or new artifacts that will be created upon successful receipt.<br><br> <strong>Business Rules</strong><br> Artifact cannot be saved if the file does not have the following file extensions:      .docx,.doc,.txt,.rtf,.xfdl,.xml,.mht,.mh,tml,.html,.htm,.pdf,.mdb,.accdb,.ppt,     .pptx,.xls,.xlsx,.csv,.log,.jpeg,.jpg,.tiff,.bmp,.tif,.png,.gif,.zip,.rar,.msg,     .vsd,.vsw,.vdx,.z{#},.ckl,.avi,.vsdx  Artifact version cannot be saved if an Artifact with the same file name already exist in the system.  Artifact cannot be saved if the file size exceeds 30MB.
     * @summary Add one or many artifacts in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {File} zipper
     * @param {boolean} [isTemplate]
     * @param {string} [type]
     * @param {string} [category]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtifactsApi
     */
    ArtifactsApi.prototype.addArtifactsBySystemId = function (systemId, zipper, isTemplate, type, category, options) {
        var _this = this;
        return exports.ArtifactsApiFp(this.configuration).addArtifactsBySystemId(systemId, zipper, isTemplate, type, category, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Remove the Artifact(s) matching `systemId` path parameter and request body artifact(s) file name<br><br> <b>Note:</b> Multiple files can be deleted by providing multiple file names at the CL (comma delimited)  Example: --files file1.txt, file2.txt
     * @summary Remove one or many artifacts in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {Array<ArtifactsRequestDeleteBodyInner>} artifactsRequestDeleteBodyInner Delete artifact files for the given System Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtifactsApi
     */
    ArtifactsApi.prototype.deleteArtifact = function (systemId, artifactsRequestDeleteBodyInner, options) {
        var _this = this;
        return exports.ArtifactsApiFp(this.configuration).deleteArtifact(systemId, artifactsRequestDeleteBodyInner, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns selected artifacts matching parameters to include the file name containing the artifacts.
     * @summary Get one or many artifacts in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {string} [filename] **File Name**: The file name (to include file-extension).
     * @param {string} [controlAcronyms] **System Acronym**: Filter query by given system acronym (single or comma separated).
     * @param {string} [ccis] **CCI System**: Filter query by Control Correlation Identifiers (CCIs) (single or comma separated).
     * @param {boolean} [systemOnly] **Systems Only**: Indicates that only system(s) information is retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtifactsApi
     */
    ArtifactsApi.prototype.getSystemArtifacts = function (systemId, filename, controlAcronyms, ccis, systemOnly, options) {
        var _this = this;
        return exports.ArtifactsApiFp(this.configuration).getSystemArtifacts(systemId, filename, controlAcronyms, ccis, systemOnly, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Updates an artifact for given `systemId` path parameter<br><br>  **Request Body Required Fields** - `filename` - `isTemplate` - `type` - `category`
     * @summary Update one or many artifacts in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {Array<object>} requestBody See &#x60;information&#x60; above for additional instructions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtifactsApi
     */
    ArtifactsApi.prototype.updateArtifactBySystemId = function (systemId, requestBody, options) {
        var _this = this;
        return exports.ArtifactsApiFp(this.configuration).updateArtifactBySystemId(systemId, requestBody, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ArtifactsApi;
}(base_1.BaseAPI));
exports.ArtifactsApi = ArtifactsApi;
/**
 * ArtifactsExportApi - axios parameter creator
 * @export
 */
exports.ArtifactsExportApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * <strong>Sample Responce</strong><br>  Binary file associated with given filename.<br>  If `compress` parameter is specified, zip archive of binary file associated with given filename.
         * @summary Get the file of an artifact in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} filename **File Name**: The file name (to include file-extension).
         * @param {boolean} [compress] **Compress File**: Determines if returned file is compressed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemArtifactsExport: function (systemId, filename, compress, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            common_1.assertParamExists('getSystemArtifactsExport', 'systemId', systemId);
                            // verify required parameter 'filename' is not null or undefined
                            common_1.assertParamExists('getSystemArtifactsExport', 'filename', filename);
                            localVarPath = "/api/systems/{systemId}/artifacts-export"
                                .replace("{" + "systemId" + "}", encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (filename !== undefined) {
                                localVarQueryParameter['filename'] = filename;
                            }
                            if (compress !== undefined) {
                                localVarQueryParameter['compress'] = compress;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * ArtifactsExportApi - functional programming interface
 * @export
 */
exports.ArtifactsExportApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.ArtifactsExportApiAxiosParamCreator(configuration);
    return {
        /**
         * <strong>Sample Responce</strong><br>  Binary file associated with given filename.<br>  If `compress` parameter is specified, zip archive of binary file associated with given filename.
         * @summary Get the file of an artifact in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} filename **File Name**: The file name (to include file-extension).
         * @param {boolean} [compress] **Compress File**: Determines if returned file is compressed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemArtifactsExport: function (systemId, filename, compress, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemArtifactsExport(systemId, filename, compress, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * ArtifactsExportApi - factory interface
 * @export
 */
exports.ArtifactsExportApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.ArtifactsExportApiFp(configuration);
    return {
        /**
         * <strong>Sample Responce</strong><br>  Binary file associated with given filename.<br>  If `compress` parameter is specified, zip archive of binary file associated with given filename.
         * @summary Get the file of an artifact in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} filename **File Name**: The file name (to include file-extension).
         * @param {boolean} [compress] **Compress File**: Determines if returned file is compressed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemArtifactsExport: function (systemId, filename, compress, options) {
            return localVarFp.getSystemArtifactsExport(systemId, filename, compress, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * ArtifactsExportApi - object-oriented interface
 * @export
 * @class ArtifactsExportApi
 * @extends {BaseAPI}
 */
var ArtifactsExportApi = /** @class */ (function (_super) {
    __extends(ArtifactsExportApi, _super);
    function ArtifactsExportApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * <strong>Sample Responce</strong><br>  Binary file associated with given filename.<br>  If `compress` parameter is specified, zip archive of binary file associated with given filename.
     * @summary Get the file of an artifact in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {string} filename **File Name**: The file name (to include file-extension).
     * @param {boolean} [compress] **Compress File**: Determines if returned file is compressed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtifactsExportApi
     */
    ArtifactsExportApi.prototype.getSystemArtifactsExport = function (systemId, filename, compress, options) {
        var _this = this;
        return exports.ArtifactsExportApiFp(this.configuration).getSystemArtifactsExport(systemId, filename, compress, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ArtifactsExportApi;
}(base_1.BaseAPI));
exports.ArtifactsExportApi = ArtifactsExportApi;
/**
 * CACApi - axios parameter creator
 * @export
 */
exports.CACApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Adds a Control Approval Chain (CAC) for given `systemId` path parameter<br><br> POST requests will only yield successful results if the control is currently sitting at the first role of the CAC. If the control is not currently sitting at the first role, then an error will be returned.
         * @summary Submit control to second role of CAC
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Add control(s) to second role of CAC
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSystemCac: function (systemId, requestBody, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            common_1.assertParamExists('addSystemCac', 'systemId', systemId);
                            // verify required parameter 'requestBody' is not null or undefined
                            common_1.assertParamExists('addSystemCac', 'requestBody', requestBody);
                            localVarPath = "/api/systems/{systemId}/approval/cac"
                                .replace("{" + "systemId" + "}", encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Returns the location of a system\'s package in the Control Approval Chain (CAC) for matching `systemId` path parameter
         * @summary Get location of one or many controls in CAC
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} [controlAcronyms] **System Acronym**: Filter query by given system acronym (single or comma separated).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemCac: function (systemId, controlAcronyms, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            common_1.assertParamExists('getSystemCac', 'systemId', systemId);
                            localVarPath = "/api/systems/{systemId}/approval/cac"
                                .replace("{" + "systemId" + "}", encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (controlAcronyms !== undefined) {
                                localVarQueryParameter['controlAcronyms'] = controlAcronyms;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * CACApi - functional programming interface
 * @export
 */
exports.CACApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.CACApiAxiosParamCreator(configuration);
    return {
        /**
         * Adds a Control Approval Chain (CAC) for given `systemId` path parameter<br><br> POST requests will only yield successful results if the control is currently sitting at the first role of the CAC. If the control is not currently sitting at the first role, then an error will be returned.
         * @summary Submit control to second role of CAC
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Add control(s) to second role of CAC
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSystemCac: function (systemId, requestBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addSystemCac(systemId, requestBody, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns the location of a system\'s package in the Control Approval Chain (CAC) for matching `systemId` path parameter
         * @summary Get location of one or many controls in CAC
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} [controlAcronyms] **System Acronym**: Filter query by given system acronym (single or comma separated).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemCac: function (systemId, controlAcronyms, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemCac(systemId, controlAcronyms, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * CACApi - factory interface
 * @export
 */
exports.CACApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.CACApiFp(configuration);
    return {
        /**
         * Adds a Control Approval Chain (CAC) for given `systemId` path parameter<br><br> POST requests will only yield successful results if the control is currently sitting at the first role of the CAC. If the control is not currently sitting at the first role, then an error will be returned.
         * @summary Submit control to second role of CAC
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Add control(s) to second role of CAC
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSystemCac: function (systemId, requestBody, options) {
            return localVarFp.addSystemCac(systemId, requestBody, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns the location of a system\'s package in the Control Approval Chain (CAC) for matching `systemId` path parameter
         * @summary Get location of one or many controls in CAC
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} [controlAcronyms] **System Acronym**: Filter query by given system acronym (single or comma separated).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemCac: function (systemId, controlAcronyms, options) {
            return localVarFp.getSystemCac(systemId, controlAcronyms, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * CACApi - object-oriented interface
 * @export
 * @class CACApi
 * @extends {BaseAPI}
 */
var CACApi = /** @class */ (function (_super) {
    __extends(CACApi, _super);
    function CACApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Adds a Control Approval Chain (CAC) for given `systemId` path parameter<br><br> POST requests will only yield successful results if the control is currently sitting at the first role of the CAC. If the control is not currently sitting at the first role, then an error will be returned.
     * @summary Submit control to second role of CAC
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {Array<object>} requestBody Add control(s) to second role of CAC
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CACApi
     */
    CACApi.prototype.addSystemCac = function (systemId, requestBody, options) {
        var _this = this;
        return exports.CACApiFp(this.configuration).addSystemCac(systemId, requestBody, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns the location of a system\'s package in the Control Approval Chain (CAC) for matching `systemId` path parameter
     * @summary Get location of one or many controls in CAC
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {string} [controlAcronyms] **System Acronym**: Filter query by given system acronym (single or comma separated).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CACApi
     */
    CACApi.prototype.getSystemCac = function (systemId, controlAcronyms, options) {
        var _this = this;
        return exports.CACApiFp(this.configuration).getSystemCac(systemId, controlAcronyms, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return CACApi;
}(base_1.BaseAPI));
exports.CACApi = CACApi;
/**
 * CMMCAssessmentsApi - axios parameter creator
 * @export
 */
exports.CMMCAssessmentsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get all CMMC assessment after the given date `sinceDate` parameter. It is available to CMMC eMASS only.
         * @summary Get CMMC assessment information
         * @param {string} sinceDate **Date** CMMC date (Unix date format)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCmmcAssessments: function (sinceDate, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'sinceDate' is not null or undefined
                            common_1.assertParamExists('getCmmcAssessments', 'sinceDate', sinceDate);
                            localVarPath = "/api/cmmc-assessments";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (sinceDate !== undefined) {
                                localVarQueryParameter['sinceDate'] = sinceDate;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * CMMCAssessmentsApi - functional programming interface
 * @export
 */
exports.CMMCAssessmentsApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.CMMCAssessmentsApiAxiosParamCreator(configuration);
    return {
        /**
         * Get all CMMC assessment after the given date `sinceDate` parameter. It is available to CMMC eMASS only.
         * @summary Get CMMC assessment information
         * @param {string} sinceDate **Date** CMMC date (Unix date format)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCmmcAssessments: function (sinceDate, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getCmmcAssessments(sinceDate, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * CMMCAssessmentsApi - factory interface
 * @export
 */
exports.CMMCAssessmentsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.CMMCAssessmentsApiFp(configuration);
    return {
        /**
         * Get all CMMC assessment after the given date `sinceDate` parameter. It is available to CMMC eMASS only.
         * @summary Get CMMC assessment information
         * @param {string} sinceDate **Date** CMMC date (Unix date format)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCmmcAssessments: function (sinceDate, options) {
            return localVarFp.getCmmcAssessments(sinceDate, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * CMMCAssessmentsApi - object-oriented interface
 * @export
 * @class CMMCAssessmentsApi
 * @extends {BaseAPI}
 */
var CMMCAssessmentsApi = /** @class */ (function (_super) {
    __extends(CMMCAssessmentsApi, _super);
    function CMMCAssessmentsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get all CMMC assessment after the given date `sinceDate` parameter. It is available to CMMC eMASS only.
     * @summary Get CMMC assessment information
     * @param {string} sinceDate **Date** CMMC date (Unix date format)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CMMCAssessmentsApi
     */
    CMMCAssessmentsApi.prototype.getCmmcAssessments = function (sinceDate, options) {
        var _this = this;
        return exports.CMMCAssessmentsApiFp(this.configuration).getCmmcAssessments(sinceDate, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return CMMCAssessmentsApi;
}(base_1.BaseAPI));
exports.CMMCAssessmentsApi = CMMCAssessmentsApi;
/**
 * CloudResourcesApi - axios parameter creator
 * @export
 */
exports.CloudResourcesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Add cloud resources and their scan results in the assets module for a system `systemId`
         * @summary Add one or many cloud resources and their scan results
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Add cloud resources and their scan results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCloudResourcesBySystemId: function (systemId, requestBody, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            common_1.assertParamExists('addCloudResourcesBySystemId', 'systemId', systemId);
                            // verify required parameter 'requestBody' is not null or undefined
                            common_1.assertParamExists('addCloudResourcesBySystemId', 'requestBody', requestBody);
                            localVarPath = "/api/systems/{systemId}/cloud-resource-results"
                                .replace("{" + "systemId" + "}", encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * CloudResourcesApi - functional programming interface
 * @export
 */
exports.CloudResourcesApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.CloudResourcesApiAxiosParamCreator(configuration);
    return {
        /**
         * Add cloud resources and their scan results in the assets module for a system `systemId`
         * @summary Add one or many cloud resources and their scan results
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Add cloud resources and their scan results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCloudResourcesBySystemId: function (systemId, requestBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addCloudResourcesBySystemId(systemId, requestBody, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * CloudResourcesApi - factory interface
 * @export
 */
exports.CloudResourcesApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.CloudResourcesApiFp(configuration);
    return {
        /**
         * Add cloud resources and their scan results in the assets module for a system `systemId`
         * @summary Add one or many cloud resources and their scan results
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Add cloud resources and their scan results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCloudResourcesBySystemId: function (systemId, requestBody, options) {
            return localVarFp.addCloudResourcesBySystemId(systemId, requestBody, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * CloudResourcesApi - object-oriented interface
 * @export
 * @class CloudResourcesApi
 * @extends {BaseAPI}
 */
var CloudResourcesApi = /** @class */ (function (_super) {
    __extends(CloudResourcesApi, _super);
    function CloudResourcesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Add cloud resources and their scan results in the assets module for a system `systemId`
     * @summary Add one or many cloud resources and their scan results
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {Array<object>} requestBody Add cloud resources and their scan results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudResourcesApi
     */
    CloudResourcesApi.prototype.addCloudResourcesBySystemId = function (systemId, requestBody, options) {
        var _this = this;
        return exports.CloudResourcesApiFp(this.configuration).addCloudResourcesBySystemId(systemId, requestBody, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return CloudResourcesApi;
}(base_1.BaseAPI));
exports.CloudResourcesApi = CloudResourcesApi;
/**
 * ContainersApi - axios parameter creator
 * @export
 */
exports.ContainersApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Add containers and their scan results in the assets module for a system `systemId`.
         * @summary Add one or many containers and their scan results
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Add containers and their scan results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addContainerSansBySystemId: function (systemId, requestBody, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            common_1.assertParamExists('addContainerSansBySystemId', 'systemId', systemId);
                            // verify required parameter 'requestBody' is not null or undefined
                            common_1.assertParamExists('addContainerSansBySystemId', 'requestBody', requestBody);
                            localVarPath = "/api/systems/{systemId}/container-scan-results"
                                .replace("{" + "systemId" + "}", encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * ContainersApi - functional programming interface
 * @export
 */
exports.ContainersApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.ContainersApiAxiosParamCreator(configuration);
    return {
        /**
         * Add containers and their scan results in the assets module for a system `systemId`.
         * @summary Add one or many containers and their scan results
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Add containers and their scan results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addContainerSansBySystemId: function (systemId, requestBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addContainerSansBySystemId(systemId, requestBody, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * ContainersApi - factory interface
 * @export
 */
exports.ContainersApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.ContainersApiFp(configuration);
    return {
        /**
         * Add containers and their scan results in the assets module for a system `systemId`.
         * @summary Add one or many containers and their scan results
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Add containers and their scan results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addContainerSansBySystemId: function (systemId, requestBody, options) {
            return localVarFp.addContainerSansBySystemId(systemId, requestBody, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * ContainersApi - object-oriented interface
 * @export
 * @class ContainersApi
 * @extends {BaseAPI}
 */
var ContainersApi = /** @class */ (function (_super) {
    __extends(ContainersApi, _super);
    function ContainersApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Add containers and their scan results in the assets module for a system `systemId`.
     * @summary Add one or many containers and their scan results
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {Array<object>} requestBody Add containers and their scan results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainersApi
     */
    ContainersApi.prototype.addContainerSansBySystemId = function (systemId, requestBody, options) {
        var _this = this;
        return exports.ContainersApiFp(this.configuration).addContainerSansBySystemId(systemId, requestBody, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ContainersApi;
}(base_1.BaseAPI));
exports.ContainersApi = ContainersApi;
/**
 * ControlsApi - axios parameter creator
 * @export
 */
exports.ControlsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Returns system control information for matching `systemId` path parameter
         * @summary Get control information in a system for one or many controls
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} [acronyms] **Acronym**: The system acronym(s) being queried (single value or comma delimited values).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemControls: function (systemId, acronyms, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            common_1.assertParamExists('getSystemControls', 'systemId', systemId);
                            localVarPath = "/api/systems/{systemId}/controls"
                                .replace("{" + "systemId" + "}", encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (acronyms !== undefined) {
                                localVarQueryParameter['acronyms'] = acronyms;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *  Update a Control for given `systemId`<br>  **Request Body Required Fields** - `acronym` - `responsibleEntities` - `controlDesignation` - `estimatedCompletionDate` - `implementationNarrative`  The following optional fields are required based on the Implementation Status `implementationStatus` value<br> | Value                    | Required Fields |--------------------------|--------------------------------------------------- | Planned  or Implemented  | `estimatedCompletionDate`, `responsibleEntities`, `slcmCriticality`, `slcmFrequency`, `slcmMethod`, `slcmReporting`, `slcmTracking`, `slcmComments` | Not Applicable           | `naJustification`, `responsibleEntities` | Manually Inherited       | `commonControlProvider`, `estimatedCompletionDate`, `responsibleEntities`, `slcmCriticality`, `slcmFrequency`, `slcmMethod`, `slcmReporting`, `slcmTracking`, `slcmComments`  If the Implementation Status `implementationStatus` value is `Inherited`, only the following fields can be updated:   - `controlDesignation`   - `commonnControlProvider`
         * @summary Update control information in a system for one or many controls
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Update an existing control by Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateControlBySystemId: function (systemId, requestBody, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            common_1.assertParamExists('updateControlBySystemId', 'systemId', systemId);
                            // verify required parameter 'requestBody' is not null or undefined
                            common_1.assertParamExists('updateControlBySystemId', 'requestBody', requestBody);
                            localVarPath = "/api/systems/{systemId}/controls"
                                .replace("{" + "systemId" + "}", encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * ControlsApi - functional programming interface
 * @export
 */
exports.ControlsApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.ControlsApiAxiosParamCreator(configuration);
    return {
        /**
         * Returns system control information for matching `systemId` path parameter
         * @summary Get control information in a system for one or many controls
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} [acronyms] **Acronym**: The system acronym(s) being queried (single value or comma delimited values).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemControls: function (systemId, acronyms, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemControls(systemId, acronyms, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *  Update a Control for given `systemId`<br>  **Request Body Required Fields** - `acronym` - `responsibleEntities` - `controlDesignation` - `estimatedCompletionDate` - `implementationNarrative`  The following optional fields are required based on the Implementation Status `implementationStatus` value<br> | Value                    | Required Fields |--------------------------|--------------------------------------------------- | Planned  or Implemented  | `estimatedCompletionDate`, `responsibleEntities`, `slcmCriticality`, `slcmFrequency`, `slcmMethod`, `slcmReporting`, `slcmTracking`, `slcmComments` | Not Applicable           | `naJustification`, `responsibleEntities` | Manually Inherited       | `commonControlProvider`, `estimatedCompletionDate`, `responsibleEntities`, `slcmCriticality`, `slcmFrequency`, `slcmMethod`, `slcmReporting`, `slcmTracking`, `slcmComments`  If the Implementation Status `implementationStatus` value is `Inherited`, only the following fields can be updated:   - `controlDesignation`   - `commonnControlProvider`
         * @summary Update control information in a system for one or many controls
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Update an existing control by Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateControlBySystemId: function (systemId, requestBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateControlBySystemId(systemId, requestBody, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * ControlsApi - factory interface
 * @export
 */
exports.ControlsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.ControlsApiFp(configuration);
    return {
        /**
         * Returns system control information for matching `systemId` path parameter
         * @summary Get control information in a system for one or many controls
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} [acronyms] **Acronym**: The system acronym(s) being queried (single value or comma delimited values).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemControls: function (systemId, acronyms, options) {
            return localVarFp.getSystemControls(systemId, acronyms, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *  Update a Control for given `systemId`<br>  **Request Body Required Fields** - `acronym` - `responsibleEntities` - `controlDesignation` - `estimatedCompletionDate` - `implementationNarrative`  The following optional fields are required based on the Implementation Status `implementationStatus` value<br> | Value                    | Required Fields |--------------------------|--------------------------------------------------- | Planned  or Implemented  | `estimatedCompletionDate`, `responsibleEntities`, `slcmCriticality`, `slcmFrequency`, `slcmMethod`, `slcmReporting`, `slcmTracking`, `slcmComments` | Not Applicable           | `naJustification`, `responsibleEntities` | Manually Inherited       | `commonControlProvider`, `estimatedCompletionDate`, `responsibleEntities`, `slcmCriticality`, `slcmFrequency`, `slcmMethod`, `slcmReporting`, `slcmTracking`, `slcmComments`  If the Implementation Status `implementationStatus` value is `Inherited`, only the following fields can be updated:   - `controlDesignation`   - `commonnControlProvider`
         * @summary Update control information in a system for one or many controls
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Update an existing control by Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateControlBySystemId: function (systemId, requestBody, options) {
            return localVarFp.updateControlBySystemId(systemId, requestBody, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * ControlsApi - object-oriented interface
 * @export
 * @class ControlsApi
 * @extends {BaseAPI}
 */
var ControlsApi = /** @class */ (function (_super) {
    __extends(ControlsApi, _super);
    function ControlsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Returns system control information for matching `systemId` path parameter
     * @summary Get control information in a system for one or many controls
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {string} [acronyms] **Acronym**: The system acronym(s) being queried (single value or comma delimited values).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlsApi
     */
    ControlsApi.prototype.getSystemControls = function (systemId, acronyms, options) {
        var _this = this;
        return exports.ControlsApiFp(this.configuration).getSystemControls(systemId, acronyms, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *  Update a Control for given `systemId`<br>  **Request Body Required Fields** - `acronym` - `responsibleEntities` - `controlDesignation` - `estimatedCompletionDate` - `implementationNarrative`  The following optional fields are required based on the Implementation Status `implementationStatus` value<br> | Value                    | Required Fields |--------------------------|--------------------------------------------------- | Planned  or Implemented  | `estimatedCompletionDate`, `responsibleEntities`, `slcmCriticality`, `slcmFrequency`, `slcmMethod`, `slcmReporting`, `slcmTracking`, `slcmComments` | Not Applicable           | `naJustification`, `responsibleEntities` | Manually Inherited       | `commonControlProvider`, `estimatedCompletionDate`, `responsibleEntities`, `slcmCriticality`, `slcmFrequency`, `slcmMethod`, `slcmReporting`, `slcmTracking`, `slcmComments`  If the Implementation Status `implementationStatus` value is `Inherited`, only the following fields can be updated:   - `controlDesignation`   - `commonnControlProvider`
     * @summary Update control information in a system for one or many controls
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {Array<object>} requestBody Update an existing control by Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControlsApi
     */
    ControlsApi.prototype.updateControlBySystemId = function (systemId, requestBody, options) {
        var _this = this;
        return exports.ControlsApiFp(this.configuration).updateControlBySystemId(systemId, requestBody, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ControlsApi;
}(base_1.BaseAPI));
exports.ControlsApi = ControlsApi;
/**
 * DashboardsApi - axios parameter creator
 * @export
 */
exports.DashboardsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get systems assessement procdures details dashboard information.
         * @summary Get dashboard information
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemAssessmentProceduresDetails: function (orgId, pageIndex, pageSize, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            common_1.assertParamExists('getSystemAssessmentProceduresDetails', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-assessment-procedures-details";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get system associations details dashboard information.
         * @summary Get dashboard information
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemAssociationsDetails: function (orgId, pageIndex, pageSize, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            common_1.assertParamExists('getSystemAssociationsDetails', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-associations-details";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get systems control compliance summary dashboard information.
         * @summary Get dashboard information
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemControlComplianceSummary: function (orgId, pageIndex, pageSize, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            common_1.assertParamExists('getSystemControlComplianceSummary', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-control-compliance-summary";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get system hardware details dashboard information.
         * @summary Get dashboard information
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemHardwareDetails: function (orgId, pageIndex, pageSize, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            common_1.assertParamExists('getSystemHardwareDetails', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-hardware-details";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get system hardware summary dashboard information.
         * @summary Get dashboard information
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemHardwareSummary: function (orgId, pageIndex, pageSize, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            common_1.assertParamExists('getSystemHardwareSummary', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-hardware-summary";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get system POA&Ms details dashboard information.
         * @summary Get dashboard information
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPoamDetails: function (orgId, pageIndex, pageSize, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            common_1.assertParamExists('getSystemPoamDetails', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-poam-details";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get systems POA&Ms summary dashboard information.
         * @summary Get dashboard information
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPoamSummary: function (orgId, pageIndex, pageSize, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            common_1.assertParamExists('getSystemPoamSummary', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-poam-summary";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get user system privacy summary dashboard information.
         * @summary Get dashboard information
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPrivacySummary: function (orgId, pageIndex, pageSize, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            common_1.assertParamExists('getSystemPrivacySummary', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-privacy-summary";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get systems security control details dashboard information.
         * @summary Get dashboard information
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSecurityControlDetails: function (orgId, pageIndex, pageSize, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            common_1.assertParamExists('getSystemSecurityControlDetails', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-security-controls-details";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get systems status detail dashboard information.
         * @summary Get dashboard information
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemStatusDetails: function (orgId, pageIndex, pageSize, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            common_1.assertParamExists('getSystemStatusDetails', 'orgId', orgId);
                            localVarPath = "/api/dashboards/system-status-details";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get user system assignments details dashboard information.
         * @summary Get dashboard information
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserSystemAssignmentsDetails: function (orgId, pageIndex, pageSize, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            common_1.assertParamExists('getUserSystemAssignmentsDetails', 'orgId', orgId);
                            localVarPath = "/api/dashboards/user-system-assignments-details";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get VA OMB-FISMA SAOP summary dashboard information.
         * @summary Get dashboard information
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaOmbFsmaSaopSummary: function (orgId, pageIndex, pageSize, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            common_1.assertParamExists('getVaOmbFsmaSaopSummary', 'orgId', orgId);
                            localVarPath = "/api/dashboards/va-omb-fisma-saop-summary";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get VA system A2.0 summary dashboard information.
         * @summary Get dashboard information
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemA2Summary: function (orgId, pageIndex, pageSize, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            common_1.assertParamExists('getVaSystemA2Summary', 'orgId', orgId);
                            localVarPath = "/api/dashboards/va-system-a2-summary";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get VA system A&A summary dashboard information.
         * @summary Get dashboard information
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemAaSummary: function (orgId, pageIndex, pageSize, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            common_1.assertParamExists('getVaSystemAaSummary', 'orgId', orgId);
                            localVarPath = "/api/dashboards/va-system-aa-summary";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get VA system FISMA inventory summary dashboard information.
         * @summary Get dashboard information
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemFismaInvetorySummary: function (orgId, pageIndex, pageSize, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            common_1.assertParamExists('getVaSystemFismaInvetorySummary', 'orgId', orgId);
                            localVarPath = "/api/dashboards/va-system-fisma-inventory-summary";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get VA system P.L. 109 reporting summary dashboard information.
         * @summary Get dashboard information
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemPl109ReportingSummary: function (orgId, pageIndex, pageSize, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'orgId' is not null or undefined
                            common_1.assertParamExists('getVaSystemPl109ReportingSummary', 'orgId', orgId);
                            localVarPath = "/api/dashboards/va-system-pl-109-reporting-summary";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (orgId !== undefined) {
                                localVarQueryParameter['orgId'] = orgId;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (pageSize !== undefined) {
                                localVarQueryParameter['pageSize'] = pageSize;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * DashboardsApi - functional programming interface
 * @export
 */
exports.DashboardsApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.DashboardsApiAxiosParamCreator(configuration);
    return {
        /**
         * Get systems assessement procdures details dashboard information.
         * @summary Get dashboard information
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemAssessmentProceduresDetails: function (orgId, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemAssessmentProceduresDetails(orgId, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Get system associations details dashboard information.
         * @summary Get dashboard information
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemAssociationsDetails: function (orgId, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemAssociationsDetails(orgId, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Get systems control compliance summary dashboard information.
         * @summary Get dashboard information
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemControlComplianceSummary: function (orgId, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemControlComplianceSummary(orgId, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Get system hardware details dashboard information.
         * @summary Get dashboard information
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemHardwareDetails: function (orgId, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemHardwareDetails(orgId, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Get system hardware summary dashboard information.
         * @summary Get dashboard information
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemHardwareSummary: function (orgId, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemHardwareSummary(orgId, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Get system POA&Ms details dashboard information.
         * @summary Get dashboard information
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPoamDetails: function (orgId, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemPoamDetails(orgId, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Get systems POA&Ms summary dashboard information.
         * @summary Get dashboard information
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPoamSummary: function (orgId, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemPoamSummary(orgId, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Get user system privacy summary dashboard information.
         * @summary Get dashboard information
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPrivacySummary: function (orgId, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemPrivacySummary(orgId, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Get systems security control details dashboard information.
         * @summary Get dashboard information
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSecurityControlDetails: function (orgId, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemSecurityControlDetails(orgId, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Get systems status detail dashboard information.
         * @summary Get dashboard information
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemStatusDetails: function (orgId, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemStatusDetails(orgId, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Get user system assignments details dashboard information.
         * @summary Get dashboard information
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserSystemAssignmentsDetails: function (orgId, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getUserSystemAssignmentsDetails(orgId, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Get VA OMB-FISMA SAOP summary dashboard information.
         * @summary Get dashboard information
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaOmbFsmaSaopSummary: function (orgId, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getVaOmbFsmaSaopSummary(orgId, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Get VA system A2.0 summary dashboard information.
         * @summary Get dashboard information
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemA2Summary: function (orgId, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getVaSystemA2Summary(orgId, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Get VA system A&A summary dashboard information.
         * @summary Get dashboard information
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemAaSummary: function (orgId, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getVaSystemAaSummary(orgId, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Get VA system FISMA inventory summary dashboard information.
         * @summary Get dashboard information
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemFismaInvetorySummary: function (orgId, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getVaSystemFismaInvetorySummary(orgId, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Get VA system P.L. 109 reporting summary dashboard information.
         * @summary Get dashboard information
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemPl109ReportingSummary: function (orgId, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getVaSystemPl109ReportingSummary(orgId, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * DashboardsApi - factory interface
 * @export
 */
exports.DashboardsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.DashboardsApiFp(configuration);
    return {
        /**
         * Get systems assessement procdures details dashboard information.
         * @summary Get dashboard information
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemAssessmentProceduresDetails: function (orgId, pageIndex, pageSize, options) {
            return localVarFp.getSystemAssessmentProceduresDetails(orgId, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get system associations details dashboard information.
         * @summary Get dashboard information
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemAssociationsDetails: function (orgId, pageIndex, pageSize, options) {
            return localVarFp.getSystemAssociationsDetails(orgId, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get systems control compliance summary dashboard information.
         * @summary Get dashboard information
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemControlComplianceSummary: function (orgId, pageIndex, pageSize, options) {
            return localVarFp.getSystemControlComplianceSummary(orgId, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get system hardware details dashboard information.
         * @summary Get dashboard information
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemHardwareDetails: function (orgId, pageIndex, pageSize, options) {
            return localVarFp.getSystemHardwareDetails(orgId, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get system hardware summary dashboard information.
         * @summary Get dashboard information
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemHardwareSummary: function (orgId, pageIndex, pageSize, options) {
            return localVarFp.getSystemHardwareSummary(orgId, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get system POA&Ms details dashboard information.
         * @summary Get dashboard information
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPoamDetails: function (orgId, pageIndex, pageSize, options) {
            return localVarFp.getSystemPoamDetails(orgId, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get systems POA&Ms summary dashboard information.
         * @summary Get dashboard information
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPoamSummary: function (orgId, pageIndex, pageSize, options) {
            return localVarFp.getSystemPoamSummary(orgId, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get user system privacy summary dashboard information.
         * @summary Get dashboard information
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPrivacySummary: function (orgId, pageIndex, pageSize, options) {
            return localVarFp.getSystemPrivacySummary(orgId, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get systems security control details dashboard information.
         * @summary Get dashboard information
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemSecurityControlDetails: function (orgId, pageIndex, pageSize, options) {
            return localVarFp.getSystemSecurityControlDetails(orgId, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get systems status detail dashboard information.
         * @summary Get dashboard information
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemStatusDetails: function (orgId, pageIndex, pageSize, options) {
            return localVarFp.getSystemStatusDetails(orgId, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get user system assignments details dashboard information.
         * @summary Get dashboard information
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserSystemAssignmentsDetails: function (orgId, pageIndex, pageSize, options) {
            return localVarFp.getUserSystemAssignmentsDetails(orgId, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get VA OMB-FISMA SAOP summary dashboard information.
         * @summary Get dashboard information
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaOmbFsmaSaopSummary: function (orgId, pageIndex, pageSize, options) {
            return localVarFp.getVaOmbFsmaSaopSummary(orgId, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get VA system A2.0 summary dashboard information.
         * @summary Get dashboard information
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemA2Summary: function (orgId, pageIndex, pageSize, options) {
            return localVarFp.getVaSystemA2Summary(orgId, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get VA system A&A summary dashboard information.
         * @summary Get dashboard information
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemAaSummary: function (orgId, pageIndex, pageSize, options) {
            return localVarFp.getVaSystemAaSummary(orgId, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get VA system FISMA inventory summary dashboard information.
         * @summary Get dashboard information
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemFismaInvetorySummary: function (orgId, pageIndex, pageSize, options) {
            return localVarFp.getVaSystemFismaInvetorySummary(orgId, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get VA system P.L. 109 reporting summary dashboard information.
         * @summary Get dashboard information
         * @param {number} orgId **Organization Id**: The unique organization identifier.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
         * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaSystemPl109ReportingSummary: function (orgId, pageIndex, pageSize, options) {
            return localVarFp.getVaSystemPl109ReportingSummary(orgId, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * DashboardsApi - object-oriented interface
 * @export
 * @class DashboardsApi
 * @extends {BaseAPI}
 */
var DashboardsApi = /** @class */ (function (_super) {
    __extends(DashboardsApi, _super);
    function DashboardsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get systems assessement procdures details dashboard information.
     * @summary Get dashboard information
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    DashboardsApi.prototype.getSystemAssessmentProceduresDetails = function (orgId, pageIndex, pageSize, options) {
        var _this = this;
        return exports.DashboardsApiFp(this.configuration).getSystemAssessmentProceduresDetails(orgId, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get system associations details dashboard information.
     * @summary Get dashboard information
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    DashboardsApi.prototype.getSystemAssociationsDetails = function (orgId, pageIndex, pageSize, options) {
        var _this = this;
        return exports.DashboardsApiFp(this.configuration).getSystemAssociationsDetails(orgId, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get systems control compliance summary dashboard information.
     * @summary Get dashboard information
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    DashboardsApi.prototype.getSystemControlComplianceSummary = function (orgId, pageIndex, pageSize, options) {
        var _this = this;
        return exports.DashboardsApiFp(this.configuration).getSystemControlComplianceSummary(orgId, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get system hardware details dashboard information.
     * @summary Get dashboard information
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    DashboardsApi.prototype.getSystemHardwareDetails = function (orgId, pageIndex, pageSize, options) {
        var _this = this;
        return exports.DashboardsApiFp(this.configuration).getSystemHardwareDetails(orgId, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get system hardware summary dashboard information.
     * @summary Get dashboard information
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    DashboardsApi.prototype.getSystemHardwareSummary = function (orgId, pageIndex, pageSize, options) {
        var _this = this;
        return exports.DashboardsApiFp(this.configuration).getSystemHardwareSummary(orgId, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get system POA&Ms details dashboard information.
     * @summary Get dashboard information
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    DashboardsApi.prototype.getSystemPoamDetails = function (orgId, pageIndex, pageSize, options) {
        var _this = this;
        return exports.DashboardsApiFp(this.configuration).getSystemPoamDetails(orgId, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get systems POA&Ms summary dashboard information.
     * @summary Get dashboard information
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    DashboardsApi.prototype.getSystemPoamSummary = function (orgId, pageIndex, pageSize, options) {
        var _this = this;
        return exports.DashboardsApiFp(this.configuration).getSystemPoamSummary(orgId, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get user system privacy summary dashboard information.
     * @summary Get dashboard information
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    DashboardsApi.prototype.getSystemPrivacySummary = function (orgId, pageIndex, pageSize, options) {
        var _this = this;
        return exports.DashboardsApiFp(this.configuration).getSystemPrivacySummary(orgId, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get systems security control details dashboard information.
     * @summary Get dashboard information
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    DashboardsApi.prototype.getSystemSecurityControlDetails = function (orgId, pageIndex, pageSize, options) {
        var _this = this;
        return exports.DashboardsApiFp(this.configuration).getSystemSecurityControlDetails(orgId, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get systems status detail dashboard information.
     * @summary Get dashboard information
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    DashboardsApi.prototype.getSystemStatusDetails = function (orgId, pageIndex, pageSize, options) {
        var _this = this;
        return exports.DashboardsApiFp(this.configuration).getSystemStatusDetails(orgId, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get user system assignments details dashboard information.
     * @summary Get dashboard information
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    DashboardsApi.prototype.getUserSystemAssignmentsDetails = function (orgId, pageIndex, pageSize, options) {
        var _this = this;
        return exports.DashboardsApiFp(this.configuration).getUserSystemAssignmentsDetails(orgId, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get VA OMB-FISMA SAOP summary dashboard information.
     * @summary Get dashboard information
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    DashboardsApi.prototype.getVaOmbFsmaSaopSummary = function (orgId, pageIndex, pageSize, options) {
        var _this = this;
        return exports.DashboardsApiFp(this.configuration).getVaOmbFsmaSaopSummary(orgId, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get VA system A2.0 summary dashboard information.
     * @summary Get dashboard information
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    DashboardsApi.prototype.getVaSystemA2Summary = function (orgId, pageIndex, pageSize, options) {
        var _this = this;
        return exports.DashboardsApiFp(this.configuration).getVaSystemA2Summary(orgId, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get VA system A&A summary dashboard information.
     * @summary Get dashboard information
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    DashboardsApi.prototype.getVaSystemAaSummary = function (orgId, pageIndex, pageSize, options) {
        var _this = this;
        return exports.DashboardsApiFp(this.configuration).getVaSystemAaSummary(orgId, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get VA system FISMA inventory summary dashboard information.
     * @summary Get dashboard information
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    DashboardsApi.prototype.getVaSystemFismaInvetorySummary = function (orgId, pageIndex, pageSize, options) {
        var _this = this;
        return exports.DashboardsApiFp(this.configuration).getVaSystemFismaInvetorySummary(orgId, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get VA system P.L. 109 reporting summary dashboard information.
     * @summary Get dashboard information
     * @param {number} orgId **Organization Id**: The unique organization identifier.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.
     * @param {number} [pageSize] **Page Size**: If no value is specified, the default returns 20000 per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    DashboardsApi.prototype.getVaSystemPl109ReportingSummary = function (orgId, pageIndex, pageSize, options) {
        var _this = this;
        return exports.DashboardsApiFp(this.configuration).getVaSystemPl109ReportingSummary(orgId, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return DashboardsApi;
}(base_1.BaseAPI));
exports.DashboardsApi = DashboardsApi;
/**
 * MilestonesApi - axios parameter creator
 * @export
 */
exports.MilestonesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Adds a milestone for given `systemId` and `poamId` path parameters  **Request Body Required Fields** - `description` - `scheduledCompletionDate`
         * @summary Add milestones to one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {Array<object>} requestBody Add milestones to an existing system poam
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMilestoneBySystemIdAndPoamId: function (systemId, poamId, requestBody, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            common_1.assertParamExists('addMilestoneBySystemIdAndPoamId', 'systemId', systemId);
                            // verify required parameter 'poamId' is not null or undefined
                            common_1.assertParamExists('addMilestoneBySystemIdAndPoamId', 'poamId', poamId);
                            // verify required parameter 'requestBody' is not null or undefined
                            common_1.assertParamExists('addMilestoneBySystemIdAndPoamId', 'requestBody', requestBody);
                            localVarPath = "/api/systems/{systemId}/poams/{poamId}/milestones"
                                .replace("{" + "systemId" + "}", encodeURIComponent(String(systemId)))
                                .replace("{" + "poamId" + "}", encodeURIComponent(String(poamId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Remove the POA&M matching `systemId` and `poamId` for path parameters and `milstoneId` provide in the Requst Body  **Notes**<br> To delete a milestone the record must be inactive by having the field isActive set to false (`isActive=false`).
         * @summary Remove milestones in a system for one or many POA&M items
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {Array<MilestonesRequestDeleteBodyInner>} milestonesRequestDeleteBodyInner Delete the given Milestone Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMilestone: function (systemId, poamId, milestonesRequestDeleteBodyInner, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            common_1.assertParamExists('deleteMilestone', 'systemId', systemId);
                            // verify required parameter 'poamId' is not null or undefined
                            common_1.assertParamExists('deleteMilestone', 'poamId', poamId);
                            // verify required parameter 'milestonesRequestDeleteBodyInner' is not null or undefined
                            common_1.assertParamExists('deleteMilestone', 'milestonesRequestDeleteBodyInner', milestonesRequestDeleteBodyInner);
                            localVarPath = "/api/systems/{systemId}/poams/{poamId}/milestones"
                                .replace("{" + "systemId" + "}", encodeURIComponent(String(systemId)))
                                .replace("{" + "poamId" + "}", encodeURIComponent(String(poamId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(milestonesRequestDeleteBodyInner, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Returns system containing milestones for matching parameters.
         * @summary Get milestones in one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {string} [scheduledCompletionDateStart] **Date Started**: Filter query by the scheduled completion start date (Unix date format).
         * @param {string} [scheduledCompletionDateEnd] **Date Ended**: Filter query by the scheduled completion start date (Unix date format).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemMilestonesByPoamId: function (systemId, poamId, scheduledCompletionDateStart, scheduledCompletionDateEnd, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            common_1.assertParamExists('getSystemMilestonesByPoamId', 'systemId', systemId);
                            // verify required parameter 'poamId' is not null or undefined
                            common_1.assertParamExists('getSystemMilestonesByPoamId', 'poamId', poamId);
                            localVarPath = "/api/systems/{systemId}/poams/{poamId}/milestones"
                                .replace("{" + "systemId" + "}", encodeURIComponent(String(systemId)))
                                .replace("{" + "poamId" + "}", encodeURIComponent(String(poamId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (scheduledCompletionDateStart !== undefined) {
                                localVarQueryParameter['scheduledCompletionDateStart'] = scheduledCompletionDateStart;
                            }
                            if (scheduledCompletionDateEnd !== undefined) {
                                localVarQueryParameter['scheduledCompletionDateEnd'] = scheduledCompletionDateEnd;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Returns systems containing milestones for matching parameters.
         * @summary Get milestone by ID in POA&M item in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {number} milestoneId **Milestone Id**: The unique milestone record identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemMilestonesByPoamIdAndMilestoneId: function (systemId, poamId, milestoneId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            common_1.assertParamExists('getSystemMilestonesByPoamIdAndMilestoneId', 'systemId', systemId);
                            // verify required parameter 'poamId' is not null or undefined
                            common_1.assertParamExists('getSystemMilestonesByPoamIdAndMilestoneId', 'poamId', poamId);
                            // verify required parameter 'milestoneId' is not null or undefined
                            common_1.assertParamExists('getSystemMilestonesByPoamIdAndMilestoneId', 'milestoneId', milestoneId);
                            localVarPath = "/api/systems/{systemId}/poams/{poamId}/milestones/{milestoneId}"
                                .replace("{" + "systemId" + "}", encodeURIComponent(String(systemId)))
                                .replace("{" + "poamId" + "}", encodeURIComponent(String(poamId)))
                                .replace("{" + "milestoneId" + "}", encodeURIComponent(String(milestoneId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Updates a milestone for given `systemId` and `poamId` path parameters  **Request Body Required Fields** - `milestoneId` - `description` - `scheduledCompletionDate`
         * @summary Update one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {Array<object>} requestBody Update milestones for an existing system poam
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMilestoneBySystemIdAndPoamId: function (systemId, poamId, requestBody, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            common_1.assertParamExists('updateMilestoneBySystemIdAndPoamId', 'systemId', systemId);
                            // verify required parameter 'poamId' is not null or undefined
                            common_1.assertParamExists('updateMilestoneBySystemIdAndPoamId', 'poamId', poamId);
                            // verify required parameter 'requestBody' is not null or undefined
                            common_1.assertParamExists('updateMilestoneBySystemIdAndPoamId', 'requestBody', requestBody);
                            localVarPath = "/api/systems/{systemId}/poams/{poamId}/milestones"
                                .replace("{" + "systemId" + "}", encodeURIComponent(String(systemId)))
                                .replace("{" + "poamId" + "}", encodeURIComponent(String(poamId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * MilestonesApi - functional programming interface
 * @export
 */
exports.MilestonesApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.MilestonesApiAxiosParamCreator(configuration);
    return {
        /**
         * Adds a milestone for given `systemId` and `poamId` path parameters  **Request Body Required Fields** - `description` - `scheduledCompletionDate`
         * @summary Add milestones to one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {Array<object>} requestBody Add milestones to an existing system poam
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMilestoneBySystemIdAndPoamId: function (systemId, poamId, requestBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addMilestoneBySystemIdAndPoamId(systemId, poamId, requestBody, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Remove the POA&M matching `systemId` and `poamId` for path parameters and `milstoneId` provide in the Requst Body  **Notes**<br> To delete a milestone the record must be inactive by having the field isActive set to false (`isActive=false`).
         * @summary Remove milestones in a system for one or many POA&M items
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {Array<MilestonesRequestDeleteBodyInner>} milestonesRequestDeleteBodyInner Delete the given Milestone Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMilestone: function (systemId, poamId, milestonesRequestDeleteBodyInner, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteMilestone(systemId, poamId, milestonesRequestDeleteBodyInner, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns system containing milestones for matching parameters.
         * @summary Get milestones in one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {string} [scheduledCompletionDateStart] **Date Started**: Filter query by the scheduled completion start date (Unix date format).
         * @param {string} [scheduledCompletionDateEnd] **Date Ended**: Filter query by the scheduled completion start date (Unix date format).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemMilestonesByPoamId: function (systemId, poamId, scheduledCompletionDateStart, scheduledCompletionDateEnd, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemMilestonesByPoamId(systemId, poamId, scheduledCompletionDateStart, scheduledCompletionDateEnd, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns systems containing milestones for matching parameters.
         * @summary Get milestone by ID in POA&M item in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {number} milestoneId **Milestone Id**: The unique milestone record identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemMilestonesByPoamIdAndMilestoneId: function (systemId, poamId, milestoneId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemMilestonesByPoamIdAndMilestoneId(systemId, poamId, milestoneId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Updates a milestone for given `systemId` and `poamId` path parameters  **Request Body Required Fields** - `milestoneId` - `description` - `scheduledCompletionDate`
         * @summary Update one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {Array<object>} requestBody Update milestones for an existing system poam
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMilestoneBySystemIdAndPoamId: function (systemId, poamId, requestBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateMilestoneBySystemIdAndPoamId(systemId, poamId, requestBody, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * MilestonesApi - factory interface
 * @export
 */
exports.MilestonesApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.MilestonesApiFp(configuration);
    return {
        /**
         * Adds a milestone for given `systemId` and `poamId` path parameters  **Request Body Required Fields** - `description` - `scheduledCompletionDate`
         * @summary Add milestones to one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {Array<object>} requestBody Add milestones to an existing system poam
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMilestoneBySystemIdAndPoamId: function (systemId, poamId, requestBody, options) {
            return localVarFp.addMilestoneBySystemIdAndPoamId(systemId, poamId, requestBody, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Remove the POA&M matching `systemId` and `poamId` for path parameters and `milstoneId` provide in the Requst Body  **Notes**<br> To delete a milestone the record must be inactive by having the field isActive set to false (`isActive=false`).
         * @summary Remove milestones in a system for one or many POA&M items
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {Array<MilestonesRequestDeleteBodyInner>} milestonesRequestDeleteBodyInner Delete the given Milestone Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMilestone: function (systemId, poamId, milestonesRequestDeleteBodyInner, options) {
            return localVarFp.deleteMilestone(systemId, poamId, milestonesRequestDeleteBodyInner, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns system containing milestones for matching parameters.
         * @summary Get milestones in one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {string} [scheduledCompletionDateStart] **Date Started**: Filter query by the scheduled completion start date (Unix date format).
         * @param {string} [scheduledCompletionDateEnd] **Date Ended**: Filter query by the scheduled completion start date (Unix date format).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemMilestonesByPoamId: function (systemId, poamId, scheduledCompletionDateStart, scheduledCompletionDateEnd, options) {
            return localVarFp.getSystemMilestonesByPoamId(systemId, poamId, scheduledCompletionDateStart, scheduledCompletionDateEnd, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns systems containing milestones for matching parameters.
         * @summary Get milestone by ID in POA&M item in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {number} milestoneId **Milestone Id**: The unique milestone record identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemMilestonesByPoamIdAndMilestoneId: function (systemId, poamId, milestoneId, options) {
            return localVarFp.getSystemMilestonesByPoamIdAndMilestoneId(systemId, poamId, milestoneId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Updates a milestone for given `systemId` and `poamId` path parameters  **Request Body Required Fields** - `milestoneId` - `description` - `scheduledCompletionDate`
         * @summary Update one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {Array<object>} requestBody Update milestones for an existing system poam
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMilestoneBySystemIdAndPoamId: function (systemId, poamId, requestBody, options) {
            return localVarFp.updateMilestoneBySystemIdAndPoamId(systemId, poamId, requestBody, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * MilestonesApi - object-oriented interface
 * @export
 * @class MilestonesApi
 * @extends {BaseAPI}
 */
var MilestonesApi = /** @class */ (function (_super) {
    __extends(MilestonesApi, _super);
    function MilestonesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Adds a milestone for given `systemId` and `poamId` path parameters  **Request Body Required Fields** - `description` - `scheduledCompletionDate`
     * @summary Add milestones to one or many POA&M items in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
     * @param {Array<object>} requestBody Add milestones to an existing system poam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MilestonesApi
     */
    MilestonesApi.prototype.addMilestoneBySystemIdAndPoamId = function (systemId, poamId, requestBody, options) {
        var _this = this;
        return exports.MilestonesApiFp(this.configuration).addMilestoneBySystemIdAndPoamId(systemId, poamId, requestBody, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Remove the POA&M matching `systemId` and `poamId` for path parameters and `milstoneId` provide in the Requst Body  **Notes**<br> To delete a milestone the record must be inactive by having the field isActive set to false (`isActive=false`).
     * @summary Remove milestones in a system for one or many POA&M items
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
     * @param {Array<MilestonesRequestDeleteBodyInner>} milestonesRequestDeleteBodyInner Delete the given Milestone Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MilestonesApi
     */
    MilestonesApi.prototype.deleteMilestone = function (systemId, poamId, milestonesRequestDeleteBodyInner, options) {
        var _this = this;
        return exports.MilestonesApiFp(this.configuration).deleteMilestone(systemId, poamId, milestonesRequestDeleteBodyInner, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns system containing milestones for matching parameters.
     * @summary Get milestones in one or many POA&M items in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
     * @param {string} [scheduledCompletionDateStart] **Date Started**: Filter query by the scheduled completion start date (Unix date format).
     * @param {string} [scheduledCompletionDateEnd] **Date Ended**: Filter query by the scheduled completion start date (Unix date format).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MilestonesApi
     */
    MilestonesApi.prototype.getSystemMilestonesByPoamId = function (systemId, poamId, scheduledCompletionDateStart, scheduledCompletionDateEnd, options) {
        var _this = this;
        return exports.MilestonesApiFp(this.configuration).getSystemMilestonesByPoamId(systemId, poamId, scheduledCompletionDateStart, scheduledCompletionDateEnd, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns systems containing milestones for matching parameters.
     * @summary Get milestone by ID in POA&M item in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
     * @param {number} milestoneId **Milestone Id**: The unique milestone record identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MilestonesApi
     */
    MilestonesApi.prototype.getSystemMilestonesByPoamIdAndMilestoneId = function (systemId, poamId, milestoneId, options) {
        var _this = this;
        return exports.MilestonesApiFp(this.configuration).getSystemMilestonesByPoamIdAndMilestoneId(systemId, poamId, milestoneId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Updates a milestone for given `systemId` and `poamId` path parameters  **Request Body Required Fields** - `milestoneId` - `description` - `scheduledCompletionDate`
     * @summary Update one or many POA&M items in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
     * @param {Array<object>} requestBody Update milestones for an existing system poam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MilestonesApi
     */
    MilestonesApi.prototype.updateMilestoneBySystemIdAndPoamId = function (systemId, poamId, requestBody, options) {
        var _this = this;
        return exports.MilestonesApiFp(this.configuration).updateMilestoneBySystemIdAndPoamId(systemId, poamId, requestBody, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return MilestonesApi;
}(base_1.BaseAPI));
exports.MilestonesApi = MilestonesApi;
/**
 * PACApi - axios parameter creator
 * @export
 */
exports.PACApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Adds a Package Approval Chain (PAC) for given `systemId` path parameter
         * @summary Submit system package for review
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Add system package to PAC for review
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSystemPac: function (systemId, requestBody, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            common_1.assertParamExists('addSystemPac', 'systemId', systemId);
                            // verify required parameter 'requestBody' is not null or undefined
                            common_1.assertParamExists('addSystemPac', 'requestBody', requestBody);
                            localVarPath = "/api/systems/{systemId}/approval/pac"
                                .replace("{" + "systemId" + "}", encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Returns the location of a system\'s package in the Package Approval Chain (PAC) for matching `systemId` path parameter
         * @summary Get location of system package in PAC
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPac: function (systemId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            common_1.assertParamExists('getSystemPac', 'systemId', systemId);
                            localVarPath = "/api/systems/{systemId}/approval/pac"
                                .replace("{" + "systemId" + "}", encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * PACApi - functional programming interface
 * @export
 */
exports.PACApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.PACApiAxiosParamCreator(configuration);
    return {
        /**
         * Adds a Package Approval Chain (PAC) for given `systemId` path parameter
         * @summary Submit system package for review
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Add system package to PAC for review
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSystemPac: function (systemId, requestBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addSystemPac(systemId, requestBody, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns the location of a system\'s package in the Package Approval Chain (PAC) for matching `systemId` path parameter
         * @summary Get location of system package in PAC
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPac: function (systemId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemPac(systemId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * PACApi - factory interface
 * @export
 */
exports.PACApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.PACApiFp(configuration);
    return {
        /**
         * Adds a Package Approval Chain (PAC) for given `systemId` path parameter
         * @summary Submit system package for review
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Add system package to PAC for review
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSystemPac: function (systemId, requestBody, options) {
            return localVarFp.addSystemPac(systemId, requestBody, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns the location of a system\'s package in the Package Approval Chain (PAC) for matching `systemId` path parameter
         * @summary Get location of system package in PAC
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPac: function (systemId, options) {
            return localVarFp.getSystemPac(systemId, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * PACApi - object-oriented interface
 * @export
 * @class PACApi
 * @extends {BaseAPI}
 */
var PACApi = /** @class */ (function (_super) {
    __extends(PACApi, _super);
    function PACApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Adds a Package Approval Chain (PAC) for given `systemId` path parameter
     * @summary Submit system package for review
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {Array<object>} requestBody Add system package to PAC for review
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PACApi
     */
    PACApi.prototype.addSystemPac = function (systemId, requestBody, options) {
        var _this = this;
        return exports.PACApiFp(this.configuration).addSystemPac(systemId, requestBody, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns the location of a system\'s package in the Package Approval Chain (PAC) for matching `systemId` path parameter
     * @summary Get location of system package in PAC
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PACApi
     */
    PACApi.prototype.getSystemPac = function (systemId, options) {
        var _this = this;
        return exports.PACApiFp(this.configuration).getSystemPac(systemId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return PACApi;
}(base_1.BaseAPI));
exports.PACApi = PACApi;
/**
 * POAMApi - axios parameter creator
 * @export
 */
exports.POAMApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Add a POA&M for given `systemId`<br>  **Request Body Required Fields** - `status` - `vulnerabilityDescription` - `sourceIdentVuln` - `pocOrganization` - `resources`  **Note**<br /> If a POC email is supplied, the application will attempt to locate a user already registered within the application and pre-populate any information not explicitly supplied in the request. If no such user is found, these fields are **required** within the request.<br> `pocFirstName`, `pocLastName`, `pocPhoneNumber`<br />
         * @summary Add one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Add POA&amp;M(s) to a system (systemID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPoamBySystemId: function (systemId, requestBody, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            common_1.assertParamExists('addPoamBySystemId', 'systemId', systemId);
                            // verify required parameter 'requestBody' is not null or undefined
                            common_1.assertParamExists('addPoamBySystemId', 'requestBody', requestBody);
                            localVarPath = "/api/systems/{systemId}/poams"
                                .replace("{" + "systemId" + "}", encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Remove the POA&M matching `systemId` path parameter and `poamId` Request Body<br>
         * @summary Remove one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<PoamRequestDeleteBodyInner>} poamRequestDeleteBodyInner Delete the given POA&amp;M Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePoam: function (systemId, poamRequestDeleteBodyInner, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            common_1.assertParamExists('deletePoam', 'systemId', systemId);
                            // verify required parameter 'poamRequestDeleteBodyInner' is not null or undefined
                            common_1.assertParamExists('deletePoam', 'poamRequestDeleteBodyInner', poamRequestDeleteBodyInner);
                            localVarPath = "/api/systems/{systemId}/poams"
                                .replace("{" + "systemId" + "}", encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(poamRequestDeleteBodyInner, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Returns system(s) containing POA&M items for matching parameters.
         * @summary Get one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} [scheduledCompletionDateStart] **Date Started**: Filter query by the scheduled completion start date (Unix date format).
         * @param {string} [scheduledCompletionDateEnd] **Date Ended**: Filter query by the scheduled completion start date (Unix date format).
         * @param {string} [controlAcronyms] **System Acronym**: Filter query by given system acronym (single or comma separated).
         * @param {string} [ccis] **CCI System**: Filter query by Control Correlation Identifiers (CCIs) (single or comma separated).
         * @param {boolean} [systemOnly] **Systems Only**: Indicates that only system(s) information is retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPoams: function (systemId, scheduledCompletionDateStart, scheduledCompletionDateEnd, controlAcronyms, ccis, systemOnly, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            common_1.assertParamExists('getSystemPoams', 'systemId', systemId);
                            localVarPath = "/api/systems/{systemId}/poams"
                                .replace("{" + "systemId" + "}", encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (scheduledCompletionDateStart !== undefined) {
                                localVarQueryParameter['scheduledCompletionDateStart'] = scheduledCompletionDateStart;
                            }
                            if (scheduledCompletionDateEnd !== undefined) {
                                localVarQueryParameter['scheduledCompletionDateEnd'] = scheduledCompletionDateEnd;
                            }
                            if (controlAcronyms !== undefined) {
                                localVarQueryParameter['controlAcronyms'] = controlAcronyms;
                            }
                            if (ccis !== undefined) {
                                localVarQueryParameter['ccis'] = ccis;
                            }
                            if (systemOnly !== undefined) {
                                localVarQueryParameter['systemOnly'] = systemOnly;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Returns system(s) containing POA&M items for matching parameters.
         * @summary Get POA&M item by ID in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPoamsByPoamId: function (systemId, poamId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            common_1.assertParamExists('getSystemPoamsByPoamId', 'systemId', systemId);
                            // verify required parameter 'poamId' is not null or undefined
                            common_1.assertParamExists('getSystemPoamsByPoamId', 'poamId', poamId);
                            localVarPath = "/api/systems/{systemId}/poams/{poamId}"
                                .replace("{" + "systemId" + "}", encodeURIComponent(String(systemId)))
                                .replace("{" + "poamId" + "}", encodeURIComponent(String(poamId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Update a POA&M for given `systemId`<br>  **Request Body Required Fields** - `poamId` - `displayPoamId` - `status` - `vulnerabilityDescription` - `sourceIdentVuln` - `pocOrganization` - `reviewStatus`  **Notes** - If a POC email is supplied, the application will attempt to locate a user already   registered within the application and pre-populate any information not explicitly supplied   in the request. If no such user is found, these fields are **required** within the request.<br>   `pocOrganization`, `pocFirstName`, `pocLastName`, `pocEmail`, `pocPhoneNumber`<br />  - To delete a milestone through the POA&M PUT the field `isActive` must be set to `false`: `isActive=false`.
         * @summary Update one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Update an existing control by Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePoamBySystemId: function (systemId, requestBody, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            common_1.assertParamExists('updatePoamBySystemId', 'systemId', systemId);
                            // verify required parameter 'requestBody' is not null or undefined
                            common_1.assertParamExists('updatePoamBySystemId', 'requestBody', requestBody);
                            localVarPath = "/api/systems/{systemId}/poams"
                                .replace("{" + "systemId" + "}", encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * POAMApi - functional programming interface
 * @export
 */
exports.POAMApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.POAMApiAxiosParamCreator(configuration);
    return {
        /**
         * Add a POA&M for given `systemId`<br>  **Request Body Required Fields** - `status` - `vulnerabilityDescription` - `sourceIdentVuln` - `pocOrganization` - `resources`  **Note**<br /> If a POC email is supplied, the application will attempt to locate a user already registered within the application and pre-populate any information not explicitly supplied in the request. If no such user is found, these fields are **required** within the request.<br> `pocFirstName`, `pocLastName`, `pocPhoneNumber`<br />
         * @summary Add one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Add POA&amp;M(s) to a system (systemID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPoamBySystemId: function (systemId, requestBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addPoamBySystemId(systemId, requestBody, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Remove the POA&M matching `systemId` path parameter and `poamId` Request Body<br>
         * @summary Remove one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<PoamRequestDeleteBodyInner>} poamRequestDeleteBodyInner Delete the given POA&amp;M Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePoam: function (systemId, poamRequestDeleteBodyInner, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deletePoam(systemId, poamRequestDeleteBodyInner, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns system(s) containing POA&M items for matching parameters.
         * @summary Get one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} [scheduledCompletionDateStart] **Date Started**: Filter query by the scheduled completion start date (Unix date format).
         * @param {string} [scheduledCompletionDateEnd] **Date Ended**: Filter query by the scheduled completion start date (Unix date format).
         * @param {string} [controlAcronyms] **System Acronym**: Filter query by given system acronym (single or comma separated).
         * @param {string} [ccis] **CCI System**: Filter query by Control Correlation Identifiers (CCIs) (single or comma separated).
         * @param {boolean} [systemOnly] **Systems Only**: Indicates that only system(s) information is retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPoams: function (systemId, scheduledCompletionDateStart, scheduledCompletionDateEnd, controlAcronyms, ccis, systemOnly, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemPoams(systemId, scheduledCompletionDateStart, scheduledCompletionDateEnd, controlAcronyms, ccis, systemOnly, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns system(s) containing POA&M items for matching parameters.
         * @summary Get POA&M item by ID in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPoamsByPoamId: function (systemId, poamId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemPoamsByPoamId(systemId, poamId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Update a POA&M for given `systemId`<br>  **Request Body Required Fields** - `poamId` - `displayPoamId` - `status` - `vulnerabilityDescription` - `sourceIdentVuln` - `pocOrganization` - `reviewStatus`  **Notes** - If a POC email is supplied, the application will attempt to locate a user already   registered within the application and pre-populate any information not explicitly supplied   in the request. If no such user is found, these fields are **required** within the request.<br>   `pocOrganization`, `pocFirstName`, `pocLastName`, `pocEmail`, `pocPhoneNumber`<br />  - To delete a milestone through the POA&M PUT the field `isActive` must be set to `false`: `isActive=false`.
         * @summary Update one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Update an existing control by Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePoamBySystemId: function (systemId, requestBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updatePoamBySystemId(systemId, requestBody, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * POAMApi - factory interface
 * @export
 */
exports.POAMApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.POAMApiFp(configuration);
    return {
        /**
         * Add a POA&M for given `systemId`<br>  **Request Body Required Fields** - `status` - `vulnerabilityDescription` - `sourceIdentVuln` - `pocOrganization` - `resources`  **Note**<br /> If a POC email is supplied, the application will attempt to locate a user already registered within the application and pre-populate any information not explicitly supplied in the request. If no such user is found, these fields are **required** within the request.<br> `pocFirstName`, `pocLastName`, `pocPhoneNumber`<br />
         * @summary Add one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Add POA&amp;M(s) to a system (systemID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPoamBySystemId: function (systemId, requestBody, options) {
            return localVarFp.addPoamBySystemId(systemId, requestBody, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Remove the POA&M matching `systemId` path parameter and `poamId` Request Body<br>
         * @summary Remove one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<PoamRequestDeleteBodyInner>} poamRequestDeleteBodyInner Delete the given POA&amp;M Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePoam: function (systemId, poamRequestDeleteBodyInner, options) {
            return localVarFp.deletePoam(systemId, poamRequestDeleteBodyInner, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns system(s) containing POA&M items for matching parameters.
         * @summary Get one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} [scheduledCompletionDateStart] **Date Started**: Filter query by the scheduled completion start date (Unix date format).
         * @param {string} [scheduledCompletionDateEnd] **Date Ended**: Filter query by the scheduled completion start date (Unix date format).
         * @param {string} [controlAcronyms] **System Acronym**: Filter query by given system acronym (single or comma separated).
         * @param {string} [ccis] **CCI System**: Filter query by Control Correlation Identifiers (CCIs) (single or comma separated).
         * @param {boolean} [systemOnly] **Systems Only**: Indicates that only system(s) information is retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPoams: function (systemId, scheduledCompletionDateStart, scheduledCompletionDateEnd, controlAcronyms, ccis, systemOnly, options) {
            return localVarFp.getSystemPoams(systemId, scheduledCompletionDateStart, scheduledCompletionDateEnd, controlAcronyms, ccis, systemOnly, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns system(s) containing POA&M items for matching parameters.
         * @summary Get POA&M item by ID in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemPoamsByPoamId: function (systemId, poamId, options) {
            return localVarFp.getSystemPoamsByPoamId(systemId, poamId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update a POA&M for given `systemId`<br>  **Request Body Required Fields** - `poamId` - `displayPoamId` - `status` - `vulnerabilityDescription` - `sourceIdentVuln` - `pocOrganization` - `reviewStatus`  **Notes** - If a POC email is supplied, the application will attempt to locate a user already   registered within the application and pre-populate any information not explicitly supplied   in the request. If no such user is found, these fields are **required** within the request.<br>   `pocOrganization`, `pocFirstName`, `pocLastName`, `pocEmail`, `pocPhoneNumber`<br />  - To delete a milestone through the POA&M PUT the field `isActive` must be set to `false`: `isActive=false`.
         * @summary Update one or many POA&M items in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Update an existing control by Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePoamBySystemId: function (systemId, requestBody, options) {
            return localVarFp.updatePoamBySystemId(systemId, requestBody, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * POAMApi - object-oriented interface
 * @export
 * @class POAMApi
 * @extends {BaseAPI}
 */
var POAMApi = /** @class */ (function (_super) {
    __extends(POAMApi, _super);
    function POAMApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Add a POA&M for given `systemId`<br>  **Request Body Required Fields** - `status` - `vulnerabilityDescription` - `sourceIdentVuln` - `pocOrganization` - `resources`  **Note**<br /> If a POC email is supplied, the application will attempt to locate a user already registered within the application and pre-populate any information not explicitly supplied in the request. If no such user is found, these fields are **required** within the request.<br> `pocFirstName`, `pocLastName`, `pocPhoneNumber`<br />
     * @summary Add one or many POA&M items in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {Array<object>} requestBody Add POA&amp;M(s) to a system (systemID)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POAMApi
     */
    POAMApi.prototype.addPoamBySystemId = function (systemId, requestBody, options) {
        var _this = this;
        return exports.POAMApiFp(this.configuration).addPoamBySystemId(systemId, requestBody, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Remove the POA&M matching `systemId` path parameter and `poamId` Request Body<br>
     * @summary Remove one or many POA&M items in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {Array<PoamRequestDeleteBodyInner>} poamRequestDeleteBodyInner Delete the given POA&amp;M Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POAMApi
     */
    POAMApi.prototype.deletePoam = function (systemId, poamRequestDeleteBodyInner, options) {
        var _this = this;
        return exports.POAMApiFp(this.configuration).deletePoam(systemId, poamRequestDeleteBodyInner, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns system(s) containing POA&M items for matching parameters.
     * @summary Get one or many POA&M items in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {string} [scheduledCompletionDateStart] **Date Started**: Filter query by the scheduled completion start date (Unix date format).
     * @param {string} [scheduledCompletionDateEnd] **Date Ended**: Filter query by the scheduled completion start date (Unix date format).
     * @param {string} [controlAcronyms] **System Acronym**: Filter query by given system acronym (single or comma separated).
     * @param {string} [ccis] **CCI System**: Filter query by Control Correlation Identifiers (CCIs) (single or comma separated).
     * @param {boolean} [systemOnly] **Systems Only**: Indicates that only system(s) information is retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POAMApi
     */
    POAMApi.prototype.getSystemPoams = function (systemId, scheduledCompletionDateStart, scheduledCompletionDateEnd, controlAcronyms, ccis, systemOnly, options) {
        var _this = this;
        return exports.POAMApiFp(this.configuration).getSystemPoams(systemId, scheduledCompletionDateStart, scheduledCompletionDateEnd, controlAcronyms, ccis, systemOnly, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns system(s) containing POA&M items for matching parameters.
     * @summary Get POA&M item by ID in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {number} poamId **POA&amp;M Id**: The unique POA&amp;M record identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POAMApi
     */
    POAMApi.prototype.getSystemPoamsByPoamId = function (systemId, poamId, options) {
        var _this = this;
        return exports.POAMApiFp(this.configuration).getSystemPoamsByPoamId(systemId, poamId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update a POA&M for given `systemId`<br>  **Request Body Required Fields** - `poamId` - `displayPoamId` - `status` - `vulnerabilityDescription` - `sourceIdentVuln` - `pocOrganization` - `reviewStatus`  **Notes** - If a POC email is supplied, the application will attempt to locate a user already   registered within the application and pre-populate any information not explicitly supplied   in the request. If no such user is found, these fields are **required** within the request.<br>   `pocOrganization`, `pocFirstName`, `pocLastName`, `pocEmail`, `pocPhoneNumber`<br />  - To delete a milestone through the POA&M PUT the field `isActive` must be set to `false`: `isActive=false`.
     * @summary Update one or many POA&M items in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {Array<object>} requestBody Update an existing control by Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POAMApi
     */
    POAMApi.prototype.updatePoamBySystemId = function (systemId, requestBody, options) {
        var _this = this;
        return exports.POAMApiFp(this.configuration).updatePoamBySystemId(systemId, requestBody, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return POAMApi;
}(base_1.BaseAPI));
exports.POAMApi = POAMApi;
/**
 * RegistrationApi - axios parameter creator
 * @export
 */
exports.RegistrationApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Returns the API Key (api-key) that must be provided in the request header for all endpoint calls.
         * @summary Register user certificate and obtain an API key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUser: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/api-key";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * RegistrationApi - functional programming interface
 * @export
 */
exports.RegistrationApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.RegistrationApiAxiosParamCreator(configuration);
    return {
        /**
         * Returns the API Key (api-key) that must be provided in the request header for all endpoint calls.
         * @summary Register user certificate and obtain an API key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUser: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.registerUser(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * RegistrationApi - factory interface
 * @export
 */
exports.RegistrationApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.RegistrationApiFp(configuration);
    return {
        /**
         * Returns the API Key (api-key) that must be provided in the request header for all endpoint calls.
         * @summary Register user certificate and obtain an API key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUser: function (options) {
            return localVarFp.registerUser(options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * RegistrationApi - object-oriented interface
 * @export
 * @class RegistrationApi
 * @extends {BaseAPI}
 */
var RegistrationApi = /** @class */ (function (_super) {
    __extends(RegistrationApi, _super);
    function RegistrationApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Returns the API Key (api-key) that must be provided in the request header for all endpoint calls.
     * @summary Register user certificate and obtain an API key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistrationApi
     */
    RegistrationApi.prototype.registerUser = function (options) {
        var _this = this;
        return exports.RegistrationApiFp(this.configuration).registerUser(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return RegistrationApi;
}(base_1.BaseAPI));
exports.RegistrationApi = RegistrationApi;
/**
 * StaticCodeScansApi - axios parameter creator
 * @export
 */
exports.StaticCodeScansApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Upload or clear application scan findings into a system\'s `systemId` assets module.  **Note:** To clear an application\'s findings, use only the field `clearFindings` as the Request body and set it to true. Example:  ``` [    {      \"application\": {        \"applicationName\": \"Artemis\",        \"version\": \"Version 5.0\"      },      \"applicationFindings\": [        { \"clearFindings\": true }      ]    }  ] ```
         * @summary Upload static code scans or Clear static code scans
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {StaticCodeRequestPostBody} staticCodeRequestPostBody Add static code scans or Clear static code scans
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addStaticCodeScansBySystemId: function (systemId, staticCodeRequestPostBody, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            common_1.assertParamExists('addStaticCodeScansBySystemId', 'systemId', systemId);
                            // verify required parameter 'staticCodeRequestPostBody' is not null or undefined
                            common_1.assertParamExists('addStaticCodeScansBySystemId', 'staticCodeRequestPostBody', staticCodeRequestPostBody);
                            localVarPath = "/api/systems/{systemId}/static-code-scans"
                                .replace("{" + "systemId" + "}", encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(staticCodeRequestPostBody, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * StaticCodeScansApi - functional programming interface
 * @export
 */
exports.StaticCodeScansApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.StaticCodeScansApiAxiosParamCreator(configuration);
    return {
        /**
         * Upload or clear application scan findings into a system\'s `systemId` assets module.  **Note:** To clear an application\'s findings, use only the field `clearFindings` as the Request body and set it to true. Example:  ``` [    {      \"application\": {        \"applicationName\": \"Artemis\",        \"version\": \"Version 5.0\"      },      \"applicationFindings\": [        { \"clearFindings\": true }      ]    }  ] ```
         * @summary Upload static code scans or Clear static code scans
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {StaticCodeRequestPostBody} staticCodeRequestPostBody Add static code scans or Clear static code scans
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addStaticCodeScansBySystemId: function (systemId, staticCodeRequestPostBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addStaticCodeScansBySystemId(systemId, staticCodeRequestPostBody, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * StaticCodeScansApi - factory interface
 * @export
 */
exports.StaticCodeScansApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.StaticCodeScansApiFp(configuration);
    return {
        /**
         * Upload or clear application scan findings into a system\'s `systemId` assets module.  **Note:** To clear an application\'s findings, use only the field `clearFindings` as the Request body and set it to true. Example:  ``` [    {      \"application\": {        \"applicationName\": \"Artemis\",        \"version\": \"Version 5.0\"      },      \"applicationFindings\": [        { \"clearFindings\": true }      ]    }  ] ```
         * @summary Upload static code scans or Clear static code scans
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {StaticCodeRequestPostBody} staticCodeRequestPostBody Add static code scans or Clear static code scans
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addStaticCodeScansBySystemId: function (systemId, staticCodeRequestPostBody, options) {
            return localVarFp.addStaticCodeScansBySystemId(systemId, staticCodeRequestPostBody, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * StaticCodeScansApi - object-oriented interface
 * @export
 * @class StaticCodeScansApi
 * @extends {BaseAPI}
 */
var StaticCodeScansApi = /** @class */ (function (_super) {
    __extends(StaticCodeScansApi, _super);
    function StaticCodeScansApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Upload or clear application scan findings into a system\'s `systemId` assets module.  **Note:** To clear an application\'s findings, use only the field `clearFindings` as the Request body and set it to true. Example:  ``` [    {      \"application\": {        \"applicationName\": \"Artemis\",        \"version\": \"Version 5.0\"      },      \"applicationFindings\": [        { \"clearFindings\": true }      ]    }  ] ```
     * @summary Upload static code scans or Clear static code scans
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {StaticCodeRequestPostBody} staticCodeRequestPostBody Add static code scans or Clear static code scans
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaticCodeScansApi
     */
    StaticCodeScansApi.prototype.addStaticCodeScansBySystemId = function (systemId, staticCodeRequestPostBody, options) {
        var _this = this;
        return exports.StaticCodeScansApiFp(this.configuration).addStaticCodeScansBySystemId(systemId, staticCodeRequestPostBody, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return StaticCodeScansApi;
}(base_1.BaseAPI));
exports.StaticCodeScansApi = StaticCodeScansApi;
/**
 * SystemRolesApi - axios parameter creator
 * @export
 */
exports.SystemRolesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Returns all available roles
         * @summary Get available roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemRoles: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/system-roles";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Returns the role(s) data matching parameters.
         * @summary Get system roles
         * @param {'CAC' | 'PAC' | 'Other'} roleCategory **Role Category**: The system role category been queried
         * @param {'AO' | 'Auditor' | 'Artifact Manager' | 'C&A Team' | 'IAO' | 'ISSO' | 'PM/IAM' | 'SCA' | 'User Rep' | 'Validator'} role **Role**: Accepts single value from options available at base system-roles endpoint e.g., SCA.
         * @param {'diacap' | 'rmf' | 'reporting'} [policy] **System Policy**: Filter query by system policy. If no value is specified and more than one policy is available, the default return is the RMF policy information.
         * @param {boolean} [includeDecommissioned] **Include Decommissioned Systems**: Indicates if decommissioned systems are retrieved. If no value is specified, the default returns true to include decommissioned systems.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemRolesByCategoryId: function (roleCategory, role, policy, includeDecommissioned, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'roleCategory' is not null or undefined
                            common_1.assertParamExists('getSystemRolesByCategoryId', 'roleCategory', roleCategory);
                            // verify required parameter 'role' is not null or undefined
                            common_1.assertParamExists('getSystemRolesByCategoryId', 'role', role);
                            localVarPath = "/api/system-roles/{roleCategory}"
                                .replace("{" + "roleCategory" + "}", encodeURIComponent(String(roleCategory)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (role !== undefined) {
                                localVarQueryParameter['role'] = role;
                            }
                            if (policy !== undefined) {
                                localVarQueryParameter['policy'] = policy;
                            }
                            if (includeDecommissioned !== undefined) {
                                localVarQueryParameter['includeDecommissioned'] = includeDecommissioned;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * SystemRolesApi - functional programming interface
 * @export
 */
exports.SystemRolesApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.SystemRolesApiAxiosParamCreator(configuration);
    return {
        /**
         * Returns all available roles
         * @summary Get available roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemRoles: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemRoles(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns the role(s) data matching parameters.
         * @summary Get system roles
         * @param {'CAC' | 'PAC' | 'Other'} roleCategory **Role Category**: The system role category been queried
         * @param {'AO' | 'Auditor' | 'Artifact Manager' | 'C&A Team' | 'IAO' | 'ISSO' | 'PM/IAM' | 'SCA' | 'User Rep' | 'Validator'} role **Role**: Accepts single value from options available at base system-roles endpoint e.g., SCA.
         * @param {'diacap' | 'rmf' | 'reporting'} [policy] **System Policy**: Filter query by system policy. If no value is specified and more than one policy is available, the default return is the RMF policy information.
         * @param {boolean} [includeDecommissioned] **Include Decommissioned Systems**: Indicates if decommissioned systems are retrieved. If no value is specified, the default returns true to include decommissioned systems.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemRolesByCategoryId: function (roleCategory, role, policy, includeDecommissioned, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemRolesByCategoryId(roleCategory, role, policy, includeDecommissioned, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * SystemRolesApi - factory interface
 * @export
 */
exports.SystemRolesApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.SystemRolesApiFp(configuration);
    return {
        /**
         * Returns all available roles
         * @summary Get available roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemRoles: function (options) {
            return localVarFp.getSystemRoles(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns the role(s) data matching parameters.
         * @summary Get system roles
         * @param {'CAC' | 'PAC' | 'Other'} roleCategory **Role Category**: The system role category been queried
         * @param {'AO' | 'Auditor' | 'Artifact Manager' | 'C&A Team' | 'IAO' | 'ISSO' | 'PM/IAM' | 'SCA' | 'User Rep' | 'Validator'} role **Role**: Accepts single value from options available at base system-roles endpoint e.g., SCA.
         * @param {'diacap' | 'rmf' | 'reporting'} [policy] **System Policy**: Filter query by system policy. If no value is specified and more than one policy is available, the default return is the RMF policy information.
         * @param {boolean} [includeDecommissioned] **Include Decommissioned Systems**: Indicates if decommissioned systems are retrieved. If no value is specified, the default returns true to include decommissioned systems.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemRolesByCategoryId: function (roleCategory, role, policy, includeDecommissioned, options) {
            return localVarFp.getSystemRolesByCategoryId(roleCategory, role, policy, includeDecommissioned, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * SystemRolesApi - object-oriented interface
 * @export
 * @class SystemRolesApi
 * @extends {BaseAPI}
 */
var SystemRolesApi = /** @class */ (function (_super) {
    __extends(SystemRolesApi, _super);
    function SystemRolesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Returns all available roles
     * @summary Get available roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemRolesApi
     */
    SystemRolesApi.prototype.getSystemRoles = function (options) {
        var _this = this;
        return exports.SystemRolesApiFp(this.configuration).getSystemRoles(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns the role(s) data matching parameters.
     * @summary Get system roles
     * @param {'CAC' | 'PAC' | 'Other'} roleCategory **Role Category**: The system role category been queried
     * @param {'AO' | 'Auditor' | 'Artifact Manager' | 'C&A Team' | 'IAO' | 'ISSO' | 'PM/IAM' | 'SCA' | 'User Rep' | 'Validator'} role **Role**: Accepts single value from options available at base system-roles endpoint e.g., SCA.
     * @param {'diacap' | 'rmf' | 'reporting'} [policy] **System Policy**: Filter query by system policy. If no value is specified and more than one policy is available, the default return is the RMF policy information.
     * @param {boolean} [includeDecommissioned] **Include Decommissioned Systems**: Indicates if decommissioned systems are retrieved. If no value is specified, the default returns true to include decommissioned systems.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemRolesApi
     */
    SystemRolesApi.prototype.getSystemRolesByCategoryId = function (roleCategory, role, policy, includeDecommissioned, options) {
        var _this = this;
        return exports.SystemRolesApiFp(this.configuration).getSystemRolesByCategoryId(roleCategory, role, policy, includeDecommissioned, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SystemRolesApi;
}(base_1.BaseAPI));
exports.SystemRolesApi = SystemRolesApi;
/**
 * SystemsApi - axios parameter creator
 * @export
 */
exports.SystemsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Returns the system matching provided parameters
         * @summary Get system information for a specific system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {boolean} [includePackage] **Include Package**:  Indicates if additional packages information is retrieved for queried system.
         * @param {'diacap' | 'rmf' | 'reporting'} [policy] **System Policy**: Filter query by system policy. If no value is specified and more than one policy is available, the default return is the RMF policy information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystem: function (systemId, includePackage, policy, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            common_1.assertParamExists('getSystem', 'systemId', systemId);
                            localVarPath = "/api/systems/{systemId}"
                                .replace("{" + "systemId" + "}", encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (includePackage !== undefined) {
                                localVarQueryParameter['includePackage'] = includePackage;
                            }
                            if (policy !== undefined) {
                                localVarQueryParameter['policy'] = policy;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Returns all system(s) that match the query parameters
         * @summary Get system information
         * @param {boolean} [includePackage] **Include Package**:  Indicates if additional packages information is retrieved for queried system.
         * @param {string} [registrationType] **Registration Type**: Filter record by selected registration type (single value or comma delimited values).  *Available values:* assessAndAuthorize, assessOnly, guest, regular, functional, cloudServiceProvider, commonControlProvider
         * @param {string} [ditprId] **DITPR ID**: Filter query by DoD Information Technology (IT) Portfolio Repository (DITPR).
         * @param {string} [coamsId] **COAMS ID**: Filter query by Cyber Operational Attributes Management System (COAMS).
         * @param {'diacap' | 'rmf' | 'reporting'} [policy] **System Policy**: Filter query by system policy. If no value is specified and more than one policy is available, the default return is the RMF policy information.
         * @param {boolean} [includeDitprMetrics] **Include DITPR**: Indicates if DITPR metrics are retrieved. This query string parameter can only be used in conjunction with the following parameters:&lt;br&gt;   &lt;ul&gt;     &lt;li&gt;registrationType&lt;/li&gt;     &lt;li&gt;policy&lt;/li&gt;   &lt;/ul&gt;
         * @param {boolean} [includeDecommissioned] **Include Decommissioned Systems**: Indicates if decommissioned systems are retrieved. If no value is specified, the default returns true to include decommissioned systems.
         * @param {boolean} [reportsForScorecard] **DoD Cyber Hygiene Scorecard**: Indicates if the system reports to the DoD Cyber Hygiene Scorecard.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystems: function (includePackage, registrationType, ditprId, coamsId, policy, includeDitprMetrics, includeDecommissioned, reportsForScorecard, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/systems";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (includePackage !== undefined) {
                                localVarQueryParameter['includePackage'] = includePackage;
                            }
                            if (registrationType !== undefined) {
                                localVarQueryParameter['registrationType'] = registrationType;
                            }
                            if (ditprId !== undefined) {
                                localVarQueryParameter['ditprId'] = ditprId;
                            }
                            if (coamsId !== undefined) {
                                localVarQueryParameter['coamsId'] = coamsId;
                            }
                            if (policy !== undefined) {
                                localVarQueryParameter['policy'] = policy;
                            }
                            if (includeDitprMetrics !== undefined) {
                                localVarQueryParameter['includeDitprMetrics'] = includeDitprMetrics;
                            }
                            if (includeDecommissioned !== undefined) {
                                localVarQueryParameter['includeDecommissioned'] = includeDecommissioned;
                            }
                            if (reportsForScorecard !== undefined) {
                                localVarQueryParameter['reportsForScorecard'] = reportsForScorecard;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * SystemsApi - functional programming interface
 * @export
 */
exports.SystemsApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.SystemsApiAxiosParamCreator(configuration);
    return {
        /**
         * Returns the system matching provided parameters
         * @summary Get system information for a specific system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {boolean} [includePackage] **Include Package**:  Indicates if additional packages information is retrieved for queried system.
         * @param {'diacap' | 'rmf' | 'reporting'} [policy] **System Policy**: Filter query by system policy. If no value is specified and more than one policy is available, the default return is the RMF policy information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystem: function (systemId, includePackage, policy, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystem(systemId, includePackage, policy, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns all system(s) that match the query parameters
         * @summary Get system information
         * @param {boolean} [includePackage] **Include Package**:  Indicates if additional packages information is retrieved for queried system.
         * @param {string} [registrationType] **Registration Type**: Filter record by selected registration type (single value or comma delimited values).  *Available values:* assessAndAuthorize, assessOnly, guest, regular, functional, cloudServiceProvider, commonControlProvider
         * @param {string} [ditprId] **DITPR ID**: Filter query by DoD Information Technology (IT) Portfolio Repository (DITPR).
         * @param {string} [coamsId] **COAMS ID**: Filter query by Cyber Operational Attributes Management System (COAMS).
         * @param {'diacap' | 'rmf' | 'reporting'} [policy] **System Policy**: Filter query by system policy. If no value is specified and more than one policy is available, the default return is the RMF policy information.
         * @param {boolean} [includeDitprMetrics] **Include DITPR**: Indicates if DITPR metrics are retrieved. This query string parameter can only be used in conjunction with the following parameters:&lt;br&gt;   &lt;ul&gt;     &lt;li&gt;registrationType&lt;/li&gt;     &lt;li&gt;policy&lt;/li&gt;   &lt;/ul&gt;
         * @param {boolean} [includeDecommissioned] **Include Decommissioned Systems**: Indicates if decommissioned systems are retrieved. If no value is specified, the default returns true to include decommissioned systems.
         * @param {boolean} [reportsForScorecard] **DoD Cyber Hygiene Scorecard**: Indicates if the system reports to the DoD Cyber Hygiene Scorecard.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystems: function (includePackage, registrationType, ditprId, coamsId, policy, includeDitprMetrics, includeDecommissioned, reportsForScorecard, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystems(includePackage, registrationType, ditprId, coamsId, policy, includeDitprMetrics, includeDecommissioned, reportsForScorecard, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * SystemsApi - factory interface
 * @export
 */
exports.SystemsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.SystemsApiFp(configuration);
    return {
        /**
         * Returns the system matching provided parameters
         * @summary Get system information for a specific system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {boolean} [includePackage] **Include Package**:  Indicates if additional packages information is retrieved for queried system.
         * @param {'diacap' | 'rmf' | 'reporting'} [policy] **System Policy**: Filter query by system policy. If no value is specified and more than one policy is available, the default return is the RMF policy information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystem: function (systemId, includePackage, policy, options) {
            return localVarFp.getSystem(systemId, includePackage, policy, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns all system(s) that match the query parameters
         * @summary Get system information
         * @param {boolean} [includePackage] **Include Package**:  Indicates if additional packages information is retrieved for queried system.
         * @param {string} [registrationType] **Registration Type**: Filter record by selected registration type (single value or comma delimited values).  *Available values:* assessAndAuthorize, assessOnly, guest, regular, functional, cloudServiceProvider, commonControlProvider
         * @param {string} [ditprId] **DITPR ID**: Filter query by DoD Information Technology (IT) Portfolio Repository (DITPR).
         * @param {string} [coamsId] **COAMS ID**: Filter query by Cyber Operational Attributes Management System (COAMS).
         * @param {'diacap' | 'rmf' | 'reporting'} [policy] **System Policy**: Filter query by system policy. If no value is specified and more than one policy is available, the default return is the RMF policy information.
         * @param {boolean} [includeDitprMetrics] **Include DITPR**: Indicates if DITPR metrics are retrieved. This query string parameter can only be used in conjunction with the following parameters:&lt;br&gt;   &lt;ul&gt;     &lt;li&gt;registrationType&lt;/li&gt;     &lt;li&gt;policy&lt;/li&gt;   &lt;/ul&gt;
         * @param {boolean} [includeDecommissioned] **Include Decommissioned Systems**: Indicates if decommissioned systems are retrieved. If no value is specified, the default returns true to include decommissioned systems.
         * @param {boolean} [reportsForScorecard] **DoD Cyber Hygiene Scorecard**: Indicates if the system reports to the DoD Cyber Hygiene Scorecard.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystems: function (includePackage, registrationType, ditprId, coamsId, policy, includeDitprMetrics, includeDecommissioned, reportsForScorecard, options) {
            return localVarFp.getSystems(includePackage, registrationType, ditprId, coamsId, policy, includeDitprMetrics, includeDecommissioned, reportsForScorecard, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * SystemsApi - object-oriented interface
 * @export
 * @class SystemsApi
 * @extends {BaseAPI}
 */
var SystemsApi = /** @class */ (function (_super) {
    __extends(SystemsApi, _super);
    function SystemsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Returns the system matching provided parameters
     * @summary Get system information for a specific system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {boolean} [includePackage] **Include Package**:  Indicates if additional packages information is retrieved for queried system.
     * @param {'diacap' | 'rmf' | 'reporting'} [policy] **System Policy**: Filter query by system policy. If no value is specified and more than one policy is available, the default return is the RMF policy information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemsApi
     */
    SystemsApi.prototype.getSystem = function (systemId, includePackage, policy, options) {
        var _this = this;
        return exports.SystemsApiFp(this.configuration).getSystem(systemId, includePackage, policy, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns all system(s) that match the query parameters
     * @summary Get system information
     * @param {boolean} [includePackage] **Include Package**:  Indicates if additional packages information is retrieved for queried system.
     * @param {string} [registrationType] **Registration Type**: Filter record by selected registration type (single value or comma delimited values).  *Available values:* assessAndAuthorize, assessOnly, guest, regular, functional, cloudServiceProvider, commonControlProvider
     * @param {string} [ditprId] **DITPR ID**: Filter query by DoD Information Technology (IT) Portfolio Repository (DITPR).
     * @param {string} [coamsId] **COAMS ID**: Filter query by Cyber Operational Attributes Management System (COAMS).
     * @param {'diacap' | 'rmf' | 'reporting'} [policy] **System Policy**: Filter query by system policy. If no value is specified and more than one policy is available, the default return is the RMF policy information.
     * @param {boolean} [includeDitprMetrics] **Include DITPR**: Indicates if DITPR metrics are retrieved. This query string parameter can only be used in conjunction with the following parameters:&lt;br&gt;   &lt;ul&gt;     &lt;li&gt;registrationType&lt;/li&gt;     &lt;li&gt;policy&lt;/li&gt;   &lt;/ul&gt;
     * @param {boolean} [includeDecommissioned] **Include Decommissioned Systems**: Indicates if decommissioned systems are retrieved. If no value is specified, the default returns true to include decommissioned systems.
     * @param {boolean} [reportsForScorecard] **DoD Cyber Hygiene Scorecard**: Indicates if the system reports to the DoD Cyber Hygiene Scorecard.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemsApi
     */
    SystemsApi.prototype.getSystems = function (includePackage, registrationType, ditprId, coamsId, policy, includeDitprMetrics, includeDecommissioned, reportsForScorecard, options) {
        var _this = this;
        return exports.SystemsApiFp(this.configuration).getSystems(includePackage, registrationType, ditprId, coamsId, policy, includeDitprMetrics, includeDecommissioned, reportsForScorecard, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SystemsApi;
}(base_1.BaseAPI));
exports.SystemsApi = SystemsApi;
/**
 * TestApi - axios parameter creator
 * @export
 */
exports.TestApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Tests the endpoint connection
         * @summary Test connection to the API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testConnection: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * TestApi - functional programming interface
 * @export
 */
exports.TestApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.TestApiAxiosParamCreator(configuration);
    return {
        /**
         * Tests the endpoint connection
         * @summary Test connection to the API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testConnection: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.testConnection(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * TestApi - factory interface
 * @export
 */
exports.TestApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.TestApiFp(configuration);
    return {
        /**
         * Tests the endpoint connection
         * @summary Test connection to the API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testConnection: function (options) {
            return localVarFp.testConnection(options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * TestApi - object-oriented interface
 * @export
 * @class TestApi
 * @extends {BaseAPI}
 */
var TestApi = /** @class */ (function (_super) {
    __extends(TestApi, _super);
    function TestApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Tests the endpoint connection
     * @summary Test connection to the API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApi
     */
    TestApi.prototype.testConnection = function (options) {
        var _this = this;
        return exports.TestApiFp(this.configuration).testConnection(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return TestApi;
}(base_1.BaseAPI));
exports.TestApi = TestApi;
/**
 * TestResultsApi - axios parameter creator
 * @export
 */
exports.TestResultsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Adds test results for given `systemId`  **Request Body Required Fields** - `cci` - `testedBy` - `testDate` - `description` - `complianceStatus`
         * @summary Add one or many test results in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Add test results to a system (systemId)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTestResultsBySystemId: function (systemId, requestBody, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            common_1.assertParamExists('addTestResultsBySystemId', 'systemId', systemId);
                            // verify required parameter 'requestBody' is not null or undefined
                            common_1.assertParamExists('addTestResultsBySystemId', 'requestBody', requestBody);
                            localVarPath = "/api/systems/{systemId}/test-results"
                                .replace("{" + "systemId" + "}", encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Returns system test results information for matching parameters.<br>
         * @summary Get one or many test results in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} [controlAcronyms] **System Acronym**: Filter query by given system acronym (single or comma separated).
         * @param {string} [ccis] **CCI System**: Filter query by Control Correlation Identifiers (CCIs) (single or comma separated).
         * @param {boolean} [latestOnly] **Latest Results Only**: Indicates that only the latest test resultes are retrieved (single or comma separated).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemTestResults: function (systemId, controlAcronyms, ccis, latestOnly, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'systemId' is not null or undefined
                            common_1.assertParamExists('getSystemTestResults', 'systemId', systemId);
                            localVarPath = "/api/systems/{systemId}/test-results"
                                .replace("{" + "systemId" + "}", encodeURIComponent(String(systemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (controlAcronyms !== undefined) {
                                localVarQueryParameter['controlAcronyms'] = controlAcronyms;
                            }
                            if (ccis !== undefined) {
                                localVarQueryParameter['ccis'] = ccis;
                            }
                            if (latestOnly !== undefined) {
                                localVarQueryParameter['latestOnly'] = latestOnly;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * TestResultsApi - functional programming interface
 * @export
 */
exports.TestResultsApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.TestResultsApiAxiosParamCreator(configuration);
    return {
        /**
         * Adds test results for given `systemId`  **Request Body Required Fields** - `cci` - `testedBy` - `testDate` - `description` - `complianceStatus`
         * @summary Add one or many test results in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Add test results to a system (systemId)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTestResultsBySystemId: function (systemId, requestBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addTestResultsBySystemId(systemId, requestBody, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns system test results information for matching parameters.<br>
         * @summary Get one or many test results in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} [controlAcronyms] **System Acronym**: Filter query by given system acronym (single or comma separated).
         * @param {string} [ccis] **CCI System**: Filter query by Control Correlation Identifiers (CCIs) (single or comma separated).
         * @param {boolean} [latestOnly] **Latest Results Only**: Indicates that only the latest test resultes are retrieved (single or comma separated).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemTestResults: function (systemId, controlAcronyms, ccis, latestOnly, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemTestResults(systemId, controlAcronyms, ccis, latestOnly, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * TestResultsApi - factory interface
 * @export
 */
exports.TestResultsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.TestResultsApiFp(configuration);
    return {
        /**
         * Adds test results for given `systemId`  **Request Body Required Fields** - `cci` - `testedBy` - `testDate` - `description` - `complianceStatus`
         * @summary Add one or many test results in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {Array<object>} requestBody Add test results to a system (systemId)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTestResultsBySystemId: function (systemId, requestBody, options) {
            return localVarFp.addTestResultsBySystemId(systemId, requestBody, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns system test results information for matching parameters.<br>
         * @summary Get one or many test results in a system
         * @param {number} systemId **System Id**: The unique system record identifier.
         * @param {string} [controlAcronyms] **System Acronym**: Filter query by given system acronym (single or comma separated).
         * @param {string} [ccis] **CCI System**: Filter query by Control Correlation Identifiers (CCIs) (single or comma separated).
         * @param {boolean} [latestOnly] **Latest Results Only**: Indicates that only the latest test resultes are retrieved (single or comma separated).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemTestResults: function (systemId, controlAcronyms, ccis, latestOnly, options) {
            return localVarFp.getSystemTestResults(systemId, controlAcronyms, ccis, latestOnly, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * TestResultsApi - object-oriented interface
 * @export
 * @class TestResultsApi
 * @extends {BaseAPI}
 */
var TestResultsApi = /** @class */ (function (_super) {
    __extends(TestResultsApi, _super);
    function TestResultsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Adds test results for given `systemId`  **Request Body Required Fields** - `cci` - `testedBy` - `testDate` - `description` - `complianceStatus`
     * @summary Add one or many test results in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {Array<object>} requestBody Add test results to a system (systemId)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestResultsApi
     */
    TestResultsApi.prototype.addTestResultsBySystemId = function (systemId, requestBody, options) {
        var _this = this;
        return exports.TestResultsApiFp(this.configuration).addTestResultsBySystemId(systemId, requestBody, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns system test results information for matching parameters.<br>
     * @summary Get one or many test results in a system
     * @param {number} systemId **System Id**: The unique system record identifier.
     * @param {string} [controlAcronyms] **System Acronym**: Filter query by given system acronym (single or comma separated).
     * @param {string} [ccis] **CCI System**: Filter query by Control Correlation Identifiers (CCIs) (single or comma separated).
     * @param {boolean} [latestOnly] **Latest Results Only**: Indicates that only the latest test resultes are retrieved (single or comma separated).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestResultsApi
     */
    TestResultsApi.prototype.getSystemTestResults = function (systemId, controlAcronyms, ccis, latestOnly, options) {
        var _this = this;
        return exports.TestResultsApiFp(this.configuration).getSystemTestResults(systemId, controlAcronyms, ccis, latestOnly, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return TestResultsApi;
}(base_1.BaseAPI));
exports.TestResultsApi = TestResultsApi;
/**
 * WorkflowDefinitionsApi - axios parameter creator
 * @export
 */
exports.WorkflowDefinitionsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * View all workflow schemas available on the eMASS instance filtered by  status `includeInactive` and registration type `registrationType`.
         * @summary Get workflow definitions in a site
         * @param {boolean} [includeInactive] **Include Inactive**: If no value is specified, the default returns false to not include outdated workflow definitions.
         * @param {string} [registrationType] **Registration Type**: Filter record by selected registration type (single value or comma delimited values).  *Available values:* assessAndAuthorize, assessOnly, guest, regular, functional, cloudServiceProvider, commonControlProvider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowDefinitions: function (includeInactive, registrationType, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/workflows/definitions";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (includeInactive !== undefined) {
                                localVarQueryParameter['includeInactive'] = includeInactive;
                            }
                            if (registrationType !== undefined) {
                                localVarQueryParameter['registrationType'] = registrationType;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * WorkflowDefinitionsApi - functional programming interface
 * @export
 */
exports.WorkflowDefinitionsApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.WorkflowDefinitionsApiAxiosParamCreator(configuration);
    return {
        /**
         * View all workflow schemas available on the eMASS instance filtered by  status `includeInactive` and registration type `registrationType`.
         * @summary Get workflow definitions in a site
         * @param {boolean} [includeInactive] **Include Inactive**: If no value is specified, the default returns false to not include outdated workflow definitions.
         * @param {string} [registrationType] **Registration Type**: Filter record by selected registration type (single value or comma delimited values).  *Available values:* assessAndAuthorize, assessOnly, guest, regular, functional, cloudServiceProvider, commonControlProvider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowDefinitions: function (includeInactive, registrationType, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getWorkflowDefinitions(includeInactive, registrationType, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * WorkflowDefinitionsApi - factory interface
 * @export
 */
exports.WorkflowDefinitionsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.WorkflowDefinitionsApiFp(configuration);
    return {
        /**
         * View all workflow schemas available on the eMASS instance filtered by  status `includeInactive` and registration type `registrationType`.
         * @summary Get workflow definitions in a site
         * @param {boolean} [includeInactive] **Include Inactive**: If no value is specified, the default returns false to not include outdated workflow definitions.
         * @param {string} [registrationType] **Registration Type**: Filter record by selected registration type (single value or comma delimited values).  *Available values:* assessAndAuthorize, assessOnly, guest, regular, functional, cloudServiceProvider, commonControlProvider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowDefinitions: function (includeInactive, registrationType, options) {
            return localVarFp.getWorkflowDefinitions(includeInactive, registrationType, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * WorkflowDefinitionsApi - object-oriented interface
 * @export
 * @class WorkflowDefinitionsApi
 * @extends {BaseAPI}
 */
var WorkflowDefinitionsApi = /** @class */ (function (_super) {
    __extends(WorkflowDefinitionsApi, _super);
    function WorkflowDefinitionsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * View all workflow schemas available on the eMASS instance filtered by  status `includeInactive` and registration type `registrationType`.
     * @summary Get workflow definitions in a site
     * @param {boolean} [includeInactive] **Include Inactive**: If no value is specified, the default returns false to not include outdated workflow definitions.
     * @param {string} [registrationType] **Registration Type**: Filter record by selected registration type (single value or comma delimited values).  *Available values:* assessAndAuthorize, assessOnly, guest, regular, functional, cloudServiceProvider, commonControlProvider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowDefinitionsApi
     */
    WorkflowDefinitionsApi.prototype.getWorkflowDefinitions = function (includeInactive, registrationType, options) {
        var _this = this;
        return exports.WorkflowDefinitionsApiFp(this.configuration).getWorkflowDefinitions(includeInactive, registrationType, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return WorkflowDefinitionsApi;
}(base_1.BaseAPI));
exports.WorkflowDefinitionsApi = WorkflowDefinitionsApi;
/**
 * WorkflowInstancesApi - axios parameter creator
 * @export
 */
exports.WorkflowInstancesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * View detailed information on all active and historical workflows filtered by provided parameters.
         * @summary Get workflow instances in a site
         * @param {boolean} [includeComments] **Include Comments**: If no value is specified, the default returns true to not include transition comments.  Note: Corresponds to the Comments textbox that is required at most workflow transitions. Does not include other text input fields such as Terms / Conditions for Authorization.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.  **Note:** Pages contain 1000 workflow instances.
         * @param {string} [sinceDate] **Date**: Filter on authorization/assessment date (Unix date format).  Note: Filters off the lastEditedDate field.  Note: The authorization/assessment decisions on completed workflows  can be edited for up to 30 days after the initial decision is made.
         * @param {'active' | 'inactive' | 'all'} [status] **Status**: Filter by status.  If no value is specified, the default returns all to include both active and inactive workflows.  Note: Any workflows at a current stage of Complete or Cancelled are inactive. Ongoing workflows currently at other stages are active.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemWorkflowInstances: function (includeComments, pageIndex, sinceDate, status, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/workflows/instances";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            if (includeComments !== undefined) {
                                localVarQueryParameter['includeComments'] = includeComments;
                            }
                            if (pageIndex !== undefined) {
                                localVarQueryParameter['pageIndex'] = pageIndex;
                            }
                            if (sinceDate !== undefined) {
                                localVarQueryParameter['sinceDate'] = sinceDate;
                            }
                            if (status !== undefined) {
                                localVarQueryParameter['status'] = status;
                            }
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * View detailed historical workflow information for `workflowInstanceId`.
         * @summary Get workflow instance by ID
         * @param {number} workflowInstanceId **Workflow Instance Id**: The unique workflow definition identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemWorkflowInstancesByWorkflowInstanceId: function (workflowInstanceId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'workflowInstanceId' is not null or undefined
                            common_1.assertParamExists('getSystemWorkflowInstancesByWorkflowInstanceId', 'workflowInstanceId', workflowInstanceId);
                            localVarPath = "/api/workflows/instances/{workflowInstanceId}"
                                .replace("{" + "workflowInstanceId" + "}", encodeURIComponent(String(workflowInstanceId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication apiKey required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "api-key", configuration)
                                // authentication mockType required
                            ];
                        case 1:
                            // authentication apiKey required
                            _a.sent();
                            // authentication mockType required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Prefer", configuration)
                                // authentication userId required
                            ];
                        case 2:
                            // authentication mockType required
                            _a.sent();
                            // authentication userId required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "user-uid", configuration)];
                        case 3:
                            // authentication userId required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
/**
 * WorkflowInstancesApi - functional programming interface
 * @export
 */
exports.WorkflowInstancesApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.WorkflowInstancesApiAxiosParamCreator(configuration);
    return {
        /**
         * View detailed information on all active and historical workflows filtered by provided parameters.
         * @summary Get workflow instances in a site
         * @param {boolean} [includeComments] **Include Comments**: If no value is specified, the default returns true to not include transition comments.  Note: Corresponds to the Comments textbox that is required at most workflow transitions. Does not include other text input fields such as Terms / Conditions for Authorization.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.  **Note:** Pages contain 1000 workflow instances.
         * @param {string} [sinceDate] **Date**: Filter on authorization/assessment date (Unix date format).  Note: Filters off the lastEditedDate field.  Note: The authorization/assessment decisions on completed workflows  can be edited for up to 30 days after the initial decision is made.
         * @param {'active' | 'inactive' | 'all'} [status] **Status**: Filter by status.  If no value is specified, the default returns all to include both active and inactive workflows.  Note: Any workflows at a current stage of Complete or Cancelled are inactive. Ongoing workflows currently at other stages are active.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemWorkflowInstances: function (includeComments, pageIndex, sinceDate, status, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemWorkflowInstances(includeComments, pageIndex, sinceDate, status, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * View detailed historical workflow information for `workflowInstanceId`.
         * @summary Get workflow instance by ID
         * @param {number} workflowInstanceId **Workflow Instance Id**: The unique workflow definition identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemWorkflowInstancesByWorkflowInstanceId: function (workflowInstanceId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSystemWorkflowInstancesByWorkflowInstanceId(workflowInstanceId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * WorkflowInstancesApi - factory interface
 * @export
 */
exports.WorkflowInstancesApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.WorkflowInstancesApiFp(configuration);
    return {
        /**
         * View detailed information on all active and historical workflows filtered by provided parameters.
         * @summary Get workflow instances in a site
         * @param {boolean} [includeComments] **Include Comments**: If no value is specified, the default returns true to not include transition comments.  Note: Corresponds to the Comments textbox that is required at most workflow transitions. Does not include other text input fields such as Terms / Conditions for Authorization.
         * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.  **Note:** Pages contain 1000 workflow instances.
         * @param {string} [sinceDate] **Date**: Filter on authorization/assessment date (Unix date format).  Note: Filters off the lastEditedDate field.  Note: The authorization/assessment decisions on completed workflows  can be edited for up to 30 days after the initial decision is made.
         * @param {'active' | 'inactive' | 'all'} [status] **Status**: Filter by status.  If no value is specified, the default returns all to include both active and inactive workflows.  Note: Any workflows at a current stage of Complete or Cancelled are inactive. Ongoing workflows currently at other stages are active.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemWorkflowInstances: function (includeComments, pageIndex, sinceDate, status, options) {
            return localVarFp.getSystemWorkflowInstances(includeComments, pageIndex, sinceDate, status, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * View detailed historical workflow information for `workflowInstanceId`.
         * @summary Get workflow instance by ID
         * @param {number} workflowInstanceId **Workflow Instance Id**: The unique workflow definition identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemWorkflowInstancesByWorkflowInstanceId: function (workflowInstanceId, options) {
            return localVarFp.getSystemWorkflowInstancesByWorkflowInstanceId(workflowInstanceId, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * WorkflowInstancesApi - object-oriented interface
 * @export
 * @class WorkflowInstancesApi
 * @extends {BaseAPI}
 */
var WorkflowInstancesApi = /** @class */ (function (_super) {
    __extends(WorkflowInstancesApi, _super);
    function WorkflowInstancesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * View detailed information on all active and historical workflows filtered by provided parameters.
     * @summary Get workflow instances in a site
     * @param {boolean} [includeComments] **Include Comments**: If no value is specified, the default returns true to not include transition comments.  Note: Corresponds to the Comments textbox that is required at most workflow transitions. Does not include other text input fields such as Terms / Conditions for Authorization.
     * @param {number} [pageIndex] **Page Index**: If no value is specified, the default returns results from the first page with an index of 0.  **Note:** Pages contain 1000 workflow instances.
     * @param {string} [sinceDate] **Date**: Filter on authorization/assessment date (Unix date format).  Note: Filters off the lastEditedDate field.  Note: The authorization/assessment decisions on completed workflows  can be edited for up to 30 days after the initial decision is made.
     * @param {'active' | 'inactive' | 'all'} [status] **Status**: Filter by status.  If no value is specified, the default returns all to include both active and inactive workflows.  Note: Any workflows at a current stage of Complete or Cancelled are inactive. Ongoing workflows currently at other stages are active.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowInstancesApi
     */
    WorkflowInstancesApi.prototype.getSystemWorkflowInstances = function (includeComments, pageIndex, sinceDate, status, options) {
        var _this = this;
        return exports.WorkflowInstancesApiFp(this.configuration).getSystemWorkflowInstances(includeComments, pageIndex, sinceDate, status, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * View detailed historical workflow information for `workflowInstanceId`.
     * @summary Get workflow instance by ID
     * @param {number} workflowInstanceId **Workflow Instance Id**: The unique workflow definition identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowInstancesApi
     */
    WorkflowInstancesApi.prototype.getSystemWorkflowInstancesByWorkflowInstanceId = function (workflowInstanceId, options) {
        var _this = this;
        return exports.WorkflowInstancesApiFp(this.configuration).getSystemWorkflowInstancesByWorkflowInstanceId(workflowInstanceId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return WorkflowInstancesApi;
}(base_1.BaseAPI));
exports.WorkflowInstancesApi = WorkflowInstancesApi;
